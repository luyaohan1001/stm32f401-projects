ARM GAS  /tmp/ccRs3XjX.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"nRF24.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.nRF24_gpio_initialize,"ax",%progbits
  18              		.align	1
  19              		.global	nRF24_gpio_initialize
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	nRF24_gpio_initialize:
  26              	.LFB131:
  27              		.file 1 "libs/nRF24/nRF24.c"
   1:libs/nRF24/nRF24.c **** /**
   2:libs/nRF24/nRF24.c ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
   3:libs/nRF24/nRF24.c ****   * @file      :     nRF24.c
   4:libs/nRF24/nRF24.c ****   * @author    :     Luyao Han
   5:libs/nRF24/nRF24.c ****   * @email     :     luyaohan1001@gmail.com
   6:libs/nRF24/nRF24.c ****   * @brief     :     C library for Nordic nRF24L01+ (or nRF24L01p) 2.4GHz wireless transceiver.
   7:libs/nRF24/nRF24.c ****   * @date      :     04-21-2022
   8:libs/nRF24/nRF24.c ****   * @note      :     The library strictly follows "nRF24L01+ Single Chip 2.4GHz Transceiver Product
   9:libs/nRF24/nRF24.c **** 	*                  On the fresh import of this library. How do I get nRF24L01+ working?
  10:libs/nRF24/nRF24.c **** 	*                    1. Setup debugger such as OpenOCD. So you can single step debug.
  11:libs/nRF24/nRF24.c **** 	*                    2. Setup UART serial connection. Make sure "Hello World\n" printing is possib
  12:libs/nRF24/nRF24.c **** 	*                    3. TODO: Modify the platform dependent functions labeled in nRF24.h (< 2 mins
  13:libs/nRF24/nRF24.c **** 	*                    3. Without a RX nRF24, setup a TX nRF24 and run nRF24_tx_self_test();
  14:libs/nRF24/nRF24.c **** 	*                    4. Finally if we get TX nRF24 working, work on a RX nRF24 module.
  15:libs/nRF24/nRF24.c ****   * Copyright (C) 2022-2122 Luyao Han. The following code may be shared or modified for personal us
  16:libs/nRF24/nRF24.c ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
  17:libs/nRF24/nRF24.c **** 
  18:libs/nRF24/nRF24.c **** /* Includes ---------------------------------------------------------------------------------------
  19:libs/nRF24/nRF24.c **** #include "nRF24.h"
  20:libs/nRF24/nRF24.c **** 
  21:libs/nRF24/nRF24.c **** /* Macro Define -----------------------------------------------------------------------------------
  22:libs/nRF24/nRF24.c **** #define NRF24_DEBUG /* When defined, debug messages are logged through serial_print(). */
  23:libs/nRF24/nRF24.c **** #define STM32F4xx
  24:libs/nRF24/nRF24.c **** 
  25:libs/nRF24/nRF24.c **** /* GPIO Physical Layer ----------------------------------------------------------------------------
  26:libs/nRF24/nRF24.c **** 
  27:libs/nRF24/nRF24.c **** /* GPIO Defined on STM32F401 */
  28:libs/nRF24/nRF24.c **** /* SCK    PA8  */
  29:libs/nRF24/nRF24.c **** /* MOSI   PB10 */
  30:libs/nRF24/nRF24.c **** /* CSN    PB4  */
  31:libs/nRF24/nRF24.c **** /* CE     PB5  */
ARM GAS  /tmp/ccRs3XjX.s 			page 2


  32:libs/nRF24/nRF24.c **** /* MISO   PA10 */
  33:libs/nRF24/nRF24.c **** 
  34:libs/nRF24/nRF24.c **** /* GPIO Defined on Raspberry Pi 4B - BCM2835 */
  35:libs/nRF24/nRF24.c **** /*        Board    BCM      */
  36:libs/nRF24/nRF24.c **** /* CE     #29      GPIO5    */
  37:libs/nRF24/nRF24.c **** /* SCK    #31      GPIO6    */
  38:libs/nRF24/nRF24.c **** /* MOSI   #33      GPIO13   */
  39:libs/nRF24/nRF24.c **** /* CSN    #35      GPIO19   */
  40:libs/nRF24/nRF24.c **** /* MISO   #37      GPIO26   */
  41:libs/nRF24/nRF24.c **** 
  42:libs/nRF24/nRF24.c **** /**
  43:libs/nRF24/nRF24.c ****   * @brief Initialize GPIO modes for the nRF24L01+ SPI interface and CE (Chip Enable).
  44:libs/nRF24/nRF24.c ****   */
  45:libs/nRF24/nRF24.c **** __inline__ void nRF24_gpio_initialize()
  46:libs/nRF24/nRF24.c **** {
  28              		.loc 1 46 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE131:
  37              		.section	.text.SPI_SCK_1,"ax",%progbits
  38              		.align	1
  39              		.global	SPI_SCK_1
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv4-sp-d16
  45              	SPI_SCK_1:
  46              	.LFB132:
  47:libs/nRF24/nRF24.c ****   #if defined BCM2835
  48:libs/nRF24/nRF24.c ****   bcm2835_gpio_fsel(RPI_BPLUS_GPIO_J8_29, BCM2835_GPIO_FSEL_OUTP); /* CE   */
  49:libs/nRF24/nRF24.c ****   bcm2835_gpio_fsel(RPI_BPLUS_GPIO_J8_31, BCM2835_GPIO_FSEL_OUTP); /* SCK  */
  50:libs/nRF24/nRF24.c ****   bcm2835_gpio_fsel(RPI_BPLUS_GPIO_J8_33, BCM2835_GPIO_FSEL_OUTP); /* MOSI */
  51:libs/nRF24/nRF24.c ****   bcm2835_gpio_fsel(RPI_BPLUS_GPIO_J8_35, BCM2835_GPIO_FSEL_OUTP); /* CSN  */
  52:libs/nRF24/nRF24.c ****   bcm2835_gpio_fsel(RPI_BPLUS_GPIO_J8_37, BCM2835_GPIO_FSEL_INPT); /* MISO */
  53:libs/nRF24/nRF24.c ****   #endif
  54:libs/nRF24/nRF24.c **** }
  55:libs/nRF24/nRF24.c **** 
  56:libs/nRF24/nRF24.c **** /**
  57:libs/nRF24/nRF24.c ****   * @brief  Set high on SCK pin of SPI bus.
  58:libs/nRF24/nRF24.c ****   * @param  None.
  59:libs/nRF24/nRF24.c ****   * @retval None.
  60:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
  61:libs/nRF24/nRF24.c ****   *           Initialization code is not included in this library.
  62:libs/nRF24/nRF24.c ****   */
  63:libs/nRF24/nRF24.c **** __inline__ void SPI_SCK_1()
  64:libs/nRF24/nRF24.c **** {
  47              		.loc 1 64 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		.loc 1 64 0
  52 0000 08B5     		push	{r3, lr}
  53              	.LCFI0:
ARM GAS  /tmp/ccRs3XjX.s 			page 3


  54              		.cfi_def_cfa_offset 8
  55              		.cfi_offset 3, -8
  56              		.cfi_offset 14, -4
  65:libs/nRF24/nRF24.c ****     #if defined STM32F4xx
  66:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  
  57              		.loc 1 66 0
  58 0002 0122     		movs	r2, #1
  59 0004 4FF48071 		mov	r1, #256
  60 0008 0148     		ldr	r0, .L4
  61 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  62              	.LVL0:
  63 000e 08BD     		pop	{r3, pc}
  64              	.L5:
  65              		.align	2
  66              	.L4:
  67 0010 00000240 		.word	1073872896
  68              		.cfi_endproc
  69              	.LFE132:
  71              		.section	.text.SPI_SCK_0,"ax",%progbits
  72              		.align	1
  73              		.global	SPI_SCK_0
  74              		.syntax unified
  75              		.thumb
  76              		.thumb_func
  77              		.fpu fpv4-sp-d16
  79              	SPI_SCK_0:
  80              	.LFB133:
  67:libs/nRF24/nRF24.c ****     #elif defined BCM2835
  68:libs/nRF24/nRF24.c ****     bcm2835_gpio_write(RPI_BPLUS_GPIO_J8_31, HIGH);
  69:libs/nRF24/nRF24.c ****     #endif
  70:libs/nRF24/nRF24.c **** }
  71:libs/nRF24/nRF24.c **** 
  72:libs/nRF24/nRF24.c **** /**
  73:libs/nRF24/nRF24.c ****   * @brief  Set low on SCK pin of SPI bus.
  74:libs/nRF24/nRF24.c ****   * @param  None.
  75:libs/nRF24/nRF24.c ****   * @retval None.
  76:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
  77:libs/nRF24/nRF24.c ****   *           Initialization code is not part of this library.
  78:libs/nRF24/nRF24.c ****   */
  79:libs/nRF24/nRF24.c **** __inline__ void SPI_SCK_0()
  80:libs/nRF24/nRF24.c **** {
  81              		.loc 1 80 0
  82              		.cfi_startproc
  83              		@ args = 0, pretend = 0, frame = 0
  84              		@ frame_needed = 0, uses_anonymous_args = 0
  85 0000 08B5     		push	{r3, lr}
  86              	.LCFI1:
  87              		.cfi_def_cfa_offset 8
  88              		.cfi_offset 3, -8
  89              		.cfi_offset 14, -4
  81:libs/nRF24/nRF24.c ****     #if defined STM32F4xx
  82:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  
  90              		.loc 1 82 0
  91 0002 0022     		movs	r2, #0
  92 0004 4FF48071 		mov	r1, #256
  93 0008 0148     		ldr	r0, .L8
  94 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccRs3XjX.s 			page 4


  95              	.LVL1:
  96 000e 08BD     		pop	{r3, pc}
  97              	.L9:
  98              		.align	2
  99              	.L8:
 100 0010 00000240 		.word	1073872896
 101              		.cfi_endproc
 102              	.LFE133:
 104              		.section	.text.SPI_MOSI_1,"ax",%progbits
 105              		.align	1
 106              		.global	SPI_MOSI_1
 107              		.syntax unified
 108              		.thumb
 109              		.thumb_func
 110              		.fpu fpv4-sp-d16
 112              	SPI_MOSI_1:
 113              	.LFB134:
  83:libs/nRF24/nRF24.c ****     #elif defined BCM2835
  84:libs/nRF24/nRF24.c ****     bcm2835_gpio_write(RPI_BPLUS_GPIO_J8_31, LOW);
  85:libs/nRF24/nRF24.c ****     #endif
  86:libs/nRF24/nRF24.c **** } 
  87:libs/nRF24/nRF24.c **** 
  88:libs/nRF24/nRF24.c **** /**
  89:libs/nRF24/nRF24.c ****   * @brief  Set high on MOSI pin of SPI bus.
  90:libs/nRF24/nRF24.c ****   * @param  None.
  91:libs/nRF24/nRF24.c ****   * @retval None.
  92:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
  93:libs/nRF24/nRF24.c ****   *           Initialization code is not part of this library.
  94:libs/nRF24/nRF24.c ****   */
  95:libs/nRF24/nRF24.c **** __inline__ void SPI_MOSI_1()
  96:libs/nRF24/nRF24.c **** {
 114              		.loc 1 96 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118 0000 08B5     		push	{r3, lr}
 119              	.LCFI2:
 120              		.cfi_def_cfa_offset 8
 121              		.cfi_offset 3, -8
 122              		.cfi_offset 14, -4
  97:libs/nRF24/nRF24.c ****     #if defined STM32F4xx
  98:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  
 123              		.loc 1 98 0
 124 0002 0122     		movs	r2, #1
 125 0004 4FF48061 		mov	r1, #1024
 126 0008 0148     		ldr	r0, .L12
 127 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 128              	.LVL2:
 129 000e 08BD     		pop	{r3, pc}
 130              	.L13:
 131              		.align	2
 132              	.L12:
 133 0010 00040240 		.word	1073873920
 134              		.cfi_endproc
 135              	.LFE134:
 137              		.section	.text.SPI_MOSI_0,"ax",%progbits
 138              		.align	1
ARM GAS  /tmp/ccRs3XjX.s 			page 5


 139              		.global	SPI_MOSI_0
 140              		.syntax unified
 141              		.thumb
 142              		.thumb_func
 143              		.fpu fpv4-sp-d16
 145              	SPI_MOSI_0:
 146              	.LFB135:
  99:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 100:libs/nRF24/nRF24.c ****     bcm2835_gpio_write(RPI_BPLUS_GPIO_J8_33, HIGH);
 101:libs/nRF24/nRF24.c ****     #endif
 102:libs/nRF24/nRF24.c **** }
 103:libs/nRF24/nRF24.c **** 
 104:libs/nRF24/nRF24.c **** /**
 105:libs/nRF24/nRF24.c ****   * @brief  Set low on MOSI pin of SPI bus.
 106:libs/nRF24/nRF24.c ****   * @param  None.
 107:libs/nRF24/nRF24.c ****   * @retval None.
 108:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
 109:libs/nRF24/nRF24.c ****   *           Initialization code is not part of this library.
 110:libs/nRF24/nRF24.c ****   */
 111:libs/nRF24/nRF24.c **** __inline__ void SPI_MOSI_0()
 112:libs/nRF24/nRF24.c **** {
 147              		.loc 1 112 0
 148              		.cfi_startproc
 149              		@ args = 0, pretend = 0, frame = 0
 150              		@ frame_needed = 0, uses_anonymous_args = 0
 151 0000 08B5     		push	{r3, lr}
 152              	.LCFI3:
 153              		.cfi_def_cfa_offset 8
 154              		.cfi_offset 3, -8
 155              		.cfi_offset 14, -4
 113:libs/nRF24/nRF24.c ****     #if defined STM32F4xx
 114:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);  
 156              		.loc 1 114 0
 157 0002 0022     		movs	r2, #0
 158 0004 4FF48061 		mov	r1, #1024
 159 0008 0148     		ldr	r0, .L16
 160 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 161              	.LVL3:
 162 000e 08BD     		pop	{r3, pc}
 163              	.L17:
 164              		.align	2
 165              	.L16:
 166 0010 00040240 		.word	1073873920
 167              		.cfi_endproc
 168              	.LFE135:
 170              		.section	.text.SPI_CS_1,"ax",%progbits
 171              		.align	1
 172              		.global	SPI_CS_1
 173              		.syntax unified
 174              		.thumb
 175              		.thumb_func
 176              		.fpu fpv4-sp-d16
 178              	SPI_CS_1:
 179              	.LFB136:
 115:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 116:libs/nRF24/nRF24.c ****     bcm2835_gpio_write(RPI_BPLUS_GPIO_J8_33, LOW);
 117:libs/nRF24/nRF24.c ****     #endif
ARM GAS  /tmp/ccRs3XjX.s 			page 6


 118:libs/nRF24/nRF24.c **** }
 119:libs/nRF24/nRF24.c **** 
 120:libs/nRF24/nRF24.c **** /**
 121:libs/nRF24/nRF24.c ****   * @brief  Set high on CS pin of SPI bus.
 122:libs/nRF24/nRF24.c ****   * @param  None.
 123:libs/nRF24/nRF24.c ****   * @retval None.
 124:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
 125:libs/nRF24/nRF24.c ****   *           Initialization code is not part of this library.
 126:libs/nRF24/nRF24.c ****   */
 127:libs/nRF24/nRF24.c **** __inline__ void SPI_CS_1() 
 128:libs/nRF24/nRF24.c **** {
 180              		.loc 1 128 0
 181              		.cfi_startproc
 182              		@ args = 0, pretend = 0, frame = 0
 183              		@ frame_needed = 0, uses_anonymous_args = 0
 184 0000 08B5     		push	{r3, lr}
 185              	.LCFI4:
 186              		.cfi_def_cfa_offset 8
 187              		.cfi_offset 3, -8
 188              		.cfi_offset 14, -4
 129:libs/nRF24/nRF24.c ****     /* CS High == CSN Low */
 130:libs/nRF24/nRF24.c ****     #if defined STM32F4xx
 131:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  
 189              		.loc 1 131 0
 190 0002 0022     		movs	r2, #0
 191 0004 1021     		movs	r1, #16
 192 0006 0248     		ldr	r0, .L20
 193 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 194              	.LVL4:
 195 000c 08BD     		pop	{r3, pc}
 196              	.L21:
 197 000e 00BF     		.align	2
 198              	.L20:
 199 0010 00040240 		.word	1073873920
 200              		.cfi_endproc
 201              	.LFE136:
 203              		.section	.text.SPI_CS_0,"ax",%progbits
 204              		.align	1
 205              		.global	SPI_CS_0
 206              		.syntax unified
 207              		.thumb
 208              		.thumb_func
 209              		.fpu fpv4-sp-d16
 211              	SPI_CS_0:
 212              	.LFB137:
 132:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 133:libs/nRF24/nRF24.c ****     bcm2835_gpio_write(RPI_BPLUS_GPIO_J8_35, LOW);
 134:libs/nRF24/nRF24.c ****  
 135:libs/nRF24/nRF24.c ****     #endif
 136:libs/nRF24/nRF24.c **** }
 137:libs/nRF24/nRF24.c **** 
 138:libs/nRF24/nRF24.c **** /**
 139:libs/nRF24/nRF24.c ****   * @brief  Set low on CS pin of SPI bus.
 140:libs/nRF24/nRF24.c ****   * @param  None.
 141:libs/nRF24/nRF24.c ****   * @retval None.
 142:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
 143:libs/nRF24/nRF24.c ****   *           Initialization code is not part of this library.
ARM GAS  /tmp/ccRs3XjX.s 			page 7


 144:libs/nRF24/nRF24.c ****   */
 145:libs/nRF24/nRF24.c **** __inline__ void SPI_CS_0()
 146:libs/nRF24/nRF24.c **** {
 213              		.loc 1 146 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 0, uses_anonymous_args = 0
 217 0000 08B5     		push	{r3, lr}
 218              	.LCFI5:
 219              		.cfi_def_cfa_offset 8
 220              		.cfi_offset 3, -8
 221              		.cfi_offset 14, -4
 147:libs/nRF24/nRF24.c ****     /* CS Low == CSN High */
 148:libs/nRF24/nRF24.c ****     #if defined STM32F4xx
 149:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 222              		.loc 1 149 0
 223 0002 0122     		movs	r2, #1
 224 0004 1021     		movs	r1, #16
 225 0006 0248     		ldr	r0, .L24
 226 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 227              	.LVL5:
 228 000c 08BD     		pop	{r3, pc}
 229              	.L25:
 230 000e 00BF     		.align	2
 231              	.L24:
 232 0010 00040240 		.word	1073873920
 233              		.cfi_endproc
 234              	.LFE137:
 236              		.section	.text.SPI_READ_MISO,"ax",%progbits
 237              		.align	1
 238              		.global	SPI_READ_MISO
 239              		.syntax unified
 240              		.thumb
 241              		.thumb_func
 242              		.fpu fpv4-sp-d16
 244              	SPI_READ_MISO:
 245              	.LFB138:
 150:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 151:libs/nRF24/nRF24.c ****     bcm2835_gpio_write(RPI_BPLUS_GPIO_J8_35, HIGH);
 152:libs/nRF24/nRF24.c ****     #endif
 153:libs/nRF24/nRF24.c **** }
 154:libs/nRF24/nRF24.c **** 
 155:libs/nRF24/nRF24.c **** 
 156:libs/nRF24/nRF24.c **** /**
 157:libs/nRF24/nRF24.c ****   * @brief  Get pin-level on MISO pin of SPI bus.
 158:libs/nRF24/nRF24.c ****   * @param  None
 159:libs/nRF24/nRF24.c ****   * @retval None
 160:libs/nRF24/nRF24.c ****   */
 161:libs/nRF24/nRF24.c **** __inline__ bool SPI_READ_MISO()
 162:libs/nRF24/nRF24.c **** {
 246              		.loc 1 162 0
 247              		.cfi_startproc
 248              		@ args = 0, pretend = 0, frame = 0
 249              		@ frame_needed = 0, uses_anonymous_args = 0
 250 0000 08B5     		push	{r3, lr}
 251              	.LCFI6:
 252              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccRs3XjX.s 			page 8


 253              		.cfi_offset 3, -8
 254              		.cfi_offset 14, -4
 163:libs/nRF24/nRF24.c ****   #if defined STM32F4xx
 164:libs/nRF24/nRF24.c ****   return (bool) HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 255              		.loc 1 164 0
 256 0002 4FF48061 		mov	r1, #1024
 257 0006 0348     		ldr	r0, .L28
 258 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 259              	.LVL6:
 165:libs/nRF24/nRF24.c ****   #elif defined BCM2835
 166:libs/nRF24/nRF24.c ****   return (bcm2835_gpio_lev(RPI_BPLUS_GPIO_J8_37)) & 0x01; 
 167:libs/nRF24/nRF24.c ****   #endif
 168:libs/nRF24/nRF24.c **** }
 260              		.loc 1 168 0
 261 000c 0030     		adds	r0, r0, #0
 262 000e 18BF     		it	ne
 263 0010 0120     		movne	r0, #1
 264 0012 08BD     		pop	{r3, pc}
 265              	.L29:
 266              		.align	2
 267              	.L28:
 268 0014 00000240 		.word	1073872896
 269              		.cfi_endproc
 270              	.LFE138:
 272              		.section	.text.serial_print,"ax",%progbits
 273              		.align	1
 274              		.global	serial_print
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu fpv4-sp-d16
 280              	serial_print:
 281              	.LFB139:
 169:libs/nRF24/nRF24.c **** 
 170:libs/nRF24/nRF24.c **** /**
 171:libs/nRF24/nRF24.c ****   * @brief   Print debug string through USART.
 172:libs/nRF24/nRF24.c ****   * @param   p_message Pointer to a message string.
 173:libs/nRF24/nRF24.c ****   * @retval  None.
 174:libs/nRF24/nRF24.c ****   * @note    When testing on STM32F401RE Nucleo Board, the board supports virtual COM (serial) port
 175:libs/nRF24/nRF24.c ****   *            Connecting a USB-TTL adapter such as CH340 to the 'TX/D1' on morpho connector will n
 176:libs/nRF24/nRF24.c ****   *             In the datasheet it has been confirmed that the USART2 pins have been to multiplexe
 177:libs/nRF24/nRF24.c ****   *             On the PC, look for port /dev/ttyACM0 as the virtual serial port in CuteCom / MiniC
 178:libs/nRF24/nRF24.c ****   */
 179:libs/nRF24/nRF24.c **** __inline__ void serial_print(char* p_message)
 180:libs/nRF24/nRF24.c **** {
 282              		.loc 1 180 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              	.LVL7:
 287 0000 10B5     		push	{r4, lr}
 288              	.LCFI7:
 289              		.cfi_def_cfa_offset 8
 290              		.cfi_offset 4, -8
 291              		.cfi_offset 14, -4
 292 0002 0446     		mov	r4, r0
 181:libs/nRF24/nRF24.c ****   /* Call STM32 HAL library function to UART, pass uart hander, string, length to UART. */
ARM GAS  /tmp/ccRs3XjX.s 			page 9


 182:libs/nRF24/nRF24.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)p_message, strlen(p_message), 100);
 293              		.loc 1 182 0
 294 0004 FFF7FEFF 		bl	strlen
 295              	.LVL8:
 296 0008 6423     		movs	r3, #100
 297 000a 82B2     		uxth	r2, r0
 298 000c 2146     		mov	r1, r4
 299 000e 0248     		ldr	r0, .L32
 300 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 301              	.LVL9:
 302 0014 10BD     		pop	{r4, pc}
 303              	.LVL10:
 304              	.L33:
 305 0016 00BF     		.align	2
 306              	.L32:
 307 0018 00000000 		.word	huart2
 308              		.cfi_endproc
 309              	.LFE139:
 311              		.section	.text.SPI_DELAY,"ax",%progbits
 312              		.align	1
 313              		.global	SPI_DELAY
 314              		.syntax unified
 315              		.thumb
 316              		.thumb_func
 317              		.fpu fpv4-sp-d16
 319              	SPI_DELAY:
 320              	.LFB142:
 183:libs/nRF24/nRF24.c **** }
 184:libs/nRF24/nRF24.c **** 
 185:libs/nRF24/nRF24.c **** /**
 186:libs/nRF24/nRF24.c ****   * @brief      Clock out (write) 8 bits on MOSI of SPI bus on SCK high. 
 187:libs/nRF24/nRF24.c ****   *               SPI Mode = [CPOL = 0, CPHA = 0]. (Non-inverted clock and sample data on rising ed
 188:libs/nRF24/nRF24.c ****   * @param[in]  tx_data One byte of data to transmit.
 189:libs/nRF24/nRF24.c ****   * @retval     None.
 190:libs/nRF24/nRF24.c ****   * @note  
 191:libs/nRF24/nRF24.c ****   *   SPI Timing Requirement specified in section 8.3.2 SPI Timing of nRF24L01+ Product Specificati
 192:libs/nRF24/nRF24.c ****   *   Endianess: Most Significant Bit First. Cn: Command Bits. Sn: Status Register bits. Dn: data b
 193:libs/nRF24/nRF24.c ****   *
 194:libs/nRF24/nRF24.c ****   *   Following is a diagram for time sequence:
 195:libs/nRF24/nRF24.c ****   *   CSN ````\____________________________________________________________________________________
 196:libs/nRF24/nRF24.c ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|D7|__|D6|__|D5|__|D4|__|D3|__|
 197:libs/nRF24/nRF24.c ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 198:libs/nRF24/nRF24.c ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 199:libs/nRF24/nRF24.c ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 200:libs/nRF24/nRF24.c ****   *
 201:libs/nRF24/nRF24.c ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 202:libs/nRF24/nRF24.c ****   * 
 203:libs/nRF24/nRF24.c ****   *   '^' indicates the clock rising pulse sampling MOSI data line. 
 204:libs/nRF24/nRF24.c ****   *   MOSI data establish '|' arrives slightly before SCK clock rising edge '/' to satisfy setup-ti
 205:libs/nRF24/nRF24.c ****   *     It is required Data to SCK setup-time > 2 ns.
 206:libs/nRF24/nRF24.c ****   *   SCK falling edge '\' settles slightly after MOSI change back to 0 to satisfy hold-time.
 207:libs/nRF24/nRF24.c ****   *     It is required SCK to Data hold > 2 ns.
 208:libs/nRF24/nRF24.c ****   */
 209:libs/nRF24/nRF24.c **** void gpio_clockout_8_bits(uint8_t tx_data) 
 210:libs/nRF24/nRF24.c **** {
 211:libs/nRF24/nRF24.c ****   SPI_DELAY();
 212:libs/nRF24/nRF24.c ****   /* Repeat for each bit in the tx_data. */
ARM GAS  /tmp/ccRs3XjX.s 			page 10


 213:libs/nRF24/nRF24.c ****   for (int i = 0; i < 8; ++i) 
 214:libs/nRF24/nRF24.c ****   {
 215:libs/nRF24/nRF24.c ****       /* Clock Falling Edge */
 216:libs/nRF24/nRF24.c ****       SPI_SCK_0();
 217:libs/nRF24/nRF24.c ****       SPI_DELAY();
 218:libs/nRF24/nRF24.c **** 
 219:libs/nRF24/nRF24.c ****       /* Fetch the Most Significant Bit. */
 220:libs/nRF24/nRF24.c ****       if(tx_data & 0x80) 
 221:libs/nRF24/nRF24.c ****           SPI_MOSI_1();
 222:libs/nRF24/nRF24.c ****       else
 223:libs/nRF24/nRF24.c ****           SPI_MOSI_0();
 224:libs/nRF24/nRF24.c **** 
 225:libs/nRF24/nRF24.c ****       /* Setup Time */  
 226:libs/nRF24/nRF24.c ****       SPI_DELAY();
 227:libs/nRF24/nRF24.c **** 
 228:libs/nRF24/nRF24.c ****       /* Clock Rising Edge - '^' Sampling in the diagram.*/
 229:libs/nRF24/nRF24.c ****       SPI_SCK_1(); 
 230:libs/nRF24/nRF24.c **** 
 231:libs/nRF24/nRF24.c ****       /* Loads next bit. e.g. 10110011 << 1 = 01100110 */
 232:libs/nRF24/nRF24.c ****       tx_data = tx_data << 1; 
 233:libs/nRF24/nRF24.c **** 
 234:libs/nRF24/nRF24.c ****       /* hold time */
 235:libs/nRF24/nRF24.c ****       SPI_DELAY();
 236:libs/nRF24/nRF24.c ****   }
 237:libs/nRF24/nRF24.c **** 
 238:libs/nRF24/nRF24.c ****   /* Make sure SPI clock set to 0 after the last bit has been clocked out. */
 239:libs/nRF24/nRF24.c ****   SPI_SCK_0();
 240:libs/nRF24/nRF24.c **** }
 241:libs/nRF24/nRF24.c **** 
 242:libs/nRF24/nRF24.c **** /**
 243:libs/nRF24/nRF24.c ****   * @brief  Clock in (read) 8 bits from MISO of SPI bus on SCK high.
 244:libs/nRF24/nRF24.c ****   *               SPI Mode = [CPOL = 0, CPHA = 0]. (Non-inverted clock and sample data on rising ed
 245:libs/nRF24/nRF24.c ****   * @param  None
 246:libs/nRF24/nRF24.c ****   * @retval A byte of read data.
 247:libs/nRF24/nRF24.c ****   * @note
 248:libs/nRF24/nRF24.c ****   *   SPI Timing Requirement specified in section 8.3.2 SPI Timing of nRF24L01+ Product Specificati
 249:libs/nRF24/nRF24.c ****   *
 250:libs/nRF24/nRF24.c ****   *   Endianess: Most Significant Bit first. Cn: Command bits. Sn: Status register bits. Dn: Data b
 251:libs/nRF24/nRF24.c ****   *    
 252:libs/nRF24/nRF24.c ****   *   Following is a diagram for time sequence:
 253:libs/nRF24/nRF24.c ****   *   CSN ````\____________________________________________________________________________________
 254:libs/nRF24/nRF24.c ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|XX|__|XX|__|XX|__|XX|__|XX|__|
 255:libs/nRF24/nRF24.c ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 256:libs/nRF24/nRF24.c ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 257:libs/nRF24/nRF24.c ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______|D0|__|D1|__|D2|__|D3|__|D4|__|
 258:libs/nRF24/nRF24.c ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 259:libs/nRF24/nRF24.c ****   *
 260:libs/nRF24/nRF24.c ****   *   '^' indicates the clock rising pulse sampling MISO data line. 
 261:libs/nRF24/nRF24.c ****   *   MISO data establish '|' arrives slightly before SCK clock rising edge '/' to satisfy setup-ti
 262:libs/nRF24/nRF24.c ****   *     It is required Data to SCK setup-time > 2 ns.
 263:libs/nRF24/nRF24.c ****   *   SCK falling edge '\' settles slightly after MISO change back to 0 to satisfy hold-time.
 264:libs/nRF24/nRF24.c ****   *     It is required SCK to Data hold > 2 ns.
 265:libs/nRF24/nRF24.c ****   */
 266:libs/nRF24/nRF24.c **** uint8_t gpio_clockin_8_bits(void)
 267:libs/nRF24/nRF24.c **** {
 268:libs/nRF24/nRF24.c ****   uint8_t rx_data = 0;
 269:libs/nRF24/nRF24.c **** 
ARM GAS  /tmp/ccRs3XjX.s 			page 11


 270:libs/nRF24/nRF24.c ****   SPI_DELAY();
 271:libs/nRF24/nRF24.c **** 
 272:libs/nRF24/nRF24.c ****   /* Repeat for each bit read from MISO. */
 273:libs/nRF24/nRF24.c ****   for (int i=0; i < 8; ++i) 
 274:libs/nRF24/nRF24.c ****   {
 275:libs/nRF24/nRF24.c **** 
 276:libs/nRF24/nRF24.c ****       /* Clock Falling Edge */
 277:libs/nRF24/nRF24.c ****       SPI_SCK_0();
 278:libs/nRF24/nRF24.c **** 
 279:libs/nRF24/nRF24.c ****       /* Setup Time for MISO. MISO finished changnig before SCK rising edge. */  
 280:libs/nRF24/nRF24.c ****       SPI_DELAY();
 281:libs/nRF24/nRF24.c **** 
 282:libs/nRF24/nRF24.c ****       /* Clock Rising Edge - '^' Sampling in the diagram.*/
 283:libs/nRF24/nRF24.c ****       SPI_SCK_1();
 284:libs/nRF24/nRF24.c **** 
 285:libs/nRF24/nRF24.c ****       /* Setup Time for MISO. MISO starts change level on SCK rising edge. */  
 286:libs/nRF24/nRF24.c ****       SPI_DELAY();
 287:libs/nRF24/nRF24.c ****       
 288:libs/nRF24/nRF24.c ****       /* Store the bit read from MISO. */
 289:libs/nRF24/nRF24.c ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 290:libs/nRF24/nRF24.c ****       rx_data |= SPI_READ_MISO();
 291:libs/nRF24/nRF24.c **** 
 292:libs/nRF24/nRF24.c ****       /* hold time */
 293:libs/nRF24/nRF24.c ****       SPI_DELAY();
 294:libs/nRF24/nRF24.c ****   }
 295:libs/nRF24/nRF24.c **** 
 296:libs/nRF24/nRF24.c ****   /* Make sure SPI clock set to 0 after the last bit has been clocked in. */
 297:libs/nRF24/nRF24.c ****   SPI_SCK_0();
 298:libs/nRF24/nRF24.c ****   return rx_data;
 299:libs/nRF24/nRF24.c **** }
 300:libs/nRF24/nRF24.c ****   
 301:libs/nRF24/nRF24.c **** 
 302:libs/nRF24/nRF24.c **** 
 303:libs/nRF24/nRF24.c **** /* SPI Datalink Layer------------------------------------------------------------------------------
 304:libs/nRF24/nRF24.c **** 
 305:libs/nRF24/nRF24.c **** /**
 306:libs/nRF24/nRF24.c ****   * @brief  Provide on milisecond delay for SPI bus to satisfy timing requirement.
 307:libs/nRF24/nRF24.c ****   * @param  None.
 308:libs/nRF24/nRF24.c ****   * @retval None.
 309:libs/nRF24/nRF24.c ****   */
 310:libs/nRF24/nRF24.c **** void SPI_DELAY() 
 311:libs/nRF24/nRF24.c **** {
 321              		.loc 1 311 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325 0000 08B5     		push	{r3, lr}
 326              	.LCFI8:
 327              		.cfi_def_cfa_offset 8
 328              		.cfi_offset 3, -8
 329              		.cfi_offset 14, -4
 312:libs/nRF24/nRF24.c ****   #if defined STM32F4xx
 313:libs/nRF24/nRF24.c ****   HAL_Delay(1); 
 330              		.loc 1 313 0
 331 0002 0120     		movs	r0, #1
 332 0004 FFF7FEFF 		bl	HAL_Delay
 333              	.LVL11:
ARM GAS  /tmp/ccRs3XjX.s 			page 12


 334 0008 08BD     		pop	{r3, pc}
 335              		.cfi_endproc
 336              	.LFE142:
 338              		.section	.text.gpio_clockout_8_bits,"ax",%progbits
 339              		.align	1
 340              		.global	gpio_clockout_8_bits
 341              		.syntax unified
 342              		.thumb
 343              		.thumb_func
 344              		.fpu fpv4-sp-d16
 346              	gpio_clockout_8_bits:
 347              	.LFB140:
 210:libs/nRF24/nRF24.c ****   SPI_DELAY();
 348              		.loc 1 210 0
 349              		.cfi_startproc
 350              		@ args = 0, pretend = 0, frame = 0
 351              		@ frame_needed = 0, uses_anonymous_args = 0
 352              	.LVL12:
 353 0000 38B5     		push	{r3, r4, r5, lr}
 354              	.LCFI9:
 355              		.cfi_def_cfa_offset 16
 356              		.cfi_offset 3, -16
 357              		.cfi_offset 4, -12
 358              		.cfi_offset 5, -8
 359              		.cfi_offset 14, -4
 360 0002 0446     		mov	r4, r0
 211:libs/nRF24/nRF24.c ****   /* Repeat for each bit in the tx_data. */
 361              		.loc 1 211 0
 362 0004 FFF7FEFF 		bl	SPI_DELAY
 363              	.LVL13:
 364              	.LBB33:
 213:libs/nRF24/nRF24.c ****   {
 365              		.loc 1 213 0
 366 0008 0025     		movs	r5, #0
 367 000a 12E0     		b	.L37
 368              	.LVL14:
 369              	.L43:
 370              	.LBB34:
 371              	.LBB35:
  98:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 372              		.loc 1 98 0
 373 000c 0122     		movs	r2, #1
 374 000e 4FF48061 		mov	r1, #1024
 375 0012 1548     		ldr	r0, .L44
 376 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 377              	.LVL15:
 378              	.L39:
 379              	.LBE35:
 380              	.LBE34:
 226:libs/nRF24/nRF24.c **** 
 381              		.loc 1 226 0 discriminator 2
 382 0018 FFF7FEFF 		bl	SPI_DELAY
 383              	.LVL16:
 384              	.LBB36:
 385              	.LBB37:
  66:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 386              		.loc 1 66 0 discriminator 2
ARM GAS  /tmp/ccRs3XjX.s 			page 13


 387 001c 0122     		movs	r2, #1
 388 001e 4FF48071 		mov	r1, #256
 389 0022 1248     		ldr	r0, .L44+4
 390 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 391              	.LVL17:
 392              	.LBE37:
 393              	.LBE36:
 232:libs/nRF24/nRF24.c **** 
 394              		.loc 1 232 0 discriminator 2
 395 0028 6400     		lsls	r4, r4, #1
 396              	.LVL18:
 397 002a E4B2     		uxtb	r4, r4
 398              	.LVL19:
 235:libs/nRF24/nRF24.c ****   }
 399              		.loc 1 235 0 discriminator 2
 400 002c FFF7FEFF 		bl	SPI_DELAY
 401              	.LVL20:
 213:libs/nRF24/nRF24.c ****   {
 402              		.loc 1 213 0 discriminator 2
 403 0030 0135     		adds	r5, r5, #1
 404              	.LVL21:
 405              	.L37:
 213:libs/nRF24/nRF24.c ****   {
 406              		.loc 1 213 0 is_stmt 0 discriminator 1
 407 0032 072D     		cmp	r5, #7
 408 0034 11DC     		bgt	.L42
 409              	.LBB38:
 410              	.LBB39:
  82:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 411              		.loc 1 82 0 is_stmt 1
 412 0036 0022     		movs	r2, #0
 413 0038 4FF48071 		mov	r1, #256
 414 003c 0B48     		ldr	r0, .L44+4
 415 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 416              	.LVL22:
 417              	.LBE39:
 418              	.LBE38:
 217:libs/nRF24/nRF24.c **** 
 419              		.loc 1 217 0
 420 0042 FFF7FEFF 		bl	SPI_DELAY
 421              	.LVL23:
 220:libs/nRF24/nRF24.c ****           SPI_MOSI_1();
 422              		.loc 1 220 0
 423 0046 14F0800F 		tst	r4, #128
 424 004a DFD1     		bne	.L43
 425              	.LBB40:
 426              	.LBB41:
 114:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 427              		.loc 1 114 0
 428 004c 0022     		movs	r2, #0
 429 004e 4FF48061 		mov	r1, #1024
 430 0052 0548     		ldr	r0, .L44
 431 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 432              	.LVL24:
 433 0058 DEE7     		b	.L39
 434              	.L42:
 435              	.LBE41:
ARM GAS  /tmp/ccRs3XjX.s 			page 14


 436              	.LBE40:
 437              	.LBE33:
 438              	.LBB42:
 439              	.LBB43:
  82:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 440              		.loc 1 82 0
 441 005a 0022     		movs	r2, #0
 442 005c 4FF48071 		mov	r1, #256
 443 0060 0248     		ldr	r0, .L44+4
 444 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 445              	.LVL25:
 446 0066 38BD     		pop	{r3, r4, r5, pc}
 447              	.LVL26:
 448              	.L45:
 449              		.align	2
 450              	.L44:
 451 0068 00040240 		.word	1073873920
 452 006c 00000240 		.word	1073872896
 453              	.LBE43:
 454              	.LBE42:
 455              		.cfi_endproc
 456              	.LFE140:
 458              		.section	.text.gpio_clockin_8_bits,"ax",%progbits
 459              		.align	1
 460              		.global	gpio_clockin_8_bits
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu fpv4-sp-d16
 466              	gpio_clockin_8_bits:
 467              	.LFB141:
 267:libs/nRF24/nRF24.c ****   uint8_t rx_data = 0;
 468              		.loc 1 267 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472 0000 70B5     		push	{r4, r5, r6, lr}
 473              	.LCFI10:
 474              		.cfi_def_cfa_offset 16
 475              		.cfi_offset 4, -16
 476              		.cfi_offset 5, -12
 477              		.cfi_offset 6, -8
 478              		.cfi_offset 14, -4
 479              	.LVL27:
 270:libs/nRF24/nRF24.c **** 
 480              		.loc 1 270 0
 481 0002 FFF7FEFF 		bl	SPI_DELAY
 482              	.LVL28:
 483              	.LBB44:
 273:libs/nRF24/nRF24.c ****   {
 484              		.loc 1 273 0
 485 0006 0026     		movs	r6, #0
 486              	.LBE44:
 268:libs/nRF24/nRF24.c **** 
 487              		.loc 1 268 0
 488 0008 3446     		mov	r4, r6
 489              	.LBB51:
ARM GAS  /tmp/ccRs3XjX.s 			page 15


 273:libs/nRF24/nRF24.c ****   {
 490              		.loc 1 273 0
 491 000a 1EE0     		b	.L47
 492              	.LVL29:
 493              	.L48:
 494              	.LBB45:
 495              	.LBB46:
  82:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 496              		.loc 1 82 0
 497 000c 144D     		ldr	r5, .L50
 498 000e 0022     		movs	r2, #0
 499 0010 4FF48071 		mov	r1, #256
 500 0014 2846     		mov	r0, r5
 501 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 502              	.LVL30:
 503              	.LBE46:
 504              	.LBE45:
 280:libs/nRF24/nRF24.c **** 
 505              		.loc 1 280 0
 506 001a FFF7FEFF 		bl	SPI_DELAY
 507              	.LVL31:
 508              	.LBB47:
 509              	.LBB48:
  66:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 510              		.loc 1 66 0
 511 001e 0122     		movs	r2, #1
 512 0020 4FF48071 		mov	r1, #256
 513 0024 2846     		mov	r0, r5
 514 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 515              	.LVL32:
 516              	.LBE48:
 517              	.LBE47:
 286:libs/nRF24/nRF24.c ****       
 518              		.loc 1 286 0
 519 002a FFF7FEFF 		bl	SPI_DELAY
 520              	.LVL33:
 289:libs/nRF24/nRF24.c ****       rx_data |= SPI_READ_MISO();
 521              		.loc 1 289 0
 522 002e 6400     		lsls	r4, r4, #1
 523              	.LVL34:
 524 0030 E4B2     		uxtb	r4, r4
 525              	.LVL35:
 526              	.LBB49:
 527              	.LBB50:
 164:libs/nRF24/nRF24.c ****   #elif defined BCM2835
 528              		.loc 1 164 0
 529 0032 4FF48061 		mov	r1, #1024
 530 0036 2846     		mov	r0, r5
 531 0038 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 532              	.LVL36:
 533              	.LBE50:
 534              	.LBE49:
 290:libs/nRF24/nRF24.c **** 
 535              		.loc 1 290 0
 536 003c 0028     		cmp	r0, #0
 537 003e 18BF     		it	ne
 538 0040 44F00104 		orrne	r4, r4, #1
ARM GAS  /tmp/ccRs3XjX.s 			page 16


 539              	.LVL37:
 293:libs/nRF24/nRF24.c ****   }
 540              		.loc 1 293 0
 541 0044 FFF7FEFF 		bl	SPI_DELAY
 542              	.LVL38:
 273:libs/nRF24/nRF24.c ****   {
 543              		.loc 1 273 0
 544 0048 0136     		adds	r6, r6, #1
 545              	.LVL39:
 546              	.L47:
 273:libs/nRF24/nRF24.c ****   {
 547              		.loc 1 273 0 is_stmt 0 discriminator 1
 548 004a 072E     		cmp	r6, #7
 549 004c DEDD     		ble	.L48
 550              	.LBE51:
 551              	.LBB52:
 552              	.LBB53:
  82:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 553              		.loc 1 82 0 is_stmt 1
 554 004e 0022     		movs	r2, #0
 555 0050 4FF48071 		mov	r1, #256
 556 0054 0248     		ldr	r0, .L50
 557 0056 FFF7FEFF 		bl	HAL_GPIO_WritePin
 558              	.LVL40:
 559              	.LBE53:
 560              	.LBE52:
 299:libs/nRF24/nRF24.c ****   
 561              		.loc 1 299 0
 562 005a 2046     		mov	r0, r4
 563 005c 70BD     		pop	{r4, r5, r6, pc}
 564              	.LVL41:
 565              	.L51:
 566 005e 00BF     		.align	2
 567              	.L50:
 568 0060 00000240 		.word	1073872896
 569              		.cfi_endproc
 570              	.LFE141:
 572              		.section	.text.spi_read_register,"ax",%progbits
 573              		.align	1
 574              		.global	spi_read_register
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 578              		.fpu fpv4-sp-d16
 580              	spi_read_register:
 581              	.LFB143:
 314:libs/nRF24/nRF24.c ****   #elif defined BCM2835
 315:libs/nRF24/nRF24.c ****   bcm2835_delay(1);
 316:libs/nRF24/nRF24.c ****   #endif
 317:libs/nRF24/nRF24.c **** }
 318:libs/nRF24/nRF24.c **** 
 319:libs/nRF24/nRF24.c **** 
 320:libs/nRF24/nRF24.c **** /**
 321:libs/nRF24/nRF24.c ****   * @brief      Read data from the SPI target device register. Endianess: LSByte first.
 322:libs/nRF24/nRF24.c ****   * @param[in]  reg SPI target device register to write to.
 323:libs/nRF24/nRF24.c ****   * @param[in]  num_bytes Number of bytes needed to write to that address.
 324:libs/nRF24/nRF24.c ****   * @param[out] p_read_data A pointer pointing to a memory location that can store the data read fr
ARM GAS  /tmp/ccRs3XjX.s 			page 17


 325:libs/nRF24/nRF24.c ****   * @retval     none.
 326:libs/nRF24/nRF24.c ****   */
 327:libs/nRF24/nRF24.c **** void spi_read_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_read_data)
 328:libs/nRF24/nRF24.c **** {
 582              		.loc 1 328 0
 583              		.cfi_startproc
 584              		@ args = 0, pretend = 0, frame = 0
 585              		@ frame_needed = 0, uses_anonymous_args = 0
 586              	.LVL42:
 587 0000 70B5     		push	{r4, r5, r6, lr}
 588              	.LCFI11:
 589              		.cfi_def_cfa_offset 16
 590              		.cfi_offset 4, -16
 591              		.cfi_offset 5, -12
 592              		.cfi_offset 6, -8
 593              		.cfi_offset 14, -4
 594 0002 0446     		mov	r4, r0
 595 0004 0D46     		mov	r5, r1
 596 0006 1646     		mov	r6, r2
 597              	.LBB54:
 598              	.LBB55:
 131:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 599              		.loc 1 131 0
 600 0008 0022     		movs	r2, #0
 601              	.LVL43:
 602 000a 1021     		movs	r1, #16
 603              	.LVL44:
 604 000c 0948     		ldr	r0, .L56
 605              	.LVL45:
 606 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 607              	.LVL46:
 608              	.LBE55:
 609              	.LBE54:
 329:libs/nRF24/nRF24.c ****   /* SPI CHIP SELECT */
 330:libs/nRF24/nRF24.c ****   SPI_CS_1();
 331:libs/nRF24/nRF24.c ****   
 332:libs/nRF24/nRF24.c ****   /* Clock out first byte: target register to read. */
 333:libs/nRF24/nRF24.c ****   gpio_clockout_8_bits(reg);
 610              		.loc 1 333 0
 611 0012 2046     		mov	r0, r4
 612 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 613              	.LVL47:
 614              	.LBB56:
 334:libs/nRF24/nRF24.c **** 
 335:libs/nRF24/nRF24.c ****   /* Repeat for number of bytes. */
 336:libs/nRF24/nRF24.c ****   for (int i = 0; i < num_bytes; ++i) 
 615              		.loc 1 336 0
 616 0018 0024     		movs	r4, #0
 617 001a 03E0     		b	.L53
 618              	.LVL48:
 619              	.L54:
 337:libs/nRF24/nRF24.c ****   {
 338:libs/nRF24/nRF24.c ****     /* Clock in byte data from target register. */
 339:libs/nRF24/nRF24.c ****     p_read_data[i] = gpio_clockin_8_bits();
 620              		.loc 1 339 0 discriminator 3
 621 001c FFF7FEFF 		bl	gpio_clockin_8_bits
 622              	.LVL49:
ARM GAS  /tmp/ccRs3XjX.s 			page 18


 623 0020 3055     		strb	r0, [r6, r4]
 336:libs/nRF24/nRF24.c ****   {
 624              		.loc 1 336 0 discriminator 3
 625 0022 0134     		adds	r4, r4, #1
 626              	.LVL50:
 627              	.L53:
 336:libs/nRF24/nRF24.c ****   {
 628              		.loc 1 336 0 is_stmt 0 discriminator 1
 629 0024 AC42     		cmp	r4, r5
 630 0026 F9DB     		blt	.L54
 631              	.LBE56:
 632              	.LBB57:
 633              	.LBB58:
 149:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 634              		.loc 1 149 0 is_stmt 1
 635 0028 0122     		movs	r2, #1
 636 002a 1021     		movs	r1, #16
 637 002c 0148     		ldr	r0, .L56
 638 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 639              	.LVL51:
 640 0032 70BD     		pop	{r4, r5, r6, pc}
 641              	.LVL52:
 642              	.L57:
 643              		.align	2
 644              	.L56:
 645 0034 00040240 		.word	1073873920
 646              	.LBE58:
 647              	.LBE57:
 648              		.cfi_endproc
 649              	.LFE143:
 651              		.section	.text.spi_write_register,"ax",%progbits
 652              		.align	1
 653              		.global	spi_write_register
 654              		.syntax unified
 655              		.thumb
 656              		.thumb_func
 657              		.fpu fpv4-sp-d16
 659              	spi_write_register:
 660              	.LFB144:
 340:libs/nRF24/nRF24.c ****   }
 341:libs/nRF24/nRF24.c ****   
 342:libs/nRF24/nRF24.c ****   /* SPI CHIP DESELECT */
 343:libs/nRF24/nRF24.c ****   SPI_CS_0();
 344:libs/nRF24/nRF24.c **** }
 345:libs/nRF24/nRF24.c **** 
 346:libs/nRF24/nRF24.c **** 
 347:libs/nRF24/nRF24.c **** /**
 348:libs/nRF24/nRF24.c ****   * @brief      Write a number of bytes to the spi target device register.
 349:libs/nRF24/nRF24.c ****   * @param[in]  reg            SPI target device register to write to.
 350:libs/nRF24/nRF24.c ****   * @param[in]  num_bytes      Number of bytes needed to write to that address.
 351:libs/nRF24/nRF24.c ****   * @param[in]  p_writing_data A pointer pointing to a memory location storing the data to write.
 352:libs/nRF24/nRF24.c ****   * @retval     None.
 353:libs/nRF24/nRF24.c ****   */
 354:libs/nRF24/nRF24.c **** void spi_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 355:libs/nRF24/nRF24.c **** {
 661              		.loc 1 355 0
 662              		.cfi_startproc
ARM GAS  /tmp/ccRs3XjX.s 			page 19


 663              		@ args = 0, pretend = 0, frame = 0
 664              		@ frame_needed = 0, uses_anonymous_args = 0
 665              	.LVL53:
 666 0000 70B5     		push	{r4, r5, r6, lr}
 667              	.LCFI12:
 668              		.cfi_def_cfa_offset 16
 669              		.cfi_offset 4, -16
 670              		.cfi_offset 5, -12
 671              		.cfi_offset 6, -8
 672              		.cfi_offset 14, -4
 673 0002 0446     		mov	r4, r0
 674 0004 0D46     		mov	r5, r1
 675 0006 1646     		mov	r6, r2
 676              	.LBB59:
 677              	.LBB60:
 131:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 678              		.loc 1 131 0
 679 0008 0022     		movs	r2, #0
 680              	.LVL54:
 681 000a 1021     		movs	r1, #16
 682              	.LVL55:
 683 000c 0948     		ldr	r0, .L62
 684              	.LVL56:
 685 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 686              	.LVL57:
 687              	.LBE60:
 688              	.LBE59:
 356:libs/nRF24/nRF24.c ****   /* SPI CHIP SELECT */
 357:libs/nRF24/nRF24.c ****   SPI_CS_1();
 358:libs/nRF24/nRF24.c **** 
 359:libs/nRF24/nRF24.c ****   /* Clock out first byte: target register to write. */
 360:libs/nRF24/nRF24.c ****   gpio_clockout_8_bits(reg); 
 689              		.loc 1 360 0
 690 0012 2046     		mov	r0, r4
 691 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 692              	.LVL58:
 693              	.LBB61:
 361:libs/nRF24/nRF24.c **** 
 362:libs/nRF24/nRF24.c ****   /* Repeat for total number of bytes to write. */
 363:libs/nRF24/nRF24.c ****   for (int i = 0; i < num_bytes; ++i)
 694              		.loc 1 363 0
 695 0018 0024     		movs	r4, #0
 696 001a 03E0     		b	.L59
 697              	.LVL59:
 698              	.L60:
 699              	.LBB62:
 364:libs/nRF24/nRF24.c ****   {
 365:libs/nRF24/nRF24.c ****     uint8_t writing_byte = p_writing_data[i];
 366:libs/nRF24/nRF24.c ****     /* Clock out data to the target register. */
 367:libs/nRF24/nRF24.c ****     gpio_clockout_8_bits(writing_byte);
 700              		.loc 1 367 0 discriminator 3
 701 001c 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 702 001e FFF7FEFF 		bl	gpio_clockout_8_bits
 703              	.LVL60:
 704              	.LBE62:
 363:libs/nRF24/nRF24.c ****   {
 705              		.loc 1 363 0 discriminator 3
ARM GAS  /tmp/ccRs3XjX.s 			page 20


 706 0022 0134     		adds	r4, r4, #1
 707              	.LVL61:
 708              	.L59:
 363:libs/nRF24/nRF24.c ****   {
 709              		.loc 1 363 0 is_stmt 0 discriminator 1
 710 0024 AC42     		cmp	r4, r5
 711 0026 F9DB     		blt	.L60
 712              	.LBE61:
 713              	.LBB63:
 714              	.LBB64:
 149:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 715              		.loc 1 149 0 is_stmt 1
 716 0028 0122     		movs	r2, #1
 717 002a 1021     		movs	r1, #16
 718 002c 0148     		ldr	r0, .L62
 719 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 720              	.LVL62:
 721 0032 70BD     		pop	{r4, r5, r6, pc}
 722              	.LVL63:
 723              	.L63:
 724              		.align	2
 725              	.L62:
 726 0034 00040240 		.word	1073873920
 727              	.LBE64:
 728              	.LBE63:
 729              		.cfi_endproc
 730              	.LFE144:
 732              		.section	.text.nRF24_CE_1,"ax",%progbits
 733              		.align	1
 734              		.global	nRF24_CE_1
 735              		.syntax unified
 736              		.thumb
 737              		.thumb_func
 738              		.fpu fpv4-sp-d16
 740              	nRF24_CE_1:
 741              	.LFB145:
 368:libs/nRF24/nRF24.c ****   }
 369:libs/nRF24/nRF24.c **** 
 370:libs/nRF24/nRF24.c ****   /* SPI CHIP DESELECT */
 371:libs/nRF24/nRF24.c ****   SPI_CS_0();
 372:libs/nRF24/nRF24.c **** }
 373:libs/nRF24/nRF24.c **** 
 374:libs/nRF24/nRF24.c **** 
 375:libs/nRF24/nRF24.c **** /* nRF24 Data-Link Layer Operations ---------------------------------------------------------------
 376:libs/nRF24/nRF24.c **** 
 377:libs/nRF24/nRF24.c **** /**
 378:libs/nRF24/nRF24.c ****   * @brief  Set high on Chip-Enable pin of nRF24L01.
 379:libs/nRF24/nRF24.c ****   * @param  None.
 380:libs/nRF24/nRF24.c ****   * @retval None.
 381:libs/nRF24/nRF24.c ****   */
 382:libs/nRF24/nRF24.c **** void nRF24_CE_1()
 383:libs/nRF24/nRF24.c **** {
 742              		.loc 1 383 0
 743              		.cfi_startproc
 744              		@ args = 0, pretend = 0, frame = 0
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccRs3XjX.s 			page 21


 747              	.LCFI13:
 748              		.cfi_def_cfa_offset 8
 749              		.cfi_offset 3, -8
 750              		.cfi_offset 14, -4
 384:libs/nRF24/nRF24.c ****     #if defined STM32F4xx
 385:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  
 751              		.loc 1 385 0
 752 0002 0122     		movs	r2, #1
 753 0004 2021     		movs	r1, #32
 754 0006 0248     		ldr	r0, .L66
 755 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 756              	.LVL64:
 757 000c 08BD     		pop	{r3, pc}
 758              	.L67:
 759 000e 00BF     		.align	2
 760              	.L66:
 761 0010 00040240 		.word	1073873920
 762              		.cfi_endproc
 763              	.LFE145:
 765              		.section	.text.nRF24_CE_0,"ax",%progbits
 766              		.align	1
 767              		.global	nRF24_CE_0
 768              		.syntax unified
 769              		.thumb
 770              		.thumb_func
 771              		.fpu fpv4-sp-d16
 773              	nRF24_CE_0:
 774              	.LFB146:
 386:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 387:libs/nRF24/nRF24.c ****     bcm2835_gpio_write(RPI_BPLUS_GPIO_J8_29, HIGH);
 388:libs/nRF24/nRF24.c ****     #endif
 389:libs/nRF24/nRF24.c **** }
 390:libs/nRF24/nRF24.c **** 
 391:libs/nRF24/nRF24.c **** 
 392:libs/nRF24/nRF24.c **** /**
 393:libs/nRF24/nRF24.c ****   * @brief  Set low on Chip-Enable pin of nRF24L01.
 394:libs/nRF24/nRF24.c ****   * @param  None.
 395:libs/nRF24/nRF24.c ****   * @retval None.
 396:libs/nRF24/nRF24.c ****   */
 397:libs/nRF24/nRF24.c **** void nRF24_CE_0()
 398:libs/nRF24/nRF24.c **** {
 775              		.loc 1 398 0
 776              		.cfi_startproc
 777              		@ args = 0, pretend = 0, frame = 0
 778              		@ frame_needed = 0, uses_anonymous_args = 0
 779 0000 08B5     		push	{r3, lr}
 780              	.LCFI14:
 781              		.cfi_def_cfa_offset 8
 782              		.cfi_offset 3, -8
 783              		.cfi_offset 14, -4
 399:libs/nRF24/nRF24.c ****     #if defined STM32F4xx
 400:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 784              		.loc 1 400 0
 785 0002 0022     		movs	r2, #0
 786 0004 2021     		movs	r1, #32
 787 0006 0248     		ldr	r0, .L70
 788 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccRs3XjX.s 			page 22


 789              	.LVL65:
 790 000c 08BD     		pop	{r3, pc}
 791              	.L71:
 792 000e 00BF     		.align	2
 793              	.L70:
 794 0010 00040240 		.word	1073873920
 795              		.cfi_endproc
 796              	.LFE146:
 798              		.section	.text.nRF24_verified_write_register,"ax",%progbits
 799              		.align	1
 800              		.global	nRF24_verified_write_register
 801              		.syntax unified
 802              		.thumb
 803              		.thumb_func
 804              		.fpu fpv4-sp-d16
 806              	nRF24_verified_write_register:
 807              	.LFB147:
 401:libs/nRF24/nRF24.c ****     #elif defined BCM2835
 402:libs/nRF24/nRF24.c ****     bcm2835_gpio_write(RPI_BPLUS_GPIO_J8_29, LOW);
 403:libs/nRF24/nRF24.c ****     #endif
 404:libs/nRF24/nRF24.c **** }
 405:libs/nRF24/nRF24.c **** 
 406:libs/nRF24/nRF24.c **** 
 407:libs/nRF24/nRF24.c **** /**
 408:libs/nRF24/nRF24.c ****   * @brief      Write to a register on nRF24L01+ through SPI. Read the same registers after write t
 409:libs/nRF24/nRF24.c ****   *               This function seems to waste cycles but SPI communication issues expose immediate
 410:libs/nRF24/nRF24.c ****   * @param[in]  reg            The target register to write value to.
 411:libs/nRF24/nRF24.c ****   * @param[in]  num_bytes      Number of bytes to write.
 412:libs/nRF24/nRF24.c ****   * @param[in]  p_writing_data Pointer to the data to write.
 413:libs/nRF24/nRF24.c ****   * @retval     Boolean. 1 for mistakes happen. 0 for success.
 414:libs/nRF24/nRF24.c ****   * @note       reg & ~ W_REGISTER_MASK is the reverse operation of reg | W_REGISTER_MASK,
 415:libs/nRF24/nRF24.c ****   *               essentially get rid of Write Regiter Mask and add a Read Register Mask. 
 416:libs/nRF24/nRF24.c ****   *             See section 8.3.1 SPI commands in nRF24L01+ Product Specification for details.
 417:libs/nRF24/nRF24.c ****   */
 418:libs/nRF24/nRF24.c **** bool nRF24_verified_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 419:libs/nRF24/nRF24.c **** {
 808              		.loc 1 419 0
 809              		.cfi_startproc
 810              		@ args = 0, pretend = 0, frame = 256
 811              		@ frame_needed = 1, uses_anonymous_args = 0
 812              	.LVL66:
 813 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 814              	.LCFI15:
 815              		.cfi_def_cfa_offset 32
 816              		.cfi_offset 4, -32
 817              		.cfi_offset 5, -28
 818              		.cfi_offset 6, -24
 819              		.cfi_offset 7, -20
 820              		.cfi_offset 8, -16
 821              		.cfi_offset 9, -12
 822              		.cfi_offset 10, -8
 823              		.cfi_offset 14, -4
 824 0004 C0B0     		sub	sp, sp, #256
 825              	.LCFI16:
 826              		.cfi_def_cfa_offset 288
 827 0006 00AF     		add	r7, sp, #0
 828              	.LCFI17:
ARM GAS  /tmp/ccRs3XjX.s 			page 23


 829              		.cfi_def_cfa_register 7
 830 0008 0546     		mov	r5, r0
 831 000a 0C46     		mov	r4, r1
 832 000c 9046     		mov	r8, r2
 420:libs/nRF24/nRF24.c **** 
 421:libs/nRF24/nRF24.c ****     char message[256];
 422:libs/nRF24/nRF24.c ****     uint8_t read_data[num_bytes];
 833              		.loc 1 422 0
 834 000e 8A46     		mov	r10, r1
 835              	.LVL67:
 836 0010 CB1D     		adds	r3, r1, #7
 837 0012 23F00703 		bic	r3, r3, #7
 838 0016 ADEB030D 		sub	sp, sp, r3
 839 001a E946     		mov	r9, sp
 840              	.LVL68:
 423:libs/nRF24/nRF24.c **** 
 424:libs/nRF24/nRF24.c ****     /* Write the data to target register. */
 425:libs/nRF24/nRF24.c ****     spi_write_register(reg, num_bytes, p_writing_data); 
 841              		.loc 1 425 0
 842 001c FFF7FEFF 		bl	spi_write_register
 843              	.LVL69:
 426:libs/nRF24/nRF24.c **** 
 427:libs/nRF24/nRF24.c ****     /* Read from same target register to verify if data has been successfully written. */
 428:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK | (reg & ~W_REGISTER_MASK), num_bytes, read_data);
 844              		.loc 1 428 0
 845 0020 6A46     		mov	r2, sp
 846 0022 2146     		mov	r1, r4
 847 0024 05F0DF00 		and	r0, r5, #223
 848 0028 FFF7FEFF 		bl	spi_read_register
 849              	.LVL70:
 850              	.LBB74:
 429:libs/nRF24/nRF24.c ****     
 430:libs/nRF24/nRF24.c ****     /* For each byte, check mismatch between written data and read data from target register. */
 431:libs/nRF24/nRF24.c ****     for (int i = 0; i < num_bytes; ++i) 
 851              		.loc 1 431 0
 852 002c 0026     		movs	r6, #0
 853              	.LVL71:
 854              	.L73:
 855              		.loc 1 431 0 is_stmt 0 discriminator 1
 856 002e 5645     		cmp	r6, r10
 857 0030 59DA     		bge	.L78
 432:libs/nRF24/nRF24.c ****     {
 433:libs/nRF24/nRF24.c ****       if (read_data[i] != p_writing_data[i])  
 858              		.loc 1 433 0 is_stmt 1
 859 0032 19F80620 		ldrb	r2, [r9, r6]	@ zero_extendqisi2
 860 0036 08EB0604 		add	r4, r8, r6
 861 003a 18F80630 		ldrb	r3, [r8, r6]	@ zero_extendqisi2
 862 003e 9A42     		cmp	r2, r3
 863 0040 27D1     		bne	.L79
 434:libs/nRF24/nRF24.c ****       {
 435:libs/nRF24/nRF24.c ****         #ifdef NRF24_DEBUG
 436:libs/nRF24/nRF24.c ****         strcpy(message, "Problem writing to nRF24 register -- ");
 437:libs/nRF24/nRF24.c ****         serial_print(message);
 438:libs/nRF24/nRF24.c ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 439:libs/nRF24/nRF24.c ****         serial_print(message);
 440:libs/nRF24/nRF24.c ****         #endif 
 441:libs/nRF24/nRF24.c ****         return true;
ARM GAS  /tmp/ccRs3XjX.s 			page 24


 442:libs/nRF24/nRF24.c ****       } else {
 443:libs/nRF24/nRF24.c ****         #ifdef NRF24_DEBUG
 444:libs/nRF24/nRF24.c ****         strcpy(message, "Success writing to nRF24 register -- ");
 864              		.loc 1 444 0 discriminator 2
 865 0042 3C46     		mov	r4, r7
 866 0044 2B4D     		ldr	r5, .L80
 867 0046 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 868 0048 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 869 004a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 870 004c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 871 004e 95E80300 		ldm	r5, {r0, r1}
 872 0052 44F8040B 		str	r0, [r4], #4
 873 0056 2180     		strh	r1, [r4]	@ movhi
 874              	.LVL72:
 875              	.LBB75:
 876              	.LBB76:
 182:libs/nRF24/nRF24.c **** }
 877              		.loc 1 182 0 discriminator 2
 878 0058 3846     		mov	r0, r7
 879              	.LVL73:
 880 005a FFF7FEFF 		bl	strlen
 881              	.LVL74:
 882 005e 264C     		ldr	r4, .L80+4
 883              	.LVL75:
 884 0060 6423     		movs	r3, #100
 885 0062 82B2     		uxth	r2, r0
 886 0064 3946     		mov	r1, r7
 887              	.LVL76:
 888 0066 2046     		mov	r0, r4
 889 0068 FFF7FEFF 		bl	HAL_UART_Transmit
 890              	.LVL77:
 891              	.LBE76:
 892              	.LBE75:
 445:libs/nRF24/nRF24.c ****         serial_print(message);
 446:libs/nRF24/nRF24.c ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 893              		.loc 1 446 0 discriminator 2
 894 006c 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 895 0070 18F80620 		ldrb	r2, [r8, r6]	@ zero_extendqisi2
 896 0074 2149     		ldr	r1, .L80+8
 897 0076 3846     		mov	r0, r7
 898 0078 FFF7FEFF 		bl	sprintf
 899              	.LVL78:
 900              	.LBB77:
 901              	.LBB78:
 182:libs/nRF24/nRF24.c **** }
 902              		.loc 1 182 0 discriminator 2
 903 007c 3846     		mov	r0, r7
 904              	.LVL79:
 905 007e FFF7FEFF 		bl	strlen
 906              	.LVL80:
 907 0082 6423     		movs	r3, #100
 908 0084 82B2     		uxth	r2, r0
 909 0086 3946     		mov	r1, r7
 910              	.LVL81:
 911 0088 2046     		mov	r0, r4
 912 008a FFF7FEFF 		bl	HAL_UART_Transmit
 913              	.LVL82:
ARM GAS  /tmp/ccRs3XjX.s 			page 25


 914              	.LBE78:
 915              	.LBE77:
 431:libs/nRF24/nRF24.c ****     {
 916              		.loc 1 431 0 discriminator 2
 917 008e 0136     		adds	r6, r6, #1
 918              	.LVL83:
 919 0090 CDE7     		b	.L73
 920              	.L79:
 436:libs/nRF24/nRF24.c ****         serial_print(message);
 921              		.loc 1 436 0
 922 0092 3D46     		mov	r5, r7
 923 0094 DFF868E0 		ldr	lr, .L80+12
 924 0098 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 925 009c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 926 009e BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 927 00a2 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 928 00a4 9EE80300 		ldm	lr, {r0, r1}
 929 00a8 45F8040B 		str	r0, [r5], #4
 930 00ac 2980     		strh	r1, [r5]	@ movhi
 931              	.LVL84:
 932              	.LBB79:
 933              	.LBB80:
 182:libs/nRF24/nRF24.c **** }
 934              		.loc 1 182 0
 935 00ae 3846     		mov	r0, r7
 936              	.LVL85:
 937 00b0 FFF7FEFF 		bl	strlen
 938              	.LVL86:
 939 00b4 104D     		ldr	r5, .L80+4
 940              	.LVL87:
 941 00b6 6423     		movs	r3, #100
 942 00b8 82B2     		uxth	r2, r0
 943 00ba 3946     		mov	r1, r7
 944              	.LVL88:
 945 00bc 2846     		mov	r0, r5
 946 00be FFF7FEFF 		bl	HAL_UART_Transmit
 947              	.LVL89:
 948              	.LBE80:
 949              	.LBE79:
 438:libs/nRF24/nRF24.c ****         serial_print(message);
 950              		.loc 1 438 0
 951 00c2 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 952 00c6 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 953 00c8 0C49     		ldr	r1, .L80+8
 954 00ca 3846     		mov	r0, r7
 955 00cc FFF7FEFF 		bl	sprintf
 956              	.LVL90:
 957              	.LBB81:
 958              	.LBB82:
 182:libs/nRF24/nRF24.c **** }
 959              		.loc 1 182 0
 960 00d0 3846     		mov	r0, r7
 961              	.LVL91:
 962 00d2 FFF7FEFF 		bl	strlen
 963              	.LVL92:
 964 00d6 6423     		movs	r3, #100
 965 00d8 82B2     		uxth	r2, r0
ARM GAS  /tmp/ccRs3XjX.s 			page 26


 966 00da 3946     		mov	r1, r7
 967              	.LVL93:
 968 00dc 2846     		mov	r0, r5
 969 00de FFF7FEFF 		bl	HAL_UART_Transmit
 970              	.LVL94:
 971              	.LBE82:
 972              	.LBE81:
 441:libs/nRF24/nRF24.c ****       } else {
 973              		.loc 1 441 0
 974 00e2 0120     		movs	r0, #1
 975 00e4 00E0     		b	.L75
 976              	.LVL95:
 977              	.L78:
 978              	.LBE74:
 447:libs/nRF24/nRF24.c ****         serial_print(message);
 448:libs/nRF24/nRF24.c ****         #endif
 449:libs/nRF24/nRF24.c ****       }
 450:libs/nRF24/nRF24.c ****   }
 451:libs/nRF24/nRF24.c ****   return false;
 979              		.loc 1 451 0
 980 00e6 0020     		movs	r0, #0
 981              	.L75:
 452:libs/nRF24/nRF24.c **** }
 982              		.loc 1 452 0
 983 00e8 07F58077 		add	r7, r7, #256
 984              	.LCFI18:
 985              		.cfi_def_cfa_offset 32
 986 00ec BD46     		mov	sp, r7
 987              	.LCFI19:
 988              		.cfi_def_cfa_register 13
 989              		@ sp needed
 990 00ee BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 991              	.LVL96:
 992              	.L81:
 993 00f2 00BF     		.align	2
 994              	.L80:
 995 00f4 54000000 		.word	.LC4
 996 00f8 00000000 		.word	huart2
 997 00fc 28000000 		.word	.LC3
 998 0100 00000000 		.word	.LC2
 999              		.cfi_endproc
 1000              	.LFE147:
 1002              		.section	.text.print_bytearray,"ax",%progbits
 1003              		.align	1
 1004              		.global	print_bytearray
 1005              		.syntax unified
 1006              		.thumb
 1007              		.thumb_func
 1008              		.fpu fpv4-sp-d16
 1010              	print_bytearray:
 1011              	.LFB153:
 453:libs/nRF24/nRF24.c **** 
 454:libs/nRF24/nRF24.c **** 
 455:libs/nRF24/nRF24.c **** /**  
 456:libs/nRF24/nRF24.c ****  *  @brief  Test nRF24 transmitter function without a receiver. 
 457:libs/nRF24/nRF24.c ****  *          In the project, we always make sure that TX is working before RX.
 458:libs/nRF24/nRF24.c ****  *          Thus use this function on a fresh setup of the nRF24 modules.
ARM GAS  /tmp/ccRs3XjX.s 			page 27


 459:libs/nRF24/nRF24.c ****  *  @param  None.
 460:libs/nRF24/nRF24.c ****  *  @retval None.
 461:libs/nRF24/nRF24.c ****  *  @note  
 462:libs/nRF24/nRF24.c ****  *      Steps: 1. Disable Auto Acknowledgement, disable Auto Retransmit. 
 463:libs/nRF24/nRF24.c ****  *                The reason to disable them is that if they are enabled, ShockBurst mode is on.
 464:libs/nRF24/nRF24.c ****  *                Without a usable receiver, it cannot be determined if the transceiver is working 
 465:libs/nRF24/nRF24.c ****  *             2. TX_DS (in STATUS register) is expected to be set when data has been clock into TX
 466:libs/nRF24/nRF24.c ****  *             3. Check if STATUS = 0x2E, if so we have a working TX module.
 467:libs/nRF24/nRF24.c ****  *            
 468:libs/nRF24/nRF24.c ****  *            After writing to W_TX_PAYLOAD, TX_EMPTY (in FIFO_STATUS register) becomes 0.
 469:libs/nRF24/nRF24.c ****  *            
 470:libs/nRF24/nRF24.c ****  *            What happens if sending is not successful?
 471:libs/nRF24/nRF24.c ****  *            TX_FULL (in FIFO_STATUS register) becomes 1.
 472:libs/nRF24/nRF24.c ****  *            TX_FULL (in STATUS register) becomes 1.
 473:libs/nRF24/nRF24.c ****  *            TX_DS (in STATUS register) remains 0.  
 474:libs/nRF24/nRF24.c ****  *
 475:libs/nRF24/nRF24.c ****  *      States: 
 476:libs/nRF24/nRF24.c ****  *            The states can be referred in 6.1.1 State diagram.
 477:libs/nRF24/nRF24.c ****  *      
 478:libs/nRF24/nRF24.c ****  *      STATUS register
 479:libs/nRF24/nRF24.c ****  *                7             6           5         4         3:1         0
 480:libs/nRF24/nRF24.c ****  *            <reserved>      RX_DR       TX_DS     MAX_RT     RX_P_NO     TX_FULL
 481:libs/nRF24/nRF24.c ****  *            -----------------------------------------------------------------------
 482:libs/nRF24/nRF24.c ****  *             Always 0       Receive     Transfer  Maximum    000-101 :    1: 
 483:libs/nRF24/nRF24.c ****  *                            Data        Data      TX         Data Pipe #  TX_FULL
 484:libs/nRF24/nRF24.c ****  *                            Ready       Sent      Transmits  110 :
 485:libs/nRF24/nRF24.c ****  *                                                             Not Used.
 486:libs/nRF24/nRF24.c ****  *                                                             111:
 487:libs/nRF24/nRF24.c ****  *                                                             RX FIFO Empty.
 488:libs/nRF24/nRF24.c ****  */
 489:libs/nRF24/nRF24.c **** void nRF24_tx_self_test() 
 490:libs/nRF24/nRF24.c **** {
 491:libs/nRF24/nRF24.c ****   char message[256];
 492:libs/nRF24/nRF24.c ****   uint8_t writing_byte;
 493:libs/nRF24/nRF24.c **** 
 494:libs/nRF24/nRF24.c ****   #ifdef NRF24_DEBUG
 495:libs/nRF24/nRF24.c ****   strcpy(message, "---- nrf24 tx self test. ----\n");
 496:libs/nRF24/nRF24.c ****   serial_print(message);
 497:libs/nRF24/nRF24.c **** 
 498:libs/nRF24/nRF24.c ****   strcpy(message, "---- This test to verifies function of a tranmitter send without a receiver. ---
 499:libs/nRF24/nRF24.c ****   serial_print(message);
 500:libs/nRF24/nRF24.c ****   #endif
 501:libs/nRF24/nRF24.c **** 
 502:libs/nRF24/nRF24.c ****   uint8_t nRF24_status = 0x00;
 503:libs/nRF24/nRF24.c **** 
 504:libs/nRF24/nRF24.c ****   // Note that if we reset the nRF connected without re-poweron the chip, initial value of register
 505:libs/nRF24/nRF24.c ****   /* Current State: [Power-on reset 100 ms] */
 506:libs/nRF24/nRF24.c ****   nRF24_CE_0();
 507:libs/nRF24/nRF24.c **** 
 508:libs/nRF24/nRF24.c ****   /* Current State: [Power-Down] (RF transmission is Power-Down, but SPI is alive.) */
 509:libs/nRF24/nRF24.c ****   writing_byte = 0x00;
 510:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
 511:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
 512:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 513:libs/nRF24/nRF24.c **** 
 514:libs/nRF24/nRF24.c ****   writing_byte = 0x0E;
 515:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
ARM GAS  /tmp/ccRs3XjX.s 			page 28


 516:libs/nRF24/nRF24.c **** 
 517:libs/nRF24/nRF24.c ****   /* PWR_UP=1, state transition to [Standby-I] */
 518:libs/nRF24/nRF24.c ****   uint8_t test_payload[4] = {0xC0, 0xC0, 0xCA, 0xFE}; // clock out a payload, now TX FIFO not empty
 519:libs/nRF24/nRF24.c ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 520:libs/nRF24/nRF24.c ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 521:libs/nRF24/nRF24.c ****   
 522:libs/nRF24/nRF24.c ****   /* TX FIFO not empty AND CE = 1, state transition to [TX MODE] */
 523:libs/nRF24/nRF24.c ****   /* Get nRF24 <STATUS> register value. */
 524:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &nRF24_status);
 525:libs/nRF24/nRF24.c **** 
 526:libs/nRF24/nRF24.c ****   SPI_DELAY(1);
 527:libs/nRF24/nRF24.c **** 
 528:libs/nRF24/nRF24.c ****   /* CE=0, state transition -> now return to [Standby-I]. */
 529:libs/nRF24/nRF24.c ****   nRF24_CE_0();
 530:libs/nRF24/nRF24.c **** 
 531:libs/nRF24/nRF24.c ****   /* Now check test result. */
 532:libs/nRF24/nRF24.c ****   if (nRF24_status & 0x2E) 
 533:libs/nRF24/nRF24.c ****   {
 534:libs/nRF24/nRF24.c ****     #ifdef NRF24_DEBUG
 535:libs/nRF24/nRF24.c ****     strcpy(message, "\n > nRF24 transmission self-test has passed. \
 536:libs/nRF24/nRF24.c ****                        <STATUS> has value of 0x2E. \
 537:libs/nRF24/nRF24.c ****                        TX_DS (transfer data sent) was set. \
 538:libs/nRF24/nRF24.c ****                        RX_P_NO = 111, this means RX FIFO Empty. \n");
 539:libs/nRF24/nRF24.c ****     serial_print(message);
 540:libs/nRF24/nRF24.c ****     #endif
 541:libs/nRF24/nRF24.c ****   } 
 542:libs/nRF24/nRF24.c ****   else 
 543:libs/nRF24/nRF24.c ****   {
 544:libs/nRF24/nRF24.c ****     #ifdef NRF24_DEBUG
 545:libs/nRF24/nRF24.c ****     sprintf(message, "\n > nRF24 transmission self-test has failed. <STATUS> is expected 0x2E. Curr
 546:libs/nRF24/nRF24.c ****     serial_print(message);
 547:libs/nRF24/nRF24.c ****     #endif
 548:libs/nRF24/nRF24.c ****   }
 549:libs/nRF24/nRF24.c **** 
 550:libs/nRF24/nRF24.c ****   /* (!) The above code already determined if the chip works in TX mode.*/
 551:libs/nRF24/nRF24.c ****   /* The following code keeps sending the payload in a while loop. Comment below out if we don't ne
 552:libs/nRF24/nRF24.c ****   /* The following code will be useful when we are testing a receiver board. */
 553:libs/nRF24/nRF24.c ****   /* clock out a four-byte payload "C0C0 CAFE" */
 554:libs/nRF24/nRF24.c ****   while(1) 
 555:libs/nRF24/nRF24.c ****   {
 556:libs/nRF24/nRF24.c ****     uint8_t payload[] = {0xC0, 0xC0, 0xCA, 0xFE}; 
 557:libs/nRF24/nRF24.c **** 
 558:libs/nRF24/nRF24.c ****     spi_write_register(W_TX_PAYLOAD, 4, (uint8_t*) payload);
 559:libs/nRF24/nRF24.c **** 
 560:libs/nRF24/nRF24.c ****     /* Fire out the transmit packet */
 561:libs/nRF24/nRF24.c ****     nRF24_CE_1(); 
 562:libs/nRF24/nRF24.c **** 
 563:libs/nRF24/nRF24.c ****     /* read <STATUS> register*/
 564:libs/nRF24/nRF24.c ****     uint8_t status;
 565:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 566:libs/nRF24/nRF24.c **** 
 567:libs/nRF24/nRF24.c ****     #ifdef NRF24_DEBUG
 568:libs/nRF24/nRF24.c ****     sprintf(message, "<STATUS> REGISTER : %#02x\n", status);
 569:libs/nRF24/nRF24.c ****     serial_print(message);
 570:libs/nRF24/nRF24.c ****     #endif
 571:libs/nRF24/nRF24.c **** 
 572:libs/nRF24/nRF24.c ****     if (status == 0x2e) /* TX_DS bit is set. */
ARM GAS  /tmp/ccRs3XjX.s 			page 29


 573:libs/nRF24/nRF24.c ****     {
 574:libs/nRF24/nRF24.c ****       #ifdef NRF24_DEBUG
 575:libs/nRF24/nRF24.c ****       strcpy(message, "nRF24 send status - success -\n");
 576:libs/nRF24/nRF24.c ****       serial_print(message);
 577:libs/nRF24/nRF24.c ****       #endif
 578:libs/nRF24/nRF24.c ****     } 
 579:libs/nRF24/nRF24.c ****     else 
 580:libs/nRF24/nRF24.c ****     {
 581:libs/nRF24/nRF24.c ****       #ifdef NRF24_DEBUG
 582:libs/nRF24/nRF24.c ****       strcpy(message, "nRF24 send status - failure -\n");
 583:libs/nRF24/nRF24.c ****       serial_print(message);
 584:libs/nRF24/nRF24.c ****       #endif
 585:libs/nRF24/nRF24.c ****     }
 586:libs/nRF24/nRF24.c **** 
 587:libs/nRF24/nRF24.c ****     /* write 1 to <STATUS> register to clear TX_DS, TX_DS bit is Write-to-Clear. */
 588:libs/nRF24/nRF24.c ****     nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 589:libs/nRF24/nRF24.c **** 
 590:libs/nRF24/nRF24.c ****     nRF24_CE_0(); /* stop transmission. Returns to [Standby-I]. */
 591:libs/nRF24/nRF24.c ****   }
 592:libs/nRF24/nRF24.c ****   
 593:libs/nRF24/nRF24.c **** }
 594:libs/nRF24/nRF24.c **** 
 595:libs/nRF24/nRF24.c **** 
 596:libs/nRF24/nRF24.c **** /**
 597:libs/nRF24/nRF24.c ****   * @brief  Send packet with nRF24.
 598:libs/nRF24/nRF24.c ****   * @param  tx_payload_width. Length of data packet to send to the receiver. 
 599:libs/nRF24/nRF24.c ****               (!) tx_payload_width Must be the same value as the receiver's <RX_PW_Px>. x being the
 600:libs/nRF24/nRF24.c ****   * @param  payload Pointer to the actual data packet being sent to the receiver.
 601:libs/nRF24/nRF24.c ****   * @retval None.
 602:libs/nRF24/nRF24.c ****   * @note   Call nRF24_configure_tx_mode() before this test to initailize TX mode in nRF24L01+.
 603:libs/nRF24/nRF24.c ****   */
 604:libs/nRF24/nRF24.c **** void nRF24_send_packet(uint8_t tx_payload_width, uint8_t* p_payload) 
 605:libs/nRF24/nRF24.c **** {
 606:libs/nRF24/nRF24.c **** 
 607:libs/nRF24/nRF24.c ****   char message[64];
 608:libs/nRF24/nRF24.c ****       
 609:libs/nRF24/nRF24.c ****   /* clock out the packet to TX FIFO*/
 610:libs/nRF24/nRF24.c ****   nRF24_release_payload(tx_payload_width, p_payload);
 611:libs/nRF24/nRF24.c **** 
 612:libs/nRF24/nRF24.c ****   /* Fire out the transmit packet */
 613:libs/nRF24/nRF24.c ****   nRF24_CE_1(); 
 614:libs/nRF24/nRF24.c **** 
 615:libs/nRF24/nRF24.c ****   /* read <STATUS> register*/
 616:libs/nRF24/nRF24.c ****   uint8_t status;
 617:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 618:libs/nRF24/nRF24.c **** 
 619:libs/nRF24/nRF24.c ****   /* print <STATUS> register*/
 620:libs/nRF24/nRF24.c ****   #ifdef NRF24_DEBUG
 621:libs/nRF24/nRF24.c ****   sprintf(message, "<STATUS> REGISTER : %#02x\n", status);
 622:libs/nRF24/nRF24.c ****   serial_print(message);
 623:libs/nRF24/nRF24.c ****   #endif
 624:libs/nRF24/nRF24.c **** 
 625:libs/nRF24/nRF24.c ****   /* Verify if TX_DS bit is set in <STATUS> */
 626:libs/nRF24/nRF24.c ****   if (status == 0x2e) /* TX_DS_MASK1 = 1 << 5 = 0x20 */
 627:libs/nRF24/nRF24.c ****   {
 628:libs/nRF24/nRF24.c ****     #ifdef NRF24_DEBUG
 629:libs/nRF24/nRF24.c ****     strcpy(message, "nRF24 send status - success -\n");
ARM GAS  /tmp/ccRs3XjX.s 			page 30


 630:libs/nRF24/nRF24.c ****     serial_print(message);
 631:libs/nRF24/nRF24.c ****     #endif
 632:libs/nRF24/nRF24.c ****   } 
 633:libs/nRF24/nRF24.c ****   else 
 634:libs/nRF24/nRF24.c ****   {
 635:libs/nRF24/nRF24.c ****     #ifdef NRF24_DEBUG
 636:libs/nRF24/nRF24.c ****     strcpy(message, "nRF24 send status - failure -\n");
 637:libs/nRF24/nRF24.c ****     serial_print(message);
 638:libs/nRF24/nRF24.c ****     #endif
 639:libs/nRF24/nRF24.c ****   }
 640:libs/nRF24/nRF24.c **** 
 641:libs/nRF24/nRF24.c ****   /* write 1 to <STATUS> register to clear TX_DS, TX_DS bit is Write-to-Clear. */
 642:libs/nRF24/nRF24.c ****   nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 643:libs/nRF24/nRF24.c **** 
 644:libs/nRF24/nRF24.c ****   /* Stop transmission. Returns to [Standby-I]. */
 645:libs/nRF24/nRF24.c ****   nRF24_CE_0(); 
 646:libs/nRF24/nRF24.c **** }
 647:libs/nRF24/nRF24.c **** 
 648:libs/nRF24/nRF24.c **** /**
 649:libs/nRF24/nRF24.c ****   * @brief  Configure nRF24L01+ in TX mode without Enhanced ShockBurst.
 650:libs/nRF24/nRF24.c ****   *           Without Enhanced ShockBurst, Auto Acknowledgement and Auto-Retransmission is masked o
 651:libs/nRF24/nRF24.c ****   *           The TX nRF transmit is successful by detecting 1 on TX_DS field in <STATUS> register.
 652:libs/nRF24/nRF24.c ****   *           TX is successful even if there's no presense or acknowledge from an RX nRF.
 653:libs/nRF24/nRF24.c ****   *         (!) Auto Acknowledgement must also be masked off on the RX nRF24 in order for it to rec
 654:libs/nRF24/nRF24.c ****   *           If RX nRF has different setting in parameters (expect for TX/RX), 
 655:libs/nRF24/nRF24.c ****   *           The TX nRF24 may be successfully sending data, but RX nRF24 receives none.
 656:libs/nRF24/nRF24.c ****   * @param  None.
 657:libs/nRF24/nRF24.c ****   * @retval None.
 658:libs/nRF24/nRF24.c ****   * @note   The states (marked such as [TX Mode]) are found in "nRF24L01+ Product Spefication" -- 6
 659:libs/nRF24/nRF24.c ****   */
 660:libs/nRF24/nRF24.c **** void nRF24_config_normal_tx_mode() 
 661:libs/nRF24/nRF24.c **** {
 662:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 663:libs/nRF24/nRF24.c **** 
 664:libs/nRF24/nRF24.c ****     /* Set Address Width as 5 bytes. On the Receiver side, set RX_ADDR_P0 with same value. */
 665:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_AW(SETUP_AW_MASK5bytes);
 666:libs/nRF24/nRF24.c ****  
 667:libs/nRF24/nRF24.c ****     /* Set TX address to nRF24. */
 668:libs/nRF24/nRF24.c ****     uint8_t TX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  /* 5 byte TX address */
 669:libs/nRF24/nRF24.c ****     nRF24_set_TX_ADDR(5, TX_ADDRESS); 
 670:libs/nRF24/nRF24.c **** 
 671:libs/nRF24/nRF24.c ****     /* Disable Auto-Acknowledgement on Pipe 5 - Pipe 0, this also disables Enhanced ShockBurst. */
 672:libs/nRF24/nRF24.c ****     nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA
 673:libs/nRF24/nRF24.c **** 
 674:libs/nRF24/nRF24.c ****     /* Disable RX on Pipe 5 - Pipe 0. */
 675:libs/nRF24/nRF24.c ****     nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P
 676:libs/nRF24/nRF24.c **** 
 677:libs/nRF24/nRF24.c ****     /* Disable Auto-Retransmission, this also disables Enhanced ShockBurst. */
 678:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK0);
 679:libs/nRF24/nRF24.c **** 
 680:libs/nRF24/nRF24.c ****     /* Set Frquency Channel. Carrier Frequency = 2.4GHz + RF_CH = (2400 + RF_CH) = 2440 MHz. */
 681:libs/nRF24/nRF24.c ****     nRF24_set_RF_CH(40);
 682:libs/nRF24/nRF24.c **** 
 683:libs/nRF24/nRF24.c ****     /* Set 'Continuous Carrier Transmit', RF Data Rate, and RF TX Power */
 684:libs/nRF24/nRF24.c ****     nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_HI
 685:libs/nRF24/nRF24.c ****   
 686:libs/nRF24/nRF24.c ****     /* Set IRQ Masks, CRC, Power-Up and select RX/TX mode. */
ARM GAS  /tmp/ccRs3XjX.s 			page 31


 687:libs/nRF24/nRF24.c ****     nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CR
 688:libs/nRF24/nRF24.c **** 
 689:libs/nRF24/nRF24.c ****     /* CE is not set to 1, nRF24 still stays in [Standby-I] Mode. */
 690:libs/nRF24/nRF24.c ****     /* CE = 1 is not activated until we write to TX FIFO so stays in Standby-I mode. */
 691:libs/nRF24/nRF24.c **** }
 692:libs/nRF24/nRF24.c **** 
 693:libs/nRF24/nRF24.c **** /**
 694:libs/nRF24/nRF24.c ****   * @brief  TX (transmit) Mode with Enhanced ShockBurst.
 695:libs/nRF24/nRF24.c ****   * @param  None.
 696:libs/nRF24/nRF24.c ****   * @retval None.
 697:libs/nRF24/nRF24.c ****   * @note   In Enhanced ShockBurst, Auto Acknowledgement and Auto-Retransmission are used to guaran
 698:libs/nRF24/nRF24.c ****   *         Thus used pipe's EN_AA and SETUP_RETR is masked 1.
 699:libs/nRF24/nRF24.c ****   *         The TX nRF transmit is successful by detecting 1 on TX_DS field in <STATUS> register.
 700:libs/nRF24/nRF24.c ****   *         However, trasmit is successful only when an RX nRF, also with Enhanced ShockBurst turne
 701:libs/nRF24/nRF24.c ****   *           send Acknowledgement to the TX nRF.
 702:libs/nRF24/nRF24.c ****   *         The TX nRF, in order to receive that Acknowledgement signal, needs to turn on receive o
 703:libs/nRF24/nRF24.c ****   *         The states (marked such as [TX Mode]) are found in "nRF24L01+ Product Spefication" -- 6
 704:libs/nRF24/nRF24.c ****   */
 705:libs/nRF24/nRF24.c **** void nRF24_config_enhanced_shockburst_tx_mode() 
 706:libs/nRF24/nRF24.c **** {
 707:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 708:libs/nRF24/nRF24.c ****     // nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 709:libs/nRF24/nRF24.c **** 
 710:libs/nRF24/nRF24.c ****     /* Set TX_ADDR for transmit. On the Receiver side, set RX_ADDR_P0 with same value. */
 711:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_AW(SETUP_AW_MASK5bytes);
 712:libs/nRF24/nRF24.c **** 
 713:libs/nRF24/nRF24.c ****     uint8_t TX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  
 714:libs/nRF24/nRF24.c ****     nRF24_set_TX_ADDR(5, TX_ADDRESS);
 715:libs/nRF24/nRF24.c **** 
 716:libs/nRF24/nRF24.c ****     /* ShockBurst Auto-Acknowledgement: In order to receive hardware-generated ACK from the receive
 717:libs/nRF24/nRF24.c ****     nRF24_set_RX_ADDR_P0(5, TX_ADDRESS);
 718:libs/nRF24/nRF24.c **** 
 719:libs/nRF24/nRF24.c ****     nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA
 720:libs/nRF24/nRF24.c ****     nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P
 721:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK10);
 722:libs/nRF24/nRF24.c ****     nRF24_set_RF_CH(40);
 723:libs/nRF24/nRF24.c ****     uint8_t writing_byte = 0x07;
 724:libs/nRF24/nRF24.c ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 725:libs/nRF24/nRF24.c ****     // nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR
 726:libs/nRF24/nRF24.c ****     nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CR
 727:libs/nRF24/nRF24.c ****     SPI_DELAY(10);
 728:libs/nRF24/nRF24.c **** 
 729:libs/nRF24/nRF24.c **** }
 730:libs/nRF24/nRF24.c **** 
 731:libs/nRF24/nRF24.c **** 
 732:libs/nRF24/nRF24.c **** /**
 733:libs/nRF24/nRF24.c ****   * @brief  Configure nRF24L01+ in RX mode without Enhanced ShockBurst.
 734:libs/nRF24/nRF24.c ****   *           Without Enhanced ShockBurst, Auto Acknowledgement and Auto-Retransmission is masked o
 735:libs/nRF24/nRF24.c ****   *           Make sure to setup a TX nRF24 first and keep transmitting so we can test if RX nRF24 
 736:libs/nRF24/nRF24.c ****   *         (!) Auto Acknowledgement must also be masked off on the TX nRF24 in order for RX to rec
 737:libs/nRF24/nRF24.c ****   *           If TX and RX nRF24 module has different setting in parameters (expect for PRIM_RX), 
 738:libs/nRF24/nRF24.c ****   *           The TX nRF24 may be successfully sending data, but RX nRF24 receives none.
 739:libs/nRF24/nRF24.c ****   * @param  None.
 740:libs/nRF24/nRF24.c ****   * @retval None.
 741:libs/nRF24/nRF24.c ****   * @note   The states (marked such as [TX Mode]) are found in "nRF24L01+ Product Spefication" -- 6
 742:libs/nRF24/nRF24.c ****   */
 743:libs/nRF24/nRF24.c **** void nRF24_config_normal_rx_mode() 
ARM GAS  /tmp/ccRs3XjX.s 			page 32


 744:libs/nRF24/nRF24.c **** {
 745:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 746:libs/nRF24/nRF24.c **** 
 747:libs/nRF24/nRF24.c ****     /* Set Address Width as 5 bytes. On the Receiver side, set RX_ADDR_P0 with same value. */
 748:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_AW(SETUP_AW_MASK5bytes);
 749:libs/nRF24/nRF24.c ****  
 750:libs/nRF24/nRF24.c ****     /* Set TX address to nRF24. */
 751:libs/nRF24/nRF24.c ****     uint8_t RX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  /* 5 byte RX address, need to be same as T
 752:libs/nRF24/nRF24.c ****     nRF24_set_RX_ADDR_P0(5, RX_ADDRESS); 
 753:libs/nRF24/nRF24.c **** 
 754:libs/nRF24/nRF24.c ****     /* Disable Auto-Acknowledgement on Pipe 5 - Pipe 0, this also disables Enhanced ShockBurst. */
 755:libs/nRF24/nRF24.c ****     nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA
 756:libs/nRF24/nRF24.c **** 
 757:libs/nRF24/nRF24.c ****     /* Enable only RX address on Pipe 0 */
 758:libs/nRF24/nRF24.c ****     nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P
 759:libs/nRF24/nRF24.c **** 
 760:libs/nRF24/nRF24.c ****     /* Disable Auto-Retransmission, this also disables Enhanced ShockBurst. */
 761:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK0);
 762:libs/nRF24/nRF24.c **** 
 763:libs/nRF24/nRF24.c ****     /* Set Frquency Channel. Carrier Frequency = 2.4GHz + RF_CH = (2400 + RF_CH) = 2440 MHz. */
 764:libs/nRF24/nRF24.c ****     nRF24_set_RF_CH(40);
 765:libs/nRF24/nRF24.c **** 
 766:libs/nRF24/nRF24.c ****     /* Set 'Continuous Carrier Transmit', RF Data Rate, and RF TX Power */
 767:libs/nRF24/nRF24.c ****     nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_HI
 768:libs/nRF24/nRF24.c **** 
 769:libs/nRF24/nRF24.c **** 		/* Set receive payload width = 32. */
 770:libs/nRF24/nRF24.c **** 		nRF24_set_RX_PW_P0(32);
 771:libs/nRF24/nRF24.c ****   
 772:libs/nRF24/nRF24.c ****     /* Set IRQ Masks, CRC, Power-Up and select RX mode. */
 773:libs/nRF24/nRF24.c ****     nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CR
 774:libs/nRF24/nRF24.c **** 
 775:libs/nRF24/nRF24.c ****     /* CE is set to 1, nRF24 transition from [Standby-I] to active [RX Mode]. */
 776:libs/nRF24/nRF24.c **** 		nRF24_CE_1();
 777:libs/nRF24/nRF24.c **** 		/* nRF24 starts hearing as RX. */
 778:libs/nRF24/nRF24.c **** }
 779:libs/nRF24/nRF24.c **** 
 780:libs/nRF24/nRF24.c **** 
 781:libs/nRF24/nRF24.c **** 
 782:libs/nRF24/nRF24.c **** /**
 783:libs/nRF24/nRF24.c ****   * @TODO Convert an array of hex bytes to string.
 784:libs/nRF24/nRF24.c ****   */
 785:libs/nRF24/nRF24.c **** void print_bytearray(uint8_t num_bytes, uint8_t* byte_array)
 786:libs/nRF24/nRF24.c **** {
 1012              		.loc 1 786 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 8
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016              	.LVL97:
 1017 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1018              	.LCFI20:
 1019              		.cfi_def_cfa_offset 20
 1020              		.cfi_offset 4, -20
 1021              		.cfi_offset 5, -16
 1022              		.cfi_offset 6, -12
 1023              		.cfi_offset 7, -8
 1024              		.cfi_offset 14, -4
 1025 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccRs3XjX.s 			page 33


 1026              	.LCFI21:
 1027              		.cfi_def_cfa_offset 32
 1028 0004 0646     		mov	r6, r0
 1029 0006 0F46     		mov	r7, r1
 1030              	.LVL98:
 1031              	.LBB90:
 787:libs/nRF24/nRF24.c ****   char buf;
 788:libs/nRF24/nRF24.c ****   for (int i = 0; i < num_bytes; ++i)
 1032              		.loc 1 788 0
 1033 0008 0024     		movs	r4, #0
 1034 000a 18E0     		b	.L83
 1035              	.LVL99:
 1036              	.L84:
 789:libs/nRF24/nRF24.c ****   {
 790:libs/nRF24/nRF24.c ****     sprintf(&buf, "%#02x", byte_array[i]);
 1037              		.loc 1 790 0 discriminator 3
 1038 000c 3A5D     		ldrb	r2, [r7, r4]	@ zero_extendqisi2
 1039 000e 1149     		ldr	r1, .L86
 1040 0010 0DF10700 		add	r0, sp, #7
 1041 0014 FFF7FEFF 		bl	sprintf
 1042              	.LVL100:
 1043              	.LBB91:
 1044              	.LBB92:
 182:libs/nRF24/nRF24.c **** }
 1045              		.loc 1 182 0 discriminator 3
 1046 0018 0DF10700 		add	r0, sp, #7
 1047              	.LVL101:
 1048 001c FFF7FEFF 		bl	strlen
 1049              	.LVL102:
 1050 0020 0D4D     		ldr	r5, .L86+4
 1051 0022 6423     		movs	r3, #100
 1052 0024 82B2     		uxth	r2, r0
 1053 0026 0DF10701 		add	r1, sp, #7
 1054              	.LVL103:
 1055 002a 2846     		mov	r0, r5
 1056 002c FFF7FEFF 		bl	HAL_UART_Transmit
 1057              	.LVL104:
 1058              	.LBE92:
 1059              	.LBE91:
 1060              	.LBB93:
 1061              	.LBB94:
 1062 0030 6423     		movs	r3, #100
 1063 0032 0122     		movs	r2, #1
 1064 0034 0949     		ldr	r1, .L86+8
 1065 0036 2846     		mov	r0, r5
 1066 0038 FFF7FEFF 		bl	HAL_UART_Transmit
 1067              	.LVL105:
 1068              	.LBE94:
 1069              	.LBE93:
 788:libs/nRF24/nRF24.c ****   {
 1070              		.loc 1 788 0 discriminator 3
 1071 003c 0134     		adds	r4, r4, #1
 1072              	.LVL106:
 1073              	.L83:
 788:libs/nRF24/nRF24.c ****   {
 1074              		.loc 1 788 0 is_stmt 0 discriminator 1
 1075 003e B442     		cmp	r4, r6
ARM GAS  /tmp/ccRs3XjX.s 			page 34


 1076 0040 E4DB     		blt	.L84
 1077              	.LVL107:
 1078              	.LBE90:
 1079              	.LBB95:
 1080              	.LBB96:
 182:libs/nRF24/nRF24.c **** }
 1081              		.loc 1 182 0 is_stmt 1
 1082 0042 6423     		movs	r3, #100
 1083 0044 0122     		movs	r2, #1
 1084 0046 0649     		ldr	r1, .L86+12
 1085 0048 0348     		ldr	r0, .L86+4
 1086 004a FFF7FEFF 		bl	HAL_UART_Transmit
 1087              	.LVL108:
 1088              	.LBE96:
 1089              	.LBE95:
 791:libs/nRF24/nRF24.c **** 		serial_print(&buf);
 792:libs/nRF24/nRF24.c **** 		/* Print delimiter */
 793:libs/nRF24/nRF24.c **** 		serial_print("-");
 794:libs/nRF24/nRF24.c ****   }
 795:libs/nRF24/nRF24.c **** 	serial_print("\n");
 796:libs/nRF24/nRF24.c **** }
 1090              		.loc 1 796 0
 1091 004e 03B0     		add	sp, sp, #12
 1092              	.LCFI22:
 1093              		.cfi_def_cfa_offset 20
 1094              		@ sp needed
 1095 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
 1096              	.LVL109:
 1097              	.L87:
 1098 0052 00BF     		.align	2
 1099              	.L86:
 1100 0054 00000000 		.word	.LC5
 1101 0058 00000000 		.word	huart2
 1102 005c 08000000 		.word	.LC6
 1103 0060 0C000000 		.word	.LC7
 1104              		.cfi_endproc
 1105              	.LFE153:
 1107              		.section	.text.nRF24_print_all_registers,"ax",%progbits
 1108              		.align	1
 1109              		.global	nRF24_print_all_registers
 1110              		.syntax unified
 1111              		.thumb
 1112              		.thumb_func
 1113              		.fpu fpv4-sp-d16
 1115              	nRF24_print_all_registers:
 1116              	.LFB155:
 797:libs/nRF24/nRF24.c **** 
 798:libs/nRF24/nRF24.c **** /**
 799:libs/nRF24/nRF24.c **** 	* @brief  Read received packet from RX FIFO.
 800:libs/nRF24/nRF24.c **** 	* @param  None.
 801:libs/nRF24/nRF24.c **** 	* @retval None.
 802:libs/nRF24/nRF24.c **** 	* @note   This function polls the status register and determined whether there's data received ava
 803:libs/nRF24/nRF24.c **** 	*/
 804:libs/nRF24/nRF24.c **** void nRF24_receive_packet() 
 805:libs/nRF24/nRF24.c **** {
 806:libs/nRF24/nRF24.c **** 	uint8_t RX_WIDTH = 32;
 807:libs/nRF24/nRF24.c ****   uint8_t payload[RX_WIDTH];
ARM GAS  /tmp/ccRs3XjX.s 			page 35


 808:libs/nRF24/nRF24.c ****   char message[64];
 809:libs/nRF24/nRF24.c **** 
 810:libs/nRF24/nRF24.c ****   uint8_t nRF24_status = nRF24_get_STATUS();
 811:libs/nRF24/nRF24.c **** 
 812:libs/nRF24/nRF24.c **** 	/* Check if RX_DR is set: RX Data Ready*/
 813:libs/nRF24/nRF24.c ****   if (nRF24_status & RX_DR_READMASK){
 814:libs/nRF24/nRF24.c **** 		/* Transition from [RX Mode] to [Standby-I] */
 815:libs/nRF24/nRF24.c ****     nRF24_CE_0(); 
 816:libs/nRF24/nRF24.c **** 
 817:libs/nRF24/nRF24.c **** 		/* Read received payload */
 818:libs/nRF24/nRF24.c ****     spi_read_register(R_RX_PAYLOAD, RX_WIDTH, payload); 
 819:libs/nRF24/nRF24.c **** 
 820:libs/nRF24/nRF24.c **** 		#ifdef NRF24_DEBUG
 821:libs/nRF24/nRF24.c **** 		strcpy(message, "> Data received: ");
 822:libs/nRF24/nRF24.c **** 		serial_print(message);
 823:libs/nRF24/nRF24.c **** 		print_bytearray(32, payload);
 824:libs/nRF24/nRF24.c **** 		#endif
 825:libs/nRF24/nRF24.c **** 
 826:libs/nRF24/nRF24.c **** 		/* Clear status register */
 827:libs/nRF24/nRF24.c ****     nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 828:libs/nRF24/nRF24.c ****     nRF24_CE_1();
 829:libs/nRF24/nRF24.c ****   }else {
 830:libs/nRF24/nRF24.c **** 		#ifdef NRF24_DEBUG
 831:libs/nRF24/nRF24.c **** 		strcpy(message, "No data has been received.\n");
 832:libs/nRF24/nRF24.c **** 		serial_print(message);
 833:libs/nRF24/nRF24.c **** 		#endif
 834:libs/nRF24/nRF24.c ****   }
 835:libs/nRF24/nRF24.c **** }
 836:libs/nRF24/nRF24.c **** 
 837:libs/nRF24/nRF24.c **** 
 838:libs/nRF24/nRF24.c **** /**
 839:libs/nRF24/nRF24.c ****   * @brief  Print all registers on nRF24. 
 840:libs/nRF24/nRF24.c ****   * @param  None.
 841:libs/nRF24/nRF24.c ****   * @retval None.
 842:libs/nRF24/nRF24.c ****   */
 843:libs/nRF24/nRF24.c **** void nRF24_print_all_registers()
 844:libs/nRF24/nRF24.c **** {
 1117              		.loc 1 844 0
 1118              		.cfi_startproc
 1119              		@ args = 0, pretend = 0, frame = 40
 1120              		@ frame_needed = 0, uses_anonymous_args = 0
 1121 0000 30B5     		push	{r4, r5, lr}
 1122              	.LCFI23:
 1123              		.cfi_def_cfa_offset 12
 1124              		.cfi_offset 4, -12
 1125              		.cfi_offset 5, -8
 1126              		.cfi_offset 14, -4
 1127 0002 8FB0     		sub	sp, sp, #60
 1128              	.LCFI24:
 1129              		.cfi_def_cfa_offset 72
 845:libs/nRF24/nRF24.c ****     uint8_t read_data;
 846:libs/nRF24/nRF24.c ****     uint8_t read_buf[4];
 847:libs/nRF24/nRF24.c ****     char message[32];
 848:libs/nRF24/nRF24.c ****   
 849:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + CONFIG, 1, &read_data);
 1130              		.loc 1 849 0
 1131 0004 0DF13702 		add	r2, sp, #55
ARM GAS  /tmp/ccRs3XjX.s 			page 36


 1132 0008 0121     		movs	r1, #1
 1133 000a 0020     		movs	r0, #0
 1134 000c FFF7FEFF 		bl	spi_read_register
 1135              	.LVL110:
 850:libs/nRF24/nRF24.c ****     sprintf(message, "CONFIG: <0x%02x>\n", read_data);
 1136              		.loc 1 850 0
 1137 0010 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1138 0014 BD49     		ldr	r1, .L90
 1139 0016 04A8     		add	r0, sp, #16
 1140 0018 FFF7FEFF 		bl	sprintf
 1141              	.LVL111:
 1142              	.LBB127:
 1143              	.LBB128:
 182:libs/nRF24/nRF24.c **** }
 1144              		.loc 1 182 0
 1145 001c 04A8     		add	r0, sp, #16
 1146              	.LVL112:
 1147 001e FFF7FEFF 		bl	strlen
 1148              	.LVL113:
 1149 0022 BB4C     		ldr	r4, .L90+4
 1150 0024 6423     		movs	r3, #100
 1151 0026 82B2     		uxth	r2, r0
 1152 0028 04A9     		add	r1, sp, #16
 1153              	.LVL114:
 1154 002a 2046     		mov	r0, r4
 1155 002c FFF7FEFF 		bl	HAL_UART_Transmit
 1156              	.LVL115:
 1157              	.LBE128:
 1158              	.LBE127:
 851:libs/nRF24/nRF24.c ****     serial_print(message);
 852:libs/nRF24/nRF24.c **** 
 853:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_data);
 1159              		.loc 1 853 0
 1160 0030 0DF13702 		add	r2, sp, #55
 1161 0034 0121     		movs	r1, #1
 1162 0036 0846     		mov	r0, r1
 1163 0038 FFF7FEFF 		bl	spi_read_register
 1164              	.LVL116:
 854:libs/nRF24/nRF24.c ****     sprintf(message, "EN_AA: <0x%02x>\n", read_data);
 1165              		.loc 1 854 0
 1166 003c 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1167 0040 B449     		ldr	r1, .L90+8
 1168 0042 04A8     		add	r0, sp, #16
 1169 0044 FFF7FEFF 		bl	sprintf
 1170              	.LVL117:
 1171              	.LBB129:
 1172              	.LBB130:
 182:libs/nRF24/nRF24.c **** }
 1173              		.loc 1 182 0
 1174 0048 04A8     		add	r0, sp, #16
 1175              	.LVL118:
 1176 004a FFF7FEFF 		bl	strlen
 1177              	.LVL119:
 1178 004e 6423     		movs	r3, #100
 1179 0050 82B2     		uxth	r2, r0
 1180 0052 04A9     		add	r1, sp, #16
 1181              	.LVL120:
ARM GAS  /tmp/ccRs3XjX.s 			page 37


 1182 0054 2046     		mov	r0, r4
 1183 0056 FFF7FEFF 		bl	HAL_UART_Transmit
 1184              	.LVL121:
 1185              	.LBE130:
 1186              	.LBE129:
 855:libs/nRF24/nRF24.c ****     serial_print(message);
 856:libs/nRF24/nRF24.c **** 
 857:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_data);
 1187              		.loc 1 857 0
 1188 005a 0DF13702 		add	r2, sp, #55
 1189 005e 0121     		movs	r1, #1
 1190 0060 0220     		movs	r0, #2
 1191 0062 FFF7FEFF 		bl	spi_read_register
 1192              	.LVL122:
 858:libs/nRF24/nRF24.c ****     sprintf(message, "EN_RXADDR: <0x%02x>\n", read_data);
 1193              		.loc 1 858 0
 1194 0066 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1195 006a AB49     		ldr	r1, .L90+12
 1196 006c 04A8     		add	r0, sp, #16
 1197 006e FFF7FEFF 		bl	sprintf
 1198              	.LVL123:
 1199              	.LBB131:
 1200              	.LBB132:
 182:libs/nRF24/nRF24.c **** }
 1201              		.loc 1 182 0
 1202 0072 04A8     		add	r0, sp, #16
 1203              	.LVL124:
 1204 0074 FFF7FEFF 		bl	strlen
 1205              	.LVL125:
 1206 0078 6423     		movs	r3, #100
 1207 007a 82B2     		uxth	r2, r0
 1208 007c 04A9     		add	r1, sp, #16
 1209              	.LVL126:
 1210 007e 2046     		mov	r0, r4
 1211 0080 FFF7FEFF 		bl	HAL_UART_Transmit
 1212              	.LVL127:
 1213              	.LBE132:
 1214              	.LBE131:
 859:libs/nRF24/nRF24.c ****     serial_print(message);
 860:libs/nRF24/nRF24.c **** 
 861:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_data);
 1215              		.loc 1 861 0
 1216 0084 0DF13702 		add	r2, sp, #55
 1217 0088 0121     		movs	r1, #1
 1218 008a 0320     		movs	r0, #3
 1219 008c FFF7FEFF 		bl	spi_read_register
 1220              	.LVL128:
 862:libs/nRF24/nRF24.c ****     sprintf(message, "SETUP_AW: <0x%02x>\n", read_data);
 1221              		.loc 1 862 0
 1222 0090 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1223 0094 A149     		ldr	r1, .L90+16
 1224 0096 04A8     		add	r0, sp, #16
 1225 0098 FFF7FEFF 		bl	sprintf
 1226              	.LVL129:
 1227              	.LBB133:
 1228              	.LBB134:
 182:libs/nRF24/nRF24.c **** }
ARM GAS  /tmp/ccRs3XjX.s 			page 38


 1229              		.loc 1 182 0
 1230 009c 04A8     		add	r0, sp, #16
 1231              	.LVL130:
 1232 009e FFF7FEFF 		bl	strlen
 1233              	.LVL131:
 1234 00a2 6423     		movs	r3, #100
 1235 00a4 82B2     		uxth	r2, r0
 1236 00a6 04A9     		add	r1, sp, #16
 1237              	.LVL132:
 1238 00a8 2046     		mov	r0, r4
 1239 00aa FFF7FEFF 		bl	HAL_UART_Transmit
 1240              	.LVL133:
 1241              	.LBE134:
 1242              	.LBE133:
 863:libs/nRF24/nRF24.c ****     serial_print(message);
 864:libs/nRF24/nRF24.c **** 
 865:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_data);
 1243              		.loc 1 865 0
 1244 00ae 0DF13702 		add	r2, sp, #55
 1245 00b2 0121     		movs	r1, #1
 1246 00b4 0420     		movs	r0, #4
 1247 00b6 FFF7FEFF 		bl	spi_read_register
 1248              	.LVL134:
 866:libs/nRF24/nRF24.c ****     sprintf(message, "SETUP_RETR: <0x%02x>\n", read_data);
 1249              		.loc 1 866 0
 1250 00ba 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1251 00be 9849     		ldr	r1, .L90+20
 1252 00c0 04A8     		add	r0, sp, #16
 1253 00c2 FFF7FEFF 		bl	sprintf
 1254              	.LVL135:
 1255              	.LBB135:
 1256              	.LBB136:
 182:libs/nRF24/nRF24.c **** }
 1257              		.loc 1 182 0
 1258 00c6 04A8     		add	r0, sp, #16
 1259              	.LVL136:
 1260 00c8 FFF7FEFF 		bl	strlen
 1261              	.LVL137:
 1262 00cc 6423     		movs	r3, #100
 1263 00ce 82B2     		uxth	r2, r0
 1264 00d0 04A9     		add	r1, sp, #16
 1265              	.LVL138:
 1266 00d2 2046     		mov	r0, r4
 1267 00d4 FFF7FEFF 		bl	HAL_UART_Transmit
 1268              	.LVL139:
 1269              	.LBE136:
 1270              	.LBE135:
 867:libs/nRF24/nRF24.c ****     serial_print(message);
 868:libs/nRF24/nRF24.c **** 
 869:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_data);
 1271              		.loc 1 869 0
 1272 00d8 0DF13702 		add	r2, sp, #55
 1273 00dc 0121     		movs	r1, #1
 1274 00de 0520     		movs	r0, #5
 1275 00e0 FFF7FEFF 		bl	spi_read_register
 1276              	.LVL140:
 870:libs/nRF24/nRF24.c ****     sprintf(message, "RF_CH: <0x%02x>\n", read_data);
ARM GAS  /tmp/ccRs3XjX.s 			page 39


 1277              		.loc 1 870 0
 1278 00e4 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1279 00e8 8E49     		ldr	r1, .L90+24
 1280 00ea 04A8     		add	r0, sp, #16
 1281 00ec FFF7FEFF 		bl	sprintf
 1282              	.LVL141:
 1283              	.LBB137:
 1284              	.LBB138:
 182:libs/nRF24/nRF24.c **** }
 1285              		.loc 1 182 0
 1286 00f0 04A8     		add	r0, sp, #16
 1287              	.LVL142:
 1288 00f2 FFF7FEFF 		bl	strlen
 1289              	.LVL143:
 1290 00f6 6423     		movs	r3, #100
 1291 00f8 82B2     		uxth	r2, r0
 1292 00fa 04A9     		add	r1, sp, #16
 1293              	.LVL144:
 1294 00fc 2046     		mov	r0, r4
 1295 00fe FFF7FEFF 		bl	HAL_UART_Transmit
 1296              	.LVL145:
 1297              	.LBE138:
 1298              	.LBE137:
 871:libs/nRF24/nRF24.c ****     serial_print(message);
 872:libs/nRF24/nRF24.c **** 
 873:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_data);
 1299              		.loc 1 873 0
 1300 0102 0DF13702 		add	r2, sp, #55
 1301 0106 0121     		movs	r1, #1
 1302 0108 0620     		movs	r0, #6
 1303 010a FFF7FEFF 		bl	spi_read_register
 1304              	.LVL146:
 874:libs/nRF24/nRF24.c ****     sprintf(message, "RF_SETUP: <0x%02x>\n", read_data);
 1305              		.loc 1 874 0
 1306 010e 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1307 0112 8549     		ldr	r1, .L90+28
 1308 0114 04A8     		add	r0, sp, #16
 1309 0116 FFF7FEFF 		bl	sprintf
 1310              	.LVL147:
 1311              	.LBB139:
 1312              	.LBB140:
 182:libs/nRF24/nRF24.c **** }
 1313              		.loc 1 182 0
 1314 011a 04A8     		add	r0, sp, #16
 1315              	.LVL148:
 1316 011c FFF7FEFF 		bl	strlen
 1317              	.LVL149:
 1318 0120 6423     		movs	r3, #100
 1319 0122 82B2     		uxth	r2, r0
 1320 0124 04A9     		add	r1, sp, #16
 1321              	.LVL150:
 1322 0126 2046     		mov	r0, r4
 1323 0128 FFF7FEFF 		bl	HAL_UART_Transmit
 1324              	.LVL151:
 1325              	.LBE140:
 1326              	.LBE139:
 875:libs/nRF24/nRF24.c ****     serial_print(message);
ARM GAS  /tmp/ccRs3XjX.s 			page 40


 876:libs/nRF24/nRF24.c **** 
 877:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + STATUS, 1, &read_data);
 1327              		.loc 1 877 0
 1328 012c 0DF13702 		add	r2, sp, #55
 1329 0130 0121     		movs	r1, #1
 1330 0132 0720     		movs	r0, #7
 1331 0134 FFF7FEFF 		bl	spi_read_register
 1332              	.LVL152:
 878:libs/nRF24/nRF24.c ****     sprintf(message, "STATUS: <0x%02x>\n", read_data);
 1333              		.loc 1 878 0
 1334 0138 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1335 013c 7B49     		ldr	r1, .L90+32
 1336 013e 04A8     		add	r0, sp, #16
 1337 0140 FFF7FEFF 		bl	sprintf
 1338              	.LVL153:
 1339              	.LBB141:
 1340              	.LBB142:
 182:libs/nRF24/nRF24.c **** }
 1341              		.loc 1 182 0
 1342 0144 04A8     		add	r0, sp, #16
 1343              	.LVL154:
 1344 0146 FFF7FEFF 		bl	strlen
 1345              	.LVL155:
 1346 014a 6423     		movs	r3, #100
 1347 014c 82B2     		uxth	r2, r0
 1348 014e 04A9     		add	r1, sp, #16
 1349              	.LVL156:
 1350 0150 2046     		mov	r0, r4
 1351 0152 FFF7FEFF 		bl	HAL_UART_Transmit
 1352              	.LVL157:
 1353              	.LBE142:
 1354              	.LBE141:
 879:libs/nRF24/nRF24.c ****     serial_print(message);
 880:libs/nRF24/nRF24.c **** 
 881:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, 5, read_buf);
 1355              		.loc 1 881 0
 1356 0156 0CAA     		add	r2, sp, #48
 1357 0158 0521     		movs	r1, #5
 1358 015a 0A20     		movs	r0, #10
 1359 015c FFF7FEFF 		bl	spi_read_register
 1360              	.LVL158:
 882:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P0: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1361              		.loc 1 882 0
 1362 0160 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1363 0164 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1364 0168 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1365 016c 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1366 0170 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1367 0174 0295     		str	r5, [sp, #8]
 1368 0176 0190     		str	r0, [sp, #4]
 1369 0178 0091     		str	r1, [sp]
 1370 017a 6D49     		ldr	r1, .L90+36
 1371 017c 04A8     		add	r0, sp, #16
 1372 017e FFF7FEFF 		bl	sprintf
 1373              	.LVL159:
 1374              	.LBB143:
 1375              	.LBB144:
ARM GAS  /tmp/ccRs3XjX.s 			page 41


 182:libs/nRF24/nRF24.c **** }
 1376              		.loc 1 182 0
 1377 0182 04A8     		add	r0, sp, #16
 1378              	.LVL160:
 1379 0184 FFF7FEFF 		bl	strlen
 1380              	.LVL161:
 1381 0188 6423     		movs	r3, #100
 1382 018a 82B2     		uxth	r2, r0
 1383 018c 04A9     		add	r1, sp, #16
 1384              	.LVL162:
 1385 018e 2046     		mov	r0, r4
 1386 0190 FFF7FEFF 		bl	HAL_UART_Transmit
 1387              	.LVL163:
 1388              	.LBE144:
 1389              	.LBE143:
 883:libs/nRF24/nRF24.c ****     serial_print(message);
 884:libs/nRF24/nRF24.c **** 
 885:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, 5, read_buf);
 1390              		.loc 1 885 0
 1391 0194 0CAA     		add	r2, sp, #48
 1392 0196 0521     		movs	r1, #5
 1393 0198 0B20     		movs	r0, #11
 1394 019a FFF7FEFF 		bl	spi_read_register
 1395              	.LVL164:
 886:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P1: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1396              		.loc 1 886 0
 1397 019e 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1398 01a2 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1399 01a6 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1400 01aa 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1401 01ae 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1402 01b2 0295     		str	r5, [sp, #8]
 1403 01b4 0190     		str	r0, [sp, #4]
 1404 01b6 0091     		str	r1, [sp]
 1405 01b8 5E49     		ldr	r1, .L90+40
 1406 01ba 04A8     		add	r0, sp, #16
 1407 01bc FFF7FEFF 		bl	sprintf
 1408              	.LVL165:
 1409              	.LBB145:
 1410              	.LBB146:
 182:libs/nRF24/nRF24.c **** }
 1411              		.loc 1 182 0
 1412 01c0 04A8     		add	r0, sp, #16
 1413              	.LVL166:
 1414 01c2 FFF7FEFF 		bl	strlen
 1415              	.LVL167:
 1416 01c6 6423     		movs	r3, #100
 1417 01c8 82B2     		uxth	r2, r0
 1418 01ca 04A9     		add	r1, sp, #16
 1419              	.LVL168:
 1420 01cc 2046     		mov	r0, r4
 1421 01ce FFF7FEFF 		bl	HAL_UART_Transmit
 1422              	.LVL169:
 1423              	.LBE146:
 1424              	.LBE145:
 887:libs/nRF24/nRF24.c ****     serial_print(message);
 888:libs/nRF24/nRF24.c **** 
ARM GAS  /tmp/ccRs3XjX.s 			page 42


 889:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, 5, read_buf);
 1425              		.loc 1 889 0
 1426 01d2 0CAA     		add	r2, sp, #48
 1427 01d4 0521     		movs	r1, #5
 1428 01d6 0C20     		movs	r0, #12
 1429 01d8 FFF7FEFF 		bl	spi_read_register
 1430              	.LVL170:
 890:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P2: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1431              		.loc 1 890 0
 1432 01dc 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1433 01e0 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1434 01e4 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1435 01e8 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1436 01ec 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1437 01f0 0295     		str	r5, [sp, #8]
 1438 01f2 0190     		str	r0, [sp, #4]
 1439 01f4 0091     		str	r1, [sp]
 1440 01f6 5049     		ldr	r1, .L90+44
 1441 01f8 04A8     		add	r0, sp, #16
 1442 01fa FFF7FEFF 		bl	sprintf
 1443              	.LVL171:
 1444              	.LBB147:
 1445              	.LBB148:
 182:libs/nRF24/nRF24.c **** }
 1446              		.loc 1 182 0
 1447 01fe 04A8     		add	r0, sp, #16
 1448              	.LVL172:
 1449 0200 FFF7FEFF 		bl	strlen
 1450              	.LVL173:
 1451 0204 6423     		movs	r3, #100
 1452 0206 82B2     		uxth	r2, r0
 1453 0208 04A9     		add	r1, sp, #16
 1454              	.LVL174:
 1455 020a 2046     		mov	r0, r4
 1456 020c FFF7FEFF 		bl	HAL_UART_Transmit
 1457              	.LVL175:
 1458              	.LBE148:
 1459              	.LBE147:
 891:libs/nRF24/nRF24.c ****     serial_print(message);
 892:libs/nRF24/nRF24.c **** 
 893:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, 5, read_buf);
 1460              		.loc 1 893 0
 1461 0210 0CAA     		add	r2, sp, #48
 1462 0212 0521     		movs	r1, #5
 1463 0214 0D20     		movs	r0, #13
 1464 0216 FFF7FEFF 		bl	spi_read_register
 1465              	.LVL176:
 894:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P3: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1466              		.loc 1 894 0
 1467 021a 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1468 021e 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1469 0222 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1470 0226 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1471 022a 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1472 022e 0295     		str	r5, [sp, #8]
 1473 0230 0190     		str	r0, [sp, #4]
 1474 0232 0091     		str	r1, [sp]
ARM GAS  /tmp/ccRs3XjX.s 			page 43


 1475 0234 4149     		ldr	r1, .L90+48
 1476 0236 04A8     		add	r0, sp, #16
 1477 0238 FFF7FEFF 		bl	sprintf
 1478              	.LVL177:
 1479              	.LBB149:
 1480              	.LBB150:
 182:libs/nRF24/nRF24.c **** }
 1481              		.loc 1 182 0
 1482 023c 04A8     		add	r0, sp, #16
 1483              	.LVL178:
 1484 023e FFF7FEFF 		bl	strlen
 1485              	.LVL179:
 1486 0242 6423     		movs	r3, #100
 1487 0244 82B2     		uxth	r2, r0
 1488 0246 04A9     		add	r1, sp, #16
 1489              	.LVL180:
 1490 0248 2046     		mov	r0, r4
 1491 024a FFF7FEFF 		bl	HAL_UART_Transmit
 1492              	.LVL181:
 1493              	.LBE150:
 1494              	.LBE149:
 895:libs/nRF24/nRF24.c ****     serial_print(message);
 896:libs/nRF24/nRF24.c **** 
 897:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, 5, read_buf);
 1495              		.loc 1 897 0
 1496 024e 0CAA     		add	r2, sp, #48
 1497 0250 0521     		movs	r1, #5
 1498 0252 0E20     		movs	r0, #14
 1499 0254 FFF7FEFF 		bl	spi_read_register
 1500              	.LVL182:
 898:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P4: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1501              		.loc 1 898 0
 1502 0258 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1503 025c 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1504 0260 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1505 0264 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1506 0268 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1507 026c 0295     		str	r5, [sp, #8]
 1508 026e 0190     		str	r0, [sp, #4]
 1509 0270 0091     		str	r1, [sp]
 1510 0272 3349     		ldr	r1, .L90+52
 1511 0274 04A8     		add	r0, sp, #16
 1512 0276 FFF7FEFF 		bl	sprintf
 1513              	.LVL183:
 1514              	.LBB151:
 1515              	.LBB152:
 182:libs/nRF24/nRF24.c **** }
 1516              		.loc 1 182 0
 1517 027a 04A8     		add	r0, sp, #16
 1518              	.LVL184:
 1519 027c FFF7FEFF 		bl	strlen
 1520              	.LVL185:
 1521 0280 6423     		movs	r3, #100
 1522 0282 82B2     		uxth	r2, r0
 1523 0284 04A9     		add	r1, sp, #16
 1524              	.LVL186:
 1525 0286 2046     		mov	r0, r4
ARM GAS  /tmp/ccRs3XjX.s 			page 44


 1526 0288 FFF7FEFF 		bl	HAL_UART_Transmit
 1527              	.LVL187:
 1528              	.LBE152:
 1529              	.LBE151:
 899:libs/nRF24/nRF24.c ****     serial_print(message);
 900:libs/nRF24/nRF24.c **** 
 901:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_PW_P5, 5, read_buf);
 1530              		.loc 1 901 0
 1531 028c 0CAA     		add	r2, sp, #48
 1532 028e 0521     		movs	r1, #5
 1533 0290 1620     		movs	r0, #22
 1534 0292 FFF7FEFF 		bl	spi_read_register
 1535              	.LVL188:
 902:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P5: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1536              		.loc 1 902 0
 1537 0296 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1538 029a 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1539 029e 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1540 02a2 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1541 02a6 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1542 02aa 0295     		str	r5, [sp, #8]
 1543 02ac 0190     		str	r0, [sp, #4]
 1544 02ae 0091     		str	r1, [sp]
 1545 02b0 2449     		ldr	r1, .L90+56
 1546 02b2 04A8     		add	r0, sp, #16
 1547 02b4 FFF7FEFF 		bl	sprintf
 1548              	.LVL189:
 1549              	.LBB153:
 1550              	.LBB154:
 182:libs/nRF24/nRF24.c **** }
 1551              		.loc 1 182 0
 1552 02b8 04A8     		add	r0, sp, #16
 1553              	.LVL190:
 1554 02ba FFF7FEFF 		bl	strlen
 1555              	.LVL191:
 1556 02be 6423     		movs	r3, #100
 1557 02c0 82B2     		uxth	r2, r0
 1558 02c2 04A9     		add	r1, sp, #16
 1559              	.LVL192:
 1560 02c4 2046     		mov	r0, r4
 1561 02c6 FFF7FEFF 		bl	HAL_UART_Transmit
 1562              	.LVL193:
 1563              	.LBE154:
 1564              	.LBE153:
 903:libs/nRF24/nRF24.c ****     serial_print(message);
 904:libs/nRF24/nRF24.c **** 
 905:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + TX_ADDR, 5, read_buf);
 1565              		.loc 1 905 0
 1566 02ca 0CAA     		add	r2, sp, #48
 1567 02cc 0521     		movs	r1, #5
 1568 02ce 1020     		movs	r0, #16
 1569 02d0 FFF7FEFF 		bl	spi_read_register
 1570              	.LVL194:
 906:libs/nRF24/nRF24.c ****     sprintf(message, "TX_ADDR: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_b
 1571              		.loc 1 906 0
 1572 02d4 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1573 02d8 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
ARM GAS  /tmp/ccRs3XjX.s 			page 45


 1574 02dc 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1575 02e0 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1576 02e4 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1577 02e8 0295     		str	r5, [sp, #8]
 1578 02ea 0190     		str	r0, [sp, #4]
 1579 02ec 0091     		str	r1, [sp]
 1580 02ee 1649     		ldr	r1, .L90+60
 1581 02f0 04A8     		add	r0, sp, #16
 1582 02f2 FFF7FEFF 		bl	sprintf
 1583              	.LVL195:
 1584              	.LBB155:
 1585              	.LBB156:
 182:libs/nRF24/nRF24.c **** }
 1586              		.loc 1 182 0
 1587 02f6 04A8     		add	r0, sp, #16
 1588              	.LVL196:
 1589 02f8 FFF7FEFF 		bl	strlen
 1590              	.LVL197:
 1591 02fc 6423     		movs	r3, #100
 1592 02fe 82B2     		uxth	r2, r0
 1593 0300 04A9     		add	r1, sp, #16
 1594              	.LVL198:
 1595 0302 2046     		mov	r0, r4
 1596 0304 FFF7FEFF 		bl	HAL_UART_Transmit
 1597              	.LVL199:
 1598              	.LBE156:
 1599              	.LBE155:
 907:libs/nRF24/nRF24.c ****     serial_print(message);
 908:libs/nRF24/nRF24.c **** 
 909:libs/nRF24/nRF24.c **** }
 1600              		.loc 1 909 0
 1601 0308 0FB0     		add	sp, sp, #60
 1602              	.LCFI25:
 1603              		.cfi_def_cfa_offset 12
 1604              		@ sp needed
 1605 030a 30BD     		pop	{r4, r5, pc}
 1606              	.L91:
 1607              		.align	2
 1608              	.L90:
 1609 030c 00000000 		.word	.LC8
 1610 0310 00000000 		.word	huart2
 1611 0314 14000000 		.word	.LC9
 1612 0318 28000000 		.word	.LC10
 1613 031c 40000000 		.word	.LC11
 1614 0320 54000000 		.word	.LC12
 1615 0324 6C000000 		.word	.LC13
 1616 0328 80000000 		.word	.LC14
 1617 032c 94000000 		.word	.LC15
 1618 0330 A8000000 		.word	.LC16
 1619 0334 D8000000 		.word	.LC17
 1620 0338 08010000 		.word	.LC18
 1621 033c 38010000 		.word	.LC19
 1622 0340 68010000 		.word	.LC20
 1623 0344 98010000 		.word	.LC21
 1624 0348 C8010000 		.word	.LC22
 1625              		.cfi_endproc
 1626              	.LFE155:
ARM GAS  /tmp/ccRs3XjX.s 			page 46


 1628              		.section	.text.nRF24_set_CONFIG,"ax",%progbits
 1629              		.align	1
 1630              		.global	nRF24_set_CONFIG
 1631              		.syntax unified
 1632              		.thumb
 1633              		.thumb_func
 1634              		.fpu fpv4-sp-d16
 1636              	nRF24_set_CONFIG:
 1637              	.LFB156:
 910:libs/nRF24/nRF24.c **** 
 911:libs/nRF24/nRF24.c **** 
 912:libs/nRF24/nRF24.c **** /* Following Function Provides High Level Access to nRF24L01+ registers. --------------------------
 913:libs/nRF24/nRF24.c **** 
 914:libs/nRF24/nRF24.c **** /**
 915:libs/nRF24/nRF24.c ****   * @brief  nRF24 set <CONFIG> register
 916:libs/nRF24/nRF24.c ****   * @param  mask_rx_dr Mask interrupt caused by RX_IDR. [ MASK_RX_DR_MASK1 | MASK_RX_DR_MASK0 | MAS
 917:libs/nRF24/nRF24.c ****   * @param  mask_tx_ds Mask interrupt caused by TX_DS.  [ MASK_TX_DS_MASK1 | MASK_TX_DS_MASK0 | MAS
 918:libs/nRF24/nRF24.c ****   * @param  mask_max_rt Mask interrupt cause by MAX_RT. [ MASK_MAX_RT_MASK1 | MASK_MAX_RT_MASK0 | M
 919:libs/nRF24/nRF24.c ****   * @param  en_crc Enable CRC. [ EN_CRC_MASK1 | EN_CRC_MASK0 | EN_CRC_MASKDEFAULT ]
 920:libs/nRF24/nRF24.c ****   * @param  crco CRC encoding scheme. [ CRCO_MASK1 | CRCO_MASK0 | CRCO_MASKDEFAULT ]
 921:libs/nRF24/nRF24.c ****   * @param  pwr_up Power Up / Down. [ PWR_UP_MASK1 | PWR_UP_MASK0 | PWR_UP_MASKDEFAULT ]
 922:libs/nRF24/nRF24.c ****   * @param  prim_rx RX/TX control. [ PRIM_RX_MASK1 | PRIM_RX_MASK0 | PRIM_RX_MASKDEFAULT ]
 923:libs/nRF24/nRF24.c ****   * @retval None.
 924:libs/nRF24/nRF24.c ****   */
 925:libs/nRF24/nRF24.c **** void nRF24_set_CONFIG(uint8_t mask_rx_dr, uint8_t mask_tx_ds, uint8_t mask_max_rt, uint8_t en_crc, 
 926:libs/nRF24/nRF24.c **** {
 1638              		.loc 1 926 0
 1639              		.cfi_startproc
 1640              		@ args = 12, pretend = 0, frame = 8
 1641              		@ frame_needed = 0, uses_anonymous_args = 0
 1642              	.LVL200:
 1643 0000 00B5     		push	{lr}
 1644              	.LCFI26:
 1645              		.cfi_def_cfa_offset 4
 1646              		.cfi_offset 14, -4
 1647 0002 83B0     		sub	sp, sp, #12
 1648              	.LCFI27:
 1649              		.cfi_def_cfa_offset 16
 927:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
 928:libs/nRF24/nRF24.c ****   writing_byte |= mask_rx_dr | mask_tx_ds | mask_max_rt | en_crc | crco | pwr_up | prim_rx; 
 1650              		.loc 1 928 0
 1651 0004 0143     		orrs	r1, r1, r0
 1652              	.LVL201:
 1653 0006 1143     		orrs	r1, r1, r2
 1654 0008 1943     		orrs	r1, r1, r3
 1655 000a 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 1656              	.LVL202:
 1657 000e 1943     		orrs	r1, r1, r3
 1658 0010 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 1659 0014 0B43     		orrs	r3, r3, r1
 1660 0016 9DF81810 		ldrb	r1, [sp, #24]	@ zero_extendqisi2
 1661 001a 1943     		orrs	r1, r1, r3
 1662 001c 02AA     		add	r2, sp, #8
 1663              	.LVL203:
 1664 001e 02F8011D 		strb	r1, [r2, #-1]!
 929:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);
 1665              		.loc 1 929 0
ARM GAS  /tmp/ccRs3XjX.s 			page 47


 1666 0022 0121     		movs	r1, #1
 1667 0024 2020     		movs	r0, #32
 1668              	.LVL204:
 1669 0026 FFF7FEFF 		bl	nRF24_verified_write_register
 1670              	.LVL205:
 930:libs/nRF24/nRF24.c **** }
 1671              		.loc 1 930 0
 1672 002a 03B0     		add	sp, sp, #12
 1673              	.LCFI28:
 1674              		.cfi_def_cfa_offset 4
 1675              		@ sp needed
 1676 002c 5DF804FB 		ldr	pc, [sp], #4
 1677              		.cfi_endproc
 1678              	.LFE156:
 1680              		.section	.text.nRF24_get_CONFIG,"ax",%progbits
 1681              		.align	1
 1682              		.global	nRF24_get_CONFIG
 1683              		.syntax unified
 1684              		.thumb
 1685              		.thumb_func
 1686              		.fpu fpv4-sp-d16
 1688              	nRF24_get_CONFIG:
 1689              	.LFB157:
 931:libs/nRF24/nRF24.c **** 
 932:libs/nRF24/nRF24.c **** 
 933:libs/nRF24/nRF24.c **** /**
 934:libs/nRF24/nRF24.c ****   * @brief      Read <CONFIG> register from nRF24L01+.
 935:libs/nRF24/nRF24.c ****   * @param      None.
 936:libs/nRF24/nRF24.c ****   * @retval     <CONFIG> register value.
 937:libs/nRF24/nRF24.c ****   */
 938:libs/nRF24/nRF24.c **** uint8_t nRF24_get_CONFIG() 
 939:libs/nRF24/nRF24.c **** {
 1690              		.loc 1 939 0
 1691              		.cfi_startproc
 1692              		@ args = 0, pretend = 0, frame = 8
 1693              		@ frame_needed = 0, uses_anonymous_args = 0
 1694 0000 00B5     		push	{lr}
 1695              	.LCFI29:
 1696              		.cfi_def_cfa_offset 4
 1697              		.cfi_offset 14, -4
 1698 0002 83B0     		sub	sp, sp, #12
 1699              	.LCFI30:
 1700              		.cfi_def_cfa_offset 16
 940:libs/nRF24/nRF24.c ****   uint8_t config_reg;
 941:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + CONFIG, 1, &config_reg);
 1701              		.loc 1 941 0
 1702 0004 0DF10702 		add	r2, sp, #7
 1703 0008 0121     		movs	r1, #1
 1704 000a 0020     		movs	r0, #0
 1705 000c FFF7FEFF 		bl	spi_read_register
 1706              	.LVL206:
 942:libs/nRF24/nRF24.c ****   return config_reg;
 943:libs/nRF24/nRF24.c **** }
 1707              		.loc 1 943 0
 1708 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1709 0014 03B0     		add	sp, sp, #12
 1710              	.LCFI31:
ARM GAS  /tmp/ccRs3XjX.s 			page 48


 1711              		.cfi_def_cfa_offset 4
 1712              		@ sp needed
 1713 0016 5DF804FB 		ldr	pc, [sp], #4
 1714              		.cfi_endproc
 1715              	.LFE157:
 1717              		.section	.text.nRF24_set_EN_AA,"ax",%progbits
 1718              		.align	1
 1719              		.global	nRF24_set_EN_AA
 1720              		.syntax unified
 1721              		.thumb
 1722              		.thumb_func
 1723              		.fpu fpv4-sp-d16
 1725              	nRF24_set_EN_AA:
 1726              	.LFB158:
 944:libs/nRF24/nRF24.c **** 
 945:libs/nRF24/nRF24.c **** 
 946:libs/nRF24/nRF24.c **** /**
 947:libs/nRF24/nRF24.c ****   * @brief  nRF24 set <EN_AA> register
 948:libs/nRF24/nRF24.c ****   * @param  enaa_p5 Enable auto acknowledgement in data pipe 5. [ ENAA_P5_MASK1 | ENAA_P5_MASK0 | E
 949:libs/nRF24/nRF24.c ****   * @param  enaa_p4 Enable auto acknowledgement in data pipe 4. [ ENAA_P4_MASK1 | ENAA_P4_MASK0 | E
 950:libs/nRF24/nRF24.c ****   * @param  enaa_p3 Enable auto acknowledgement in data pipe 3. [ ENAA_P3_MASK1 | ENAA_P3_MASK0 | E
 951:libs/nRF24/nRF24.c ****   * @param  enaa_p2 Enable auto acknowledgement in data pipe 2. [ ENAA_P2_MASK1 | ENAA_P2_MASK0 | E
 952:libs/nRF24/nRF24.c ****   * @param  enaa_p1 Enable auto acknowledgement in data pipe 1. [ ENAA_P1_MASK1 | ENAA_P1_MASK0 | E
 953:libs/nRF24/nRF24.c ****   * @param  enaa_p0 Enable auto acknowledgement in data pipe 0. [ ENAA_P0_MASK1 | ENAA_P0_MASK0 | E
 954:libs/nRF24/nRF24.c ****   * @retval None.
 955:libs/nRF24/nRF24.c ****   */
 956:libs/nRF24/nRF24.c **** void nRF24_set_EN_AA(uint8_t enaa_p5, uint8_t enaa_p4, uint8_t enaa_p3, uint8_t enaa_p2, uint8_t en
 957:libs/nRF24/nRF24.c **** {
 1727              		.loc 1 957 0
 1728              		.cfi_startproc
 1729              		@ args = 8, pretend = 0, frame = 8
 1730              		@ frame_needed = 0, uses_anonymous_args = 0
 1731              	.LVL207:
 1732 0000 00B5     		push	{lr}
 1733              	.LCFI32:
 1734              		.cfi_def_cfa_offset 4
 1735              		.cfi_offset 14, -4
 1736 0002 83B0     		sub	sp, sp, #12
 1737              	.LCFI33:
 1738              		.cfi_def_cfa_offset 16
 958:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
 959:libs/nRF24/nRF24.c ****   writing_byte |= enaa_p5 | enaa_p4 | enaa_p3 | enaa_p2 | enaa_p1 | enaa_p0;
 1739              		.loc 1 959 0
 1740 0004 0143     		orrs	r1, r1, r0
 1741              	.LVL208:
 1742 0006 1143     		orrs	r1, r1, r2
 1743 0008 1943     		orrs	r1, r1, r3
 1744 000a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 1745              	.LVL209:
 1746 000e 0A43     		orrs	r2, r2, r1
 1747 0010 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 1748 0014 1143     		orrs	r1, r1, r2
 1749 0016 02AA     		add	r2, sp, #8
 1750 0018 02F8011D 		strb	r1, [r2, #-1]!
 960:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);
 1751              		.loc 1 960 0
 1752 001c 0121     		movs	r1, #1
ARM GAS  /tmp/ccRs3XjX.s 			page 49


 1753 001e 2120     		movs	r0, #33
 1754              	.LVL210:
 1755 0020 FFF7FEFF 		bl	nRF24_verified_write_register
 1756              	.LVL211:
 961:libs/nRF24/nRF24.c **** }
 1757              		.loc 1 961 0
 1758 0024 03B0     		add	sp, sp, #12
 1759              	.LCFI34:
 1760              		.cfi_def_cfa_offset 4
 1761              		@ sp needed
 1762 0026 5DF804FB 		ldr	pc, [sp], #4
 1763              		.cfi_endproc
 1764              	.LFE158:
 1766              		.section	.text.nRF24_get_EN_AA,"ax",%progbits
 1767              		.align	1
 1768              		.global	nRF24_get_EN_AA
 1769              		.syntax unified
 1770              		.thumb
 1771              		.thumb_func
 1772              		.fpu fpv4-sp-d16
 1774              	nRF24_get_EN_AA:
 1775              	.LFB159:
 962:libs/nRF24/nRF24.c **** 
 963:libs/nRF24/nRF24.c **** /**
 964:libs/nRF24/nRF24.c ****   * @brief      Read <EN_AA> register from nRF24L01+.
 965:libs/nRF24/nRF24.c ****   * @param      None.
 966:libs/nRF24/nRF24.c ****   * @retval     <EN_AA> register value.
 967:libs/nRF24/nRF24.c ****   */
 968:libs/nRF24/nRF24.c **** uint8_t nRF24_get_EN_AA() 
 969:libs/nRF24/nRF24.c **** {
 1776              		.loc 1 969 0
 1777              		.cfi_startproc
 1778              		@ args = 0, pretend = 0, frame = 8
 1779              		@ frame_needed = 0, uses_anonymous_args = 0
 1780 0000 00B5     		push	{lr}
 1781              	.LCFI35:
 1782              		.cfi_def_cfa_offset 4
 1783              		.cfi_offset 14, -4
 1784 0002 83B0     		sub	sp, sp, #12
 1785              	.LCFI36:
 1786              		.cfi_def_cfa_offset 16
 970:libs/nRF24/nRF24.c ****   uint8_t read_byte;
 971:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_byte);
 1787              		.loc 1 971 0
 1788 0004 0DF10702 		add	r2, sp, #7
 1789 0008 0121     		movs	r1, #1
 1790 000a 0846     		mov	r0, r1
 1791 000c FFF7FEFF 		bl	spi_read_register
 1792              	.LVL212:
 972:libs/nRF24/nRF24.c ****   return read_byte;
 973:libs/nRF24/nRF24.c **** }
 1793              		.loc 1 973 0
 1794 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1795 0014 03B0     		add	sp, sp, #12
 1796              	.LCFI37:
 1797              		.cfi_def_cfa_offset 4
 1798              		@ sp needed
ARM GAS  /tmp/ccRs3XjX.s 			page 50


 1799 0016 5DF804FB 		ldr	pc, [sp], #4
 1800              		.cfi_endproc
 1801              	.LFE159:
 1803              		.section	.text.nRF24_set_EN_RXADDR,"ax",%progbits
 1804              		.align	1
 1805              		.global	nRF24_set_EN_RXADDR
 1806              		.syntax unified
 1807              		.thumb
 1808              		.thumb_func
 1809              		.fpu fpv4-sp-d16
 1811              	nRF24_set_EN_RXADDR:
 1812              	.LFB160:
 974:libs/nRF24/nRF24.c **** 
 975:libs/nRF24/nRF24.c **** 
 976:libs/nRF24/nRF24.c **** /**
 977:libs/nRF24/nRF24.c ****   * @brief  nRF24 set <EN_RXADDR> register
 978:libs/nRF24/nRF24.c ****   * @param  erx_p5 enable RX in data pipe 5.   [ ERX_P5_MASK1 | ERX_P5_MASK0 | ERX_P5_MASKDEFAULT ]
 979:libs/nRF24/nRF24.c ****   * @param  erx_p4 enable RX in data pipe 4.   [ ERX_P4_MASK1 | ERX_P4_MASK0 | ERX_P4_MASKDEFAULT ]
 980:libs/nRF24/nRF24.c ****   * @param  erx_p3 enable RX in data pipe 3.   [ ERX_P3_MASK1 | ERX_P3_MASK0 | ERX_P3_MASKDEFAULT ]
 981:libs/nRF24/nRF24.c ****   * @param  erx_p2 enable RX in data pipe 2.   [ ERX_P2_MASK1 | ERX_P2_MASK0 | ERX_P2_MASKDEFAULT ]
 982:libs/nRF24/nRF24.c ****   * @param  erx_p1 enable RX in data pipe 1.   [ ERX_P1_MASK1 | ERX_P1_MASK0 | ERX_P1_MASKDEFAULT ]
 983:libs/nRF24/nRF24.c ****   * @param  erx_p0 enable RX in data pipe 0.   [ ERX_P0_MASK1 | ERX_P0_MASK0 | ERX_P0_MASKDEFAULT ]
 984:libs/nRF24/nRF24.c ****   * @retval None.
 985:libs/nRF24/nRF24.c ****   */
 986:libs/nRF24/nRF24.c **** void nRF24_set_EN_RXADDR(uint8_t erx_p5, uint8_t erx_p4, uint8_t erx_p3, uint8_t erx_p2, uint8_t er
 987:libs/nRF24/nRF24.c **** {
 1813              		.loc 1 987 0
 1814              		.cfi_startproc
 1815              		@ args = 8, pretend = 0, frame = 8
 1816              		@ frame_needed = 0, uses_anonymous_args = 0
 1817              	.LVL213:
 1818 0000 00B5     		push	{lr}
 1819              	.LCFI38:
 1820              		.cfi_def_cfa_offset 4
 1821              		.cfi_offset 14, -4
 1822 0002 83B0     		sub	sp, sp, #12
 1823              	.LCFI39:
 1824              		.cfi_def_cfa_offset 16
 988:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
 989:libs/nRF24/nRF24.c ****   writing_byte |= erx_p5 | erx_p4 | erx_p3 | erx_p2 | erx_p1 | erx_p0;
 1825              		.loc 1 989 0
 1826 0004 0143     		orrs	r1, r1, r0
 1827              	.LVL214:
 1828 0006 1143     		orrs	r1, r1, r2
 1829 0008 1943     		orrs	r1, r1, r3
 1830 000a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 1831              	.LVL215:
 1832 000e 0A43     		orrs	r2, r2, r1
 1833 0010 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 1834 0014 1143     		orrs	r1, r1, r2
 1835 0016 02AA     		add	r2, sp, #8
 1836 0018 02F8011D 		strb	r1, [r2, #-1]!
 990:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);
 1837              		.loc 1 990 0
 1838 001c 0121     		movs	r1, #1
 1839 001e 2220     		movs	r0, #34
 1840              	.LVL216:
ARM GAS  /tmp/ccRs3XjX.s 			page 51


 1841 0020 FFF7FEFF 		bl	nRF24_verified_write_register
 1842              	.LVL217:
 991:libs/nRF24/nRF24.c **** }
 1843              		.loc 1 991 0
 1844 0024 03B0     		add	sp, sp, #12
 1845              	.LCFI40:
 1846              		.cfi_def_cfa_offset 4
 1847              		@ sp needed
 1848 0026 5DF804FB 		ldr	pc, [sp], #4
 1849              		.cfi_endproc
 1850              	.LFE160:
 1852              		.section	.text.nRF24_get_EN_RXADDR,"ax",%progbits
 1853              		.align	1
 1854              		.global	nRF24_get_EN_RXADDR
 1855              		.syntax unified
 1856              		.thumb
 1857              		.thumb_func
 1858              		.fpu fpv4-sp-d16
 1860              	nRF24_get_EN_RXADDR:
 1861              	.LFB161:
 992:libs/nRF24/nRF24.c **** 
 993:libs/nRF24/nRF24.c **** 
 994:libs/nRF24/nRF24.c **** /**
 995:libs/nRF24/nRF24.c ****   * @brief      Read <EN_RXADDR> register from nRF24L01+.
 996:libs/nRF24/nRF24.c ****   * @param      None.
 997:libs/nRF24/nRF24.c ****   * @retval     <EN_RXADDR> register value.
 998:libs/nRF24/nRF24.c ****   */
 999:libs/nRF24/nRF24.c **** uint8_t nRF24_get_EN_RXADDR() 
1000:libs/nRF24/nRF24.c **** {
 1862              		.loc 1 1000 0
 1863              		.cfi_startproc
 1864              		@ args = 0, pretend = 0, frame = 8
 1865              		@ frame_needed = 0, uses_anonymous_args = 0
 1866 0000 00B5     		push	{lr}
 1867              	.LCFI41:
 1868              		.cfi_def_cfa_offset 4
 1869              		.cfi_offset 14, -4
 1870 0002 83B0     		sub	sp, sp, #12
 1871              	.LCFI42:
 1872              		.cfi_def_cfa_offset 16
1001:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1002:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_byte);
 1873              		.loc 1 1002 0
 1874 0004 0DF10702 		add	r2, sp, #7
 1875 0008 0121     		movs	r1, #1
 1876 000a 0220     		movs	r0, #2
 1877 000c FFF7FEFF 		bl	spi_read_register
 1878              	.LVL218:
1003:libs/nRF24/nRF24.c ****   return read_byte;
1004:libs/nRF24/nRF24.c **** }
 1879              		.loc 1 1004 0
 1880 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1881 0014 03B0     		add	sp, sp, #12
 1882              	.LCFI43:
 1883              		.cfi_def_cfa_offset 4
 1884              		@ sp needed
 1885 0016 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccRs3XjX.s 			page 52


 1886              		.cfi_endproc
 1887              	.LFE161:
 1889              		.section	.text.nRF24_set_SETUP_AW,"ax",%progbits
 1890              		.align	1
 1891              		.global	nRF24_set_SETUP_AW
 1892              		.syntax unified
 1893              		.thumb
 1894              		.thumb_func
 1895              		.fpu fpv4-sp-d16
 1897              	nRF24_set_SETUP_AW:
 1898              	.LFB162:
1005:libs/nRF24/nRF24.c **** 
1006:libs/nRF24/nRF24.c **** /**
1007:libs/nRF24/nRF24.c ****   * @brief  nRF24 set <AW> register
1008:libs/nRF24/nRF24.c ****   * @param  aw Setup of Address Widths. [ AW_MASK3bytes | AW_MASK4bytes | AW_MASK5bytes | AW_MASKDE
1009:libs/nRF24/nRF24.c ****   * @retval None.
1010:libs/nRF24/nRF24.c ****   */
1011:libs/nRF24/nRF24.c **** void nRF24_set_SETUP_AW(uint8_t aw) 
1012:libs/nRF24/nRF24.c **** {
 1899              		.loc 1 1012 0
 1900              		.cfi_startproc
 1901              		@ args = 0, pretend = 0, frame = 8
 1902              		@ frame_needed = 0, uses_anonymous_args = 0
 1903              	.LVL219:
 1904 0000 00B5     		push	{lr}
 1905              	.LCFI44:
 1906              		.cfi_def_cfa_offset 4
 1907              		.cfi_offset 14, -4
 1908 0002 83B0     		sub	sp, sp, #12
 1909              	.LCFI45:
 1910              		.cfi_def_cfa_offset 16
1013:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1014:libs/nRF24/nRF24.c ****   writing_byte |= aw;
 1911              		.loc 1 1014 0
 1912 0004 02AA     		add	r2, sp, #8
 1913 0006 02F8010D 		strb	r0, [r2, #-1]!
1015:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_AW, 1, &writing_byte);
 1914              		.loc 1 1015 0
 1915 000a 0121     		movs	r1, #1
 1916 000c 2320     		movs	r0, #35
 1917              	.LVL220:
 1918 000e FFF7FEFF 		bl	nRF24_verified_write_register
 1919              	.LVL221:
1016:libs/nRF24/nRF24.c **** }
 1920              		.loc 1 1016 0
 1921 0012 03B0     		add	sp, sp, #12
 1922              	.LCFI46:
 1923              		.cfi_def_cfa_offset 4
 1924              		@ sp needed
 1925 0014 5DF804FB 		ldr	pc, [sp], #4
 1926              		.cfi_endproc
 1927              	.LFE162:
 1929              		.section	.text.nRF24_get_SETUP_AW,"ax",%progbits
 1930              		.align	1
 1931              		.global	nRF24_get_SETUP_AW
 1932              		.syntax unified
 1933              		.thumb
ARM GAS  /tmp/ccRs3XjX.s 			page 53


 1934              		.thumb_func
 1935              		.fpu fpv4-sp-d16
 1937              	nRF24_get_SETUP_AW:
 1938              	.LFB163:
1017:libs/nRF24/nRF24.c **** 
1018:libs/nRF24/nRF24.c **** /**
1019:libs/nRF24/nRF24.c ****   * @brief      Read <SETUP_AW> register from nRF24L01+.
1020:libs/nRF24/nRF24.c ****   * @param      None.
1021:libs/nRF24/nRF24.c ****   * @retval     <SETUP_AW> register value.
1022:libs/nRF24/nRF24.c ****   */
1023:libs/nRF24/nRF24.c **** uint8_t nRF24_get_SETUP_AW() 
1024:libs/nRF24/nRF24.c **** {
 1939              		.loc 1 1024 0
 1940              		.cfi_startproc
 1941              		@ args = 0, pretend = 0, frame = 8
 1942              		@ frame_needed = 0, uses_anonymous_args = 0
 1943 0000 00B5     		push	{lr}
 1944              	.LCFI47:
 1945              		.cfi_def_cfa_offset 4
 1946              		.cfi_offset 14, -4
 1947 0002 83B0     		sub	sp, sp, #12
 1948              	.LCFI48:
 1949              		.cfi_def_cfa_offset 16
1025:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1026:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_byte);
 1950              		.loc 1 1026 0
 1951 0004 0DF10702 		add	r2, sp, #7
 1952 0008 0121     		movs	r1, #1
 1953 000a 0320     		movs	r0, #3
 1954 000c FFF7FEFF 		bl	spi_read_register
 1955              	.LVL222:
1027:libs/nRF24/nRF24.c ****   return read_byte;
1028:libs/nRF24/nRF24.c **** }
 1956              		.loc 1 1028 0
 1957 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1958 0014 03B0     		add	sp, sp, #12
 1959              	.LCFI49:
 1960              		.cfi_def_cfa_offset 4
 1961              		@ sp needed
 1962 0016 5DF804FB 		ldr	pc, [sp], #4
 1963              		.cfi_endproc
 1964              	.LFE163:
 1966              		.section	.text.nRF24_set_SETUP_RETR,"ax",%progbits
 1967              		.align	1
 1968              		.global	nRF24_set_SETUP_RETR
 1969              		.syntax unified
 1970              		.thumb
 1971              		.thumb_func
 1972              		.fpu fpv4-sp-d16
 1974              	nRF24_set_SETUP_RETR:
 1975              	.LFB164:
1029:libs/nRF24/nRF24.c **** 
1030:libs/nRF24/nRF24.c **** /**
1031:libs/nRF24/nRF24.c ****   * @brief  nRF24 configure auto-retransmit delay and auto retransmit count.
1032:libs/nRF24/nRF24.c ****   * @param  ard Auto-Retransmit Delay
1033:libs/nRF24/nRF24.c ****   *   [ ARD_MASK250us  | ARD_MASK500us  | ARD_MASK750us  | ARD_MASK1000us | ARD_MASK1250us        
1034:libs/nRF24/nRF24.c ****   *   | ARD_MASK1500us | ARD_MASK1750us | ARD_MASK2000us | ARD_MASK2250us | ARD_MASK2500us        
ARM GAS  /tmp/ccRs3XjX.s 			page 54


1035:libs/nRF24/nRF24.c ****   *   | ARD_MASK2750us | ARD_MASK3000us | ARD_MASK3250us | ARD_MASK3500us | ARD_MASK3750us        
1036:libs/nRF24/nRF24.c ****   *   | ARD_MASK4000us | ARD_MASKDEFAULT ]
1037:libs/nRF24/nRF24.c ****   * @param  arc Auto-Retransmit Count
1038:libs/nRF24/nRF24.c ****   *    [  ARC_MASK0 | ARC_MASK1 | ARC_MASK2  | ARC_MASK3  | ARC_MASK4  | ARC_MASK5   | ARC_MASK6  |
1039:libs/nRF24/nRF24.c ****   *   | ARC_MASK8 | ARC_MASK9 | ARC_MASK10 | ARC_MASK11 | ARC_MASK12 |  ARC_MASK13 | ARC_MASK14 | A
1040:libs/nRF24/nRF24.c ****   *   | ARC_MASKDEFAULT ]
1041:libs/nRF24/nRF24.c ****   * @retval None.
1042:libs/nRF24/nRF24.c ****   */
1043:libs/nRF24/nRF24.c **** void nRF24_set_SETUP_RETR(uint8_t ard, uint8_t arc)
1044:libs/nRF24/nRF24.c **** {
 1976              		.loc 1 1044 0
 1977              		.cfi_startproc
 1978              		@ args = 0, pretend = 0, frame = 8
 1979              		@ frame_needed = 0, uses_anonymous_args = 0
 1980              	.LVL223:
 1981 0000 00B5     		push	{lr}
 1982              	.LCFI50:
 1983              		.cfi_def_cfa_offset 4
 1984              		.cfi_offset 14, -4
 1985 0002 83B0     		sub	sp, sp, #12
 1986              	.LCFI51:
 1987              		.cfi_def_cfa_offset 16
1045:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1046:libs/nRF24/nRF24.c ****   writing_byte |= ard | arc;
 1988              		.loc 1 1046 0
 1989 0004 0143     		orrs	r1, r1, r0
 1990              	.LVL224:
 1991 0006 02AA     		add	r2, sp, #8
 1992 0008 02F8011D 		strb	r1, [r2, #-1]!
1047:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);
 1993              		.loc 1 1047 0
 1994 000c 0121     		movs	r1, #1
 1995 000e 2420     		movs	r0, #36
 1996              	.LVL225:
 1997 0010 FFF7FEFF 		bl	nRF24_verified_write_register
 1998              	.LVL226:
1048:libs/nRF24/nRF24.c **** }
 1999              		.loc 1 1048 0
 2000 0014 03B0     		add	sp, sp, #12
 2001              	.LCFI52:
 2002              		.cfi_def_cfa_offset 4
 2003              		@ sp needed
 2004 0016 5DF804FB 		ldr	pc, [sp], #4
 2005              		.cfi_endproc
 2006              	.LFE164:
 2008              		.section	.text.nRF24_get_SETUP_RETR,"ax",%progbits
 2009              		.align	1
 2010              		.global	nRF24_get_SETUP_RETR
 2011              		.syntax unified
 2012              		.thumb
 2013              		.thumb_func
 2014              		.fpu fpv4-sp-d16
 2016              	nRF24_get_SETUP_RETR:
 2017              	.LFB165:
1049:libs/nRF24/nRF24.c **** 
1050:libs/nRF24/nRF24.c **** /**
1051:libs/nRF24/nRF24.c ****   * @brief      Read <SETUP_RETR> register from nRF24L01+.
ARM GAS  /tmp/ccRs3XjX.s 			page 55


1052:libs/nRF24/nRF24.c ****   * @param      None.
1053:libs/nRF24/nRF24.c ****   * @retval     <SETUP_RETR> register value.
1054:libs/nRF24/nRF24.c ****   */
1055:libs/nRF24/nRF24.c **** uint8_t nRF24_get_SETUP_RETR(uint8_t ARD, uint8_t ARC)
1056:libs/nRF24/nRF24.c **** {
 2018              		.loc 1 1056 0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 8
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 2022              	.LVL227:
 2023 0000 00B5     		push	{lr}
 2024              	.LCFI53:
 2025              		.cfi_def_cfa_offset 4
 2026              		.cfi_offset 14, -4
 2027 0002 83B0     		sub	sp, sp, #12
 2028              	.LCFI54:
 2029              		.cfi_def_cfa_offset 16
1057:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1058:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_byte);
 2030              		.loc 1 1058 0
 2031 0004 0DF10702 		add	r2, sp, #7
 2032 0008 0121     		movs	r1, #1
 2033              	.LVL228:
 2034 000a 0420     		movs	r0, #4
 2035              	.LVL229:
 2036 000c FFF7FEFF 		bl	spi_read_register
 2037              	.LVL230:
1059:libs/nRF24/nRF24.c ****   return read_byte;
1060:libs/nRF24/nRF24.c **** }
 2038              		.loc 1 1060 0
 2039 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2040 0014 03B0     		add	sp, sp, #12
 2041              	.LCFI55:
 2042              		.cfi_def_cfa_offset 4
 2043              		@ sp needed
 2044 0016 5DF804FB 		ldr	pc, [sp], #4
 2045              		.cfi_endproc
 2046              	.LFE165:
 2048              		.section	.text.nRF24_set_RF_CH,"ax",%progbits
 2049              		.align	1
 2050              		.global	nRF24_set_RF_CH
 2051              		.syntax unified
 2052              		.thumb
 2053              		.thumb_func
 2054              		.fpu fpv4-sp-d16
 2056              	nRF24_set_RF_CH:
 2057              	.LFB166:
1061:libs/nRF24/nRF24.c **** 
1062:libs/nRF24/nRF24.c **** 
1063:libs/nRF24/nRF24.c **** 
1064:libs/nRF24/nRF24.c **** /**
1065:libs/nRF24/nRF24.c ****   * @brief  nRF24 sets the frequency channel of nRF24L01+ operates on.
1066:libs/nRF24/nRF24.c ****   * @param  ch Channel. It is basically frequency in MHz. [ RF_CH_MASKDEFAULT ]
1067:libs/nRF24/nRF24.c ****   * @retval None.
1068:libs/nRF24/nRF24.c ****   * @note   frequency = (2400 + ch) MHz
1069:libs/nRF24/nRF24.c ****   */
1070:libs/nRF24/nRF24.c **** void nRF24_set_RF_CH(uint8_t ch)
ARM GAS  /tmp/ccRs3XjX.s 			page 56


1071:libs/nRF24/nRF24.c **** {
 2058              		.loc 1 1071 0
 2059              		.cfi_startproc
 2060              		@ args = 0, pretend = 0, frame = 8
 2061              		@ frame_needed = 0, uses_anonymous_args = 0
 2062              	.LVL231:
 2063 0000 00B5     		push	{lr}
 2064              	.LCFI56:
 2065              		.cfi_def_cfa_offset 4
 2066              		.cfi_offset 14, -4
 2067 0002 83B0     		sub	sp, sp, #12
 2068              	.LCFI57:
 2069              		.cfi_def_cfa_offset 16
1072:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1073:libs/nRF24/nRF24.c ****   writing_byte |= ch;
 2070              		.loc 1 1073 0
 2071 0004 02AA     		add	r2, sp, #8
 2072 0006 02F8010D 		strb	r0, [r2, #-1]!
1074:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RF_CH, 1, &writing_byte);
 2073              		.loc 1 1074 0
 2074 000a 0121     		movs	r1, #1
 2075 000c 2520     		movs	r0, #37
 2076              	.LVL232:
 2077 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2078              	.LVL233:
1075:libs/nRF24/nRF24.c **** }
 2079              		.loc 1 1075 0
 2080 0012 03B0     		add	sp, sp, #12
 2081              	.LCFI58:
 2082              		.cfi_def_cfa_offset 4
 2083              		@ sp needed
 2084 0014 5DF804FB 		ldr	pc, [sp], #4
 2085              		.cfi_endproc
 2086              	.LFE166:
 2088              		.section	.text.nRF24_get_RF_CH,"ax",%progbits
 2089              		.align	1
 2090              		.global	nRF24_get_RF_CH
 2091              		.syntax unified
 2092              		.thumb
 2093              		.thumb_func
 2094              		.fpu fpv4-sp-d16
 2096              	nRF24_get_RF_CH:
 2097              	.LFB167:
1076:libs/nRF24/nRF24.c **** 
1077:libs/nRF24/nRF24.c **** 
1078:libs/nRF24/nRF24.c **** 
1079:libs/nRF24/nRF24.c **** /**
1080:libs/nRF24/nRF24.c ****   * @brief   Read <RF_CH> register from nRF24L01+.
1081:libs/nRF24/nRF24.c ****   * @param   None.
1082:libs/nRF24/nRF24.c ****   * @retval  <RF_CH> register value.
1083:libs/nRF24/nRF24.c ****   */
1084:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RF_CH()
1085:libs/nRF24/nRF24.c **** {
 2098              		.loc 1 1085 0
 2099              		.cfi_startproc
 2100              		@ args = 0, pretend = 0, frame = 8
 2101              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccRs3XjX.s 			page 57


 2102 0000 00B5     		push	{lr}
 2103              	.LCFI59:
 2104              		.cfi_def_cfa_offset 4
 2105              		.cfi_offset 14, -4
 2106 0002 83B0     		sub	sp, sp, #12
 2107              	.LCFI60:
 2108              		.cfi_def_cfa_offset 16
1086:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1087:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_byte);
 2109              		.loc 1 1087 0
 2110 0004 0DF10702 		add	r2, sp, #7
 2111 0008 0121     		movs	r1, #1
 2112 000a 0520     		movs	r0, #5
 2113 000c FFF7FEFF 		bl	spi_read_register
 2114              	.LVL234:
1088:libs/nRF24/nRF24.c ****   return read_byte;
1089:libs/nRF24/nRF24.c **** }
 2115              		.loc 1 1089 0
 2116 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2117 0014 03B0     		add	sp, sp, #12
 2118              	.LCFI61:
 2119              		.cfi_def_cfa_offset 4
 2120              		@ sp needed
 2121 0016 5DF804FB 		ldr	pc, [sp], #4
 2122              		.cfi_endproc
 2123              	.LFE167:
 2125              		.section	.text.nRF24_set_RF_SETUP,"ax",%progbits
 2126              		.align	1
 2127              		.global	nRF24_set_RF_SETUP
 2128              		.syntax unified
 2129              		.thumb
 2130              		.thumb_func
 2131              		.fpu fpv4-sp-d16
 2133              	nRF24_set_RF_SETUP:
 2134              	.LFB168:
1090:libs/nRF24/nRF24.c **** 
1091:libs/nRF24/nRF24.c **** /**
1092:libs/nRF24/nRF24.c ****   * @brief nRF24 RF SETUP register configuration. 
1093:libs/nRF24/nRF24.c ****   * @param cont_wave Enables continuous carrier transmit when high. [ CONT_WAVE_MASK1 | CONT_WAVE_M
1094:libs/nRF24/nRF24.c ****   * @param rf_dr_low Sets RF data rate to 250 kbps. [ RF_DR_LOW_MASK1 | RF_DR_LOW_MASK0 | RF_DR_LOW
1095:libs/nRF24/nRF24.c ****   * @param pll_lock (!) TEST-ONLY SIGNAL for Nordic's internal testing purpose. Forces PLL lock sig
1096:libs/nRF24/nRF24.c ****   * @param rf_dr_high Select between high speed data rates. This bit is don't care if RF_DR_LOW bit
1097:libs/nRF24/nRF24.c ****   *  
1098:libs/nRF24/nRF24.c ****   *    [ RF_DR_HIGH_MASK1 | RF_DR_HIGH_MASK0 | RF_DR_HIGH_MASKDEFAULT ]
1099:libs/nRF24/nRF24.c ****   *
1100:libs/nRF24/nRF24.c ****   * @note Use RF_DR_HIGH_MASKx and RF_DR_LOW_MASKx or you can use the following masks that combines
1101:libs/nRF24/nRF24.c ****   *
1102:libs/nRF24/nRF24.c ****   *     Encoding for RF data rate: 
1103:libs/nRF24/nRF24.c ****   *     {RF_DR_LOW, RF_DR_HIGH}   Data-Rate
1104:libs/nRF24/nRF24.c ****   *          0    ,     0            1   Mbps
1105:libs/nRF24/nRF24.c ****   *          0    ,     1            2   Mbps
1106:libs/nRF24/nRF24.c ****   *          1    ,     0            250 kbps
1107:libs/nRF24/nRF24.c ****   *          1    ,     1            Reserved
1108:libs/nRF24/nRF24.c ****   *  
1109:libs/nRF24/nRF24.c ****   *    [ RF_DR_MASK1Mbps | RF_DR_MASK2Mbps | RF_DR_MASK250kbps ]
1110:libs/nRF24/nRF24.c ****   *
1111:libs/nRF24/nRF24.c ****   * @param rf_pwr RF Output power in TX mode. [ RF_PWR_MASKNEG18dBm | RF_PWR_MASKNEG12dBm | RF_PWR_
ARM GAS  /tmp/ccRs3XjX.s 			page 58


1112:libs/nRF24/nRF24.c ****   *                Power
1113:libs/nRF24/nRF24.c ****   *         11   -18 dBm
1114:libs/nRF24/nRF24.c ****   *         01   -12 dBm
1115:libs/nRF24/nRF24.c ****   *         10    -6 dBm
1116:libs/nRF24/nRF24.c ****   *         11     0 dBm
1117:libs/nRF24/nRF24.c ****   * @retval None.
1118:libs/nRF24/nRF24.c ****   */
1119:libs/nRF24/nRF24.c **** void nRF24_set_RF_SETUP(uint8_t cont_wave, uint8_t rf_dr_low, uint8_t pll_lock, uint8_t rf_dr_high,
1120:libs/nRF24/nRF24.c **** {
 2135              		.loc 1 1120 0
 2136              		.cfi_startproc
 2137              		@ args = 4, pretend = 0, frame = 8
 2138              		@ frame_needed = 0, uses_anonymous_args = 0
 2139              	.LVL235:
 2140 0000 00B5     		push	{lr}
 2141              	.LCFI62:
 2142              		.cfi_def_cfa_offset 4
 2143              		.cfi_offset 14, -4
 2144 0002 83B0     		sub	sp, sp, #12
 2145              	.LCFI63:
 2146              		.cfi_def_cfa_offset 16
1121:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1122:libs/nRF24/nRF24.c ****   writing_byte |= cont_wave | rf_dr_low | pll_lock | rf_dr_high | rf_pwr;
 2147              		.loc 1 1122 0
 2148 0004 0143     		orrs	r1, r1, r0
 2149              	.LVL236:
 2150 0006 1143     		orrs	r1, r1, r2
 2151 0008 1943     		orrs	r1, r1, r3
 2152 000a 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2153              	.LVL237:
 2154 000e 1943     		orrs	r1, r1, r3
 2155 0010 02AA     		add	r2, sp, #8
 2156              	.LVL238:
 2157 0012 02F8011D 		strb	r1, [r2, #-1]!
1123:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 2158              		.loc 1 1123 0
 2159 0016 0121     		movs	r1, #1
 2160 0018 2620     		movs	r0, #38
 2161              	.LVL239:
 2162 001a FFF7FEFF 		bl	nRF24_verified_write_register
 2163              	.LVL240:
1124:libs/nRF24/nRF24.c **** }
 2164              		.loc 1 1124 0
 2165 001e 03B0     		add	sp, sp, #12
 2166              	.LCFI64:
 2167              		.cfi_def_cfa_offset 4
 2168              		@ sp needed
 2169 0020 5DF804FB 		ldr	pc, [sp], #4
 2170              		.cfi_endproc
 2171              	.LFE168:
 2173              		.section	.text.nRF24_get_RF_SETUP,"ax",%progbits
 2174              		.align	1
 2175              		.global	nRF24_get_RF_SETUP
 2176              		.syntax unified
 2177              		.thumb
 2178              		.thumb_func
 2179              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccRs3XjX.s 			page 59


 2181              	nRF24_get_RF_SETUP:
 2182              	.LFB169:
1125:libs/nRF24/nRF24.c **** 
1126:libs/nRF24/nRF24.c **** /**
1127:libs/nRF24/nRF24.c ****   * @brief   Read <RF_SETUP> register from nRF24L01+.
1128:libs/nRF24/nRF24.c ****   * @param   None.
1129:libs/nRF24/nRF24.c ****   * @retval  <RF_SETUP> register value.
1130:libs/nRF24/nRF24.c ****   */
1131:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RF_SETUP()
1132:libs/nRF24/nRF24.c **** {
 2183              		.loc 1 1132 0
 2184              		.cfi_startproc
 2185              		@ args = 0, pretend = 0, frame = 8
 2186              		@ frame_needed = 0, uses_anonymous_args = 0
 2187 0000 00B5     		push	{lr}
 2188              	.LCFI65:
 2189              		.cfi_def_cfa_offset 4
 2190              		.cfi_offset 14, -4
 2191 0002 83B0     		sub	sp, sp, #12
 2192              	.LCFI66:
 2193              		.cfi_def_cfa_offset 16
1133:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1134:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_byte);
 2194              		.loc 1 1134 0
 2195 0004 0DF10702 		add	r2, sp, #7
 2196 0008 0121     		movs	r1, #1
 2197 000a 0620     		movs	r0, #6
 2198 000c FFF7FEFF 		bl	spi_read_register
 2199              	.LVL241:
1135:libs/nRF24/nRF24.c ****   return read_byte;
1136:libs/nRF24/nRF24.c **** }
 2200              		.loc 1 1136 0
 2201 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2202 0014 03B0     		add	sp, sp, #12
 2203              	.LCFI67:
 2204              		.cfi_def_cfa_offset 4
 2205              		@ sp needed
 2206 0016 5DF804FB 		ldr	pc, [sp], #4
 2207              		.cfi_endproc
 2208              	.LFE169:
 2210              		.section	.text.nRF24_clear_STATUS,"ax",%progbits
 2211              		.align	1
 2212              		.global	nRF24_clear_STATUS
 2213              		.syntax unified
 2214              		.thumb
 2215              		.thumb_func
 2216              		.fpu fpv4-sp-d16
 2218              	nRF24_clear_STATUS:
 2219              	.LFB170:
1137:libs/nRF24/nRF24.c **** 
1138:libs/nRF24/nRF24.c **** /**
1139:libs/nRF24/nRF24.c ****   * @brief      Clear flag bits in 'STATUS' register.
1140:libs/nRF24/nRF24.c ****   * @param      rx_dr Data Ready RX FIFO interrupt. Asserted when new data arrives RX FIFO.
1141:libs/nRF24/nRF24.c ****   *               Write 1 to clear bit [ RX_DR_MASK1 ]
1142:libs/nRF24/nRF24.c ****   * @param      tx_ds Data Sent TX FIFO interrupt. Asserted when packet transmitted on TX. 
1143:libs/nRF24/nRF24.c ****   *               If AUTO_ACK is activated, this bit is set high only when ACK is received. Write 1
1144:libs/nRF24/nRF24.c ****   * @param      max_rt Maximum number of TX retransmits interrupt. Write 1 to clear bit. 
ARM GAS  /tmp/ccRs3XjX.s 			page 60


1145:libs/nRF24/nRF24.c ****   *               If MAX_RT is asserted it must be cleared to enable further communication. [ MAX_R
1146:libs/nRF24/nRF24.c ****   * @retval     None.
1147:libs/nRF24/nRF24.c ****   */
1148:libs/nRF24/nRF24.c **** void nRF24_clear_STATUS(uint8_t rx_dr, uint8_t tx_ds, uint8_t max_rt) 
1149:libs/nRF24/nRF24.c **** {
 2220              		.loc 1 1149 0
 2221              		.cfi_startproc
 2222              		@ args = 0, pretend = 0, frame = 8
 2223              		@ frame_needed = 0, uses_anonymous_args = 0
 2224              	.LVL242:
 2225 0000 00B5     		push	{lr}
 2226              	.LCFI68:
 2227              		.cfi_def_cfa_offset 4
 2228              		.cfi_offset 14, -4
 2229 0002 83B0     		sub	sp, sp, #12
 2230              	.LCFI69:
 2231              		.cfi_def_cfa_offset 16
1150:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1151:libs/nRF24/nRF24.c ****   writing_byte |= rx_dr | tx_ds | max_rt;
 2232              		.loc 1 1151 0
 2233 0004 0143     		orrs	r1, r1, r0
 2234              	.LVL243:
 2235 0006 1143     		orrs	r1, r1, r2
 2236 0008 02AA     		add	r2, sp, #8
 2237              	.LVL244:
 2238 000a 02F8011D 		strb	r1, [r2, #-1]!
1152:libs/nRF24/nRF24.c **** 
1153:libs/nRF24/nRF24.c ****   /* Do not use nRF24_verified_write_register() to write to <STATUS> register. Not all bits are wri
1154:libs/nRF24/nRF24.c ****   spi_write_register(W_REGISTER_MASK + STATUS, 1, &writing_byte);
 2239              		.loc 1 1154 0
 2240 000e 0121     		movs	r1, #1
 2241 0010 2720     		movs	r0, #39
 2242              	.LVL245:
 2243 0012 FFF7FEFF 		bl	spi_write_register
 2244              	.LVL246:
1155:libs/nRF24/nRF24.c **** }
 2245              		.loc 1 1155 0
 2246 0016 03B0     		add	sp, sp, #12
 2247              	.LCFI70:
 2248              		.cfi_def_cfa_offset 4
 2249              		@ sp needed
 2250 0018 5DF804FB 		ldr	pc, [sp], #4
 2251              		.cfi_endproc
 2252              	.LFE170:
 2254              		.section	.text.nRF24_tx_self_test,"ax",%progbits
 2255              		.align	1
 2256              		.global	nRF24_tx_self_test
 2257              		.syntax unified
 2258              		.thumb
 2259              		.thumb_func
 2260              		.fpu fpv4-sp-d16
 2262              	nRF24_tx_self_test:
 2263              	.LFB148:
 490:libs/nRF24/nRF24.c ****   char message[256];
 2264              		.loc 1 490 0
 2265              		.cfi_startproc
 2266              		@ Volatile: function does not return.
ARM GAS  /tmp/ccRs3XjX.s 			page 61


 2267              		@ args = 0, pretend = 0, frame = 272
 2268              		@ frame_needed = 0, uses_anonymous_args = 0
 2269 0000 00B5     		push	{lr}
 2270              	.LCFI71:
 2271              		.cfi_def_cfa_offset 4
 2272              		.cfi_offset 14, -4
 2273 0002 C5B0     		sub	sp, sp, #276
 2274              	.LCFI72:
 2275              		.cfi_def_cfa_offset 280
 495:libs/nRF24/nRF24.c ****   serial_print(message);
 2276              		.loc 1 495 0
 2277 0004 04AC     		add	r4, sp, #16
 2278 0006 5A4D     		ldr	r5, .L130
 2279 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2280 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2281 000c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2282 0010 07C4     		stmia	r4!, {r0, r1, r2}
 2283 0012 24F8023B 		strh	r3, [r4], #2	@ movhi
 2284 0016 1B0C     		lsrs	r3, r3, #16
 2285 0018 2370     		strb	r3, [r4]
 496:libs/nRF24/nRF24.c **** 
 2286              		.loc 1 496 0
 2287 001a 04A8     		add	r0, sp, #16
 2288 001c FFF7FEFF 		bl	serial_print
 2289              	.LVL247:
 498:libs/nRF24/nRF24.c ****   serial_print(message);
 2290              		.loc 1 498 0
 2291 0020 5322     		movs	r2, #83
 2292 0022 5449     		ldr	r1, .L130+4
 2293 0024 04A8     		add	r0, sp, #16
 2294 0026 FFF7FEFF 		bl	memcpy
 2295              	.LVL248:
 499:libs/nRF24/nRF24.c ****   #endif
 2296              		.loc 1 499 0
 2297 002a 04A8     		add	r0, sp, #16
 2298 002c FFF7FEFF 		bl	serial_print
 2299              	.LVL249:
 502:libs/nRF24/nRF24.c **** 
 2300              		.loc 1 502 0
 2301 0030 0024     		movs	r4, #0
 2302 0032 8DF80E40 		strb	r4, [sp, #14]
 506:libs/nRF24/nRF24.c **** 
 2303              		.loc 1 506 0
 2304 0036 FFF7FEFF 		bl	nRF24_CE_0
 2305              	.LVL250:
 509:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
 2306              		.loc 1 509 0
 2307 003a 8DF80F40 		strb	r4, [sp, #15]
 510:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
 2308              		.loc 1 510 0
 2309 003e 0DF10F02 		add	r2, sp, #15
 2310 0042 0121     		movs	r1, #1
 2311 0044 2120     		movs	r0, #33
 2312 0046 FFF7FEFF 		bl	nRF24_verified_write_register
 2313              	.LVL251:
 511:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 2314              		.loc 1 511 0
ARM GAS  /tmp/ccRs3XjX.s 			page 62


 2315 004a 0DF10F02 		add	r2, sp, #15
 2316 004e 0121     		movs	r1, #1
 2317 0050 2220     		movs	r0, #34
 2318 0052 FFF7FEFF 		bl	nRF24_verified_write_register
 2319              	.LVL252:
 512:libs/nRF24/nRF24.c **** 
 2320              		.loc 1 512 0
 2321 0056 0DF10F02 		add	r2, sp, #15
 2322 005a 0121     		movs	r1, #1
 2323 005c 2420     		movs	r0, #36
 2324 005e FFF7FEFF 		bl	nRF24_verified_write_register
 2325              	.LVL253:
 514:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
 2326              		.loc 1 514 0
 2327 0062 0E23     		movs	r3, #14
 2328 0064 8DF80F30 		strb	r3, [sp, #15]
 515:libs/nRF24/nRF24.c **** 
 2329              		.loc 1 515 0
 2330 0068 0DF10F02 		add	r2, sp, #15
 2331 006c 0121     		movs	r1, #1
 2332 006e 2020     		movs	r0, #32
 2333 0070 FFF7FEFF 		bl	nRF24_verified_write_register
 2334              	.LVL254:
 518:libs/nRF24/nRF24.c ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 2335              		.loc 1 518 0
 2336 0074 404B     		ldr	r3, .L130+8
 2337 0076 1B68     		ldr	r3, [r3]
 2338 0078 0293     		str	r3, [sp, #8]
 519:libs/nRF24/nRF24.c ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 2339              		.loc 1 519 0
 2340 007a 02AA     		add	r2, sp, #8
 2341 007c 0421     		movs	r1, #4
 2342 007e A020     		movs	r0, #160
 2343 0080 FFF7FEFF 		bl	spi_write_register
 2344              	.LVL255:
 520:libs/nRF24/nRF24.c ****   
 2345              		.loc 1 520 0
 2346 0084 FFF7FEFF 		bl	nRF24_CE_1
 2347              	.LVL256:
 524:libs/nRF24/nRF24.c **** 
 2348              		.loc 1 524 0
 2349 0088 0DF10E02 		add	r2, sp, #14
 2350 008c 0121     		movs	r1, #1
 2351 008e 0720     		movs	r0, #7
 2352 0090 FFF7FEFF 		bl	spi_read_register
 2353              	.LVL257:
 526:libs/nRF24/nRF24.c **** 
 2354              		.loc 1 526 0
 2355 0094 0120     		movs	r0, #1
 2356 0096 FFF7FEFF 		bl	SPI_DELAY
 2357              	.LVL258:
 529:libs/nRF24/nRF24.c **** 
 2358              		.loc 1 529 0
 2359 009a FFF7FEFF 		bl	nRF24_CE_0
 2360              	.LVL259:
 532:libs/nRF24/nRF24.c ****   {
 2361              		.loc 1 532 0
ARM GAS  /tmp/ccRs3XjX.s 			page 63


 2362 009e 9DF80E20 		ldrb	r2, [sp, #14]	@ zero_extendqisi2
 2363 00a2 12F02E0F 		tst	r2, #46
 2364 00a6 08D0     		beq	.L123
 535:libs/nRF24/nRF24.c ****                        <STATUS> has value of 0x2E. \
 2365              		.loc 1 535 0
 2366 00a8 DD22     		movs	r2, #221
 2367 00aa 3449     		ldr	r1, .L130+12
 2368 00ac 04A8     		add	r0, sp, #16
 2369 00ae FFF7FEFF 		bl	memcpy
 2370              	.LVL260:
 539:libs/nRF24/nRF24.c ****     #endif
 2371              		.loc 1 539 0
 2372 00b2 04A8     		add	r0, sp, #16
 2373 00b4 FFF7FEFF 		bl	serial_print
 2374              	.LVL261:
 2375 00b8 22E0     		b	.L127
 2376              	.L123:
 545:libs/nRF24/nRF24.c ****     serial_print(message);
 2377              		.loc 1 545 0
 2378 00ba 3149     		ldr	r1, .L130+16
 2379 00bc 04A8     		add	r0, sp, #16
 2380 00be FFF7FEFF 		bl	sprintf
 2381              	.LVL262:
 546:libs/nRF24/nRF24.c ****     #endif
 2382              		.loc 1 546 0
 2383 00c2 04A8     		add	r0, sp, #16
 2384 00c4 FFF7FEFF 		bl	serial_print
 2385              	.LVL263:
 2386 00c8 1AE0     		b	.L127
 2387              	.L129:
 2388              	.LBB164:
 575:libs/nRF24/nRF24.c ****       serial_print(message);
 2389              		.loc 1 575 0
 2390 00ca 04AC     		add	r4, sp, #16
 2391 00cc 2D4D     		ldr	r5, .L130+20
 2392 00ce 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2393 00d0 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2394 00d2 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2395 00d6 07C4     		stmia	r4!, {r0, r1, r2}
 2396 00d8 24F8023B 		strh	r3, [r4], #2	@ movhi
 2397 00dc 1B0C     		lsrs	r3, r3, #16
 2398 00de 2370     		strb	r3, [r4]
 2399              	.LVL264:
 2400              	.LBB165:
 2401              	.LBB166:
 182:libs/nRF24/nRF24.c **** }
 2402              		.loc 1 182 0
 2403 00e0 04A8     		add	r0, sp, #16
 2404              	.LVL265:
 2405 00e2 FFF7FEFF 		bl	strlen
 2406              	.LVL266:
 2407 00e6 6423     		movs	r3, #100
 2408 00e8 82B2     		uxth	r2, r0
 2409 00ea 04A9     		add	r1, sp, #16
 2410              	.LVL267:
 2411 00ec 2648     		ldr	r0, .L130+24
 2412 00ee FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccRs3XjX.s 			page 64


 2413              	.LVL268:
 2414              	.L126:
 2415              	.LBE166:
 2416              	.LBE165:
 588:libs/nRF24/nRF24.c **** 
 2417              		.loc 1 588 0
 2418 00f2 1022     		movs	r2, #16
 2419 00f4 2021     		movs	r1, #32
 2420 00f6 4020     		movs	r0, #64
 2421 00f8 FFF7FEFF 		bl	nRF24_clear_STATUS
 2422              	.LVL269:
 590:libs/nRF24/nRF24.c ****   }
 2423              		.loc 1 590 0
 2424 00fc FFF7FEFF 		bl	nRF24_CE_0
 2425              	.LVL270:
 2426              	.L127:
 556:libs/nRF24/nRF24.c **** 
 2427              		.loc 1 556 0
 2428 0100 1D4B     		ldr	r3, .L130+8
 2429 0102 1B68     		ldr	r3, [r3]
 2430 0104 0193     		str	r3, [sp, #4]
 558:libs/nRF24/nRF24.c **** 
 2431              		.loc 1 558 0
 2432 0106 01AA     		add	r2, sp, #4
 2433 0108 0421     		movs	r1, #4
 2434 010a A020     		movs	r0, #160
 2435 010c FFF7FEFF 		bl	spi_write_register
 2436              	.LVL271:
 561:libs/nRF24/nRF24.c **** 
 2437              		.loc 1 561 0
 2438 0110 FFF7FEFF 		bl	nRF24_CE_1
 2439              	.LVL272:
 565:libs/nRF24/nRF24.c **** 
 2440              		.loc 1 565 0
 2441 0114 0DF10302 		add	r2, sp, #3
 2442 0118 0121     		movs	r1, #1
 2443 011a 0720     		movs	r0, #7
 2444 011c FFF7FEFF 		bl	spi_read_register
 2445              	.LVL273:
 568:libs/nRF24/nRF24.c ****     serial_print(message);
 2446              		.loc 1 568 0
 2447 0120 9DF80320 		ldrb	r2, [sp, #3]	@ zero_extendqisi2
 2448 0124 1949     		ldr	r1, .L130+28
 2449 0126 04A8     		add	r0, sp, #16
 2450 0128 FFF7FEFF 		bl	sprintf
 2451              	.LVL274:
 2452              	.LBB167:
 2453              	.LBB168:
 182:libs/nRF24/nRF24.c **** }
 2454              		.loc 1 182 0
 2455 012c 04A8     		add	r0, sp, #16
 2456              	.LVL275:
 2457 012e FFF7FEFF 		bl	strlen
 2458              	.LVL276:
 2459 0132 6423     		movs	r3, #100
 2460 0134 82B2     		uxth	r2, r0
 2461 0136 04A9     		add	r1, sp, #16
ARM GAS  /tmp/ccRs3XjX.s 			page 65


 2462              	.LVL277:
 2463 0138 1348     		ldr	r0, .L130+24
 2464 013a FFF7FEFF 		bl	HAL_UART_Transmit
 2465              	.LVL278:
 2466              	.LBE168:
 2467              	.LBE167:
 572:libs/nRF24/nRF24.c ****     {
 2468              		.loc 1 572 0
 2469 013e 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 2470 0142 2E2B     		cmp	r3, #46
 2471 0144 C1D0     		beq	.L129
 582:libs/nRF24/nRF24.c ****       serial_print(message);
 2472              		.loc 1 582 0
 2473 0146 04AC     		add	r4, sp, #16
 2474 0148 114D     		ldr	r5, .L130+32
 2475 014a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2476 014c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2477 014e 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2478 0152 07C4     		stmia	r4!, {r0, r1, r2}
 2479 0154 24F8023B 		strh	r3, [r4], #2	@ movhi
 2480 0158 1B0C     		lsrs	r3, r3, #16
 2481 015a 2370     		strb	r3, [r4]
 2482              	.LVL279:
 2483              	.LBB169:
 2484              	.LBB170:
 182:libs/nRF24/nRF24.c **** }
 2485              		.loc 1 182 0
 2486 015c 04A8     		add	r0, sp, #16
 2487              	.LVL280:
 2488 015e FFF7FEFF 		bl	strlen
 2489              	.LVL281:
 2490 0162 6423     		movs	r3, #100
 2491 0164 82B2     		uxth	r2, r0
 2492 0166 04A9     		add	r1, sp, #16
 2493              	.LVL282:
 2494 0168 0748     		ldr	r0, .L130+24
 2495 016a FFF7FEFF 		bl	HAL_UART_Transmit
 2496              	.LVL283:
 2497 016e C0E7     		b	.L126
 2498              	.L131:
 2499              		.align	2
 2500              	.L130:
 2501 0170 00000000 		.word	.LC23
 2502 0174 20000000 		.word	.LC24
 2503 0178 00000000 		.word	.LANCHOR0
 2504 017c 74000000 		.word	.LC25
 2505 0180 54010000 		.word	.LC26
 2506 0184 D0010000 		.word	.LC28
 2507 0188 00000000 		.word	huart2
 2508 018c B4010000 		.word	.LC27
 2509 0190 F0010000 		.word	.LC29
 2510              	.LBE170:
 2511              	.LBE169:
 2512              	.LBE164:
 2513              		.cfi_endproc
 2514              	.LFE148:
 2516              		.section	.text.nRF24_get_STATUS,"ax",%progbits
ARM GAS  /tmp/ccRs3XjX.s 			page 66


 2517              		.align	1
 2518              		.global	nRF24_get_STATUS
 2519              		.syntax unified
 2520              		.thumb
 2521              		.thumb_func
 2522              		.fpu fpv4-sp-d16
 2524              	nRF24_get_STATUS:
 2525              	.LFB171:
1156:libs/nRF24/nRF24.c **** 
1157:libs/nRF24/nRF24.c **** /**
1158:libs/nRF24/nRF24.c ****   * @brief      Read <STATUS> register from nRF24.
1159:libs/nRF24/nRF24.c ****   * @param      None.
1160:libs/nRF24/nRF24.c ****   * @retval     <STATUS> register value.
1161:libs/nRF24/nRF24.c ****   * @note    Following masks can be used:
1162:libs/nRF24/nRF24.c ****   *   RX_DR_READMASK   
1163:libs/nRF24/nRF24.c ****   *   TX_DS_READMASK   
1164:libs/nRF24/nRF24.c ****   *   MAX_RT_READMASK  
1165:libs/nRF24/nRF24.c ****   *   RX_P_NO_READMASK    
1166:libs/nRF24/nRF24.c ****   *   TX_FULL_READMASK    
1167:libs/nRF24/nRF24.c ****   */
1168:libs/nRF24/nRF24.c **** uint8_t nRF24_get_STATUS(void) 
1169:libs/nRF24/nRF24.c **** {
 2526              		.loc 1 1169 0
 2527              		.cfi_startproc
 2528              		@ args = 0, pretend = 0, frame = 8
 2529              		@ frame_needed = 0, uses_anonymous_args = 0
 2530 0000 00B5     		push	{lr}
 2531              	.LCFI73:
 2532              		.cfi_def_cfa_offset 4
 2533              		.cfi_offset 14, -4
 2534 0002 83B0     		sub	sp, sp, #12
 2535              	.LCFI74:
 2536              		.cfi_def_cfa_offset 16
1170:libs/nRF24/nRF24.c ****   uint8_t status;
1171:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 2537              		.loc 1 1171 0
 2538 0004 0DF10702 		add	r2, sp, #7
 2539 0008 0121     		movs	r1, #1
 2540 000a 0720     		movs	r0, #7
 2541 000c FFF7FEFF 		bl	spi_read_register
 2542              	.LVL284:
1172:libs/nRF24/nRF24.c ****   return status;
1173:libs/nRF24/nRF24.c **** }
 2543              		.loc 1 1173 0
 2544 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2545 0014 03B0     		add	sp, sp, #12
 2546              	.LCFI75:
 2547              		.cfi_def_cfa_offset 4
 2548              		@ sp needed
 2549 0016 5DF804FB 		ldr	pc, [sp], #4
 2550              		.cfi_endproc
 2551              	.LFE171:
 2553              		.section	.text.nRF24_receive_packet,"ax",%progbits
 2554              		.align	1
 2555              		.global	nRF24_receive_packet
 2556              		.syntax unified
 2557              		.thumb
ARM GAS  /tmp/ccRs3XjX.s 			page 67


 2558              		.thumb_func
 2559              		.fpu fpv4-sp-d16
 2561              	nRF24_receive_packet:
 2562              	.LFB154:
 805:libs/nRF24/nRF24.c **** 	uint8_t RX_WIDTH = 32;
 2563              		.loc 1 805 0
 2564              		.cfi_startproc
 2565              		@ args = 0, pretend = 0, frame = 96
 2566              		@ frame_needed = 0, uses_anonymous_args = 0
 2567 0000 30B5     		push	{r4, r5, lr}
 2568              	.LCFI76:
 2569              		.cfi_def_cfa_offset 12
 2570              		.cfi_offset 4, -12
 2571              		.cfi_offset 5, -8
 2572              		.cfi_offset 14, -4
 2573 0002 99B0     		sub	sp, sp, #100
 2574              	.LCFI77:
 2575              		.cfi_def_cfa_offset 112
 2576              	.LVL285:
 810:libs/nRF24/nRF24.c **** 
 2577              		.loc 1 810 0
 2578 0004 FFF7FEFF 		bl	nRF24_get_STATUS
 2579              	.LVL286:
 813:libs/nRF24/nRF24.c **** 		/* Transition from [RX Mode] to [Standby-I] */
 2580              		.loc 1 813 0
 2581 0008 10F0400F 		tst	r0, #64
 2582 000c 12D1     		bne	.L138
 831:libs/nRF24/nRF24.c **** 		serial_print(message);
 2583              		.loc 1 831 0
 2584 000e 08AC     		add	r4, sp, #32
 2585 0010 194D     		ldr	r5, .L139
 2586 0012 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2587              	.LVL287:
 2588 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2589 0016 95E80700 		ldm	r5, {r0, r1, r2}
 2590 001a 84E80700 		stm	r4, {r0, r1, r2}
 2591              	.LVL288:
 2592              	.LBB175:
 2593              	.LBB176:
 182:libs/nRF24/nRF24.c **** }
 2594              		.loc 1 182 0
 2595 001e 08A8     		add	r0, sp, #32
 2596              	.LVL289:
 2597 0020 FFF7FEFF 		bl	strlen
 2598              	.LVL290:
 2599 0024 6423     		movs	r3, #100
 2600 0026 82B2     		uxth	r2, r0
 2601 0028 08A9     		add	r1, sp, #32
 2602              	.LVL291:
 2603 002a 1448     		ldr	r0, .L139+4
 2604 002c FFF7FEFF 		bl	HAL_UART_Transmit
 2605              	.LVL292:
 2606              	.L134:
 2607              	.LBE176:
 2608              	.LBE175:
 835:libs/nRF24/nRF24.c **** 
 2609              		.loc 1 835 0
ARM GAS  /tmp/ccRs3XjX.s 			page 68


 2610 0030 19B0     		add	sp, sp, #100
 2611              	.LCFI78:
 2612              		.cfi_remember_state
 2613              		.cfi_def_cfa_offset 12
 2614              	.LVL293:
 2615              		@ sp needed
 2616 0032 30BD     		pop	{r4, r5, pc}
 2617              	.LVL294:
 2618              	.L138:
 2619              	.LCFI79:
 2620              		.cfi_restore_state
 815:libs/nRF24/nRF24.c **** 
 2621              		.loc 1 815 0
 2622 0034 FFF7FEFF 		bl	nRF24_CE_0
 2623              	.LVL295:
 818:libs/nRF24/nRF24.c **** 
 2624              		.loc 1 818 0
 2625 0038 6A46     		mov	r2, sp
 2626 003a 2021     		movs	r1, #32
 2627 003c 6120     		movs	r0, #97
 2628 003e FFF7FEFF 		bl	spi_read_register
 2629              	.LVL296:
 821:libs/nRF24/nRF24.c **** 		serial_print(message);
 2630              		.loc 1 821 0
 2631 0042 08AC     		add	r4, sp, #32
 2632 0044 0E4D     		ldr	r5, .L139+8
 2633 0046 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2634 0048 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2635 004a 2B68     		ldr	r3, [r5]
 2636 004c 2380     		strh	r3, [r4]	@ movhi
 2637              	.LVL297:
 2638              	.LBB177:
 2639              	.LBB178:
 182:libs/nRF24/nRF24.c **** }
 2640              		.loc 1 182 0
 2641 004e 08A8     		add	r0, sp, #32
 2642              	.LVL298:
 2643 0050 FFF7FEFF 		bl	strlen
 2644              	.LVL299:
 2645 0054 6423     		movs	r3, #100
 2646 0056 82B2     		uxth	r2, r0
 2647 0058 08A9     		add	r1, sp, #32
 2648              	.LVL300:
 2649 005a 0848     		ldr	r0, .L139+4
 2650 005c FFF7FEFF 		bl	HAL_UART_Transmit
 2651              	.LVL301:
 2652              	.LBE178:
 2653              	.LBE177:
 823:libs/nRF24/nRF24.c **** 		#endif
 2654              		.loc 1 823 0
 2655 0060 6946     		mov	r1, sp
 2656 0062 2020     		movs	r0, #32
 2657 0064 FFF7FEFF 		bl	print_bytearray
 2658              	.LVL302:
 827:libs/nRF24/nRF24.c ****     nRF24_CE_1();
 2659              		.loc 1 827 0
 2660 0068 1022     		movs	r2, #16
ARM GAS  /tmp/ccRs3XjX.s 			page 69


 2661 006a 2021     		movs	r1, #32
 2662 006c 4020     		movs	r0, #64
 2663 006e FFF7FEFF 		bl	nRF24_clear_STATUS
 2664              	.LVL303:
 828:libs/nRF24/nRF24.c ****   }else {
 2665              		.loc 1 828 0
 2666 0072 FFF7FEFF 		bl	nRF24_CE_1
 2667              	.LVL304:
 2668 0076 DBE7     		b	.L134
 2669              	.L140:
 2670              		.align	2
 2671              	.L139:
 2672 0078 14000000 		.word	.LC31
 2673 007c 00000000 		.word	huart2
 2674 0080 00000000 		.word	.LC30
 2675              		.cfi_endproc
 2676              	.LFE154:
 2678              		.section	.text.nRF24_get_OBSERVE_TX,"ax",%progbits
 2679              		.align	1
 2680              		.global	nRF24_get_OBSERVE_TX
 2681              		.syntax unified
 2682              		.thumb
 2683              		.thumb_func
 2684              		.fpu fpv4-sp-d16
 2686              	nRF24_get_OBSERVE_TX:
 2687              	.LFB172:
1174:libs/nRF24/nRF24.c **** 
1175:libs/nRF24/nRF24.c **** /**
1176:libs/nRF24/nRF24.c ****   * @brief      Read <OBSERVE_TX> register from nRF24.
1177:libs/nRF24/nRF24.c ****   * @param      None.
1178:libs/nRF24/nRF24.c ****   * @retval     <OBSERVE_TX> register value.
1179:libs/nRF24/nRF24.c ****   */
1180:libs/nRF24/nRF24.c **** uint8_t nRF24_get_OBSERVE_TX()
1181:libs/nRF24/nRF24.c **** {
 2688              		.loc 1 1181 0
 2689              		.cfi_startproc
 2690              		@ args = 0, pretend = 0, frame = 8
 2691              		@ frame_needed = 0, uses_anonymous_args = 0
 2692 0000 00B5     		push	{lr}
 2693              	.LCFI80:
 2694              		.cfi_def_cfa_offset 4
 2695              		.cfi_offset 14, -4
 2696 0002 83B0     		sub	sp, sp, #12
 2697              	.LCFI81:
 2698              		.cfi_def_cfa_offset 16
1182:libs/nRF24/nRF24.c ****   #define PLOS_CNT_READMASK  0b1111 << 4
1183:libs/nRF24/nRF24.c ****   #define ARC_CNT_READMASK   0b1111 << 0
1184:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1185:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + OBSERVE_TX, 1, &read_byte);
 2699              		.loc 1 1185 0
 2700 0004 0DF10702 		add	r2, sp, #7
 2701 0008 0121     		movs	r1, #1
 2702 000a 0820     		movs	r0, #8
 2703 000c FFF7FEFF 		bl	spi_read_register
 2704              	.LVL305:
1186:libs/nRF24/nRF24.c ****   return read_byte;
1187:libs/nRF24/nRF24.c **** }
ARM GAS  /tmp/ccRs3XjX.s 			page 70


 2705              		.loc 1 1187 0
 2706 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2707 0014 03B0     		add	sp, sp, #12
 2708              	.LCFI82:
 2709              		.cfi_def_cfa_offset 4
 2710              		@ sp needed
 2711 0016 5DF804FB 		ldr	pc, [sp], #4
 2712              		.cfi_endproc
 2713              	.LFE172:
 2715              		.section	.text.nRF24_get_RPD,"ax",%progbits
 2716              		.align	1
 2717              		.global	nRF24_get_RPD
 2718              		.syntax unified
 2719              		.thumb
 2720              		.thumb_func
 2721              		.fpu fpv4-sp-d16
 2723              	nRF24_get_RPD:
 2724              	.LFB173:
1188:libs/nRF24/nRF24.c **** 
1189:libs/nRF24/nRF24.c **** /**
1190:libs/nRF24/nRF24.c ****   * @brief      Read <RPD> register from nRF24.
1191:libs/nRF24/nRF24.c ****   * @param      None.
1192:libs/nRF24/nRF24.c ****   * @retval     <RPD> register value.
1193:libs/nRF24/nRF24.c ****   */
1194:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RPD() 
1195:libs/nRF24/nRF24.c **** {
 2725              		.loc 1 1195 0
 2726              		.cfi_startproc
 2727              		@ args = 0, pretend = 0, frame = 8
 2728              		@ frame_needed = 0, uses_anonymous_args = 0
 2729 0000 00B5     		push	{lr}
 2730              	.LCFI83:
 2731              		.cfi_def_cfa_offset 4
 2732              		.cfi_offset 14, -4
 2733 0002 83B0     		sub	sp, sp, #12
 2734              	.LCFI84:
 2735              		.cfi_def_cfa_offset 16
1196:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1197:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RPD, 1, &read_byte);
 2736              		.loc 1 1197 0
 2737 0004 0DF10702 		add	r2, sp, #7
 2738 0008 0121     		movs	r1, #1
 2739 000a 0920     		movs	r0, #9
 2740 000c FFF7FEFF 		bl	spi_read_register
 2741              	.LVL306:
1198:libs/nRF24/nRF24.c ****   return read_byte;
1199:libs/nRF24/nRF24.c **** }
 2742              		.loc 1 1199 0
 2743 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2744 0014 03B0     		add	sp, sp, #12
 2745              	.LCFI85:
 2746              		.cfi_def_cfa_offset 4
 2747              		@ sp needed
 2748 0016 5DF804FB 		ldr	pc, [sp], #4
 2749              		.cfi_endproc
 2750              	.LFE173:
 2752              		.section	.text.nRF24_set_RX_ADDR_P0,"ax",%progbits
ARM GAS  /tmp/ccRs3XjX.s 			page 71


 2753              		.align	1
 2754              		.global	nRF24_set_RX_ADDR_P0
 2755              		.syntax unified
 2756              		.thumb
 2757              		.thumb_func
 2758              		.fpu fpv4-sp-d16
 2760              	nRF24_set_RX_ADDR_P0:
 2761              	.LFB174:
1200:libs/nRF24/nRF24.c **** 
1201:libs/nRF24/nRF24.c **** 
1202:libs/nRF24/nRF24.c **** /**
1203:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 0. Least Significant Byte written first.
1204:libs/nRF24/nRF24.c ****   * @param  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1205:libs/nRF24/nRF24.c ****   * @param  p_rx_addr_p0 Pointer to an array storing receive address for data pipe 0. 
1206:libs/nRF24/nRF24.c ****   *           The array pointed should have a length of either 3, 4, or 5 bytes. 
1207:libs/nRF24/nRF24.c ****   *           The SET_AW register determines the length of the address array. Default length is 5.
1208:libs/nRF24/nRF24.c ****   * @retval None.
1209:libs/nRF24/nRF24.c ****   */
1210:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P0(uint8_t rx_addr_width, uint8_t* p_rx_addr_p0) 
1211:libs/nRF24/nRF24.c **** {
 2762              		.loc 1 1211 0
 2763              		.cfi_startproc
 2764              		@ args = 0, pretend = 0, frame = 0
 2765              		@ frame_needed = 0, uses_anonymous_args = 0
 2766              	.LVL307:
 2767 0000 08B5     		push	{r3, lr}
 2768              	.LCFI86:
 2769              		.cfi_def_cfa_offset 8
 2770              		.cfi_offset 3, -8
 2771              		.cfi_offset 14, -4
1212:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P0, rx_addr_width, p_rx_addr_p0);
 2772              		.loc 1 1212 0
 2773 0002 0A46     		mov	r2, r1
 2774 0004 0146     		mov	r1, r0
 2775              	.LVL308:
 2776 0006 2A20     		movs	r0, #42
 2777              	.LVL309:
 2778 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 2779              	.LVL310:
 2780 000c 08BD     		pop	{r3, pc}
 2781              		.cfi_endproc
 2782              	.LFE174:
 2784              		.section	.text.nRF24_get_RX_ADDR_P0,"ax",%progbits
 2785              		.align	1
 2786              		.global	nRF24_get_RX_ADDR_P0
 2787              		.syntax unified
 2788              		.thumb
 2789              		.thumb_func
 2790              		.fpu fpv4-sp-d16
 2792              	nRF24_get_RX_ADDR_P0:
 2793              	.LFB175:
1213:libs/nRF24/nRF24.c **** }
1214:libs/nRF24/nRF24.c **** 
1215:libs/nRF24/nRF24.c **** /**
1216:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P0> register from nRF24.
1217:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1218:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
ARM GAS  /tmp/ccRs3XjX.s 			page 72


1219:libs/nRF24/nRF24.c ****   * @retval     None.
1220:libs/nRF24/nRF24.c ****   */
1221:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P0(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1222:libs/nRF24/nRF24.c **** {
 2794              		.loc 1 1222 0
 2795              		.cfi_startproc
 2796              		@ args = 0, pretend = 0, frame = 0
 2797              		@ frame_needed = 0, uses_anonymous_args = 0
 2798              	.LVL311:
 2799 0000 08B5     		push	{r3, lr}
 2800              	.LCFI87:
 2801              		.cfi_def_cfa_offset 8
 2802              		.cfi_offset 3, -8
 2803              		.cfi_offset 14, -4
1223:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, rx_addr_width, p_read_buffer);
 2804              		.loc 1 1223 0
 2805 0002 0A46     		mov	r2, r1
 2806 0004 0146     		mov	r1, r0
 2807              	.LVL312:
 2808 0006 0A20     		movs	r0, #10
 2809              	.LVL313:
 2810 0008 FFF7FEFF 		bl	spi_read_register
 2811              	.LVL314:
 2812 000c 08BD     		pop	{r3, pc}
 2813              		.cfi_endproc
 2814              	.LFE175:
 2816              		.section	.text.nRF24_set_RX_ADDR_P1,"ax",%progbits
 2817              		.align	1
 2818              		.global	nRF24_set_RX_ADDR_P1
 2819              		.syntax unified
 2820              		.thumb
 2821              		.thumb_func
 2822              		.fpu fpv4-sp-d16
 2824              	nRF24_set_RX_ADDR_P1:
 2825              	.LFB176:
1224:libs/nRF24/nRF24.c **** }
1225:libs/nRF24/nRF24.c **** 
1226:libs/nRF24/nRF24.c **** /**
1227:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 1. Least Significant Byte written first.
1228:libs/nRF24/nRF24.c ****   * @param  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1229:libs/nRF24/nRF24.c ****   * @param  p_rx_addr_p1 Pointer to an array storing receive address for data pipe 1. 
1230:libs/nRF24/nRF24.c ****   *           The array pointed should have a length of either 3, 4, or 5 bytes. 
1231:libs/nRF24/nRF24.c ****   *           The SET_AW register determines the length of the address array. Default length is 5.
1232:libs/nRF24/nRF24.c ****   * @note   The RX data pipe 0 and pipe 1 and have totally different addresses. 
1233:libs/nRF24/nRF24.c ****   *           However, for RX pipe 2,3,4,5 the [39:8] addresses byte need to be same as RX pipe 1.
1234:libs/nRF24/nRF24.c ****   *           Given an example,
1235:libs/nRF24/nRF24.c ****   *           RX_ADDR_P0 = 0xE7E7E7E7E7
1236:libs/nRF24/nRF24.c ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1237:libs/nRF24/nRF24.c ****   *           RX_ADDR_P2 = 0x--------C3 = 0xC2C2C2C2C3
1238:libs/nRF24/nRF24.c ****   *           RX_ADDR_P3 = 0x--------C4 = 0xC2C2C2C2C4
1239:libs/nRF24/nRF24.c ****   *           RX_ADDR_P4 = 0x--------C5 = 0xC2C2C2C2C5
1240:libs/nRF24/nRF24.c ****   *           RX_ADDR_P5 = 0x--------C6 = 0xC2C2C2C2C6
1241:libs/nRF24/nRF24.c ****   * @retval None.
1242:libs/nRF24/nRF24.c ****   */
1243:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P1(uint8_t rx_addr_width, uint8_t* p_rx_addr_p1) 
1244:libs/nRF24/nRF24.c **** {
 2826              		.loc 1 1244 0
ARM GAS  /tmp/ccRs3XjX.s 			page 73


 2827              		.cfi_startproc
 2828              		@ args = 0, pretend = 0, frame = 0
 2829              		@ frame_needed = 0, uses_anonymous_args = 0
 2830              	.LVL315:
 2831 0000 08B5     		push	{r3, lr}
 2832              	.LCFI88:
 2833              		.cfi_def_cfa_offset 8
 2834              		.cfi_offset 3, -8
 2835              		.cfi_offset 14, -4
1245:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P1, rx_addr_width, p_rx_addr_p1);
 2836              		.loc 1 1245 0
 2837 0002 0A46     		mov	r2, r1
 2838 0004 0146     		mov	r1, r0
 2839              	.LVL316:
 2840 0006 2B20     		movs	r0, #43
 2841              	.LVL317:
 2842 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 2843              	.LVL318:
 2844 000c 08BD     		pop	{r3, pc}
 2845              		.cfi_endproc
 2846              	.LFE176:
 2848              		.section	.text.nRF24_get_RX_ADDR_P1,"ax",%progbits
 2849              		.align	1
 2850              		.global	nRF24_get_RX_ADDR_P1
 2851              		.syntax unified
 2852              		.thumb
 2853              		.thumb_func
 2854              		.fpu fpv4-sp-d16
 2856              	nRF24_get_RX_ADDR_P1:
 2857              	.LFB177:
1246:libs/nRF24/nRF24.c **** }
1247:libs/nRF24/nRF24.c **** 
1248:libs/nRF24/nRF24.c **** 
1249:libs/nRF24/nRF24.c **** /**
1250:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P1> register from nRF24.
1251:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1252:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1253:libs/nRF24/nRF24.c ****   * @retval     None.
1254:libs/nRF24/nRF24.c ****   */
1255:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P1(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1256:libs/nRF24/nRF24.c **** {
 2858              		.loc 1 1256 0
 2859              		.cfi_startproc
 2860              		@ args = 0, pretend = 0, frame = 0
 2861              		@ frame_needed = 0, uses_anonymous_args = 0
 2862              	.LVL319:
 2863 0000 08B5     		push	{r3, lr}
 2864              	.LCFI89:
 2865              		.cfi_def_cfa_offset 8
 2866              		.cfi_offset 3, -8
 2867              		.cfi_offset 14, -4
1257:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, rx_addr_width, p_read_buffer);
 2868              		.loc 1 1257 0
 2869 0002 0A46     		mov	r2, r1
 2870 0004 0146     		mov	r1, r0
 2871              	.LVL320:
 2872 0006 0B20     		movs	r0, #11
ARM GAS  /tmp/ccRs3XjX.s 			page 74


 2873              	.LVL321:
 2874 0008 FFF7FEFF 		bl	spi_read_register
 2875              	.LVL322:
 2876 000c 08BD     		pop	{r3, pc}
 2877              		.cfi_endproc
 2878              	.LFE177:
 2880              		.section	.text.nRF24_set_RX_ADDR_P2,"ax",%progbits
 2881              		.align	1
 2882              		.global	nRF24_set_RX_ADDR_P2
 2883              		.syntax unified
 2884              		.thumb
 2885              		.thumb_func
 2886              		.fpu fpv4-sp-d16
 2888              	nRF24_set_RX_ADDR_P2:
 2889              	.LFB178:
1258:libs/nRF24/nRF24.c **** }
1259:libs/nRF24/nRF24.c **** 
1260:libs/nRF24/nRF24.c **** /**
1261:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 2. 
1262:libs/nRF24/nRF24.c ****   * @param  rx_addr_p2 Byte storing receive address for data pipe 2. 
1263:libs/nRF24/nRF24.c ****   *           rx_addr_p2 overwrite the Least Significant Byte on RX_ADDR_P1
1264:libs/nRF24/nRF24.c ****   *           Given an example,
1265:libs/nRF24/nRF24.c ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1266:libs/nRF24/nRF24.c ****   *           RX_ADDR_P2 = 0x--------C3 = 0xC2C2C2C2C3
1267:libs/nRF24/nRF24.c ****   * @retval None.
1268:libs/nRF24/nRF24.c ****   */
1269:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P2(uint8_t rx_addr_p2) 
1270:libs/nRF24/nRF24.c **** {
 2890              		.loc 1 1270 0
 2891              		.cfi_startproc
 2892              		@ args = 0, pretend = 0, frame = 8
 2893              		@ frame_needed = 0, uses_anonymous_args = 0
 2894              	.LVL323:
 2895 0000 00B5     		push	{lr}
 2896              	.LCFI90:
 2897              		.cfi_def_cfa_offset 4
 2898              		.cfi_offset 14, -4
 2899 0002 83B0     		sub	sp, sp, #12
 2900              	.LCFI91:
 2901              		.cfi_def_cfa_offset 16
1271:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1272:libs/nRF24/nRF24.c ****   writing_byte |= rx_addr_p2;
 2902              		.loc 1 1272 0
 2903 0004 02AA     		add	r2, sp, #8
 2904 0006 02F8010D 		strb	r0, [r2, #-1]!
1273:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P2, 1, &writing_byte);
 2905              		.loc 1 1273 0
 2906 000a 0121     		movs	r1, #1
 2907 000c 2C20     		movs	r0, #44
 2908              	.LVL324:
 2909 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2910              	.LVL325:
1274:libs/nRF24/nRF24.c **** }
 2911              		.loc 1 1274 0
 2912 0012 03B0     		add	sp, sp, #12
 2913              	.LCFI92:
 2914              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccRs3XjX.s 			page 75


 2915              		@ sp needed
 2916 0014 5DF804FB 		ldr	pc, [sp], #4
 2917              		.cfi_endproc
 2918              	.LFE178:
 2920              		.section	.text.nRF24_get_RX_ADDR_P2,"ax",%progbits
 2921              		.align	1
 2922              		.global	nRF24_get_RX_ADDR_P2
 2923              		.syntax unified
 2924              		.thumb
 2925              		.thumb_func
 2926              		.fpu fpv4-sp-d16
 2928              	nRF24_get_RX_ADDR_P2:
 2929              	.LFB179:
1275:libs/nRF24/nRF24.c **** 
1276:libs/nRF24/nRF24.c **** 
1277:libs/nRF24/nRF24.c **** 
1278:libs/nRF24/nRF24.c **** /**
1279:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P2> register from nRF24.
1280:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1281:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1282:libs/nRF24/nRF24.c ****   * @retval     None.
1283:libs/nRF24/nRF24.c ****   */
1284:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P2(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1285:libs/nRF24/nRF24.c **** {
 2930              		.loc 1 1285 0
 2931              		.cfi_startproc
 2932              		@ args = 0, pretend = 0, frame = 0
 2933              		@ frame_needed = 0, uses_anonymous_args = 0
 2934              	.LVL326:
 2935 0000 08B5     		push	{r3, lr}
 2936              	.LCFI93:
 2937              		.cfi_def_cfa_offset 8
 2938              		.cfi_offset 3, -8
 2939              		.cfi_offset 14, -4
1286:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, rx_addr_width, p_read_buffer);
 2940              		.loc 1 1286 0
 2941 0002 0A46     		mov	r2, r1
 2942 0004 0146     		mov	r1, r0
 2943              	.LVL327:
 2944 0006 0C20     		movs	r0, #12
 2945              	.LVL328:
 2946 0008 FFF7FEFF 		bl	spi_read_register
 2947              	.LVL329:
 2948 000c 08BD     		pop	{r3, pc}
 2949              		.cfi_endproc
 2950              	.LFE179:
 2952              		.section	.text.nRF24_set_RX_ADDR_P3,"ax",%progbits
 2953              		.align	1
 2954              		.global	nRF24_set_RX_ADDR_P3
 2955              		.syntax unified
 2956              		.thumb
 2957              		.thumb_func
 2958              		.fpu fpv4-sp-d16
 2960              	nRF24_set_RX_ADDR_P3:
 2961              	.LFB180:
1287:libs/nRF24/nRF24.c **** }
1288:libs/nRF24/nRF24.c **** 
ARM GAS  /tmp/ccRs3XjX.s 			page 76


1289:libs/nRF24/nRF24.c **** 
1290:libs/nRF24/nRF24.c **** /**
1291:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 3. 
1292:libs/nRF24/nRF24.c ****   * @param  rx_addr_p3 Byte storing receive address for data pipe 3. 
1293:libs/nRF24/nRF24.c ****   *           rx_addr_p3 overwrite the Least Significant Byte on RX_ADDR_P1
1294:libs/nRF24/nRF24.c ****   *           Given an example,
1295:libs/nRF24/nRF24.c ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1296:libs/nRF24/nRF24.c ****   *           RX_ADDR_P3 = 0x--------C4 = 0xC2C2C2C2C4
1297:libs/nRF24/nRF24.c ****   * @retval None.
1298:libs/nRF24/nRF24.c ****   */
1299:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P3(uint8_t rx_addr_p3) 
1300:libs/nRF24/nRF24.c **** {
 2962              		.loc 1 1300 0
 2963              		.cfi_startproc
 2964              		@ args = 0, pretend = 0, frame = 8
 2965              		@ frame_needed = 0, uses_anonymous_args = 0
 2966              	.LVL330:
 2967 0000 00B5     		push	{lr}
 2968              	.LCFI94:
 2969              		.cfi_def_cfa_offset 4
 2970              		.cfi_offset 14, -4
 2971 0002 83B0     		sub	sp, sp, #12
 2972              	.LCFI95:
 2973              		.cfi_def_cfa_offset 16
1301:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1302:libs/nRF24/nRF24.c ****   writing_byte |= rx_addr_p3;
 2974              		.loc 1 1302 0
 2975 0004 02AA     		add	r2, sp, #8
 2976 0006 02F8010D 		strb	r0, [r2, #-1]!
1303:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P3, 1, &writing_byte);
 2977              		.loc 1 1303 0
 2978 000a 0121     		movs	r1, #1
 2979 000c 2D20     		movs	r0, #45
 2980              	.LVL331:
 2981 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2982              	.LVL332:
1304:libs/nRF24/nRF24.c **** }
 2983              		.loc 1 1304 0
 2984 0012 03B0     		add	sp, sp, #12
 2985              	.LCFI96:
 2986              		.cfi_def_cfa_offset 4
 2987              		@ sp needed
 2988 0014 5DF804FB 		ldr	pc, [sp], #4
 2989              		.cfi_endproc
 2990              	.LFE180:
 2992              		.section	.text.nRF24_get_RX_ADDR_P3,"ax",%progbits
 2993              		.align	1
 2994              		.global	nRF24_get_RX_ADDR_P3
 2995              		.syntax unified
 2996              		.thumb
 2997              		.thumb_func
 2998              		.fpu fpv4-sp-d16
 3000              	nRF24_get_RX_ADDR_P3:
 3001              	.LFB181:
1305:libs/nRF24/nRF24.c **** 
1306:libs/nRF24/nRF24.c **** /**
1307:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P3> register from nRF24.
ARM GAS  /tmp/ccRs3XjX.s 			page 77


1308:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1309:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1310:libs/nRF24/nRF24.c ****   * @retval     None.
1311:libs/nRF24/nRF24.c ****   */
1312:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P3(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1313:libs/nRF24/nRF24.c **** {
 3002              		.loc 1 1313 0
 3003              		.cfi_startproc
 3004              		@ args = 0, pretend = 0, frame = 0
 3005              		@ frame_needed = 0, uses_anonymous_args = 0
 3006              	.LVL333:
 3007 0000 08B5     		push	{r3, lr}
 3008              	.LCFI97:
 3009              		.cfi_def_cfa_offset 8
 3010              		.cfi_offset 3, -8
 3011              		.cfi_offset 14, -4
1314:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, rx_addr_width, p_read_buffer);
 3012              		.loc 1 1314 0
 3013 0002 0A46     		mov	r2, r1
 3014 0004 0146     		mov	r1, r0
 3015              	.LVL334:
 3016 0006 0D20     		movs	r0, #13
 3017              	.LVL335:
 3018 0008 FFF7FEFF 		bl	spi_read_register
 3019              	.LVL336:
 3020 000c 08BD     		pop	{r3, pc}
 3021              		.cfi_endproc
 3022              	.LFE181:
 3024              		.section	.text.nRF24_set_RX_ADDR_P4,"ax",%progbits
 3025              		.align	1
 3026              		.global	nRF24_set_RX_ADDR_P4
 3027              		.syntax unified
 3028              		.thumb
 3029              		.thumb_func
 3030              		.fpu fpv4-sp-d16
 3032              	nRF24_set_RX_ADDR_P4:
 3033              	.LFB182:
1315:libs/nRF24/nRF24.c **** }
1316:libs/nRF24/nRF24.c **** 
1317:libs/nRF24/nRF24.c **** /**
1318:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 4.
1319:libs/nRF24/nRF24.c ****   * @param  rx_addr_p4 Byte storing receive address for data pipe 4. 
1320:libs/nRF24/nRF24.c ****   *           rx_addr_p4 overwrite the Least Significant Byte on RX_ADDR_P1
1321:libs/nRF24/nRF24.c ****   *           Given an example,
1322:libs/nRF24/nRF24.c ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1323:libs/nRF24/nRF24.c ****   *           RX_ADDR_P4 = 0x--------C5 = 0xC2C2C2C2C5
1324:libs/nRF24/nRF24.c ****   * @retval None.
1325:libs/nRF24/nRF24.c ****   */
1326:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P4(uint8_t rx_addr_p4) 
1327:libs/nRF24/nRF24.c **** {
 3034              		.loc 1 1327 0
 3035              		.cfi_startproc
 3036              		@ args = 0, pretend = 0, frame = 8
 3037              		@ frame_needed = 0, uses_anonymous_args = 0
 3038              	.LVL337:
 3039 0000 00B5     		push	{lr}
 3040              	.LCFI98:
ARM GAS  /tmp/ccRs3XjX.s 			page 78


 3041              		.cfi_def_cfa_offset 4
 3042              		.cfi_offset 14, -4
 3043 0002 83B0     		sub	sp, sp, #12
 3044              	.LCFI99:
 3045              		.cfi_def_cfa_offset 16
1328:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1329:libs/nRF24/nRF24.c ****   writing_byte |= rx_addr_p4;
 3046              		.loc 1 1329 0
 3047 0004 02AA     		add	r2, sp, #8
 3048 0006 02F8010D 		strb	r0, [r2, #-1]!
1330:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P4, 1, &writing_byte);
 3049              		.loc 1 1330 0
 3050 000a 0121     		movs	r1, #1
 3051 000c 2E20     		movs	r0, #46
 3052              	.LVL338:
 3053 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3054              	.LVL339:
1331:libs/nRF24/nRF24.c **** }
 3055              		.loc 1 1331 0
 3056 0012 03B0     		add	sp, sp, #12
 3057              	.LCFI100:
 3058              		.cfi_def_cfa_offset 4
 3059              		@ sp needed
 3060 0014 5DF804FB 		ldr	pc, [sp], #4
 3061              		.cfi_endproc
 3062              	.LFE182:
 3064              		.section	.text.nRF24_get_RX_ADDR_P4,"ax",%progbits
 3065              		.align	1
 3066              		.global	nRF24_get_RX_ADDR_P4
 3067              		.syntax unified
 3068              		.thumb
 3069              		.thumb_func
 3070              		.fpu fpv4-sp-d16
 3072              	nRF24_get_RX_ADDR_P4:
 3073              	.LFB183:
1332:libs/nRF24/nRF24.c **** 
1333:libs/nRF24/nRF24.c **** /**
1334:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P4> register from nRF24.
1335:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1336:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1337:libs/nRF24/nRF24.c ****   * @retval     None.
1338:libs/nRF24/nRF24.c ****   */
1339:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P4(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1340:libs/nRF24/nRF24.c **** {
 3074              		.loc 1 1340 0
 3075              		.cfi_startproc
 3076              		@ args = 0, pretend = 0, frame = 0
 3077              		@ frame_needed = 0, uses_anonymous_args = 0
 3078              	.LVL340:
 3079 0000 08B5     		push	{r3, lr}
 3080              	.LCFI101:
 3081              		.cfi_def_cfa_offset 8
 3082              		.cfi_offset 3, -8
 3083              		.cfi_offset 14, -4
1341:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, rx_addr_width, p_read_buffer);
 3084              		.loc 1 1341 0
 3085 0002 0A46     		mov	r2, r1
ARM GAS  /tmp/ccRs3XjX.s 			page 79


 3086 0004 0146     		mov	r1, r0
 3087              	.LVL341:
 3088 0006 0E20     		movs	r0, #14
 3089              	.LVL342:
 3090 0008 FFF7FEFF 		bl	spi_read_register
 3091              	.LVL343:
 3092 000c 08BD     		pop	{r3, pc}
 3093              		.cfi_endproc
 3094              	.LFE183:
 3096              		.section	.text.nRF24_set_RX_ADDR_P5,"ax",%progbits
 3097              		.align	1
 3098              		.global	nRF24_set_RX_ADDR_P5
 3099              		.syntax unified
 3100              		.thumb
 3101              		.thumb_func
 3102              		.fpu fpv4-sp-d16
 3104              	nRF24_set_RX_ADDR_P5:
 3105              	.LFB184:
1342:libs/nRF24/nRF24.c **** }
1343:libs/nRF24/nRF24.c **** 
1344:libs/nRF24/nRF24.c **** /**
1345:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 5.
1346:libs/nRF24/nRF24.c ****   * @param  rx_addr_p5 Byte storing receive address for data pipe 5. 
1347:libs/nRF24/nRF24.c ****   *           rx_addr_p5 overwrite the Least Significant Byte on RX_ADDR_P1
1348:libs/nRF24/nRF24.c ****   *           Given an example,
1349:libs/nRF24/nRF24.c ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1350:libs/nRF24/nRF24.c ****   *           RX_ADDR_P5 = 0x--------C6 = 0xC2C2C2C2C6
1351:libs/nRF24/nRF24.c ****   * @retval None.
1352:libs/nRF24/nRF24.c ****   */
1353:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P5(uint8_t rx_addr_p5) 
1354:libs/nRF24/nRF24.c **** {
 3106              		.loc 1 1354 0
 3107              		.cfi_startproc
 3108              		@ args = 0, pretend = 0, frame = 8
 3109              		@ frame_needed = 0, uses_anonymous_args = 0
 3110              	.LVL344:
 3111 0000 00B5     		push	{lr}
 3112              	.LCFI102:
 3113              		.cfi_def_cfa_offset 4
 3114              		.cfi_offset 14, -4
 3115 0002 83B0     		sub	sp, sp, #12
 3116              	.LCFI103:
 3117              		.cfi_def_cfa_offset 16
1355:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1356:libs/nRF24/nRF24.c ****   writing_byte |= rx_addr_p5;
 3118              		.loc 1 1356 0
 3119 0004 02AA     		add	r2, sp, #8
 3120 0006 02F8010D 		strb	r0, [r2, #-1]!
1357:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P5, 1, &writing_byte);
 3121              		.loc 1 1357 0
 3122 000a 0121     		movs	r1, #1
 3123 000c 2F20     		movs	r0, #47
 3124              	.LVL345:
 3125 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3126              	.LVL346:
1358:libs/nRF24/nRF24.c **** }
 3127              		.loc 1 1358 0
ARM GAS  /tmp/ccRs3XjX.s 			page 80


 3128 0012 03B0     		add	sp, sp, #12
 3129              	.LCFI104:
 3130              		.cfi_def_cfa_offset 4
 3131              		@ sp needed
 3132 0014 5DF804FB 		ldr	pc, [sp], #4
 3133              		.cfi_endproc
 3134              	.LFE184:
 3136              		.section	.text.nRF24_get_RX_ADDR_P5,"ax",%progbits
 3137              		.align	1
 3138              		.global	nRF24_get_RX_ADDR_P5
 3139              		.syntax unified
 3140              		.thumb
 3141              		.thumb_func
 3142              		.fpu fpv4-sp-d16
 3144              	nRF24_get_RX_ADDR_P5:
 3145              	.LFB185:
1359:libs/nRF24/nRF24.c **** 
1360:libs/nRF24/nRF24.c **** 
1361:libs/nRF24/nRF24.c **** /**
1362:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P5> register from nRF24.
1363:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1364:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1365:libs/nRF24/nRF24.c ****   * @retval     None.
1366:libs/nRF24/nRF24.c ****   */
1367:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P5(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1368:libs/nRF24/nRF24.c **** {
 3146              		.loc 1 1368 0
 3147              		.cfi_startproc
 3148              		@ args = 0, pretend = 0, frame = 0
 3149              		@ frame_needed = 0, uses_anonymous_args = 0
 3150              	.LVL347:
 3151 0000 08B5     		push	{r3, lr}
 3152              	.LCFI105:
 3153              		.cfi_def_cfa_offset 8
 3154              		.cfi_offset 3, -8
 3155              		.cfi_offset 14, -4
1369:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P5, rx_addr_width, p_read_buffer);
 3156              		.loc 1 1369 0
 3157 0002 0A46     		mov	r2, r1
 3158 0004 0146     		mov	r1, r0
 3159              	.LVL348:
 3160 0006 0F20     		movs	r0, #15
 3161              	.LVL349:
 3162 0008 FFF7FEFF 		bl	spi_read_register
 3163              	.LVL350:
 3164 000c 08BD     		pop	{r3, pc}
 3165              		.cfi_endproc
 3166              	.LFE185:
 3168              		.section	.text.nRF24_set_TX_ADDR,"ax",%progbits
 3169              		.align	1
 3170              		.global	nRF24_set_TX_ADDR
 3171              		.syntax unified
 3172              		.thumb
 3173              		.thumb_func
 3174              		.fpu fpv4-sp-d16
 3176              	nRF24_set_TX_ADDR:
 3177              	.LFB186:
ARM GAS  /tmp/ccRs3XjX.s 			page 81


1370:libs/nRF24/nRF24.c **** }
1371:libs/nRF24/nRF24.c **** 
1372:libs/nRF24/nRF24.c **** /**
1373:libs/nRF24/nRF24.c ****   * @brief  Set TX (transmit) address. Least Significant Byte written first.
1374:libs/nRF24/nRF24.c ****   * @param  tx_addr_width The width of TX address. Needs to be consistent with SET_AW.
1375:libs/nRF24/nRF24.c ****   * @param  p_tx_addr Pointer to an array storing the transmit address.
1376:libs/nRF24/nRF24.c ****   * @retval None.
1377:libs/nRF24/nRF24.c ****   */
1378:libs/nRF24/nRF24.c **** void nRF24_set_TX_ADDR(uint8_t tx_addr_width, uint8_t* p_tx_addr) 
1379:libs/nRF24/nRF24.c **** {
 3178              		.loc 1 1379 0
 3179              		.cfi_startproc
 3180              		@ args = 0, pretend = 0, frame = 0
 3181              		@ frame_needed = 0, uses_anonymous_args = 0
 3182              	.LVL351:
 3183 0000 08B5     		push	{r3, lr}
 3184              	.LCFI106:
 3185              		.cfi_def_cfa_offset 8
 3186              		.cfi_offset 3, -8
 3187              		.cfi_offset 14, -4
1380:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + TX_ADDR, tx_addr_width, p_tx_addr);
 3188              		.loc 1 1380 0
 3189 0002 0A46     		mov	r2, r1
 3190 0004 0146     		mov	r1, r0
 3191              	.LVL352:
 3192 0006 3020     		movs	r0, #48
 3193              	.LVL353:
 3194 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 3195              	.LVL354:
 3196 000c 08BD     		pop	{r3, pc}
 3197              		.cfi_endproc
 3198              	.LFE186:
 3200              		.section	.text.nRF24_config_normal_tx_mode,"ax",%progbits
 3201              		.align	1
 3202              		.global	nRF24_config_normal_tx_mode
 3203              		.syntax unified
 3204              		.thumb
 3205              		.thumb_func
 3206              		.fpu fpv4-sp-d16
 3208              	nRF24_config_normal_tx_mode:
 3209              	.LFB150:
 661:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 3210              		.loc 1 661 0
 3211              		.cfi_startproc
 3212              		@ args = 0, pretend = 0, frame = 8
 3213              		@ frame_needed = 0, uses_anonymous_args = 0
 3214 0000 10B5     		push	{r4, lr}
 3215              	.LCFI107:
 3216              		.cfi_def_cfa_offset 8
 3217              		.cfi_offset 4, -8
 3218              		.cfi_offset 14, -4
 3219 0002 86B0     		sub	sp, sp, #24
 3220              	.LCFI108:
 3221              		.cfi_def_cfa_offset 32
 662:libs/nRF24/nRF24.c **** 
 3222              		.loc 1 662 0
 3223 0004 FFF7FEFF 		bl	nRF24_CE_0
ARM GAS  /tmp/ccRs3XjX.s 			page 82


 3224              	.LVL355:
 665:libs/nRF24/nRF24.c ****  
 3225              		.loc 1 665 0
 3226 0008 0320     		movs	r0, #3
 3227 000a FFF7FEFF 		bl	nRF24_set_SETUP_AW
 3228              	.LVL356:
 668:libs/nRF24/nRF24.c ****     nRF24_set_TX_ADDR(5, TX_ADDRESS); 
 3229              		.loc 1 668 0
 3230 000e 1B4B     		ldr	r3, .L173
 3231 0010 93E80300 		ldm	r3, {r0, r1}
 3232 0014 0490     		str	r0, [sp, #16]
 3233 0016 8DF81410 		strb	r1, [sp, #20]
 669:libs/nRF24/nRF24.c **** 
 3234              		.loc 1 669 0
 3235 001a 04A9     		add	r1, sp, #16
 3236 001c 0520     		movs	r0, #5
 3237 001e FFF7FEFF 		bl	nRF24_set_TX_ADDR
 3238              	.LVL357:
 672:libs/nRF24/nRF24.c **** 
 3239              		.loc 1 672 0
 3240 0022 0024     		movs	r4, #0
 3241 0024 0194     		str	r4, [sp, #4]
 3242 0026 0094     		str	r4, [sp]
 3243 0028 2346     		mov	r3, r4
 3244 002a 2246     		mov	r2, r4
 3245 002c 2146     		mov	r1, r4
 3246 002e 2046     		mov	r0, r4
 3247 0030 FFF7FEFF 		bl	nRF24_set_EN_AA
 3248              	.LVL358:
 675:libs/nRF24/nRF24.c **** 
 3249              		.loc 1 675 0
 3250 0034 0194     		str	r4, [sp, #4]
 3251 0036 0094     		str	r4, [sp]
 3252 0038 2346     		mov	r3, r4
 3253 003a 2246     		mov	r2, r4
 3254 003c 2146     		mov	r1, r4
 3255 003e 2046     		mov	r0, r4
 3256 0040 FFF7FEFF 		bl	nRF24_set_EN_RXADDR
 3257              	.LVL359:
 678:libs/nRF24/nRF24.c **** 
 3258              		.loc 1 678 0
 3259 0044 2146     		mov	r1, r4
 3260 0046 2046     		mov	r0, r4
 3261 0048 FFF7FEFF 		bl	nRF24_set_SETUP_RETR
 3262              	.LVL360:
 681:libs/nRF24/nRF24.c **** 
 3263              		.loc 1 681 0
 3264 004c 2820     		movs	r0, #40
 3265 004e FFF7FEFF 		bl	nRF24_set_RF_CH
 3266              	.LVL361:
 684:libs/nRF24/nRF24.c ****   
 3267              		.loc 1 684 0
 3268 0052 0623     		movs	r3, #6
 3269 0054 0093     		str	r3, [sp]
 3270 0056 0123     		movs	r3, #1
 3271 0058 2246     		mov	r2, r4
 3272 005a 2146     		mov	r1, r4
ARM GAS  /tmp/ccRs3XjX.s 			page 83


 3273 005c 2046     		mov	r0, r4
 3274 005e FFF7FEFF 		bl	nRF24_set_RF_SETUP
 3275              	.LVL362:
 687:libs/nRF24/nRF24.c **** 
 3276              		.loc 1 687 0
 3277 0062 0294     		str	r4, [sp, #8]
 3278 0064 0223     		movs	r3, #2
 3279 0066 0193     		str	r3, [sp, #4]
 3280 0068 0423     		movs	r3, #4
 3281 006a 0093     		str	r3, [sp]
 3282 006c 0823     		movs	r3, #8
 3283 006e 2246     		mov	r2, r4
 3284 0070 2146     		mov	r1, r4
 3285 0072 2046     		mov	r0, r4
 3286 0074 FFF7FEFF 		bl	nRF24_set_CONFIG
 3287              	.LVL363:
 691:libs/nRF24/nRF24.c **** 
 3288              		.loc 1 691 0
 3289 0078 06B0     		add	sp, sp, #24
 3290              	.LCFI109:
 3291              		.cfi_def_cfa_offset 8
 3292              		@ sp needed
 3293 007a 10BD     		pop	{r4, pc}
 3294              	.L174:
 3295              		.align	2
 3296              	.L173:
 3297 007c 04000000 		.word	.LANCHOR0+4
 3298              		.cfi_endproc
 3299              	.LFE150:
 3301              		.section	.text.nRF24_config_enhanced_shockburst_tx_mode,"ax",%progbits
 3302              		.align	1
 3303              		.global	nRF24_config_enhanced_shockburst_tx_mode
 3304              		.syntax unified
 3305              		.thumb
 3306              		.thumb_func
 3307              		.fpu fpv4-sp-d16
 3309              	nRF24_config_enhanced_shockburst_tx_mode:
 3310              	.LFB151:
 706:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 3311              		.loc 1 706 0
 3312              		.cfi_startproc
 3313              		@ args = 0, pretend = 0, frame = 16
 3314              		@ frame_needed = 0, uses_anonymous_args = 0
 3315 0000 30B5     		push	{r4, r5, lr}
 3316              	.LCFI110:
 3317              		.cfi_def_cfa_offset 12
 3318              		.cfi_offset 4, -12
 3319              		.cfi_offset 5, -8
 3320              		.cfi_offset 14, -4
 3321 0002 89B0     		sub	sp, sp, #36
 3322              	.LCFI111:
 3323              		.cfi_def_cfa_offset 48
 707:libs/nRF24/nRF24.c ****     // nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 3324              		.loc 1 707 0
 3325 0004 FFF7FEFF 		bl	nRF24_CE_0
 3326              	.LVL364:
 711:libs/nRF24/nRF24.c **** 
ARM GAS  /tmp/ccRs3XjX.s 			page 84


 3327              		.loc 1 711 0
 3328 0008 0320     		movs	r0, #3
 3329 000a FFF7FEFF 		bl	nRF24_set_SETUP_AW
 3330              	.LVL365:
 713:libs/nRF24/nRF24.c ****     nRF24_set_TX_ADDR(5, TX_ADDRESS);
 3331              		.loc 1 713 0
 3332 000e 1F4B     		ldr	r3, .L177
 3333 0010 93E80300 		ldm	r3, {r0, r1}
 3334 0014 0690     		str	r0, [sp, #24]
 3335 0016 8DF81C10 		strb	r1, [sp, #28]
 714:libs/nRF24/nRF24.c **** 
 3336              		.loc 1 714 0
 3337 001a 06A9     		add	r1, sp, #24
 3338 001c 0520     		movs	r0, #5
 3339 001e FFF7FEFF 		bl	nRF24_set_TX_ADDR
 3340              	.LVL366:
 717:libs/nRF24/nRF24.c **** 
 3341              		.loc 1 717 0
 3342 0022 06A9     		add	r1, sp, #24
 3343 0024 0520     		movs	r0, #5
 3344 0026 FFF7FEFF 		bl	nRF24_set_RX_ADDR_P0
 3345              	.LVL367:
 719:libs/nRF24/nRF24.c ****     nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P
 3346              		.loc 1 719 0
 3347 002a 0125     		movs	r5, #1
 3348 002c 0195     		str	r5, [sp, #4]
 3349 002e 0024     		movs	r4, #0
 3350 0030 0094     		str	r4, [sp]
 3351 0032 2346     		mov	r3, r4
 3352 0034 2246     		mov	r2, r4
 3353 0036 2146     		mov	r1, r4
 3354 0038 2046     		mov	r0, r4
 3355 003a FFF7FEFF 		bl	nRF24_set_EN_AA
 3356              	.LVL368:
 720:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK10);
 3357              		.loc 1 720 0
 3358 003e 0195     		str	r5, [sp, #4]
 3359 0040 0094     		str	r4, [sp]
 3360 0042 2346     		mov	r3, r4
 3361 0044 2246     		mov	r2, r4
 3362 0046 2146     		mov	r1, r4
 3363 0048 2046     		mov	r0, r4
 3364 004a FFF7FEFF 		bl	nRF24_set_EN_RXADDR
 3365              	.LVL369:
 721:libs/nRF24/nRF24.c ****     nRF24_set_RF_CH(40);
 3366              		.loc 1 721 0
 3367 004e 0A21     		movs	r1, #10
 3368 0050 2046     		mov	r0, r4
 3369 0052 FFF7FEFF 		bl	nRF24_set_SETUP_RETR
 3370              	.LVL370:
 722:libs/nRF24/nRF24.c ****     uint8_t writing_byte = 0x07;
 3371              		.loc 1 722 0
 3372 0056 2820     		movs	r0, #40
 3373 0058 FFF7FEFF 		bl	nRF24_set_RF_CH
 3374              	.LVL371:
 723:libs/nRF24/nRF24.c ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 3375              		.loc 1 723 0
ARM GAS  /tmp/ccRs3XjX.s 			page 85


 3376 005c 08AA     		add	r2, sp, #32
 3377 005e 0723     		movs	r3, #7
 3378 0060 02F8093D 		strb	r3, [r2, #-9]!
 724:libs/nRF24/nRF24.c ****     // nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR
 3379              		.loc 1 724 0
 3380 0064 2946     		mov	r1, r5
 3381 0066 2620     		movs	r0, #38
 3382 0068 FFF7FEFF 		bl	nRF24_verified_write_register
 3383              	.LVL372:
 726:libs/nRF24/nRF24.c ****     SPI_DELAY(10);
 3384              		.loc 1 726 0
 3385 006c 0294     		str	r4, [sp, #8]
 3386 006e 0223     		movs	r3, #2
 3387 0070 0193     		str	r3, [sp, #4]
 3388 0072 0423     		movs	r3, #4
 3389 0074 0093     		str	r3, [sp]
 3390 0076 0823     		movs	r3, #8
 3391 0078 2246     		mov	r2, r4
 3392 007a 2146     		mov	r1, r4
 3393 007c 2046     		mov	r0, r4
 3394 007e FFF7FEFF 		bl	nRF24_set_CONFIG
 3395              	.LVL373:
 727:libs/nRF24/nRF24.c **** 
 3396              		.loc 1 727 0
 3397 0082 0A20     		movs	r0, #10
 3398 0084 FFF7FEFF 		bl	SPI_DELAY
 3399              	.LVL374:
 729:libs/nRF24/nRF24.c **** 
 3400              		.loc 1 729 0
 3401 0088 09B0     		add	sp, sp, #36
 3402              	.LCFI112:
 3403              		.cfi_def_cfa_offset 12
 3404              		@ sp needed
 3405 008a 30BD     		pop	{r4, r5, pc}
 3406              	.L178:
 3407              		.align	2
 3408              	.L177:
 3409 008c 04000000 		.word	.LANCHOR0+4
 3410              		.cfi_endproc
 3411              	.LFE151:
 3413              		.section	.text.nRF24_get_TX_ADDR,"ax",%progbits
 3414              		.align	1
 3415              		.global	nRF24_get_TX_ADDR
 3416              		.syntax unified
 3417              		.thumb
 3418              		.thumb_func
 3419              		.fpu fpv4-sp-d16
 3421              	nRF24_get_TX_ADDR:
 3422              	.LFB187:
1381:libs/nRF24/nRF24.c **** }
1382:libs/nRF24/nRF24.c **** 
1383:libs/nRF24/nRF24.c **** 
1384:libs/nRF24/nRF24.c **** /**
1385:libs/nRF24/nRF24.c ****   * @brief      Read <TX_ADDR> register from nRF24.
1386:libs/nRF24/nRF24.c ****   * @param[in]  tx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1387:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read TX address.
1388:libs/nRF24/nRF24.c ****   * @retval     None.
ARM GAS  /tmp/ccRs3XjX.s 			page 86


1389:libs/nRF24/nRF24.c ****   */
1390:libs/nRF24/nRF24.c **** void nRF24_get_TX_ADDR(uint8_t tx_addr_width, uint8_t* p_read_buffer) 
1391:libs/nRF24/nRF24.c **** {
 3423              		.loc 1 1391 0
 3424              		.cfi_startproc
 3425              		@ args = 0, pretend = 0, frame = 0
 3426              		@ frame_needed = 0, uses_anonymous_args = 0
 3427              	.LVL375:
 3428 0000 08B5     		push	{r3, lr}
 3429              	.LCFI113:
 3430              		.cfi_def_cfa_offset 8
 3431              		.cfi_offset 3, -8
 3432              		.cfi_offset 14, -4
1392:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + TX_ADDR, tx_addr_width, p_read_buffer);
 3433              		.loc 1 1392 0
 3434 0002 0A46     		mov	r2, r1
 3435 0004 0146     		mov	r1, r0
 3436              	.LVL376:
 3437 0006 1020     		movs	r0, #16
 3438              	.LVL377:
 3439 0008 FFF7FEFF 		bl	spi_read_register
 3440              	.LVL378:
 3441 000c 08BD     		pop	{r3, pc}
 3442              		.cfi_endproc
 3443              	.LFE187:
 3445              		.section	.text.nRF24_set_RX_PW_P0,"ax",%progbits
 3446              		.align	1
 3447              		.global	nRF24_set_RX_PW_P0
 3448              		.syntax unified
 3449              		.thumb
 3450              		.thumb_func
 3451              		.fpu fpv4-sp-d16
 3453              	nRF24_set_RX_PW_P0:
 3454              	.LFB188:
1393:libs/nRF24/nRF24.c **** }
1394:libs/nRF24/nRF24.c **** 
1395:libs/nRF24/nRF24.c **** /**
1396:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 0.
1397:libs/nRF24/nRF24.c ****   * @param rx_pw_p0 Number of bytes. 
1398:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1399:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1400:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1401:libs/nRF24/nRF24.c ****   *          ...
1402:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1403:libs/nRF24/nRF24.c ****   */
1404:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P0(uint8_t rx_pw_p0) 
1405:libs/nRF24/nRF24.c **** {
 3455              		.loc 1 1405 0
 3456              		.cfi_startproc
 3457              		@ args = 0, pretend = 0, frame = 8
 3458              		@ frame_needed = 0, uses_anonymous_args = 0
 3459              	.LVL379:
 3460 0000 00B5     		push	{lr}
 3461              	.LCFI114:
 3462              		.cfi_def_cfa_offset 4
 3463              		.cfi_offset 14, -4
 3464 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccRs3XjX.s 			page 87


 3465              	.LCFI115:
 3466              		.cfi_def_cfa_offset 16
1406:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1407:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p0;
 3467              		.loc 1 1407 0
 3468 0004 02AA     		add	r2, sp, #8
 3469 0006 02F8010D 		strb	r0, [r2, #-1]!
1408:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P0, 1, &writing_byte);
 3470              		.loc 1 1408 0
 3471 000a 0121     		movs	r1, #1
 3472 000c 3120     		movs	r0, #49
 3473              	.LVL380:
 3474 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3475              	.LVL381:
1409:libs/nRF24/nRF24.c **** }
 3476              		.loc 1 1409 0
 3477 0012 03B0     		add	sp, sp, #12
 3478              	.LCFI116:
 3479              		.cfi_def_cfa_offset 4
 3480              		@ sp needed
 3481 0014 5DF804FB 		ldr	pc, [sp], #4
 3482              		.cfi_endproc
 3483              	.LFE188:
 3485              		.section	.text.nRF24_config_normal_rx_mode,"ax",%progbits
 3486              		.align	1
 3487              		.global	nRF24_config_normal_rx_mode
 3488              		.syntax unified
 3489              		.thumb
 3490              		.thumb_func
 3491              		.fpu fpv4-sp-d16
 3493              	nRF24_config_normal_rx_mode:
 3494              	.LFB152:
 744:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 3495              		.loc 1 744 0
 3496              		.cfi_startproc
 3497              		@ args = 0, pretend = 0, frame = 8
 3498              		@ frame_needed = 0, uses_anonymous_args = 0
 3499 0000 30B5     		push	{r4, r5, lr}
 3500              	.LCFI117:
 3501              		.cfi_def_cfa_offset 12
 3502              		.cfi_offset 4, -12
 3503              		.cfi_offset 5, -8
 3504              		.cfi_offset 14, -4
 3505 0002 87B0     		sub	sp, sp, #28
 3506              	.LCFI118:
 3507              		.cfi_def_cfa_offset 40
 745:libs/nRF24/nRF24.c **** 
 3508              		.loc 1 745 0
 3509 0004 FFF7FEFF 		bl	nRF24_CE_0
 3510              	.LVL382:
 748:libs/nRF24/nRF24.c ****  
 3511              		.loc 1 748 0
 3512 0008 0320     		movs	r0, #3
 3513 000a FFF7FEFF 		bl	nRF24_set_SETUP_AW
 3514              	.LVL383:
 751:libs/nRF24/nRF24.c ****     nRF24_set_RX_ADDR_P0(5, RX_ADDRESS); 
 3515              		.loc 1 751 0
ARM GAS  /tmp/ccRs3XjX.s 			page 88


 3516 000e 1E4B     		ldr	r3, .L185
 3517 0010 93E80300 		ldm	r3, {r0, r1}
 3518 0014 0490     		str	r0, [sp, #16]
 3519 0016 8DF81410 		strb	r1, [sp, #20]
 752:libs/nRF24/nRF24.c **** 
 3520              		.loc 1 752 0
 3521 001a 04A9     		add	r1, sp, #16
 3522 001c 0520     		movs	r0, #5
 3523 001e FFF7FEFF 		bl	nRF24_set_RX_ADDR_P0
 3524              	.LVL384:
 755:libs/nRF24/nRF24.c **** 
 3525              		.loc 1 755 0
 3526 0022 0024     		movs	r4, #0
 3527 0024 0194     		str	r4, [sp, #4]
 3528 0026 0094     		str	r4, [sp]
 3529 0028 2346     		mov	r3, r4
 3530 002a 2246     		mov	r2, r4
 3531 002c 2146     		mov	r1, r4
 3532 002e 2046     		mov	r0, r4
 3533 0030 FFF7FEFF 		bl	nRF24_set_EN_AA
 3534              	.LVL385:
 758:libs/nRF24/nRF24.c **** 
 3535              		.loc 1 758 0
 3536 0034 0125     		movs	r5, #1
 3537 0036 0195     		str	r5, [sp, #4]
 3538 0038 0094     		str	r4, [sp]
 3539 003a 2346     		mov	r3, r4
 3540 003c 2246     		mov	r2, r4
 3541 003e 2146     		mov	r1, r4
 3542 0040 2046     		mov	r0, r4
 3543 0042 FFF7FEFF 		bl	nRF24_set_EN_RXADDR
 3544              	.LVL386:
 761:libs/nRF24/nRF24.c **** 
 3545              		.loc 1 761 0
 3546 0046 2146     		mov	r1, r4
 3547 0048 2046     		mov	r0, r4
 3548 004a FFF7FEFF 		bl	nRF24_set_SETUP_RETR
 3549              	.LVL387:
 764:libs/nRF24/nRF24.c **** 
 3550              		.loc 1 764 0
 3551 004e 2820     		movs	r0, #40
 3552 0050 FFF7FEFF 		bl	nRF24_set_RF_CH
 3553              	.LVL388:
 767:libs/nRF24/nRF24.c **** 
 3554              		.loc 1 767 0
 3555 0054 0623     		movs	r3, #6
 3556 0056 0093     		str	r3, [sp]
 3557 0058 2B46     		mov	r3, r5
 3558 005a 2246     		mov	r2, r4
 3559 005c 2146     		mov	r1, r4
 3560 005e 2046     		mov	r0, r4
 3561 0060 FFF7FEFF 		bl	nRF24_set_RF_SETUP
 3562              	.LVL389:
 770:libs/nRF24/nRF24.c ****   
 3563              		.loc 1 770 0
 3564 0064 2020     		movs	r0, #32
 3565 0066 FFF7FEFF 		bl	nRF24_set_RX_PW_P0
ARM GAS  /tmp/ccRs3XjX.s 			page 89


 3566              	.LVL390:
 773:libs/nRF24/nRF24.c **** 
 3567              		.loc 1 773 0
 3568 006a 0295     		str	r5, [sp, #8]
 3569 006c 0223     		movs	r3, #2
 3570 006e 0193     		str	r3, [sp, #4]
 3571 0070 0423     		movs	r3, #4
 3572 0072 0093     		str	r3, [sp]
 3573 0074 0823     		movs	r3, #8
 3574 0076 2246     		mov	r2, r4
 3575 0078 2146     		mov	r1, r4
 3576 007a 2046     		mov	r0, r4
 3577 007c FFF7FEFF 		bl	nRF24_set_CONFIG
 3578              	.LVL391:
 776:libs/nRF24/nRF24.c **** 		/* nRF24 starts hearing as RX. */
 3579              		.loc 1 776 0
 3580 0080 FFF7FEFF 		bl	nRF24_CE_1
 3581              	.LVL392:
 778:libs/nRF24/nRF24.c **** 
 3582              		.loc 1 778 0
 3583 0084 07B0     		add	sp, sp, #28
 3584              	.LCFI119:
 3585              		.cfi_def_cfa_offset 12
 3586              		@ sp needed
 3587 0086 30BD     		pop	{r4, r5, pc}
 3588              	.L186:
 3589              		.align	2
 3590              	.L185:
 3591 0088 04000000 		.word	.LANCHOR0+4
 3592              		.cfi_endproc
 3593              	.LFE152:
 3595              		.section	.text.nRF24_get_RX_PW_P0,"ax",%progbits
 3596              		.align	1
 3597              		.global	nRF24_get_RX_PW_P0
 3598              		.syntax unified
 3599              		.thumb
 3600              		.thumb_func
 3601              		.fpu fpv4-sp-d16
 3603              	nRF24_get_RX_PW_P0:
 3604              	.LFB189:
1410:libs/nRF24/nRF24.c **** 
1411:libs/nRF24/nRF24.c **** 
1412:libs/nRF24/nRF24.c **** /**
1413:libs/nRF24/nRF24.c ****   * @brief      Read <RX_PW_P0> register from nRF24.
1414:libs/nRF24/nRF24.c ****   * @param      None.
1415:libs/nRF24/nRF24.c ****   * @retval     <RX_PW_P0> register value.
1416:libs/nRF24/nRF24.c ****   */
1417:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P0() 
1418:libs/nRF24/nRF24.c **** {
 3605              		.loc 1 1418 0
 3606              		.cfi_startproc
 3607              		@ args = 0, pretend = 0, frame = 8
 3608              		@ frame_needed = 0, uses_anonymous_args = 0
 3609 0000 00B5     		push	{lr}
 3610              	.LCFI120:
 3611              		.cfi_def_cfa_offset 4
 3612              		.cfi_offset 14, -4
ARM GAS  /tmp/ccRs3XjX.s 			page 90


 3613 0002 83B0     		sub	sp, sp, #12
 3614              	.LCFI121:
 3615              		.cfi_def_cfa_offset 16
1419:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1420:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P0, 1, &read_byte);
 3616              		.loc 1 1420 0
 3617 0004 0DF10702 		add	r2, sp, #7
 3618 0008 0121     		movs	r1, #1
 3619 000a 1120     		movs	r0, #17
 3620 000c FFF7FEFF 		bl	spi_read_register
 3621              	.LVL393:
1421:libs/nRF24/nRF24.c ****   return read_byte;
1422:libs/nRF24/nRF24.c **** }
 3622              		.loc 1 1422 0
 3623 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3624 0014 03B0     		add	sp, sp, #12
 3625              	.LCFI122:
 3626              		.cfi_def_cfa_offset 4
 3627              		@ sp needed
 3628 0016 5DF804FB 		ldr	pc, [sp], #4
 3629              		.cfi_endproc
 3630              	.LFE189:
 3632              		.section	.text.nRF24_set_RX_PW_P1,"ax",%progbits
 3633              		.align	1
 3634              		.global	nRF24_set_RX_PW_P1
 3635              		.syntax unified
 3636              		.thumb
 3637              		.thumb_func
 3638              		.fpu fpv4-sp-d16
 3640              	nRF24_set_RX_PW_P1:
 3641              	.LFB190:
1423:libs/nRF24/nRF24.c **** 
1424:libs/nRF24/nRF24.c **** 
1425:libs/nRF24/nRF24.c **** /**
1426:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 1.
1427:libs/nRF24/nRF24.c ****   * @param rx_pw_p1 Number of bytes. 
1428:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1429:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1430:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1431:libs/nRF24/nRF24.c ****   *          ...
1432:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1433:libs/nRF24/nRF24.c ****   * @retval None.
1434:libs/nRF24/nRF24.c ****   */
1435:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P1(uint8_t rx_pw_p1) 
1436:libs/nRF24/nRF24.c **** {
 3642              		.loc 1 1436 0
 3643              		.cfi_startproc
 3644              		@ args = 0, pretend = 0, frame = 8
 3645              		@ frame_needed = 0, uses_anonymous_args = 0
 3646              	.LVL394:
 3647 0000 00B5     		push	{lr}
 3648              	.LCFI123:
 3649              		.cfi_def_cfa_offset 4
 3650              		.cfi_offset 14, -4
 3651 0002 83B0     		sub	sp, sp, #12
 3652              	.LCFI124:
 3653              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccRs3XjX.s 			page 91


1437:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1438:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p1;
 3654              		.loc 1 1438 0
 3655 0004 02AA     		add	r2, sp, #8
 3656 0006 02F8010D 		strb	r0, [r2, #-1]!
1439:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P1, 1, &writing_byte);
 3657              		.loc 1 1439 0
 3658 000a 0121     		movs	r1, #1
 3659 000c 3220     		movs	r0, #50
 3660              	.LVL395:
 3661 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3662              	.LVL396:
1440:libs/nRF24/nRF24.c **** }
 3663              		.loc 1 1440 0
 3664 0012 03B0     		add	sp, sp, #12
 3665              	.LCFI125:
 3666              		.cfi_def_cfa_offset 4
 3667              		@ sp needed
 3668 0014 5DF804FB 		ldr	pc, [sp], #4
 3669              		.cfi_endproc
 3670              	.LFE190:
 3672              		.section	.text.nRF24_get_RX_PW_P1,"ax",%progbits
 3673              		.align	1
 3674              		.global	nRF24_get_RX_PW_P1
 3675              		.syntax unified
 3676              		.thumb
 3677              		.thumb_func
 3678              		.fpu fpv4-sp-d16
 3680              	nRF24_get_RX_PW_P1:
 3681              	.LFB191:
1441:libs/nRF24/nRF24.c **** 
1442:libs/nRF24/nRF24.c **** 
1443:libs/nRF24/nRF24.c **** /**
1444:libs/nRF24/nRF24.c ****   * @brief      Read <RX_PW_P1> register from nRF24.
1445:libs/nRF24/nRF24.c ****   * @param      None.
1446:libs/nRF24/nRF24.c ****   * @retval     <RX_PW_P1> register value.
1447:libs/nRF24/nRF24.c ****   */
1448:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P1() 
1449:libs/nRF24/nRF24.c **** {
 3682              		.loc 1 1449 0
 3683              		.cfi_startproc
 3684              		@ args = 0, pretend = 0, frame = 8
 3685              		@ frame_needed = 0, uses_anonymous_args = 0
 3686 0000 00B5     		push	{lr}
 3687              	.LCFI126:
 3688              		.cfi_def_cfa_offset 4
 3689              		.cfi_offset 14, -4
 3690 0002 83B0     		sub	sp, sp, #12
 3691              	.LCFI127:
 3692              		.cfi_def_cfa_offset 16
1450:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1451:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P1, 1, &read_byte);
 3693              		.loc 1 1451 0
 3694 0004 0DF10702 		add	r2, sp, #7
 3695 0008 0121     		movs	r1, #1
 3696 000a 1220     		movs	r0, #18
 3697 000c FFF7FEFF 		bl	spi_read_register
ARM GAS  /tmp/ccRs3XjX.s 			page 92


 3698              	.LVL397:
1452:libs/nRF24/nRF24.c ****   return read_byte;
1453:libs/nRF24/nRF24.c **** }
 3699              		.loc 1 1453 0
 3700 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3701 0014 03B0     		add	sp, sp, #12
 3702              	.LCFI128:
 3703              		.cfi_def_cfa_offset 4
 3704              		@ sp needed
 3705 0016 5DF804FB 		ldr	pc, [sp], #4
 3706              		.cfi_endproc
 3707              	.LFE191:
 3709              		.section	.text.nRF24_set_RX_PW_P2,"ax",%progbits
 3710              		.align	1
 3711              		.global	nRF24_set_RX_PW_P2
 3712              		.syntax unified
 3713              		.thumb
 3714              		.thumb_func
 3715              		.fpu fpv4-sp-d16
 3717              	nRF24_set_RX_PW_P2:
 3718              	.LFB192:
1454:libs/nRF24/nRF24.c **** 
1455:libs/nRF24/nRF24.c **** 
1456:libs/nRF24/nRF24.c **** /**
1457:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 2.
1458:libs/nRF24/nRF24.c ****   * @param rx_pw_p2 Number of bytes. 
1459:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1460:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1461:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1462:libs/nRF24/nRF24.c ****   *          ...
1463:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1464:libs/nRF24/nRF24.c ****   * @retval None.
1465:libs/nRF24/nRF24.c ****   */
1466:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P2(uint8_t rx_pw_p2) 
1467:libs/nRF24/nRF24.c **** {
 3719              		.loc 1 1467 0
 3720              		.cfi_startproc
 3721              		@ args = 0, pretend = 0, frame = 8
 3722              		@ frame_needed = 0, uses_anonymous_args = 0
 3723              	.LVL398:
 3724 0000 00B5     		push	{lr}
 3725              	.LCFI129:
 3726              		.cfi_def_cfa_offset 4
 3727              		.cfi_offset 14, -4
 3728 0002 83B0     		sub	sp, sp, #12
 3729              	.LCFI130:
 3730              		.cfi_def_cfa_offset 16
1468:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1469:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p2;
 3731              		.loc 1 1469 0
 3732 0004 02AA     		add	r2, sp, #8
 3733 0006 02F8010D 		strb	r0, [r2, #-1]!
1470:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P2, 1, &writing_byte);
 3734              		.loc 1 1470 0
 3735 000a 0121     		movs	r1, #1
 3736 000c 3320     		movs	r0, #51
 3737              	.LVL399:
ARM GAS  /tmp/ccRs3XjX.s 			page 93


 3738 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3739              	.LVL400:
1471:libs/nRF24/nRF24.c **** }
 3740              		.loc 1 1471 0
 3741 0012 03B0     		add	sp, sp, #12
 3742              	.LCFI131:
 3743              		.cfi_def_cfa_offset 4
 3744              		@ sp needed
 3745 0014 5DF804FB 		ldr	pc, [sp], #4
 3746              		.cfi_endproc
 3747              	.LFE192:
 3749              		.section	.text.nRF24_get_RX_PW_P2,"ax",%progbits
 3750              		.align	1
 3751              		.global	nRF24_get_RX_PW_P2
 3752              		.syntax unified
 3753              		.thumb
 3754              		.thumb_func
 3755              		.fpu fpv4-sp-d16
 3757              	nRF24_get_RX_PW_P2:
 3758              	.LFB193:
1472:libs/nRF24/nRF24.c **** 
1473:libs/nRF24/nRF24.c **** 
1474:libs/nRF24/nRF24.c **** /**
1475:libs/nRF24/nRF24.c ****   * @brief      Read <RX_PW_P2> register from nRF24.
1476:libs/nRF24/nRF24.c ****   * @param      None.
1477:libs/nRF24/nRF24.c ****   * @retval     <RX_PW_P2> register value.
1478:libs/nRF24/nRF24.c ****   */
1479:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P2() 
1480:libs/nRF24/nRF24.c **** {
 3759              		.loc 1 1480 0
 3760              		.cfi_startproc
 3761              		@ args = 0, pretend = 0, frame = 8
 3762              		@ frame_needed = 0, uses_anonymous_args = 0
 3763 0000 00B5     		push	{lr}
 3764              	.LCFI132:
 3765              		.cfi_def_cfa_offset 4
 3766              		.cfi_offset 14, -4
 3767 0002 83B0     		sub	sp, sp, #12
 3768              	.LCFI133:
 3769              		.cfi_def_cfa_offset 16
1481:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1482:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P2, 1, &read_byte);
 3770              		.loc 1 1482 0
 3771 0004 0DF10702 		add	r2, sp, #7
 3772 0008 0121     		movs	r1, #1
 3773 000a 1320     		movs	r0, #19
 3774 000c FFF7FEFF 		bl	spi_read_register
 3775              	.LVL401:
1483:libs/nRF24/nRF24.c ****   return read_byte;
1484:libs/nRF24/nRF24.c **** }
 3776              		.loc 1 1484 0
 3777 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3778 0014 03B0     		add	sp, sp, #12
 3779              	.LCFI134:
 3780              		.cfi_def_cfa_offset 4
 3781              		@ sp needed
 3782 0016 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccRs3XjX.s 			page 94


 3783              		.cfi_endproc
 3784              	.LFE193:
 3786              		.section	.text.nRF24_set_RX_PW_P3,"ax",%progbits
 3787              		.align	1
 3788              		.global	nRF24_set_RX_PW_P3
 3789              		.syntax unified
 3790              		.thumb
 3791              		.thumb_func
 3792              		.fpu fpv4-sp-d16
 3794              	nRF24_set_RX_PW_P3:
 3795              	.LFB194:
1485:libs/nRF24/nRF24.c **** 
1486:libs/nRF24/nRF24.c **** 
1487:libs/nRF24/nRF24.c **** /**
1488:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 3.
1489:libs/nRF24/nRF24.c ****   * @param rx_pw_p3 Number of bytes. 
1490:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1491:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1492:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1493:libs/nRF24/nRF24.c ****   *          ...
1494:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1495:libs/nRF24/nRF24.c ****   * @retval None.
1496:libs/nRF24/nRF24.c ****   */
1497:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P3(uint8_t rx_pw_p3) 
1498:libs/nRF24/nRF24.c **** {
 3796              		.loc 1 1498 0
 3797              		.cfi_startproc
 3798              		@ args = 0, pretend = 0, frame = 8
 3799              		@ frame_needed = 0, uses_anonymous_args = 0
 3800              	.LVL402:
 3801 0000 00B5     		push	{lr}
 3802              	.LCFI135:
 3803              		.cfi_def_cfa_offset 4
 3804              		.cfi_offset 14, -4
 3805 0002 83B0     		sub	sp, sp, #12
 3806              	.LCFI136:
 3807              		.cfi_def_cfa_offset 16
1499:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1500:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p3;
 3808              		.loc 1 1500 0
 3809 0004 02AA     		add	r2, sp, #8
 3810 0006 02F8010D 		strb	r0, [r2, #-1]!
1501:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P3, 1, &writing_byte);
 3811              		.loc 1 1501 0
 3812 000a 0121     		movs	r1, #1
 3813 000c 3420     		movs	r0, #52
 3814              	.LVL403:
 3815 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3816              	.LVL404:
1502:libs/nRF24/nRF24.c **** }
 3817              		.loc 1 1502 0
 3818 0012 03B0     		add	sp, sp, #12
 3819              	.LCFI137:
 3820              		.cfi_def_cfa_offset 4
 3821              		@ sp needed
 3822 0014 5DF804FB 		ldr	pc, [sp], #4
 3823              		.cfi_endproc
ARM GAS  /tmp/ccRs3XjX.s 			page 95


 3824              	.LFE194:
 3826              		.section	.text.nRF24_get_RX_PW_P3,"ax",%progbits
 3827              		.align	1
 3828              		.global	nRF24_get_RX_PW_P3
 3829              		.syntax unified
 3830              		.thumb
 3831              		.thumb_func
 3832              		.fpu fpv4-sp-d16
 3834              	nRF24_get_RX_PW_P3:
 3835              	.LFB195:
1503:libs/nRF24/nRF24.c **** 
1504:libs/nRF24/nRF24.c **** /**
1505:libs/nRF24/nRF24.c ****   * @brief      Read <RX_PW_P3> register from nRF24.
1506:libs/nRF24/nRF24.c ****   * @param      None.
1507:libs/nRF24/nRF24.c ****   * @retval     <RX_PW_P3> register value.
1508:libs/nRF24/nRF24.c ****   */
1509:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P3() 
1510:libs/nRF24/nRF24.c **** {
 3836              		.loc 1 1510 0
 3837              		.cfi_startproc
 3838              		@ args = 0, pretend = 0, frame = 8
 3839              		@ frame_needed = 0, uses_anonymous_args = 0
 3840 0000 00B5     		push	{lr}
 3841              	.LCFI138:
 3842              		.cfi_def_cfa_offset 4
 3843              		.cfi_offset 14, -4
 3844 0002 83B0     		sub	sp, sp, #12
 3845              	.LCFI139:
 3846              		.cfi_def_cfa_offset 16
1511:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1512:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P3, 1, &read_byte);
 3847              		.loc 1 1512 0
 3848 0004 0DF10702 		add	r2, sp, #7
 3849 0008 0121     		movs	r1, #1
 3850 000a 1420     		movs	r0, #20
 3851 000c FFF7FEFF 		bl	spi_read_register
 3852              	.LVL405:
1513:libs/nRF24/nRF24.c ****   return read_byte;
1514:libs/nRF24/nRF24.c **** }
 3853              		.loc 1 1514 0
 3854 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3855 0014 03B0     		add	sp, sp, #12
 3856              	.LCFI140:
 3857              		.cfi_def_cfa_offset 4
 3858              		@ sp needed
 3859 0016 5DF804FB 		ldr	pc, [sp], #4
 3860              		.cfi_endproc
 3861              	.LFE195:
 3863              		.section	.text.nRF24_set_RX_PW_P4,"ax",%progbits
 3864              		.align	1
 3865              		.global	nRF24_set_RX_PW_P4
 3866              		.syntax unified
 3867              		.thumb
 3868              		.thumb_func
 3869              		.fpu fpv4-sp-d16
 3871              	nRF24_set_RX_PW_P4:
 3872              	.LFB196:
ARM GAS  /tmp/ccRs3XjX.s 			page 96


1515:libs/nRF24/nRF24.c **** 
1516:libs/nRF24/nRF24.c **** 
1517:libs/nRF24/nRF24.c **** /**
1518:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 4.
1519:libs/nRF24/nRF24.c ****   * @param rx_pw_p4 Number of bytes. 
1520:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1521:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1522:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1523:libs/nRF24/nRF24.c ****   *          ...
1524:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1525:libs/nRF24/nRF24.c ****   * @retval None.
1526:libs/nRF24/nRF24.c ****   */
1527:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P4(uint8_t rx_pw_p4) 
1528:libs/nRF24/nRF24.c **** {
 3873              		.loc 1 1528 0
 3874              		.cfi_startproc
 3875              		@ args = 0, pretend = 0, frame = 8
 3876              		@ frame_needed = 0, uses_anonymous_args = 0
 3877              	.LVL406:
 3878 0000 00B5     		push	{lr}
 3879              	.LCFI141:
 3880              		.cfi_def_cfa_offset 4
 3881              		.cfi_offset 14, -4
 3882 0002 83B0     		sub	sp, sp, #12
 3883              	.LCFI142:
 3884              		.cfi_def_cfa_offset 16
1529:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1530:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p4;
 3885              		.loc 1 1530 0
 3886 0004 02AA     		add	r2, sp, #8
 3887 0006 02F8010D 		strb	r0, [r2, #-1]!
1531:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P4, 1, &writing_byte);
 3888              		.loc 1 1531 0
 3889 000a 0121     		movs	r1, #1
 3890 000c 3520     		movs	r0, #53
 3891              	.LVL407:
 3892 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3893              	.LVL408:
1532:libs/nRF24/nRF24.c **** }
 3894              		.loc 1 1532 0
 3895 0012 03B0     		add	sp, sp, #12
 3896              	.LCFI143:
 3897              		.cfi_def_cfa_offset 4
 3898              		@ sp needed
 3899 0014 5DF804FB 		ldr	pc, [sp], #4
 3900              		.cfi_endproc
 3901              	.LFE196:
 3903              		.section	.text.nRF24_get_RX_PW_P4,"ax",%progbits
 3904              		.align	1
 3905              		.global	nRF24_get_RX_PW_P4
 3906              		.syntax unified
 3907              		.thumb
 3908              		.thumb_func
 3909              		.fpu fpv4-sp-d16
 3911              	nRF24_get_RX_PW_P4:
 3912              	.LFB197:
1533:libs/nRF24/nRF24.c **** 
ARM GAS  /tmp/ccRs3XjX.s 			page 97


1534:libs/nRF24/nRF24.c **** /**
1535:libs/nRF24/nRF24.c ****   * @brief      Read <RX_PW_P4> register from nRF24.
1536:libs/nRF24/nRF24.c ****   * @param      None.
1537:libs/nRF24/nRF24.c ****   * @retval     <RX_PW_P4> register value.
1538:libs/nRF24/nRF24.c ****   */
1539:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P4() 
1540:libs/nRF24/nRF24.c **** {
 3913              		.loc 1 1540 0
 3914              		.cfi_startproc
 3915              		@ args = 0, pretend = 0, frame = 8
 3916              		@ frame_needed = 0, uses_anonymous_args = 0
 3917 0000 00B5     		push	{lr}
 3918              	.LCFI144:
 3919              		.cfi_def_cfa_offset 4
 3920              		.cfi_offset 14, -4
 3921 0002 83B0     		sub	sp, sp, #12
 3922              	.LCFI145:
 3923              		.cfi_def_cfa_offset 16
1541:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1542:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P4, 1, &read_byte);
 3924              		.loc 1 1542 0
 3925 0004 0DF10702 		add	r2, sp, #7
 3926 0008 0121     		movs	r1, #1
 3927 000a 1520     		movs	r0, #21
 3928 000c FFF7FEFF 		bl	spi_read_register
 3929              	.LVL409:
1543:libs/nRF24/nRF24.c ****   return read_byte;
1544:libs/nRF24/nRF24.c **** }
 3930              		.loc 1 1544 0
 3931 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3932 0014 03B0     		add	sp, sp, #12
 3933              	.LCFI146:
 3934              		.cfi_def_cfa_offset 4
 3935              		@ sp needed
 3936 0016 5DF804FB 		ldr	pc, [sp], #4
 3937              		.cfi_endproc
 3938              	.LFE197:
 3940              		.section	.text.nRF24_set_RX_PW_P5,"ax",%progbits
 3941              		.align	1
 3942              		.global	nRF24_set_RX_PW_P5
 3943              		.syntax unified
 3944              		.thumb
 3945              		.thumb_func
 3946              		.fpu fpv4-sp-d16
 3948              	nRF24_set_RX_PW_P5:
 3949              	.LFB198:
1545:libs/nRF24/nRF24.c **** 
1546:libs/nRF24/nRF24.c **** /**
1547:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 5.
1548:libs/nRF24/nRF24.c ****   * @param rx_pw_p5 Number of bytes. 
1549:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1550:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1551:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1552:libs/nRF24/nRF24.c ****   *          ...
1553:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1554:libs/nRF24/nRF24.c ****   * @retval None.
1555:libs/nRF24/nRF24.c ****   */
ARM GAS  /tmp/ccRs3XjX.s 			page 98


1556:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P5(uint8_t rx_pw_p5) 
1557:libs/nRF24/nRF24.c **** {
 3950              		.loc 1 1557 0
 3951              		.cfi_startproc
 3952              		@ args = 0, pretend = 0, frame = 8
 3953              		@ frame_needed = 0, uses_anonymous_args = 0
 3954              	.LVL410:
 3955 0000 00B5     		push	{lr}
 3956              	.LCFI147:
 3957              		.cfi_def_cfa_offset 4
 3958              		.cfi_offset 14, -4
 3959 0002 83B0     		sub	sp, sp, #12
 3960              	.LCFI148:
 3961              		.cfi_def_cfa_offset 16
1558:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1559:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p5;
 3962              		.loc 1 1559 0
 3963 0004 02AA     		add	r2, sp, #8
 3964 0006 02F8010D 		strb	r0, [r2, #-1]!
1560:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P5, 1, &writing_byte);
 3965              		.loc 1 1560 0
 3966 000a 0121     		movs	r1, #1
 3967 000c 3620     		movs	r0, #54
 3968              	.LVL411:
 3969 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3970              	.LVL412:
1561:libs/nRF24/nRF24.c **** }
 3971              		.loc 1 1561 0
 3972 0012 03B0     		add	sp, sp, #12
 3973              	.LCFI149:
 3974              		.cfi_def_cfa_offset 4
 3975              		@ sp needed
 3976 0014 5DF804FB 		ldr	pc, [sp], #4
 3977              		.cfi_endproc
 3978              	.LFE198:
 3980              		.section	.text.nRF24_get_RX_PW_P5,"ax",%progbits
 3981              		.align	1
 3982              		.global	nRF24_get_RX_PW_P5
 3983              		.syntax unified
 3984              		.thumb
 3985              		.thumb_func
 3986              		.fpu fpv4-sp-d16
 3988              	nRF24_get_RX_PW_P5:
 3989              	.LFB199:
1562:libs/nRF24/nRF24.c **** 
1563:libs/nRF24/nRF24.c **** /**
1564:libs/nRF24/nRF24.c ****   * @brief  Read <RX_PW_P5> register from nRF24.
1565:libs/nRF24/nRF24.c ****   * @param  None.
1566:libs/nRF24/nRF24.c ****   * @retval <RX_PW_P5> register value.
1567:libs/nRF24/nRF24.c ****   */
1568:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P5() 
1569:libs/nRF24/nRF24.c **** {
 3990              		.loc 1 1569 0
 3991              		.cfi_startproc
 3992              		@ args = 0, pretend = 0, frame = 8
 3993              		@ frame_needed = 0, uses_anonymous_args = 0
 3994 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccRs3XjX.s 			page 99


 3995              	.LCFI150:
 3996              		.cfi_def_cfa_offset 4
 3997              		.cfi_offset 14, -4
 3998 0002 83B0     		sub	sp, sp, #12
 3999              	.LCFI151:
 4000              		.cfi_def_cfa_offset 16
1570:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1571:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P5, 1, &read_byte);
 4001              		.loc 1 1571 0
 4002 0004 0DF10702 		add	r2, sp, #7
 4003 0008 0121     		movs	r1, #1
 4004 000a 1620     		movs	r0, #22
 4005 000c FFF7FEFF 		bl	spi_read_register
 4006              	.LVL413:
1572:libs/nRF24/nRF24.c ****   return read_byte;
1573:libs/nRF24/nRF24.c **** }
 4007              		.loc 1 1573 0
 4008 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 4009 0014 03B0     		add	sp, sp, #12
 4010              	.LCFI152:
 4011              		.cfi_def_cfa_offset 4
 4012              		@ sp needed
 4013 0016 5DF804FB 		ldr	pc, [sp], #4
 4014              		.cfi_endproc
 4015              	.LFE199:
 4017              		.section	.text.nRF24_get_FIFO_STATUS,"ax",%progbits
 4018              		.align	1
 4019              		.global	nRF24_get_FIFO_STATUS
 4020              		.syntax unified
 4021              		.thumb
 4022              		.thumb_func
 4023              		.fpu fpv4-sp-d16
 4025              	nRF24_get_FIFO_STATUS:
 4026              	.LFB200:
1574:libs/nRF24/nRF24.c **** 
1575:libs/nRF24/nRF24.c **** 
1576:libs/nRF24/nRF24.c **** /**
1577:libs/nRF24/nRF24.c ****   * @brief  Read 'FIFO_STATUS' register from nRF24.
1578:libs/nRF24/nRF24.c ****   * @param  None.
1579:libs/nRF24/nRF24.c ****   * @retval FIFO_STATUS register value.
1580:libs/nRF24/nRF24.c ****   * @note   Following masks can be used:
1581:libs/nRF24/nRF24.c ****   *  TX_REUSE_READMASK  
1582:libs/nRF24/nRF24.c ****   *  TX_EMPTY_READMASK  
1583:libs/nRF24/nRF24.c ****   *  RX_FULL_READMASK 
1584:libs/nRF24/nRF24.c ****   *  RX_EMPTY_READMASK 
1585:libs/nRF24/nRF24.c ****   */
1586:libs/nRF24/nRF24.c **** uint8_t nRF24_get_FIFO_STATUS() 
1587:libs/nRF24/nRF24.c **** {
 4027              		.loc 1 1587 0
 4028              		.cfi_startproc
 4029              		@ args = 0, pretend = 0, frame = 8
 4030              		@ frame_needed = 0, uses_anonymous_args = 0
 4031 0000 00B5     		push	{lr}
 4032              	.LCFI153:
 4033              		.cfi_def_cfa_offset 4
 4034              		.cfi_offset 14, -4
 4035 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccRs3XjX.s 			page 100


 4036              	.LCFI154:
 4037              		.cfi_def_cfa_offset 16
1588:libs/nRF24/nRF24.c ****   uint8_t fifo_status;
1589:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + FIFO_STATUS, 1, &fifo_status);
 4038              		.loc 1 1589 0
 4039 0004 0DF10702 		add	r2, sp, #7
 4040 0008 0121     		movs	r1, #1
 4041 000a 1720     		movs	r0, #23
 4042 000c FFF7FEFF 		bl	spi_read_register
 4043              	.LVL414:
1590:libs/nRF24/nRF24.c ****   return fifo_status;
1591:libs/nRF24/nRF24.c **** }
 4044              		.loc 1 1591 0
 4045 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 4046 0014 03B0     		add	sp, sp, #12
 4047              	.LCFI155:
 4048              		.cfi_def_cfa_offset 4
 4049              		@ sp needed
 4050 0016 5DF804FB 		ldr	pc, [sp], #4
 4051              		.cfi_endproc
 4052              	.LFE200:
 4054              		.section	.text.nRF24_release_payload,"ax",%progbits
 4055              		.align	1
 4056              		.global	nRF24_release_payload
 4057              		.syntax unified
 4058              		.thumb
 4059              		.thumb_func
 4060              		.fpu fpv4-sp-d16
 4062              	nRF24_release_payload:
 4063              	.LFB201:
1592:libs/nRF24/nRF24.c **** 
1593:libs/nRF24/nRF24.c **** /**
1594:libs/nRF24/nRF24.c ****   * @brief Write the payload (data to transfer) to the TX FIFO.
1595:libs/nRF24/nRF24.c ****   * @param tx_payload_width Length of the payload in number of bytes.
1596:libs/nRF24/nRF24.c ****               (!) tx_payload_width MUST be the same value as the receiver's <RX_PW_Px>, x being the
1597:libs/nRF24/nRF24.c ****   * @param payload  Actual data to transfer.
1598:libs/nRF24/nRF24.c ****   * @retval None.
1599:libs/nRF24/nRF24.c ****   */
1600:libs/nRF24/nRF24.c **** void nRF24_release_payload(uint8_t tx_payload_width, uint8_t* payload)
1601:libs/nRF24/nRF24.c **** {
 4064              		.loc 1 1601 0
 4065              		.cfi_startproc
 4066              		@ args = 0, pretend = 0, frame = 0
 4067              		@ frame_needed = 0, uses_anonymous_args = 0
 4068              	.LVL415:
 4069 0000 08B5     		push	{r3, lr}
 4070              	.LCFI156:
 4071              		.cfi_def_cfa_offset 8
 4072              		.cfi_offset 3, -8
 4073              		.cfi_offset 14, -4
1602:libs/nRF24/nRF24.c ****   spi_write_register(W_TX_PAYLOAD, tx_payload_width, payload);
 4074              		.loc 1 1602 0
 4075 0002 0A46     		mov	r2, r1
 4076 0004 0146     		mov	r1, r0
 4077              	.LVL416:
 4078 0006 A020     		movs	r0, #160
 4079              	.LVL417:
ARM GAS  /tmp/ccRs3XjX.s 			page 101


 4080 0008 FFF7FEFF 		bl	spi_write_register
 4081              	.LVL418:
 4082 000c 08BD     		pop	{r3, pc}
 4083              		.cfi_endproc
 4084              	.LFE201:
 4086              		.section	.text.nRF24_send_packet,"ax",%progbits
 4087              		.align	1
 4088              		.global	nRF24_send_packet
 4089              		.syntax unified
 4090              		.thumb
 4091              		.thumb_func
 4092              		.fpu fpv4-sp-d16
 4094              	nRF24_send_packet:
 4095              	.LFB149:
 605:libs/nRF24/nRF24.c **** 
 4096              		.loc 1 605 0
 4097              		.cfi_startproc
 4098              		@ args = 0, pretend = 0, frame = 72
 4099              		@ frame_needed = 0, uses_anonymous_args = 0
 4100              	.LVL419:
 4101 0000 30B5     		push	{r4, r5, lr}
 4102              	.LCFI157:
 4103              		.cfi_def_cfa_offset 12
 4104              		.cfi_offset 4, -12
 4105              		.cfi_offset 5, -8
 4106              		.cfi_offset 14, -4
 4107 0002 93B0     		sub	sp, sp, #76
 4108              	.LCFI158:
 4109              		.cfi_def_cfa_offset 88
 610:libs/nRF24/nRF24.c **** 
 4110              		.loc 1 610 0
 4111 0004 FFF7FEFF 		bl	nRF24_release_payload
 4112              	.LVL420:
 613:libs/nRF24/nRF24.c **** 
 4113              		.loc 1 613 0
 4114 0008 FFF7FEFF 		bl	nRF24_CE_1
 4115              	.LVL421:
 617:libs/nRF24/nRF24.c **** 
 4116              		.loc 1 617 0
 4117 000c 0DF10702 		add	r2, sp, #7
 4118 0010 0121     		movs	r1, #1
 4119 0012 0720     		movs	r0, #7
 4120 0014 FFF7FEFF 		bl	spi_read_register
 4121              	.LVL422:
 621:libs/nRF24/nRF24.c ****   serial_print(message);
 4122              		.loc 1 621 0
 4123 0018 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 4124 001c 2149     		ldr	r1, .L218
 4125 001e 02A8     		add	r0, sp, #8
 4126 0020 FFF7FEFF 		bl	sprintf
 4127              	.LVL423:
 4128              	.LBB185:
 4129              	.LBB186:
 182:libs/nRF24/nRF24.c **** }
 4130              		.loc 1 182 0
 4131 0024 02A8     		add	r0, sp, #8
 4132              	.LVL424:
ARM GAS  /tmp/ccRs3XjX.s 			page 102


 4133 0026 FFF7FEFF 		bl	strlen
 4134              	.LVL425:
 4135 002a 6423     		movs	r3, #100
 4136 002c 82B2     		uxth	r2, r0
 4137 002e 02A9     		add	r1, sp, #8
 4138              	.LVL426:
 4139 0030 1D48     		ldr	r0, .L218+4
 4140 0032 FFF7FEFF 		bl	HAL_UART_Transmit
 4141              	.LVL427:
 4142              	.LBE186:
 4143              	.LBE185:
 626:libs/nRF24/nRF24.c ****   {
 4144              		.loc 1 626 0
 4145 0036 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 4146 003a 2E2B     		cmp	r3, #46
 4147 003c 1CD0     		beq	.L217
 636:libs/nRF24/nRF24.c ****     serial_print(message);
 4148              		.loc 1 636 0
 4149 003e 02AC     		add	r4, sp, #8
 4150 0040 1A4D     		ldr	r5, .L218+8
 4151 0042 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 4152 0044 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 4153 0046 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 4154 004a 07C4     		stmia	r4!, {r0, r1, r2}
 4155 004c 24F8023B 		strh	r3, [r4], #2	@ movhi
 4156 0050 1B0C     		lsrs	r3, r3, #16
 4157 0052 2370     		strb	r3, [r4]
 4158              	.LVL428:
 4159              	.LBB187:
 4160              	.LBB188:
 182:libs/nRF24/nRF24.c **** }
 4161              		.loc 1 182 0
 4162 0054 02A8     		add	r0, sp, #8
 4163              	.LVL429:
 4164 0056 FFF7FEFF 		bl	strlen
 4165              	.LVL430:
 4166 005a 6423     		movs	r3, #100
 4167 005c 82B2     		uxth	r2, r0
 4168 005e 02A9     		add	r1, sp, #8
 4169              	.LVL431:
 4170 0060 1148     		ldr	r0, .L218+4
 4171 0062 FFF7FEFF 		bl	HAL_UART_Transmit
 4172              	.LVL432:
 4173              	.L215:
 4174              	.LBE188:
 4175              	.LBE187:
 642:libs/nRF24/nRF24.c **** 
 4176              		.loc 1 642 0
 4177 0066 1022     		movs	r2, #16
 4178 0068 2021     		movs	r1, #32
 4179 006a 4020     		movs	r0, #64
 4180 006c FFF7FEFF 		bl	nRF24_clear_STATUS
 4181              	.LVL433:
 645:libs/nRF24/nRF24.c **** }
 4182              		.loc 1 645 0
 4183 0070 FFF7FEFF 		bl	nRF24_CE_0
 4184              	.LVL434:
ARM GAS  /tmp/ccRs3XjX.s 			page 103


 646:libs/nRF24/nRF24.c **** 
 4185              		.loc 1 646 0
 4186 0074 13B0     		add	sp, sp, #76
 4187              	.LCFI159:
 4188              		.cfi_remember_state
 4189              		.cfi_def_cfa_offset 12
 4190              		@ sp needed
 4191 0076 30BD     		pop	{r4, r5, pc}
 4192              	.L217:
 4193              	.LCFI160:
 4194              		.cfi_restore_state
 629:libs/nRF24/nRF24.c ****     serial_print(message);
 4195              		.loc 1 629 0
 4196 0078 02AC     		add	r4, sp, #8
 4197 007a 0D4D     		ldr	r5, .L218+12
 4198 007c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 4199 007e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 4200 0080 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 4201 0084 07C4     		stmia	r4!, {r0, r1, r2}
 4202 0086 24F8023B 		strh	r3, [r4], #2	@ movhi
 4203 008a 1B0C     		lsrs	r3, r3, #16
 4204 008c 2370     		strb	r3, [r4]
 4205              	.LVL435:
 4206              	.LBB189:
 4207              	.LBB190:
 182:libs/nRF24/nRF24.c **** }
 4208              		.loc 1 182 0
 4209 008e 02A8     		add	r0, sp, #8
 4210              	.LVL436:
 4211 0090 FFF7FEFF 		bl	strlen
 4212              	.LVL437:
 4213 0094 6423     		movs	r3, #100
 4214 0096 82B2     		uxth	r2, r0
 4215 0098 02A9     		add	r1, sp, #8
 4216              	.LVL438:
 4217 009a 0348     		ldr	r0, .L218+4
 4218 009c FFF7FEFF 		bl	HAL_UART_Transmit
 4219              	.LVL439:
 4220 00a0 E1E7     		b	.L215
 4221              	.L219:
 4222 00a2 00BF     		.align	2
 4223              	.L218:
 4224 00a4 B4010000 		.word	.LC27
 4225 00a8 00000000 		.word	huart2
 4226 00ac F0010000 		.word	.LC29
 4227 00b0 D0010000 		.word	.LC28
 4228              	.LBE190:
 4229              	.LBE189:
 4230              		.cfi_endproc
 4231              	.LFE149:
 4233              		.section	.rodata
 4234              		.align	2
 4235              		.set	.LANCHOR0,. + 0
 4236              	.LC0:
 4237 0000 C0       		.byte	-64
 4238 0001 C0       		.byte	-64
 4239 0002 CA       		.byte	-54
ARM GAS  /tmp/ccRs3XjX.s 			page 104


 4240 0003 FE       		.byte	-2
 4241              	.LC1:
 4242 0004 99       		.byte	-103
 4243 0005 AA       		.byte	-86
 4244 0006 BB       		.byte	-69
 4245 0007 CC       		.byte	-52
 4246 0008 DD       		.byte	-35
 4247              		.section	.rodata.nRF24_print_all_registers.str1.4,"aMS",%progbits,1
 4248              		.align	2
 4249              	.LC8:
 4250 0000 434F4E46 		.ascii	"CONFIG: <0x%02x>\012\000"
 4250      49473A20 
 4250      3C307825 
 4250      3032783E 
 4250      0A00
 4251 0012 0000     		.space	2
 4252              	.LC9:
 4253 0014 454E5F41 		.ascii	"EN_AA: <0x%02x>\012\000"
 4253      413A203C 
 4253      30782530 
 4253      32783E0A 
 4253      00
 4254 0025 000000   		.space	3
 4255              	.LC10:
 4256 0028 454E5F52 		.ascii	"EN_RXADDR: <0x%02x>\012\000"
 4256      58414444 
 4256      523A203C 
 4256      30782530 
 4256      32783E0A 
 4257 003d 000000   		.space	3
 4258              	.LC11:
 4259 0040 53455455 		.ascii	"SETUP_AW: <0x%02x>\012\000"
 4259      505F4157 
 4259      3A203C30 
 4259      78253032 
 4259      783E0A00 
 4260              	.LC12:
 4261 0054 53455455 		.ascii	"SETUP_RETR: <0x%02x>\012\000"
 4261      505F5245 
 4261      54523A20 
 4261      3C307825 
 4261      3032783E 
 4262 006a 0000     		.space	2
 4263              	.LC13:
 4264 006c 52465F43 		.ascii	"RF_CH: <0x%02x>\012\000"
 4264      483A203C 
 4264      30782530 
 4264      32783E0A 
 4264      00
 4265 007d 000000   		.space	3
 4266              	.LC14:
 4267 0080 52465F53 		.ascii	"RF_SETUP: <0x%02x>\012\000"
 4267      45545550 
 4267      3A203C30 
 4267      78253032 
 4267      783E0A00 
 4268              	.LC15:
ARM GAS  /tmp/ccRs3XjX.s 			page 105


 4269 0094 53544154 		.ascii	"STATUS: <0x%02x>\012\000"
 4269      55533A20 
 4269      3C307825 
 4269      3032783E 
 4269      0A00
 4270 00a6 0000     		.space	2
 4271              	.LC16:
 4272 00a8 52585F41 		.ascii	"RX_ADDR_P0: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4272      4444525F 
 4272      50303A20 
 4272      3C252330 
 4272      32782025 
 4273 00d5 000000   		.space	3
 4274              	.LC17:
 4275 00d8 52585F41 		.ascii	"RX_ADDR_P1: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4275      4444525F 
 4275      50313A20 
 4275      3C252330 
 4275      32782025 
 4276 0105 000000   		.space	3
 4277              	.LC18:
 4278 0108 52585F41 		.ascii	"RX_ADDR_P2: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4278      4444525F 
 4278      50323A20 
 4278      3C252330 
 4278      32782025 
 4279 0135 000000   		.space	3
 4280              	.LC19:
 4281 0138 52585F41 		.ascii	"RX_ADDR_P3: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4281      4444525F 
 4281      50333A20 
 4281      3C252330 
 4281      32782025 
 4282 0165 000000   		.space	3
 4283              	.LC20:
 4284 0168 52585F41 		.ascii	"RX_ADDR_P4: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4284      4444525F 
 4284      50343A20 
 4284      3C252330 
 4284      32782025 
 4285 0195 000000   		.space	3
 4286              	.LC21:
 4287 0198 52585F41 		.ascii	"RX_ADDR_P5: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4287      4444525F 
 4287      50353A20 
 4287      3C252330 
 4287      32782025 
 4288 01c5 000000   		.space	3
 4289              	.LC22:
 4290 01c8 54585F41 		.ascii	"TX_ADDR: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4290      4444523A 
 4290      203C2523 
 4290      30327820 
 4290      25233032 
 4291              		.section	.rodata.nRF24_receive_packet.str1.4,"aMS",%progbits,1
 4292              		.align	2
 4293              	.LC30:
ARM GAS  /tmp/ccRs3XjX.s 			page 106


 4294 0000 3E204461 		.ascii	"> Data received: \000"
 4294      74612072 
 4294      65636569 
 4294      7665643A 
 4294      2000
 4295 0012 0000     		.space	2
 4296              	.LC31:
 4297 0014 4E6F2064 		.ascii	"No data has been received.\012\000"
 4297      61746120 
 4297      68617320 
 4297      6265656E 
 4297      20726563 
 4298              		.section	.rodata.nRF24_tx_self_test.str1.4,"aMS",%progbits,1
 4299              		.align	2
 4300              	.LC23:
 4301 0000 2D2D2D2D 		.ascii	"---- nrf24 tx self test. ----\012\000"
 4301      206E7266 
 4301      32342074 
 4301      78207365 
 4301      6C662074 
 4302 001f 00       		.space	1
 4303              	.LC24:
 4304 0020 2D2D2D2D 		.ascii	"---- This test to verifies function of a tranmitter"
 4304      20546869 
 4304      73207465 
 4304      73742074 
 4304      6F207665 
 4305 0053 2073656E 		.ascii	" send without a receiver. ----\012\000"
 4305      64207769 
 4305      74686F75 
 4305      74206120 
 4305      72656365 
 4306 0073 00       		.space	1
 4307              	.LC25:
 4308 0074 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has passed.    "
 4308      6E524632 
 4308      34207472 
 4308      616E736D 
 4308      69737369 
 4309 00a4 20202020 		.ascii	"                    <STATUS> has value of 0x2E.    "
 4309      20202020 
 4309      20202020 
 4309      20202020 
 4309      20202020 
 4310 00d7 20202020 		.ascii	"                    TX_DS (transfer data sent) was "
 4310      20202020 
 4310      20202020 
 4310      20202020 
 4310      20202020 
 4311 010a 7365742E 		.ascii	"set.                        RX_P_NO = 111, this mea"
 4311      20202020 
 4311      20202020 
 4311      20202020 
 4311      20202020 
 4312 013d 6E732052 		.ascii	"ns RX FIFO Empty. \012\000"
 4312      58204649 
 4312      464F2045 
ARM GAS  /tmp/ccRs3XjX.s 			page 107


 4312      6D707479 
 4312      2E200A00 
 4313 0151 000000   		.space	3
 4314              	.LC26:
 4315 0154 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has failed. <ST"
 4315      6E524632 
 4315      34207472 
 4315      616E736D 
 4315      69737369 
 4316 0184 41545553 		.ascii	"ATUS> is expected 0x2E. Current value: %#02x\012\000"
 4316      3E206973 
 4316      20657870 
 4316      65637465 
 4316      64203078 
 4317 01b2 0000     		.space	2
 4318              	.LC27:
 4319 01b4 3C535441 		.ascii	"<STATUS> REGISTER : %#02x\012\000"
 4319      5455533E 
 4319      20524547 
 4319      49535445 
 4319      52203A20 
 4320 01cf 00       		.space	1
 4321              	.LC28:
 4322 01d0 6E524632 		.ascii	"nRF24 send status - success -\012\000"
 4322      34207365 
 4322      6E642073 
 4322      74617475 
 4322      73202D20 
 4323 01ef 00       		.space	1
 4324              	.LC29:
 4325 01f0 6E524632 		.ascii	"nRF24 send status - failure -\012\000"
 4325      34207365 
 4325      6E642073 
 4325      74617475 
 4325      73202D20 
 4326              		.section	.rodata.nRF24_verified_write_register.str1.4,"aMS",%progbits,1
 4327              		.align	2
 4328              	.LC2:
 4329 0000 50726F62 		.ascii	"Problem writing to nRF24 register -- \000"
 4329      6C656D20 
 4329      77726974 
 4329      696E6720 
 4329      746F206E 
 4330 0026 0000     		.space	2
 4331              	.LC3:
 4332 0028 77726974 		.ascii	"writing data: <%#02x> read_data: <%#02x>\012\000"
 4332      696E6720 
 4332      64617461 
 4332      3A203C25 
 4332      23303278 
 4333 0052 0000     		.space	2
 4334              	.LC4:
 4335 0054 53756363 		.ascii	"Success writing to nRF24 register -- \000"
 4335      65737320 
 4335      77726974 
 4335      696E6720 
 4335      746F206E 
ARM GAS  /tmp/ccRs3XjX.s 			page 108


 4336              		.section	.rodata.print_bytearray.str1.4,"aMS",%progbits,1
 4337              		.align	2
 4338              	.LC5:
 4339 0000 25233032 		.ascii	"%#02x\000"
 4339      7800
 4340 0006 0000     		.space	2
 4341              	.LC6:
 4342 0008 2D00     		.ascii	"-\000"
 4343 000a 0000     		.space	2
 4344              	.LC7:
 4345 000c 0A00     		.ascii	"\012\000"
 4346              		.text
 4347              	.Letext0:
 4348              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4349              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4350              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 4351              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 4352              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 4353              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 4354              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 4355              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 4356              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 4357              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 4358              		.file 12 "/usr/include/newlib/sys/lock.h"
 4359              		.file 13 "/usr/include/newlib/sys/_types.h"
 4360              		.file 14 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4361              		.file 15 "/usr/include/newlib/sys/reent.h"
 4362              		.file 16 "libs/nRF24/nRF24.h"
 4363              		.file 17 "/usr/include/newlib/string.h"
 4364              		.file 18 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccRs3XjX.s 			page 109


DEFINED SYMBOLS
                            *ABS*:0000000000000000 nRF24.c
     /tmp/ccRs3XjX.s:18     .text.nRF24_gpio_initialize:0000000000000000 $t
     /tmp/ccRs3XjX.s:25     .text.nRF24_gpio_initialize:0000000000000000 nRF24_gpio_initialize
     /tmp/ccRs3XjX.s:38     .text.SPI_SCK_1:0000000000000000 $t
     /tmp/ccRs3XjX.s:45     .text.SPI_SCK_1:0000000000000000 SPI_SCK_1
     /tmp/ccRs3XjX.s:67     .text.SPI_SCK_1:0000000000000010 $d
     /tmp/ccRs3XjX.s:72     .text.SPI_SCK_0:0000000000000000 $t
     /tmp/ccRs3XjX.s:79     .text.SPI_SCK_0:0000000000000000 SPI_SCK_0
     /tmp/ccRs3XjX.s:100    .text.SPI_SCK_0:0000000000000010 $d
     /tmp/ccRs3XjX.s:105    .text.SPI_MOSI_1:0000000000000000 $t
     /tmp/ccRs3XjX.s:112    .text.SPI_MOSI_1:0000000000000000 SPI_MOSI_1
     /tmp/ccRs3XjX.s:133    .text.SPI_MOSI_1:0000000000000010 $d
     /tmp/ccRs3XjX.s:138    .text.SPI_MOSI_0:0000000000000000 $t
     /tmp/ccRs3XjX.s:145    .text.SPI_MOSI_0:0000000000000000 SPI_MOSI_0
     /tmp/ccRs3XjX.s:166    .text.SPI_MOSI_0:0000000000000010 $d
     /tmp/ccRs3XjX.s:171    .text.SPI_CS_1:0000000000000000 $t
     /tmp/ccRs3XjX.s:178    .text.SPI_CS_1:0000000000000000 SPI_CS_1
     /tmp/ccRs3XjX.s:199    .text.SPI_CS_1:0000000000000010 $d
     /tmp/ccRs3XjX.s:204    .text.SPI_CS_0:0000000000000000 $t
     /tmp/ccRs3XjX.s:211    .text.SPI_CS_0:0000000000000000 SPI_CS_0
     /tmp/ccRs3XjX.s:232    .text.SPI_CS_0:0000000000000010 $d
     /tmp/ccRs3XjX.s:237    .text.SPI_READ_MISO:0000000000000000 $t
     /tmp/ccRs3XjX.s:244    .text.SPI_READ_MISO:0000000000000000 SPI_READ_MISO
     /tmp/ccRs3XjX.s:268    .text.SPI_READ_MISO:0000000000000014 $d
     /tmp/ccRs3XjX.s:273    .text.serial_print:0000000000000000 $t
     /tmp/ccRs3XjX.s:280    .text.serial_print:0000000000000000 serial_print
     /tmp/ccRs3XjX.s:307    .text.serial_print:0000000000000018 $d
     /tmp/ccRs3XjX.s:312    .text.SPI_DELAY:0000000000000000 $t
     /tmp/ccRs3XjX.s:319    .text.SPI_DELAY:0000000000000000 SPI_DELAY
     /tmp/ccRs3XjX.s:339    .text.gpio_clockout_8_bits:0000000000000000 $t
     /tmp/ccRs3XjX.s:346    .text.gpio_clockout_8_bits:0000000000000000 gpio_clockout_8_bits
     /tmp/ccRs3XjX.s:451    .text.gpio_clockout_8_bits:0000000000000068 $d
     /tmp/ccRs3XjX.s:459    .text.gpio_clockin_8_bits:0000000000000000 $t
     /tmp/ccRs3XjX.s:466    .text.gpio_clockin_8_bits:0000000000000000 gpio_clockin_8_bits
     /tmp/ccRs3XjX.s:568    .text.gpio_clockin_8_bits:0000000000000060 $d
     /tmp/ccRs3XjX.s:573    .text.spi_read_register:0000000000000000 $t
     /tmp/ccRs3XjX.s:580    .text.spi_read_register:0000000000000000 spi_read_register
     /tmp/ccRs3XjX.s:645    .text.spi_read_register:0000000000000034 $d
     /tmp/ccRs3XjX.s:652    .text.spi_write_register:0000000000000000 $t
     /tmp/ccRs3XjX.s:659    .text.spi_write_register:0000000000000000 spi_write_register
     /tmp/ccRs3XjX.s:726    .text.spi_write_register:0000000000000034 $d
     /tmp/ccRs3XjX.s:733    .text.nRF24_CE_1:0000000000000000 $t
     /tmp/ccRs3XjX.s:740    .text.nRF24_CE_1:0000000000000000 nRF24_CE_1
     /tmp/ccRs3XjX.s:761    .text.nRF24_CE_1:0000000000000010 $d
     /tmp/ccRs3XjX.s:766    .text.nRF24_CE_0:0000000000000000 $t
     /tmp/ccRs3XjX.s:773    .text.nRF24_CE_0:0000000000000000 nRF24_CE_0
     /tmp/ccRs3XjX.s:794    .text.nRF24_CE_0:0000000000000010 $d
     /tmp/ccRs3XjX.s:799    .text.nRF24_verified_write_register:0000000000000000 $t
     /tmp/ccRs3XjX.s:806    .text.nRF24_verified_write_register:0000000000000000 nRF24_verified_write_register
     /tmp/ccRs3XjX.s:995    .text.nRF24_verified_write_register:00000000000000f4 $d
     /tmp/ccRs3XjX.s:1003   .text.print_bytearray:0000000000000000 $t
     /tmp/ccRs3XjX.s:1010   .text.print_bytearray:0000000000000000 print_bytearray
     /tmp/ccRs3XjX.s:1100   .text.print_bytearray:0000000000000054 $d
     /tmp/ccRs3XjX.s:1108   .text.nRF24_print_all_registers:0000000000000000 $t
     /tmp/ccRs3XjX.s:1115   .text.nRF24_print_all_registers:0000000000000000 nRF24_print_all_registers
     /tmp/ccRs3XjX.s:1609   .text.nRF24_print_all_registers:000000000000030c $d
ARM GAS  /tmp/ccRs3XjX.s 			page 110


     /tmp/ccRs3XjX.s:1629   .text.nRF24_set_CONFIG:0000000000000000 $t
     /tmp/ccRs3XjX.s:1636   .text.nRF24_set_CONFIG:0000000000000000 nRF24_set_CONFIG
     /tmp/ccRs3XjX.s:1681   .text.nRF24_get_CONFIG:0000000000000000 $t
     /tmp/ccRs3XjX.s:1688   .text.nRF24_get_CONFIG:0000000000000000 nRF24_get_CONFIG
     /tmp/ccRs3XjX.s:1718   .text.nRF24_set_EN_AA:0000000000000000 $t
     /tmp/ccRs3XjX.s:1725   .text.nRF24_set_EN_AA:0000000000000000 nRF24_set_EN_AA
     /tmp/ccRs3XjX.s:1767   .text.nRF24_get_EN_AA:0000000000000000 $t
     /tmp/ccRs3XjX.s:1774   .text.nRF24_get_EN_AA:0000000000000000 nRF24_get_EN_AA
     /tmp/ccRs3XjX.s:1804   .text.nRF24_set_EN_RXADDR:0000000000000000 $t
     /tmp/ccRs3XjX.s:1811   .text.nRF24_set_EN_RXADDR:0000000000000000 nRF24_set_EN_RXADDR
     /tmp/ccRs3XjX.s:1853   .text.nRF24_get_EN_RXADDR:0000000000000000 $t
     /tmp/ccRs3XjX.s:1860   .text.nRF24_get_EN_RXADDR:0000000000000000 nRF24_get_EN_RXADDR
     /tmp/ccRs3XjX.s:1890   .text.nRF24_set_SETUP_AW:0000000000000000 $t
     /tmp/ccRs3XjX.s:1897   .text.nRF24_set_SETUP_AW:0000000000000000 nRF24_set_SETUP_AW
     /tmp/ccRs3XjX.s:1930   .text.nRF24_get_SETUP_AW:0000000000000000 $t
     /tmp/ccRs3XjX.s:1937   .text.nRF24_get_SETUP_AW:0000000000000000 nRF24_get_SETUP_AW
     /tmp/ccRs3XjX.s:1967   .text.nRF24_set_SETUP_RETR:0000000000000000 $t
     /tmp/ccRs3XjX.s:1974   .text.nRF24_set_SETUP_RETR:0000000000000000 nRF24_set_SETUP_RETR
     /tmp/ccRs3XjX.s:2009   .text.nRF24_get_SETUP_RETR:0000000000000000 $t
     /tmp/ccRs3XjX.s:2016   .text.nRF24_get_SETUP_RETR:0000000000000000 nRF24_get_SETUP_RETR
     /tmp/ccRs3XjX.s:2049   .text.nRF24_set_RF_CH:0000000000000000 $t
     /tmp/ccRs3XjX.s:2056   .text.nRF24_set_RF_CH:0000000000000000 nRF24_set_RF_CH
     /tmp/ccRs3XjX.s:2089   .text.nRF24_get_RF_CH:0000000000000000 $t
     /tmp/ccRs3XjX.s:2096   .text.nRF24_get_RF_CH:0000000000000000 nRF24_get_RF_CH
     /tmp/ccRs3XjX.s:2126   .text.nRF24_set_RF_SETUP:0000000000000000 $t
     /tmp/ccRs3XjX.s:2133   .text.nRF24_set_RF_SETUP:0000000000000000 nRF24_set_RF_SETUP
     /tmp/ccRs3XjX.s:2174   .text.nRF24_get_RF_SETUP:0000000000000000 $t
     /tmp/ccRs3XjX.s:2181   .text.nRF24_get_RF_SETUP:0000000000000000 nRF24_get_RF_SETUP
     /tmp/ccRs3XjX.s:2211   .text.nRF24_clear_STATUS:0000000000000000 $t
     /tmp/ccRs3XjX.s:2218   .text.nRF24_clear_STATUS:0000000000000000 nRF24_clear_STATUS
     /tmp/ccRs3XjX.s:2255   .text.nRF24_tx_self_test:0000000000000000 $t
     /tmp/ccRs3XjX.s:2262   .text.nRF24_tx_self_test:0000000000000000 nRF24_tx_self_test
     /tmp/ccRs3XjX.s:2501   .text.nRF24_tx_self_test:0000000000000170 $d
     /tmp/ccRs3XjX.s:2517   .text.nRF24_get_STATUS:0000000000000000 $t
     /tmp/ccRs3XjX.s:2524   .text.nRF24_get_STATUS:0000000000000000 nRF24_get_STATUS
     /tmp/ccRs3XjX.s:2554   .text.nRF24_receive_packet:0000000000000000 $t
     /tmp/ccRs3XjX.s:2561   .text.nRF24_receive_packet:0000000000000000 nRF24_receive_packet
     /tmp/ccRs3XjX.s:2672   .text.nRF24_receive_packet:0000000000000078 $d
     /tmp/ccRs3XjX.s:2679   .text.nRF24_get_OBSERVE_TX:0000000000000000 $t
     /tmp/ccRs3XjX.s:2686   .text.nRF24_get_OBSERVE_TX:0000000000000000 nRF24_get_OBSERVE_TX
     /tmp/ccRs3XjX.s:2716   .text.nRF24_get_RPD:0000000000000000 $t
     /tmp/ccRs3XjX.s:2723   .text.nRF24_get_RPD:0000000000000000 nRF24_get_RPD
     /tmp/ccRs3XjX.s:2753   .text.nRF24_set_RX_ADDR_P0:0000000000000000 $t
     /tmp/ccRs3XjX.s:2760   .text.nRF24_set_RX_ADDR_P0:0000000000000000 nRF24_set_RX_ADDR_P0
     /tmp/ccRs3XjX.s:2785   .text.nRF24_get_RX_ADDR_P0:0000000000000000 $t
     /tmp/ccRs3XjX.s:2792   .text.nRF24_get_RX_ADDR_P0:0000000000000000 nRF24_get_RX_ADDR_P0
     /tmp/ccRs3XjX.s:2817   .text.nRF24_set_RX_ADDR_P1:0000000000000000 $t
     /tmp/ccRs3XjX.s:2824   .text.nRF24_set_RX_ADDR_P1:0000000000000000 nRF24_set_RX_ADDR_P1
     /tmp/ccRs3XjX.s:2849   .text.nRF24_get_RX_ADDR_P1:0000000000000000 $t
     /tmp/ccRs3XjX.s:2856   .text.nRF24_get_RX_ADDR_P1:0000000000000000 nRF24_get_RX_ADDR_P1
     /tmp/ccRs3XjX.s:2881   .text.nRF24_set_RX_ADDR_P2:0000000000000000 $t
     /tmp/ccRs3XjX.s:2888   .text.nRF24_set_RX_ADDR_P2:0000000000000000 nRF24_set_RX_ADDR_P2
     /tmp/ccRs3XjX.s:2921   .text.nRF24_get_RX_ADDR_P2:0000000000000000 $t
     /tmp/ccRs3XjX.s:2928   .text.nRF24_get_RX_ADDR_P2:0000000000000000 nRF24_get_RX_ADDR_P2
     /tmp/ccRs3XjX.s:2953   .text.nRF24_set_RX_ADDR_P3:0000000000000000 $t
     /tmp/ccRs3XjX.s:2960   .text.nRF24_set_RX_ADDR_P3:0000000000000000 nRF24_set_RX_ADDR_P3
     /tmp/ccRs3XjX.s:2993   .text.nRF24_get_RX_ADDR_P3:0000000000000000 $t
ARM GAS  /tmp/ccRs3XjX.s 			page 111


     /tmp/ccRs3XjX.s:3000   .text.nRF24_get_RX_ADDR_P3:0000000000000000 nRF24_get_RX_ADDR_P3
     /tmp/ccRs3XjX.s:3025   .text.nRF24_set_RX_ADDR_P4:0000000000000000 $t
     /tmp/ccRs3XjX.s:3032   .text.nRF24_set_RX_ADDR_P4:0000000000000000 nRF24_set_RX_ADDR_P4
     /tmp/ccRs3XjX.s:3065   .text.nRF24_get_RX_ADDR_P4:0000000000000000 $t
     /tmp/ccRs3XjX.s:3072   .text.nRF24_get_RX_ADDR_P4:0000000000000000 nRF24_get_RX_ADDR_P4
     /tmp/ccRs3XjX.s:3097   .text.nRF24_set_RX_ADDR_P5:0000000000000000 $t
     /tmp/ccRs3XjX.s:3104   .text.nRF24_set_RX_ADDR_P5:0000000000000000 nRF24_set_RX_ADDR_P5
     /tmp/ccRs3XjX.s:3137   .text.nRF24_get_RX_ADDR_P5:0000000000000000 $t
     /tmp/ccRs3XjX.s:3144   .text.nRF24_get_RX_ADDR_P5:0000000000000000 nRF24_get_RX_ADDR_P5
     /tmp/ccRs3XjX.s:3169   .text.nRF24_set_TX_ADDR:0000000000000000 $t
     /tmp/ccRs3XjX.s:3176   .text.nRF24_set_TX_ADDR:0000000000000000 nRF24_set_TX_ADDR
     /tmp/ccRs3XjX.s:3201   .text.nRF24_config_normal_tx_mode:0000000000000000 $t
     /tmp/ccRs3XjX.s:3208   .text.nRF24_config_normal_tx_mode:0000000000000000 nRF24_config_normal_tx_mode
     /tmp/ccRs3XjX.s:3297   .text.nRF24_config_normal_tx_mode:000000000000007c $d
     /tmp/ccRs3XjX.s:3302   .text.nRF24_config_enhanced_shockburst_tx_mode:0000000000000000 $t
     /tmp/ccRs3XjX.s:3309   .text.nRF24_config_enhanced_shockburst_tx_mode:0000000000000000 nRF24_config_enhanced_shockburst_tx_mode
     /tmp/ccRs3XjX.s:3409   .text.nRF24_config_enhanced_shockburst_tx_mode:000000000000008c $d
     /tmp/ccRs3XjX.s:3414   .text.nRF24_get_TX_ADDR:0000000000000000 $t
     /tmp/ccRs3XjX.s:3421   .text.nRF24_get_TX_ADDR:0000000000000000 nRF24_get_TX_ADDR
     /tmp/ccRs3XjX.s:3446   .text.nRF24_set_RX_PW_P0:0000000000000000 $t
     /tmp/ccRs3XjX.s:3453   .text.nRF24_set_RX_PW_P0:0000000000000000 nRF24_set_RX_PW_P0
     /tmp/ccRs3XjX.s:3486   .text.nRF24_config_normal_rx_mode:0000000000000000 $t
     /tmp/ccRs3XjX.s:3493   .text.nRF24_config_normal_rx_mode:0000000000000000 nRF24_config_normal_rx_mode
     /tmp/ccRs3XjX.s:3591   .text.nRF24_config_normal_rx_mode:0000000000000088 $d
     /tmp/ccRs3XjX.s:3596   .text.nRF24_get_RX_PW_P0:0000000000000000 $t
     /tmp/ccRs3XjX.s:3603   .text.nRF24_get_RX_PW_P0:0000000000000000 nRF24_get_RX_PW_P0
     /tmp/ccRs3XjX.s:3633   .text.nRF24_set_RX_PW_P1:0000000000000000 $t
     /tmp/ccRs3XjX.s:3640   .text.nRF24_set_RX_PW_P1:0000000000000000 nRF24_set_RX_PW_P1
     /tmp/ccRs3XjX.s:3673   .text.nRF24_get_RX_PW_P1:0000000000000000 $t
     /tmp/ccRs3XjX.s:3680   .text.nRF24_get_RX_PW_P1:0000000000000000 nRF24_get_RX_PW_P1
     /tmp/ccRs3XjX.s:3710   .text.nRF24_set_RX_PW_P2:0000000000000000 $t
     /tmp/ccRs3XjX.s:3717   .text.nRF24_set_RX_PW_P2:0000000000000000 nRF24_set_RX_PW_P2
     /tmp/ccRs3XjX.s:3750   .text.nRF24_get_RX_PW_P2:0000000000000000 $t
     /tmp/ccRs3XjX.s:3757   .text.nRF24_get_RX_PW_P2:0000000000000000 nRF24_get_RX_PW_P2
     /tmp/ccRs3XjX.s:3787   .text.nRF24_set_RX_PW_P3:0000000000000000 $t
     /tmp/ccRs3XjX.s:3794   .text.nRF24_set_RX_PW_P3:0000000000000000 nRF24_set_RX_PW_P3
     /tmp/ccRs3XjX.s:3827   .text.nRF24_get_RX_PW_P3:0000000000000000 $t
     /tmp/ccRs3XjX.s:3834   .text.nRF24_get_RX_PW_P3:0000000000000000 nRF24_get_RX_PW_P3
     /tmp/ccRs3XjX.s:3864   .text.nRF24_set_RX_PW_P4:0000000000000000 $t
     /tmp/ccRs3XjX.s:3871   .text.nRF24_set_RX_PW_P4:0000000000000000 nRF24_set_RX_PW_P4
     /tmp/ccRs3XjX.s:3904   .text.nRF24_get_RX_PW_P4:0000000000000000 $t
     /tmp/ccRs3XjX.s:3911   .text.nRF24_get_RX_PW_P4:0000000000000000 nRF24_get_RX_PW_P4
     /tmp/ccRs3XjX.s:3941   .text.nRF24_set_RX_PW_P5:0000000000000000 $t
     /tmp/ccRs3XjX.s:3948   .text.nRF24_set_RX_PW_P5:0000000000000000 nRF24_set_RX_PW_P5
     /tmp/ccRs3XjX.s:3981   .text.nRF24_get_RX_PW_P5:0000000000000000 $t
     /tmp/ccRs3XjX.s:3988   .text.nRF24_get_RX_PW_P5:0000000000000000 nRF24_get_RX_PW_P5
     /tmp/ccRs3XjX.s:4018   .text.nRF24_get_FIFO_STATUS:0000000000000000 $t
     /tmp/ccRs3XjX.s:4025   .text.nRF24_get_FIFO_STATUS:0000000000000000 nRF24_get_FIFO_STATUS
     /tmp/ccRs3XjX.s:4055   .text.nRF24_release_payload:0000000000000000 $t
     /tmp/ccRs3XjX.s:4062   .text.nRF24_release_payload:0000000000000000 nRF24_release_payload
     /tmp/ccRs3XjX.s:4087   .text.nRF24_send_packet:0000000000000000 $t
     /tmp/ccRs3XjX.s:4094   .text.nRF24_send_packet:0000000000000000 nRF24_send_packet
     /tmp/ccRs3XjX.s:4224   .text.nRF24_send_packet:00000000000000a4 $d
     /tmp/ccRs3XjX.s:4234   .rodata:0000000000000000 $d
     /tmp/ccRs3XjX.s:4248   .rodata.nRF24_print_all_registers.str1.4:0000000000000000 $d
     /tmp/ccRs3XjX.s:4292   .rodata.nRF24_receive_packet.str1.4:0000000000000000 $d
     /tmp/ccRs3XjX.s:4299   .rodata.nRF24_tx_self_test.str1.4:0000000000000000 $d
ARM GAS  /tmp/ccRs3XjX.s 			page 112


     /tmp/ccRs3XjX.s:4327   .rodata.nRF24_verified_write_register.str1.4:0000000000000000 $d
     /tmp/ccRs3XjX.s:4337   .rodata.print_bytearray.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_ReadPin
strlen
HAL_UART_Transmit
huart2
HAL_Delay
sprintf
memcpy
