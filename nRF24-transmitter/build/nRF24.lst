ARM GAS  /tmp/ccrbCVze.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"nRF24.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SPI_SCK_1,"ax",%progbits
  18              		.align	1
  19              		.global	SPI_SCK_1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SPI_SCK_1:
  26              	.LFB131:
  27              		.file 1 "Src/nRF24.c"
   1:Src/nRF24.c   **** /**
   2:Src/nRF24.c   ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
   3:Src/nRF24.c   ****   * @file      :     nRF24.c
   4:Src/nRF24.c   ****   * @author    :     Luyao Han
   5:Src/nRF24.c   ****   * @email     :     luyaohan1001@gmail.com
   6:Src/nRF24.c   ****   * @brief     :     C library for Nordic nRF24L01 2.4GHz wireless transceiver.
   7:Src/nRF24.c   ****   * @date      :     04-21-2022
   8:Src/nRF24.c   ****   * Copyright (C) 2022-2122 Luyao Han. The following code may be shared or modified for personal us
   9:Src/nRF24.c   ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
  10:Src/nRF24.c   **** 
  11:Src/nRF24.c   **** /* Includes -------------------------------------------------------------------*/
  12:Src/nRF24.c   **** #include "nRF24.h"
  13:Src/nRF24.c   **** 
  14:Src/nRF24.c   **** /* GPIO Operations --------------------------------------------------------*/
  15:Src/nRF24.c   **** 
  16:Src/nRF24.c   **** /* SCK    PA8  */
  17:Src/nRF24.c   **** /* MOSI   PB10 */
  18:Src/nRF24.c   **** /* CSN    PB4  */
  19:Src/nRF24.c   **** /* CE     PB5  */
  20:Src/nRF24.c   **** /* MISO   PA10 */
  21:Src/nRF24.c   **** 
  22:Src/nRF24.c   **** /**
  23:Src/nRF24.c   ****   * @brief Set high on SCK pin of SPI bus.
  24:Src/nRF24.c   ****   * @param None
  25:Src/nRF24.c   ****   * @retval None */
  26:Src/nRF24.c   **** __inline__ void SPI_SCK_1()
  27:Src/nRF24.c   **** {
  28              		.loc 1 27 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccrbCVze.s 			page 2


  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  28:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  
  37              		.loc 1 28 0
  38 0002 0122     		movs	r2, #1
  39 0004 4FF48071 		mov	r1, #256
  40 0008 0148     		ldr	r0, .L3
  41 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  42              	.LVL0:
  43 000e 08BD     		pop	{r3, pc}
  44              	.L4:
  45              		.align	2
  46              	.L3:
  47 0010 00000240 		.word	1073872896
  48              		.cfi_endproc
  49              	.LFE131:
  51              		.section	.text.SPI_SCK_0,"ax",%progbits
  52              		.align	1
  53              		.global	SPI_SCK_0
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	SPI_SCK_0:
  60              	.LFB132:
  29:Src/nRF24.c   **** }
  30:Src/nRF24.c   **** 
  31:Src/nRF24.c   **** /**
  32:Src/nRF24.c   ****   * @brief Set low on SCK pin of SPI bus.
  33:Src/nRF24.c   ****   * @param None
  34:Src/nRF24.c   ****   * @retval None
  35:Src/nRF24.c   ****   */
  36:Src/nRF24.c   **** __inline__ void SPI_SCK_0()
  37:Src/nRF24.c   **** {
  61              		.loc 1 37 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
  38:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  
  70              		.loc 1 38 0
  71 0002 0022     		movs	r2, #0
  72 0004 4FF48071 		mov	r1, #256
  73 0008 0148     		ldr	r0, .L7
  74 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  75              	.LVL1:
  76 000e 08BD     		pop	{r3, pc}
  77              	.L8:
  78              		.align	2
  79              	.L7:
ARM GAS  /tmp/ccrbCVze.s 			page 3


  80 0010 00000240 		.word	1073872896
  81              		.cfi_endproc
  82              	.LFE132:
  84              		.section	.text.SPI_MOSI_1,"ax",%progbits
  85              		.align	1
  86              		.global	SPI_MOSI_1
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	SPI_MOSI_1:
  93              	.LFB133:
  39:Src/nRF24.c   **** } 
  40:Src/nRF24.c   **** 
  41:Src/nRF24.c   **** /**
  42:Src/nRF24.c   ****   * @brief Set high on MOSI pin of SPI bus.
  43:Src/nRF24.c   ****   * @param None
  44:Src/nRF24.c   ****   * @retval None
  45:Src/nRF24.c   ****   */
  46:Src/nRF24.c   **** __inline__ void SPI_MOSI_1()
  47:Src/nRF24.c   **** {
  94              		.loc 1 47 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 08B5     		push	{r3, lr}
  99              	.LCFI2:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
  48:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  
 103              		.loc 1 48 0
 104 0002 0122     		movs	r2, #1
 105 0004 4FF48061 		mov	r1, #1024
 106 0008 0148     		ldr	r0, .L11
 107 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL2:
 109 000e 08BD     		pop	{r3, pc}
 110              	.L12:
 111              		.align	2
 112              	.L11:
 113 0010 00040240 		.word	1073873920
 114              		.cfi_endproc
 115              	.LFE133:
 117              		.section	.text.SPI_MOSI_0,"ax",%progbits
 118              		.align	1
 119              		.global	SPI_MOSI_0
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu fpv4-sp-d16
 125              	SPI_MOSI_0:
 126              	.LFB134:
  49:Src/nRF24.c   **** }
  50:Src/nRF24.c   **** 
  51:Src/nRF24.c   **** /**
  52:Src/nRF24.c   ****   * @brief Set low on MOSI pin of SPI bus.
ARM GAS  /tmp/ccrbCVze.s 			page 4


  53:Src/nRF24.c   ****   * @param None
  54:Src/nRF24.c   ****   * @retval None
  55:Src/nRF24.c   ****   */
  56:Src/nRF24.c   **** __inline__ void SPI_MOSI_0()
  57:Src/nRF24.c   **** {
 127              		.loc 1 57 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131 0000 08B5     		push	{r3, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 3, -8
 135              		.cfi_offset 14, -4
  58:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);  
 136              		.loc 1 58 0
 137 0002 0022     		movs	r2, #0
 138 0004 4FF48061 		mov	r1, #1024
 139 0008 0148     		ldr	r0, .L15
 140 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 141              	.LVL3:
 142 000e 08BD     		pop	{r3, pc}
 143              	.L16:
 144              		.align	2
 145              	.L15:
 146 0010 00040240 		.word	1073873920
 147              		.cfi_endproc
 148              	.LFE134:
 150              		.section	.text.SPI_CS_1,"ax",%progbits
 151              		.align	1
 152              		.global	SPI_CS_1
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu fpv4-sp-d16
 158              	SPI_CS_1:
 159              	.LFB135:
  59:Src/nRF24.c   **** }
  60:Src/nRF24.c   **** 
  61:Src/nRF24.c   **** /**
  62:Src/nRF24.c   ****   * @brief Set high on CS pin of SPI bus.
  63:Src/nRF24.c   ****   * @param None
  64:Src/nRF24.c   ****   * @retval None
  65:Src/nRF24.c   ****   */
  66:Src/nRF24.c   **** __inline__ void SPI_CS_1() 
  67:Src/nRF24.c   **** {
 160              		.loc 1 67 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 08B5     		push	{r3, lr}
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 3, -8
 168              		.cfi_offset 14, -4
  68:Src/nRF24.c   ****     /* CS High == CSN Low */
  69:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  
ARM GAS  /tmp/ccrbCVze.s 			page 5


 169              		.loc 1 69 0
 170 0002 0022     		movs	r2, #0
 171 0004 1021     		movs	r1, #16
 172 0006 0248     		ldr	r0, .L19
 173 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 174              	.LVL4:
 175 000c 08BD     		pop	{r3, pc}
 176              	.L20:
 177 000e 00BF     		.align	2
 178              	.L19:
 179 0010 00040240 		.word	1073873920
 180              		.cfi_endproc
 181              	.LFE135:
 183              		.section	.text.SPI_CS_0,"ax",%progbits
 184              		.align	1
 185              		.global	SPI_CS_0
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	SPI_CS_0:
 192              	.LFB136:
  70:Src/nRF24.c   **** }
  71:Src/nRF24.c   **** 
  72:Src/nRF24.c   **** /**
  73:Src/nRF24.c   ****   * @brief Set low on CS pin of SPI bus.
  74:Src/nRF24.c   ****   * @param None
  75:Src/nRF24.c   ****   * @retval None
  76:Src/nRF24.c   ****   */
  77:Src/nRF24.c   **** __inline__ void SPI_CS_0()
  78:Src/nRF24.c   **** {
 193              		.loc 1 78 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 08B5     		push	{r3, lr}
 198              	.LCFI5:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 3, -8
 201              		.cfi_offset 14, -4
  79:Src/nRF24.c   ****     /* CS Low == CSN High */
  80:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 202              		.loc 1 80 0
 203 0002 0122     		movs	r2, #1
 204 0004 1021     		movs	r1, #16
 205 0006 0248     		ldr	r0, .L23
 206 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 207              	.LVL5:
 208 000c 08BD     		pop	{r3, pc}
 209              	.L24:
 210 000e 00BF     		.align	2
 211              	.L23:
 212 0010 00040240 		.word	1073873920
 213              		.cfi_endproc
 214              	.LFE136:
 216              		.section	.text.SPI_READ_MISO,"ax",%progbits
 217              		.align	1
ARM GAS  /tmp/ccrbCVze.s 			page 6


 218              		.global	SPI_READ_MISO
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	SPI_READ_MISO:
 225              	.LFB137:
  81:Src/nRF24.c   **** }
  82:Src/nRF24.c   **** 
  83:Src/nRF24.c   **** 
  84:Src/nRF24.c   **** /**
  85:Src/nRF24.c   ****   * @brief  Get pin-level on MISO pin of SPI bus.
  86:Src/nRF24.c   ****   * @param  None
  87:Src/nRF24.c   ****   * @retval None
  88:Src/nRF24.c   ****   */
  89:Src/nRF24.c   **** __inline__ GPIO_PinState SPI_READ_MISO()
  90:Src/nRF24.c   **** {
 226              		.loc 1 90 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI6:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
  91:Src/nRF24.c   ****   return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 235              		.loc 1 91 0
 236 0002 4FF48061 		mov	r1, #1024
 237 0006 0248     		ldr	r0, .L27
 238 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 239              	.LVL6:
  92:Src/nRF24.c   **** }
 240              		.loc 1 92 0
 241 000c 08BD     		pop	{r3, pc}
 242              	.L28:
 243 000e 00BF     		.align	2
 244              	.L27:
 245 0010 00000240 		.word	1073872896
 246              		.cfi_endproc
 247              	.LFE137:
 249              		.section	.text.spi_delay,"ax",%progbits
 250              		.align	1
 251              		.global	spi_delay
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv4-sp-d16
 257              	spi_delay:
 258              	.LFB141:
  93:Src/nRF24.c   **** 
  94:Src/nRF24.c   **** /**
  95:Src/nRF24.c   **** 	* @brief Print debug string through USART.
  96:Src/nRF24.c   **** 	* @param p_msg Pointer to anynomous message string.
  97:Src/nRF24.c   **** 	* @retval None.
  98:Src/nRF24.c   **** 	*/
  99:Src/nRF24.c   **** __inline__ void serial_print(char* message)
ARM GAS  /tmp/ccrbCVze.s 			page 7


 100:Src/nRF24.c   **** {
 101:Src/nRF24.c   **** 	HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
 102:Src/nRF24.c   **** }
 103:Src/nRF24.c   **** 
 104:Src/nRF24.c   **** /**
 105:Src/nRF24.c   ****   * @brief      Clock out (write) 8 bits on MOSI of SPI bus on SCK high.
 106:Src/nRF24.c   ****   * @param[in]  tx_data One byte of data to transmit.
 107:Src/nRF24.c   ****   * @retval     None.
 108:Src/nRF24.c   ****   * @note  
 109:Src/nRF24.c   ****   *   Endianess: Most Significant Bit First. Cn: Command Bits. Sn: Status Register bits. Dn: data b
 110:Src/nRF24.c   ****   *
 111:Src/nRF24.c   ****   *   Following is a diagram for time sequence:
 112:Src/nRF24.c   ****   *   CSN ````\____________________________________________________________________________________
 113:Src/nRF24.c   ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|D7|__|D6|__|D5|__|D4|__|D3|__|
 114:Src/nRF24.c   ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 115:Src/nRF24.c   ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 116:Src/nRF24.c   ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 117:Src/nRF24.c   ****   *
 118:Src/nRF24.c   ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 119:Src/nRF24.c   ****   *
 120:Src/nRF24.c   ****   */
 121:Src/nRF24.c   **** void gpio_clockout_8_bits(uint8_t tx_data) 
 122:Src/nRF24.c   **** {
 123:Src/nRF24.c   ****   spi_delay();
 124:Src/nRF24.c   ****   for (int i = 0; i < 8; ++i) 
 125:Src/nRF24.c   ****   {
 126:Src/nRF24.c   ****       SPI_SCK_0();
 127:Src/nRF24.c   ****       spi_delay();
 128:Src/nRF24.c   ****       if(tx_data & 0x80) // MSBit first
 129:Src/nRF24.c   ****           SPI_MOSI_1();
 130:Src/nRF24.c   ****       else
 131:Src/nRF24.c   ****           SPI_MOSI_0();
 132:Src/nRF24.c   ****       SPI_SCK_1(); // clock data
 133:Src/nRF24.c   ****       tx_data = tx_data << 1; // load next MSB
 134:Src/nRF24.c   ****       spi_delay();
 135:Src/nRF24.c   ****   }
 136:Src/nRF24.c   ****   SPI_SCK_0();
 137:Src/nRF24.c   **** }
 138:Src/nRF24.c   **** 
 139:Src/nRF24.c   **** /**
 140:Src/nRF24.c   ****   * @brief  Clock in (read) 8 bits from MISO of SPI bus on SCK high.
 141:Src/nRF24.c   ****   * @param  None
 142:Src/nRF24.c   ****   * @retval A byte of read data.
 143:Src/nRF24.c   ****   * @note
 144:Src/nRF24.c   ****   *   Endianess: Most Significant Bit first. Cn: Command bits. Sn: Status register bits. Dn: Data b
 145:Src/nRF24.c   ****   *    
 146:Src/nRF24.c   ****   *   Following is a diagram for time sequence:
 147:Src/nRF24.c   ****   *   CSN ````\____________________________________________________________________________________
 148:Src/nRF24.c   ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|00|__|00|__|00|__|00|__|00|__|
 149:Src/nRF24.c   ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 150:Src/nRF24.c   ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 151:Src/nRF24.c   ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______|D0|__|D1|__|D2|__|D3|__|D4|__|
 152:Src/nRF24.c   ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 153:Src/nRF24.c   ****   */
 154:Src/nRF24.c   **** uint8_t gpio_clockin_8_bits(void)
 155:Src/nRF24.c   **** {
 156:Src/nRF24.c   ****   uint8_t rx_data = 0;
ARM GAS  /tmp/ccrbCVze.s 			page 8


 157:Src/nRF24.c   **** 
 158:Src/nRF24.c   ****   spi_delay();
 159:Src/nRF24.c   ****   for (int i=0; i < 8; ++i) 
 160:Src/nRF24.c   ****   {
 161:Src/nRF24.c   ****       SPI_SCK_0();
 162:Src/nRF24.c   ****       spi_delay();
 163:Src/nRF24.c   ****       SPI_MOSI_0();
 164:Src/nRF24.c   ****       SPI_SCK_1();
 165:Src/nRF24.c   ****       spi_delay();
 166:Src/nRF24.c   ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 167:Src/nRF24.c   ****       rx_data |= SPI_READ_MISO();
 168:Src/nRF24.c   ****       spi_delay();
 169:Src/nRF24.c   ****   }
 170:Src/nRF24.c   ****   SPI_SCK_0();
 171:Src/nRF24.c   ****   return rx_data;
 172:Src/nRF24.c   **** }
 173:Src/nRF24.c   ****   
 174:Src/nRF24.c   **** 
 175:Src/nRF24.c   **** /* SPI Operations -------------------------------------------------------------------------------*/
 176:Src/nRF24.c   **** void spi_delay() 
 177:Src/nRF24.c   **** {
 259              		.loc 1 177 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263 0000 08B5     		push	{r3, lr}
 264              	.LCFI7:
 265              		.cfi_def_cfa_offset 8
 266              		.cfi_offset 3, -8
 267              		.cfi_offset 14, -4
 178:Src/nRF24.c   ****   HAL_Delay(1);
 268              		.loc 1 178 0
 269 0002 0120     		movs	r0, #1
 270 0004 FFF7FEFF 		bl	HAL_Delay
 271              	.LVL7:
 272 0008 08BD     		pop	{r3, pc}
 273              		.cfi_endproc
 274              	.LFE141:
 276              		.section	.text.gpio_clockout_8_bits,"ax",%progbits
 277              		.align	1
 278              		.global	gpio_clockout_8_bits
 279              		.syntax unified
 280              		.thumb
 281              		.thumb_func
 282              		.fpu fpv4-sp-d16
 284              	gpio_clockout_8_bits:
 285              	.LFB139:
 122:Src/nRF24.c   ****   spi_delay();
 286              		.loc 1 122 0
 287              		.cfi_startproc
 288              		@ args = 0, pretend = 0, frame = 0
 289              		@ frame_needed = 0, uses_anonymous_args = 0
 290              	.LVL8:
 291 0000 38B5     		push	{r3, r4, r5, lr}
 292              	.LCFI8:
 293              		.cfi_def_cfa_offset 16
 294              		.cfi_offset 3, -16
ARM GAS  /tmp/ccrbCVze.s 			page 9


 295              		.cfi_offset 4, -12
 296              		.cfi_offset 5, -8
 297              		.cfi_offset 14, -4
 298 0002 0446     		mov	r4, r0
 123:Src/nRF24.c   ****   for (int i = 0; i < 8; ++i) 
 299              		.loc 1 123 0
 300 0004 FFF7FEFF 		bl	spi_delay
 301              	.LVL9:
 302              	.LBB60:
 124:Src/nRF24.c   ****   {
 303              		.loc 1 124 0
 304 0008 0025     		movs	r5, #0
 305 000a 10E0     		b	.L32
 306              	.LVL10:
 307              	.L38:
 308              	.LBB61:
 309              	.LBB62:
  48:Src/nRF24.c   **** }
 310              		.loc 1 48 0
 311 000c 0122     		movs	r2, #1
 312 000e 4FF48061 		mov	r1, #1024
 313 0012 1448     		ldr	r0, .L39
 314 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 315              	.LVL11:
 316              	.L34:
 317              	.LBE62:
 318              	.LBE61:
 319              	.LBB63:
 320              	.LBB64:
  28:Src/nRF24.c   **** }
 321              		.loc 1 28 0 discriminator 2
 322 0018 0122     		movs	r2, #1
 323 001a 4FF48071 		mov	r1, #256
 324 001e 1248     		ldr	r0, .L39+4
 325 0020 FFF7FEFF 		bl	HAL_GPIO_WritePin
 326              	.LVL12:
 327              	.LBE64:
 328              	.LBE63:
 133:Src/nRF24.c   ****       spi_delay();
 329              		.loc 1 133 0 discriminator 2
 330 0024 6400     		lsls	r4, r4, #1
 331              	.LVL13:
 332 0026 E4B2     		uxtb	r4, r4
 333              	.LVL14:
 134:Src/nRF24.c   ****   }
 334              		.loc 1 134 0 discriminator 2
 335 0028 FFF7FEFF 		bl	spi_delay
 336              	.LVL15:
 124:Src/nRF24.c   ****   {
 337              		.loc 1 124 0 discriminator 2
 338 002c 0135     		adds	r5, r5, #1
 339              	.LVL16:
 340              	.L32:
 124:Src/nRF24.c   ****   {
 341              		.loc 1 124 0 is_stmt 0 discriminator 1
 342 002e 072D     		cmp	r5, #7
 343 0030 11DC     		bgt	.L37
ARM GAS  /tmp/ccrbCVze.s 			page 10


 344              	.LBB65:
 345              	.LBB66:
  38:Src/nRF24.c   **** } 
 346              		.loc 1 38 0 is_stmt 1
 347 0032 0022     		movs	r2, #0
 348 0034 4FF48071 		mov	r1, #256
 349 0038 0B48     		ldr	r0, .L39+4
 350 003a FFF7FEFF 		bl	HAL_GPIO_WritePin
 351              	.LVL17:
 352              	.LBE66:
 353              	.LBE65:
 127:Src/nRF24.c   ****       if(tx_data & 0x80) // MSBit first
 354              		.loc 1 127 0
 355 003e FFF7FEFF 		bl	spi_delay
 356              	.LVL18:
 128:Src/nRF24.c   ****           SPI_MOSI_1();
 357              		.loc 1 128 0
 358 0042 14F0800F 		tst	r4, #128
 359 0046 E1D1     		bne	.L38
 360              	.LBB67:
 361              	.LBB68:
  58:Src/nRF24.c   **** }
 362              		.loc 1 58 0
 363 0048 0022     		movs	r2, #0
 364 004a 4FF48061 		mov	r1, #1024
 365 004e 0548     		ldr	r0, .L39
 366 0050 FFF7FEFF 		bl	HAL_GPIO_WritePin
 367              	.LVL19:
 368 0054 E0E7     		b	.L34
 369              	.L37:
 370              	.LBE68:
 371              	.LBE67:
 372              	.LBE60:
 373              	.LBB69:
 374              	.LBB70:
  38:Src/nRF24.c   **** } 
 375              		.loc 1 38 0
 376 0056 0022     		movs	r2, #0
 377 0058 4FF48071 		mov	r1, #256
 378 005c 0248     		ldr	r0, .L39+4
 379 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 380              	.LVL20:
 381 0062 38BD     		pop	{r3, r4, r5, pc}
 382              	.LVL21:
 383              	.L40:
 384              		.align	2
 385              	.L39:
 386 0064 00040240 		.word	1073873920
 387 0068 00000240 		.word	1073872896
 388              	.LBE70:
 389              	.LBE69:
 390              		.cfi_endproc
 391              	.LFE139:
 393              		.section	.text.gpio_clockin_8_bits,"ax",%progbits
 394              		.align	1
 395              		.global	gpio_clockin_8_bits
 396              		.syntax unified
ARM GAS  /tmp/ccrbCVze.s 			page 11


 397              		.thumb
 398              		.thumb_func
 399              		.fpu fpv4-sp-d16
 401              	gpio_clockin_8_bits:
 402              	.LFB140:
 155:Src/nRF24.c   ****   uint8_t rx_data = 0;
 403              		.loc 1 155 0
 404              		.cfi_startproc
 405              		@ args = 0, pretend = 0, frame = 0
 406              		@ frame_needed = 0, uses_anonymous_args = 0
 407 0000 70B5     		push	{r4, r5, r6, lr}
 408              	.LCFI9:
 409              		.cfi_def_cfa_offset 16
 410              		.cfi_offset 4, -16
 411              		.cfi_offset 5, -12
 412              		.cfi_offset 6, -8
 413              		.cfi_offset 14, -4
 414              	.LVL22:
 158:Src/nRF24.c   ****   for (int i=0; i < 8; ++i) 
 415              		.loc 1 158 0
 416 0002 FFF7FEFF 		bl	spi_delay
 417              	.LVL23:
 418              	.LBB71:
 159:Src/nRF24.c   ****   {
 419              		.loc 1 159 0
 420 0006 0026     		movs	r6, #0
 421              	.LBE71:
 156:Src/nRF24.c   **** 
 422              		.loc 1 156 0
 423 0008 3446     		mov	r4, r6
 424              	.LBB80:
 159:Src/nRF24.c   ****   {
 425              		.loc 1 159 0
 426 000a 22E0     		b	.L42
 427              	.LVL24:
 428              	.L43:
 429              	.LBB72:
 430              	.LBB73:
  38:Src/nRF24.c   **** } 
 431              		.loc 1 38 0
 432 000c 164D     		ldr	r5, .L45
 433 000e 0022     		movs	r2, #0
 434 0010 4FF48071 		mov	r1, #256
 435 0014 2846     		mov	r0, r5
 436 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 437              	.LVL25:
 438              	.LBE73:
 439              	.LBE72:
 162:Src/nRF24.c   ****       SPI_MOSI_0();
 440              		.loc 1 162 0
 441 001a FFF7FEFF 		bl	spi_delay
 442              	.LVL26:
 443              	.LBB74:
 444              	.LBB75:
  58:Src/nRF24.c   **** }
 445              		.loc 1 58 0
 446 001e 0022     		movs	r2, #0
ARM GAS  /tmp/ccrbCVze.s 			page 12


 447 0020 4FF48061 		mov	r1, #1024
 448 0024 1148     		ldr	r0, .L45+4
 449 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 450              	.LVL27:
 451              	.LBE75:
 452              	.LBE74:
 453              	.LBB76:
 454              	.LBB77:
  28:Src/nRF24.c   **** }
 455              		.loc 1 28 0
 456 002a 0122     		movs	r2, #1
 457 002c 4FF48071 		mov	r1, #256
 458 0030 2846     		mov	r0, r5
 459 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 460              	.LVL28:
 461              	.LBE77:
 462              	.LBE76:
 165:Src/nRF24.c   ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 463              		.loc 1 165 0
 464 0036 FFF7FEFF 		bl	spi_delay
 465              	.LVL29:
 166:Src/nRF24.c   ****       rx_data |= SPI_READ_MISO();
 466              		.loc 1 166 0
 467 003a 6400     		lsls	r4, r4, #1
 468              	.LVL30:
 469 003c E4B2     		uxtb	r4, r4
 470              	.LVL31:
 471              	.LBB78:
 472              	.LBB79:
  91:Src/nRF24.c   **** }
 473              		.loc 1 91 0
 474 003e 4FF48061 		mov	r1, #1024
 475 0042 2846     		mov	r0, r5
 476 0044 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 477              	.LVL32:
 478              	.LBE79:
 479              	.LBE78:
 167:Src/nRF24.c   ****       spi_delay();
 480              		.loc 1 167 0
 481 0048 0443     		orrs	r4, r4, r0
 482              	.LVL33:
 483 004a E4B2     		uxtb	r4, r4
 484              	.LVL34:
 168:Src/nRF24.c   ****   }
 485              		.loc 1 168 0
 486 004c FFF7FEFF 		bl	spi_delay
 487              	.LVL35:
 159:Src/nRF24.c   ****   {
 488              		.loc 1 159 0
 489 0050 0136     		adds	r6, r6, #1
 490              	.LVL36:
 491              	.L42:
 159:Src/nRF24.c   ****   {
 492              		.loc 1 159 0 is_stmt 0 discriminator 1
 493 0052 072E     		cmp	r6, #7
 494 0054 DADD     		ble	.L43
 495              	.LBE80:
ARM GAS  /tmp/ccrbCVze.s 			page 13


 496              	.LBB81:
 497              	.LBB82:
  38:Src/nRF24.c   **** } 
 498              		.loc 1 38 0 is_stmt 1
 499 0056 0022     		movs	r2, #0
 500 0058 4FF48071 		mov	r1, #256
 501 005c 0248     		ldr	r0, .L45
 502 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 503              	.LVL37:
 504              	.LBE82:
 505              	.LBE81:
 172:Src/nRF24.c   ****   
 506              		.loc 1 172 0
 507 0062 2046     		mov	r0, r4
 508 0064 70BD     		pop	{r4, r5, r6, pc}
 509              	.LVL38:
 510              	.L46:
 511 0066 00BF     		.align	2
 512              	.L45:
 513 0068 00000240 		.word	1073872896
 514 006c 00040240 		.word	1073873920
 515              		.cfi_endproc
 516              	.LFE140:
 518              		.section	.text.spi_read_register,"ax",%progbits
 519              		.align	1
 520              		.global	spi_read_register
 521              		.syntax unified
 522              		.thumb
 523              		.thumb_func
 524              		.fpu fpv4-sp-d16
 526              	spi_read_register:
 527              	.LFB142:
 179:Src/nRF24.c   **** }
 180:Src/nRF24.c   **** 
 181:Src/nRF24.c   **** /**
 182:Src/nRF24.c   ****   * @brief      Read a bytes from the SPI target device register.
 183:Src/nRF24.c   ****   * @param[in]  reg SPI target device register to write to.
 184:Src/nRF24.c   ****   * @param[in]  num_bytes Number of bytes needed to write to that address.
 185:Src/nRF24.c   ****   * @param[in]  pbuf A pointer pointing to a memory location that can store the data read from the 
 186:Src/nRF24.c   ****   * @retval     none.
 187:Src/nRF24.c   ****   */
 188:Src/nRF24.c   **** void spi_read_register(uint8_t reg, uint8_t num_bytes, uint8_t* pbuf)
 189:Src/nRF24.c   **** {
 528              		.loc 1 189 0
 529              		.cfi_startproc
 530              		@ args = 0, pretend = 0, frame = 0
 531              		@ frame_needed = 0, uses_anonymous_args = 0
 532              	.LVL39:
 533 0000 70B5     		push	{r4, r5, r6, lr}
 534              	.LCFI10:
 535              		.cfi_def_cfa_offset 16
 536              		.cfi_offset 4, -16
 537              		.cfi_offset 5, -12
 538              		.cfi_offset 6, -8
 539              		.cfi_offset 14, -4
 540 0002 0446     		mov	r4, r0
 541 0004 0D46     		mov	r5, r1
ARM GAS  /tmp/ccrbCVze.s 			page 14


 542 0006 1646     		mov	r6, r2
 543              	.LBB83:
 544              	.LBB84:
  69:Src/nRF24.c   **** }
 545              		.loc 1 69 0
 546 0008 0022     		movs	r2, #0
 547              	.LVL40:
 548 000a 1021     		movs	r1, #16
 549              	.LVL41:
 550 000c 0948     		ldr	r0, .L51
 551              	.LVL42:
 552 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 553              	.LVL43:
 554              	.LBE84:
 555              	.LBE83:
 190:Src/nRF24.c   ****   // Select chip
 191:Src/nRF24.c   ****   SPI_CS_1();
 192:Src/nRF24.c   ****   
 193:Src/nRF24.c   ****   // Write register address to read.
 194:Src/nRF24.c   ****   gpio_clockout_8_bits(reg);
 556              		.loc 1 194 0
 557 0012 2046     		mov	r0, r4
 558 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 559              	.LVL44:
 560              	.LBB85:
 195:Src/nRF24.c   ****   // Read value
 196:Src/nRF24.c   ****   for (int i = 0; i < num_bytes; ++i) 
 561              		.loc 1 196 0
 562 0018 0024     		movs	r4, #0
 563 001a 03E0     		b	.L48
 564              	.LVL45:
 565              	.L49:
 197:Src/nRF24.c   ****   {
 198:Src/nRF24.c   ****     pbuf[i] = gpio_clockin_8_bits();
 566              		.loc 1 198 0 discriminator 3
 567 001c FFF7FEFF 		bl	gpio_clockin_8_bits
 568              	.LVL46:
 569 0020 3055     		strb	r0, [r6, r4]
 196:Src/nRF24.c   ****   {
 570              		.loc 1 196 0 discriminator 3
 571 0022 0134     		adds	r4, r4, #1
 572              	.LVL47:
 573              	.L48:
 196:Src/nRF24.c   ****   {
 574              		.loc 1 196 0 is_stmt 0 discriminator 1
 575 0024 AC42     		cmp	r4, r5
 576 0026 F9DB     		blt	.L49
 577              	.LBE85:
 578              	.LBB86:
 579              	.LBB87:
  80:Src/nRF24.c   **** }
 580              		.loc 1 80 0 is_stmt 1
 581 0028 0122     		movs	r2, #1
 582 002a 1021     		movs	r1, #16
 583 002c 0148     		ldr	r0, .L51
 584 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 585              	.LVL48:
ARM GAS  /tmp/ccrbCVze.s 			page 15


 586 0032 70BD     		pop	{r4, r5, r6, pc}
 587              	.LVL49:
 588              	.L52:
 589              		.align	2
 590              	.L51:
 591 0034 00040240 		.word	1073873920
 592              	.LBE87:
 593              	.LBE86:
 594              		.cfi_endproc
 595              	.LFE142:
 597              		.section	.text.spi_write_register,"ax",%progbits
 598              		.align	1
 599              		.global	spi_write_register
 600              		.syntax unified
 601              		.thumb
 602              		.thumb_func
 603              		.fpu fpv4-sp-d16
 605              	spi_write_register:
 606              	.LFB143:
 199:Src/nRF24.c   ****   }
 200:Src/nRF24.c   ****   
 201:Src/nRF24.c   ****   // Deselect chip
 202:Src/nRF24.c   ****   SPI_CS_0();
 203:Src/nRF24.c   **** }
 204:Src/nRF24.c   **** 
 205:Src/nRF24.c   **** /**
 206:Src/nRF24.c   ****   * @brief      Write a number of bytes to the spi target device register.
 207:Src/nRF24.c   ****   * @param[in]  reg spi target device register to write to.
 208:Src/nRF24.c   ****   * @param[in]  num_bytes number of bytes needed to write to that address.
 209:Src/nRF24.c   ****   * @param[in]  p_writing_data A pointer pointing to a memory location storing the data to write.
 210:Src/nRF24.c   ****   * @retval     none.
 211:Src/nRF24.c   ****   */
 212:Src/nRF24.c   **** void spi_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 213:Src/nRF24.c   **** {
 607              		.loc 1 213 0
 608              		.cfi_startproc
 609              		@ args = 0, pretend = 0, frame = 0
 610              		@ frame_needed = 0, uses_anonymous_args = 0
 611              	.LVL50:
 612 0000 70B5     		push	{r4, r5, r6, lr}
 613              	.LCFI11:
 614              		.cfi_def_cfa_offset 16
 615              		.cfi_offset 4, -16
 616              		.cfi_offset 5, -12
 617              		.cfi_offset 6, -8
 618              		.cfi_offset 14, -4
 619 0002 0446     		mov	r4, r0
 620 0004 0D46     		mov	r5, r1
 621 0006 1646     		mov	r6, r2
 622              	.LBB88:
 623              	.LBB89:
  69:Src/nRF24.c   **** }
 624              		.loc 1 69 0
 625 0008 0022     		movs	r2, #0
 626              	.LVL51:
 627 000a 1021     		movs	r1, #16
 628              	.LVL52:
ARM GAS  /tmp/ccrbCVze.s 			page 16


 629 000c 0948     		ldr	r0, .L57
 630              	.LVL53:
 631 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 632              	.LVL54:
 633              	.LBE89:
 634              	.LBE88:
 214:Src/nRF24.c   ****   // Select chip.
 215:Src/nRF24.c   ****   SPI_CS_1();
 216:Src/nRF24.c   **** 
 217:Src/nRF24.c   ****   // First clock out the on-device target register address.
 218:Src/nRF24.c   ****   gpio_clockout_8_bits(reg); 
 635              		.loc 1 218 0
 636 0012 2046     		mov	r0, r4
 637 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 638              	.LVL55:
 639              	.LBB90:
 219:Src/nRF24.c   **** 
 220:Src/nRF24.c   ****   // Write / Clock out bits in each bytes.
 221:Src/nRF24.c   ****   for (int i = 0; i < num_bytes; ++i)
 640              		.loc 1 221 0
 641 0018 0024     		movs	r4, #0
 642 001a 03E0     		b	.L54
 643              	.LVL56:
 644              	.L55:
 645              	.LBB91:
 222:Src/nRF24.c   ****   {
 223:Src/nRF24.c   ****     uint8_t writing_byte = p_writing_data[i];
 224:Src/nRF24.c   ****     gpio_clockout_8_bits(writing_byte);
 646              		.loc 1 224 0 discriminator 3
 647 001c 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 648 001e FFF7FEFF 		bl	gpio_clockout_8_bits
 649              	.LVL57:
 650              	.LBE91:
 221:Src/nRF24.c   ****   {
 651              		.loc 1 221 0 discriminator 3
 652 0022 0134     		adds	r4, r4, #1
 653              	.LVL58:
 654              	.L54:
 221:Src/nRF24.c   ****   {
 655              		.loc 1 221 0 is_stmt 0 discriminator 1
 656 0024 AC42     		cmp	r4, r5
 657 0026 F9DB     		blt	.L55
 658              	.LBE90:
 659              	.LBB92:
 660              	.LBB93:
  80:Src/nRF24.c   **** }
 661              		.loc 1 80 0 is_stmt 1
 662 0028 0122     		movs	r2, #1
 663 002a 1021     		movs	r1, #16
 664 002c 0148     		ldr	r0, .L57
 665 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 666              	.LVL59:
 667 0032 70BD     		pop	{r4, r5, r6, pc}
 668              	.LVL60:
 669              	.L58:
 670              		.align	2
 671              	.L57:
ARM GAS  /tmp/ccrbCVze.s 			page 17


 672 0034 00040240 		.word	1073873920
 673              	.LBE93:
 674              	.LBE92:
 675              		.cfi_endproc
 676              	.LFE143:
 678              		.section	.text.nRF24_CE_1,"ax",%progbits
 679              		.align	1
 680              		.global	nRF24_CE_1
 681              		.syntax unified
 682              		.thumb
 683              		.thumb_func
 684              		.fpu fpv4-sp-d16
 686              	nRF24_CE_1:
 687              	.LFB144:
 225:Src/nRF24.c   ****   }
 226:Src/nRF24.c   **** 
 227:Src/nRF24.c   ****   // Deselect chip.
 228:Src/nRF24.c   ****   SPI_CS_0();
 229:Src/nRF24.c   **** }
 230:Src/nRF24.c   **** 
 231:Src/nRF24.c   **** 
 232:Src/nRF24.c   **** /* nRF24 Operations -------------------------------------------------------------------------------
 233:Src/nRF24.c   **** 
 234:Src/nRF24.c   **** 
 235:Src/nRF24.c   **** /**
 236:Src/nRF24.c   ****   * @brief Set high on Chip-Enable pin of nRF24L01.
 237:Src/nRF24.c   ****   * @param None
 238:Src/nRF24.c   ****   * @retval None
 239:Src/nRF24.c   ****   */
 240:Src/nRF24.c   **** void nRF24_CE_1()
 241:Src/nRF24.c   **** {
 688              		.loc 1 241 0
 689              		.cfi_startproc
 690              		@ args = 0, pretend = 0, frame = 0
 691              		@ frame_needed = 0, uses_anonymous_args = 0
 692 0000 08B5     		push	{r3, lr}
 693              	.LCFI12:
 694              		.cfi_def_cfa_offset 8
 695              		.cfi_offset 3, -8
 696              		.cfi_offset 14, -4
 242:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  
 697              		.loc 1 242 0
 698 0002 0122     		movs	r2, #1
 699 0004 2021     		movs	r1, #32
 700 0006 0248     		ldr	r0, .L61
 701 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 702              	.LVL61:
 703 000c 08BD     		pop	{r3, pc}
 704              	.L62:
 705 000e 00BF     		.align	2
 706              	.L61:
 707 0010 00040240 		.word	1073873920
 708              		.cfi_endproc
 709              	.LFE144:
 711              		.section	.text.nRF24_CE_0,"ax",%progbits
 712              		.align	1
 713              		.global	nRF24_CE_0
ARM GAS  /tmp/ccrbCVze.s 			page 18


 714              		.syntax unified
 715              		.thumb
 716              		.thumb_func
 717              		.fpu fpv4-sp-d16
 719              	nRF24_CE_0:
 720              	.LFB145:
 243:Src/nRF24.c   **** }
 244:Src/nRF24.c   **** 
 245:Src/nRF24.c   **** 
 246:Src/nRF24.c   **** /**
 247:Src/nRF24.c   ****   * @brief Set low on Chip-Enable pin of nRF24L01.
 248:Src/nRF24.c   ****   * @param None
 249:Src/nRF24.c   ****   * @retval None
 250:Src/nRF24.c   ****   */
 251:Src/nRF24.c   **** void nRF24_CE_0()
 252:Src/nRF24.c   **** {
 721              		.loc 1 252 0
 722              		.cfi_startproc
 723              		@ args = 0, pretend = 0, frame = 0
 724              		@ frame_needed = 0, uses_anonymous_args = 0
 725 0000 08B5     		push	{r3, lr}
 726              	.LCFI13:
 727              		.cfi_def_cfa_offset 8
 728              		.cfi_offset 3, -8
 729              		.cfi_offset 14, -4
 253:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 730              		.loc 1 253 0
 731 0002 0022     		movs	r2, #0
 732 0004 2021     		movs	r1, #32
 733 0006 0248     		ldr	r0, .L65
 734 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 735              	.LVL62:
 736 000c 08BD     		pop	{r3, pc}
 737              	.L66:
 738 000e 00BF     		.align	2
 739              	.L65:
 740 0010 00040240 		.word	1073873920
 741              		.cfi_endproc
 742              	.LFE145:
 744              		.section	.text.nRF24_verified_write_register,"ax",%progbits
 745              		.align	1
 746              		.global	nRF24_verified_write_register
 747              		.syntax unified
 748              		.thumb
 749              		.thumb_func
 750              		.fpu fpv4-sp-d16
 752              	nRF24_verified_write_register:
 753              	.LFB146:
 254:Src/nRF24.c   **** }
 255:Src/nRF24.c   **** 
 256:Src/nRF24.c   **** 
 257:Src/nRF24.c   **** /**
 258:Src/nRF24.c   ****   * @brief      Write to a register on target device through SPI. Read the same registers after wri
 259:Src/nRF24.c   ****   * @param[in]  reg The device register to write value to.
 260:Src/nRF24.c   ****   * @param[in]  num_bytes Number of bytes to write.
 261:Src/nRF24.c   ****   * @param[in]  p_writing_data Data to write.
 262:Src/nRF24.c   ****   * @retval     Boolean. 1 for mistakes happen. 0 for success.
ARM GAS  /tmp/ccrbCVze.s 			page 19


 263:Src/nRF24.c   ****   */
 264:Src/nRF24.c   **** bool nRF24_verified_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 265:Src/nRF24.c   **** {
 754              		.loc 1 265 0
 755              		.cfi_startproc
 756              		@ args = 0, pretend = 0, frame = 64
 757              		@ frame_needed = 1, uses_anonymous_args = 0
 758              	.LVL63:
 759 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 760              	.LCFI14:
 761              		.cfi_def_cfa_offset 32
 762              		.cfi_offset 4, -32
 763              		.cfi_offset 5, -28
 764              		.cfi_offset 6, -24
 765              		.cfi_offset 7, -20
 766              		.cfi_offset 8, -16
 767              		.cfi_offset 9, -12
 768              		.cfi_offset 10, -8
 769              		.cfi_offset 14, -4
 770 0004 90B0     		sub	sp, sp, #64
 771              	.LCFI15:
 772              		.cfi_def_cfa_offset 96
 773 0006 00AF     		add	r7, sp, #0
 774              	.LCFI16:
 775              		.cfi_def_cfa_register 7
 776 0008 0546     		mov	r5, r0
 777 000a 0C46     		mov	r4, r1
 778 000c 9046     		mov	r8, r2
 266:Src/nRF24.c   **** 
 267:Src/nRF24.c   ****     char message[64] = {'\0'};
 779              		.loc 1 267 0
 780 000e 4022     		movs	r2, #64
 781              	.LVL64:
 782 0010 0021     		movs	r1, #0
 783              	.LVL65:
 784 0012 3846     		mov	r0, r7
 785              	.LVL66:
 786 0014 FFF7FEFF 		bl	memset
 787              	.LVL67:
 268:Src/nRF24.c   **** 
 269:Src/nRF24.c   ****     spi_write_register(reg, num_bytes, p_writing_data); 
 788              		.loc 1 269 0
 789 0018 4246     		mov	r2, r8
 790 001a 2146     		mov	r1, r4
 791 001c 2846     		mov	r0, r5
 792 001e FFF7FEFF 		bl	spi_write_register
 793              	.LVL68:
 270:Src/nRF24.c   **** 
 271:Src/nRF24.c   ****     uint8_t read_data[num_bytes];
 794              		.loc 1 271 0
 795 0022 A246     		mov	r10, r4
 796              	.LVL69:
 797 0024 E31D     		adds	r3, r4, #7
 798 0026 23F00703 		bic	r3, r3, #7
 799 002a ADEB030D 		sub	sp, sp, r3
 800 002e E946     		mov	r9, sp
 801              	.LVL70:
ARM GAS  /tmp/ccrbCVze.s 			page 20


 272:Src/nRF24.c   **** 
 273:Src/nRF24.c   ****     // reg & ~ W_REGISTER_MASK is a reverse operation of reg | W_REGISTER_MASK, essentially get rid
 274:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK | (reg & ~W_REGISTER_MASK), num_bytes, read_data);
 802              		.loc 1 274 0
 803 0030 6A46     		mov	r2, sp
 804 0032 2146     		mov	r1, r4
 805 0034 05F0DF00 		and	r0, r5, #223
 806 0038 FFF7FEFF 		bl	spi_read_register
 807              	.LVL71:
 808              	.LBB94:
 275:Src/nRF24.c   ****     for (int i = 0; i < num_bytes; ++i) 
 809              		.loc 1 275 0
 810 003c 0026     		movs	r6, #0
 811              	.LVL72:
 812              	.L68:
 813              		.loc 1 275 0 is_stmt 0 discriminator 1
 814 003e 5645     		cmp	r6, r10
 815 0040 54DA     		bge	.L73
 276:Src/nRF24.c   ****     {
 277:Src/nRF24.c   ****       // if there's any mismatch between written data and read data from the register.
 278:Src/nRF24.c   ****       if (read_data[i] != p_writing_data[i]) 
 816              		.loc 1 278 0 is_stmt 1
 817 0042 19F80620 		ldrb	r2, [r9, r6]	@ zero_extendqisi2
 818 0046 08EB0604 		add	r4, r8, r6
 819 004a 18F80630 		ldrb	r3, [r8, r6]	@ zero_extendqisi2
 820 004e 9A42     		cmp	r2, r3
 821 0050 24D1     		bne	.L74
 279:Src/nRF24.c   ****       {
 280:Src/nRF24.c   ****         strcpy(message, "Problem writing to SPI register -- ");
 281:Src/nRF24.c   **** 				serial_print(message);
 282:Src/nRF24.c   ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 283:Src/nRF24.c   **** 				serial_print(message);
 284:Src/nRF24.c   ****         return true;
 285:Src/nRF24.c   ****       } else {
 286:Src/nRF24.c   ****         strcpy(message, "Success writing to SPI register -- ");
 822              		.loc 1 286 0 discriminator 2
 823 0052 3C46     		mov	r4, r7
 824 0054 284D     		ldr	r5, .L75
 825 0056 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 826 0058 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 827 005a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 828 005c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 829 005e 2B68     		ldr	r3, [r5]
 830 0060 2360     		str	r3, [r4]
 831              	.LVL73:
 832              	.LBB95:
 833              	.LBB96:
 101:Src/nRF24.c   **** }
 834              		.loc 1 101 0 discriminator 2
 835 0062 3846     		mov	r0, r7
 836              	.LVL74:
 837 0064 FFF7FEFF 		bl	strlen
 838              	.LVL75:
 839 0068 244C     		ldr	r4, .L75+4
 840              	.LVL76:
 841 006a 6423     		movs	r3, #100
 842 006c 82B2     		uxth	r2, r0
ARM GAS  /tmp/ccrbCVze.s 			page 21


 843 006e 3946     		mov	r1, r7
 844              	.LVL77:
 845 0070 2046     		mov	r0, r4
 846 0072 FFF7FEFF 		bl	HAL_UART_Transmit
 847              	.LVL78:
 848              	.LBE96:
 849              	.LBE95:
 287:Src/nRF24.c   **** 				serial_print(message);
 288:Src/nRF24.c   ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 850              		.loc 1 288 0 discriminator 2
 851 0076 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 852 007a 18F80620 		ldrb	r2, [r8, r6]	@ zero_extendqisi2
 853 007e 2049     		ldr	r1, .L75+8
 854 0080 3846     		mov	r0, r7
 855 0082 FFF7FEFF 		bl	sprintf
 856              	.LVL79:
 857              	.LBB97:
 858              	.LBB98:
 101:Src/nRF24.c   **** }
 859              		.loc 1 101 0 discriminator 2
 860 0086 3846     		mov	r0, r7
 861              	.LVL80:
 862 0088 FFF7FEFF 		bl	strlen
 863              	.LVL81:
 864 008c 6423     		movs	r3, #100
 865 008e 82B2     		uxth	r2, r0
 866 0090 3946     		mov	r1, r7
 867              	.LVL82:
 868 0092 2046     		mov	r0, r4
 869 0094 FFF7FEFF 		bl	HAL_UART_Transmit
 870              	.LVL83:
 871              	.LBE98:
 872              	.LBE97:
 275:Src/nRF24.c   ****     {
 873              		.loc 1 275 0 discriminator 2
 874 0098 0136     		adds	r6, r6, #1
 875              	.LVL84:
 876 009a D0E7     		b	.L68
 877              	.L74:
 280:Src/nRF24.c   **** 				serial_print(message);
 878              		.loc 1 280 0
 879 009c 3D46     		mov	r5, r7
 880 009e DFF864E0 		ldr	lr, .L75+12
 881 00a2 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 882 00a6 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 883 00a8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 884 00ac 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 885 00ae DEF80030 		ldr	r3, [lr]
 886 00b2 2B60     		str	r3, [r5]
 887              	.LVL85:
 888              	.LBB99:
 889              	.LBB100:
 101:Src/nRF24.c   **** }
 890              		.loc 1 101 0
 891 00b4 3846     		mov	r0, r7
 892              	.LVL86:
 893 00b6 FFF7FEFF 		bl	strlen
ARM GAS  /tmp/ccrbCVze.s 			page 22


 894              	.LVL87:
 895 00ba 104D     		ldr	r5, .L75+4
 896              	.LVL88:
 897 00bc 6423     		movs	r3, #100
 898 00be 82B2     		uxth	r2, r0
 899 00c0 3946     		mov	r1, r7
 900              	.LVL89:
 901 00c2 2846     		mov	r0, r5
 902 00c4 FFF7FEFF 		bl	HAL_UART_Transmit
 903              	.LVL90:
 904              	.LBE100:
 905              	.LBE99:
 282:Src/nRF24.c   **** 				serial_print(message);
 906              		.loc 1 282 0
 907 00c8 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 908 00cc 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 909 00ce 0C49     		ldr	r1, .L75+8
 910 00d0 3846     		mov	r0, r7
 911 00d2 FFF7FEFF 		bl	sprintf
 912              	.LVL91:
 913              	.LBB101:
 914              	.LBB102:
 101:Src/nRF24.c   **** }
 915              		.loc 1 101 0
 916 00d6 3846     		mov	r0, r7
 917              	.LVL92:
 918 00d8 FFF7FEFF 		bl	strlen
 919              	.LVL93:
 920 00dc 6423     		movs	r3, #100
 921 00de 82B2     		uxth	r2, r0
 922 00e0 3946     		mov	r1, r7
 923              	.LVL94:
 924 00e2 2846     		mov	r0, r5
 925 00e4 FFF7FEFF 		bl	HAL_UART_Transmit
 926              	.LVL95:
 927              	.LBE102:
 928              	.LBE101:
 284:Src/nRF24.c   ****       } else {
 929              		.loc 1 284 0
 930 00e8 0120     		movs	r0, #1
 931 00ea 00E0     		b	.L70
 932              	.L73:
 933              	.LBE94:
 289:Src/nRF24.c   **** 				serial_print(message);
 290:Src/nRF24.c   ****       }
 291:Src/nRF24.c   ****   }
 292:Src/nRF24.c   ****   return false;
 934              		.loc 1 292 0
 935 00ec 0020     		movs	r0, #0
 936              	.L70:
 293:Src/nRF24.c   **** }
 937              		.loc 1 293 0
 938 00ee 4037     		adds	r7, r7, #64
 939              	.LCFI17:
 940              		.cfi_def_cfa_offset 32
 941 00f0 BD46     		mov	sp, r7
 942              	.LCFI18:
ARM GAS  /tmp/ccrbCVze.s 			page 23


 943              		.cfi_def_cfa_register 13
 944              		@ sp needed
 945 00f2 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 946              	.LVL96:
 947              	.L76:
 948 00f6 00BF     		.align	2
 949              	.L75:
 950 00f8 50000000 		.word	.LC5
 951 00fc 00000000 		.word	huart2
 952 0100 24000000 		.word	.LC4
 953 0104 00000000 		.word	.LC3
 954              		.cfi_endproc
 955              	.LFE146:
 957              		.section	.text.nRF24_get_STATUS,"ax",%progbits
 958              		.align	1
 959              		.global	nRF24_get_STATUS
 960              		.syntax unified
 961              		.thumb
 962              		.thumb_func
 963              		.fpu fpv4-sp-d16
 965              	nRF24_get_STATUS:
 966              	.LFB147:
 294:Src/nRF24.c   **** 
 295:Src/nRF24.c   **** /**
 296:Src/nRF24.c   ****   * @brief      Read 'STATUS' register from nRF24.
 297:Src/nRF24.c   ****   * @param      None.
 298:Src/nRF24.c   ****   * @retval     STATUS register value.
 299:Src/nRF24.c   ****   */
 300:Src/nRF24.c   **** uint8_t nRF24_get_STATUS(void) 
 301:Src/nRF24.c   **** {
 967              		.loc 1 301 0
 968              		.cfi_startproc
 969              		@ args = 0, pretend = 0, frame = 8
 970              		@ frame_needed = 0, uses_anonymous_args = 0
 971 0000 00B5     		push	{lr}
 972              	.LCFI19:
 973              		.cfi_def_cfa_offset 4
 974              		.cfi_offset 14, -4
 975 0002 83B0     		sub	sp, sp, #12
 976              	.LCFI20:
 977              		.cfi_def_cfa_offset 16
 302:Src/nRF24.c   ****   uint8_t stat;
 303:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &stat);
 978              		.loc 1 303 0
 979 0004 0DF10702 		add	r2, sp, #7
 980 0008 0121     		movs	r1, #1
 981 000a 0720     		movs	r0, #7
 982 000c FFF7FEFF 		bl	spi_read_register
 983              	.LVL97:
 304:Src/nRF24.c   ****   // Serial.print("- STATUS: "); Serial.println(stat,HEX);
 305:Src/nRF24.c   ****   return stat;
 306:Src/nRF24.c   **** }
 984              		.loc 1 306 0
 985 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 986 0014 03B0     		add	sp, sp, #12
 987              	.LCFI21:
 988              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccrbCVze.s 			page 24


 989              		@ sp needed
 990 0016 5DF804FB 		ldr	pc, [sp], #4
 991              		.cfi_endproc
 992              	.LFE147:
 994              		.section	.text.nRF24_get_FIFO_STATUS,"ax",%progbits
 995              		.align	1
 996              		.global	nRF24_get_FIFO_STATUS
 997              		.syntax unified
 998              		.thumb
 999              		.thumb_func
 1000              		.fpu fpv4-sp-d16
 1002              	nRF24_get_FIFO_STATUS:
 1003              	.LFB148:
 307:Src/nRF24.c   **** 
 308:Src/nRF24.c   **** /**
 309:Src/nRF24.c   ****   * @brief      Read 'FIFO_STATUS' register from nRF24.
 310:Src/nRF24.c   ****   * @param      None.
 311:Src/nRF24.c   ****   * @retval     FIFO_STATUS register value.
 312:Src/nRF24.c   ****   */
 313:Src/nRF24.c   **** uint8_t nRF24_get_FIFO_STATUS() 
 314:Src/nRF24.c   **** {
 1004              		.loc 1 314 0
 1005              		.cfi_startproc
 1006              		@ args = 0, pretend = 0, frame = 8
 1007              		@ frame_needed = 0, uses_anonymous_args = 0
 1008 0000 00B5     		push	{lr}
 1009              	.LCFI22:
 1010              		.cfi_def_cfa_offset 4
 1011              		.cfi_offset 14, -4
 1012 0002 83B0     		sub	sp, sp, #12
 1013              	.LCFI23:
 1014              		.cfi_def_cfa_offset 16
 315:Src/nRF24.c   ****   uint8_t fifo_status;
 316:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + FIFO_STATUS, 1, &fifo_status);
 1015              		.loc 1 316 0
 1016 0004 0DF10702 		add	r2, sp, #7
 1017 0008 0121     		movs	r1, #1
 1018 000a 1720     		movs	r0, #23
 1019 000c FFF7FEFF 		bl	spi_read_register
 1020              	.LVL98:
 317:Src/nRF24.c   ****   // Serial.print("- FIFO STATUS: "); Serial.println(fifo_status,HEX);
 318:Src/nRF24.c   ****   return fifo_status;
 319:Src/nRF24.c   **** }
 1021              		.loc 1 319 0
 1022 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1023 0014 03B0     		add	sp, sp, #12
 1024              	.LCFI24:
 1025              		.cfi_def_cfa_offset 4
 1026              		@ sp needed
 1027 0016 5DF804FB 		ldr	pc, [sp], #4
 1028              		.cfi_endproc
 1029              	.LFE148:
 1031              		.section	.text.nRF24_get_CONFIG,"ax",%progbits
 1032              		.align	1
 1033              		.global	nRF24_get_CONFIG
 1034              		.syntax unified
 1035              		.thumb
ARM GAS  /tmp/ccrbCVze.s 			page 25


 1036              		.thumb_func
 1037              		.fpu fpv4-sp-d16
 1039              	nRF24_get_CONFIG:
 1040              	.LFB149:
 320:Src/nRF24.c   **** 
 321:Src/nRF24.c   **** /**
 322:Src/nRF24.c   ****   * @brief      Read 'CONFIG' register from nRF24.
 323:Src/nRF24.c   ****   * @param      None.
 324:Src/nRF24.c   ****   * @retval     CONFIG register value.
 325:Src/nRF24.c   ****   */
 326:Src/nRF24.c   **** uint8_t nRF24_get_CONFIG() 
 327:Src/nRF24.c   **** {
 1041              		.loc 1 327 0
 1042              		.cfi_startproc
 1043              		@ args = 0, pretend = 0, frame = 8
 1044              		@ frame_needed = 0, uses_anonymous_args = 0
 1045 0000 00B5     		push	{lr}
 1046              	.LCFI25:
 1047              		.cfi_def_cfa_offset 4
 1048              		.cfi_offset 14, -4
 1049 0002 83B0     		sub	sp, sp, #12
 1050              	.LCFI26:
 1051              		.cfi_def_cfa_offset 16
 328:Src/nRF24.c   ****   uint8_t config_reg;
 329:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + CONFIG, 1, &config_reg);
 1052              		.loc 1 329 0
 1053 0004 0DF10702 		add	r2, sp, #7
 1054 0008 0121     		movs	r1, #1
 1055 000a 0020     		movs	r0, #0
 1056 000c FFF7FEFF 		bl	spi_read_register
 1057              	.LVL99:
 330:Src/nRF24.c   ****   // Serial.print("- CONFIG: "); Serial.println(config_reg,HEX);
 331:Src/nRF24.c   ****   return config_reg;
 332:Src/nRF24.c   **** }
 1058              		.loc 1 332 0
 1059 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1060 0014 03B0     		add	sp, sp, #12
 1061              	.LCFI27:
 1062              		.cfi_def_cfa_offset 4
 1063              		@ sp needed
 1064 0016 5DF804FB 		ldr	pc, [sp], #4
 1065              		.cfi_endproc
 1066              	.LFE149:
 1068              		.section	.text.nRF24_tx_self_test,"ax",%progbits
 1069              		.align	1
 1070              		.global	nRF24_tx_self_test
 1071              		.syntax unified
 1072              		.thumb
 1073              		.thumb_func
 1074              		.fpu fpv4-sp-d16
 1076              	nRF24_tx_self_test:
 1077              	.LFB150:
 333:Src/nRF24.c   **** 
 334:Src/nRF24.c   **** /**  
 335:Src/nRF24.c   ****  *  @brief:  Test nRF24 transmitter function without a receiver.
 336:Src/nRF24.c   ****  *  @note:  
 337:Src/nRF24.c   ****  *      
ARM GAS  /tmp/ccrbCVze.s 			page 26


 338:Src/nRF24.c   ****  *      Steps: 1. Disable Auto Acknowledgement, disable Auto Retransmit.
 339:Src/nRF24.c   ****  *             2. TX_DS (in STATUS register) is expected to be set when data has been clock into TX
 340:Src/nRF24.c   ****  *             3. Check if STATUS = 0x2E, if so we have a working TX module.
 341:Src/nRF24.c   ****  *            
 342:Src/nRF24.c   ****  *            After writing to W_TX_PAYLOAD, TX_EMPTY (in FIFO_STATUS register) becomes 0.
 343:Src/nRF24.c   ****  *            
 344:Src/nRF24.c   ****  *            What happens if sending is not successful?
 345:Src/nRF24.c   ****  *            TX_FULL (in FIFO_STATUS register) becomes 1.
 346:Src/nRF24.c   ****  *            TX_FULL (in STATUS register) becomes 1.
 347:Src/nRF24.c   ****  *            TX_DS (in STATUS register) remains 0.  
 348:Src/nRF24.c   ****  *
 349:Src/nRF24.c   ****  *      States: 
 350:Src/nRF24.c   ****  *            The states can be referred in 6.1.1 State diagram.
 351:Src/nRF24.c   ****  *      
 352:Src/nRF24.c   ****  *      STATUS register
 353:Src/nRF24.c   ****  *                7             6           5         4         3:1         0
 354:Src/nRF24.c   ****  *            <reserved>      RX_DR       TX_DS     MAX_RT     RX_P_NO     TX_FULL
 355:Src/nRF24.c   ****  *            -----------------------------------------------------------------------
 356:Src/nRF24.c   ****  *             Always 0       Receive     Transfer  Maximum    000-101 :    1: 
 357:Src/nRF24.c   ****  *                            Data        Data      TX         Data Pipe #  TX_FULL
 358:Src/nRF24.c   ****  *                            Ready       Sent      Transmits  110 :
 359:Src/nRF24.c   ****  *                                                             Not Used.
 360:Src/nRF24.c   ****  *                                                             111:
 361:Src/nRF24.c   ****  *                                                             RX FIFO Empty.
 362:Src/nRF24.c   ****  * 
 363:Src/nRF24.c   ****  */
 364:Src/nRF24.c   **** bool nRF24_tx_self_test() 
 365:Src/nRF24.c   **** {
 1078              		.loc 1 365 0
 1079              		.cfi_startproc
 1080              		@ args = 0, pretend = 0, frame = 312
 1081              		@ frame_needed = 0, uses_anonymous_args = 0
 1082 0000 30B5     		push	{r4, r5, lr}
 1083              	.LCFI28:
 1084              		.cfi_def_cfa_offset 12
 1085              		.cfi_offset 4, -12
 1086              		.cfi_offset 5, -8
 1087              		.cfi_offset 14, -4
 1088 0002 CFB0     		sub	sp, sp, #316
 1089              	.LCFI29:
 1090              		.cfi_def_cfa_offset 328
 366:Src/nRF24.c   **** 
 367:Src/nRF24.c   ****   char message1[] = "---- nrf24 tx self test. ----\n";
 1091              		.loc 1 367 0
 1092 0004 46AC     		add	r4, sp, #280
 1093 0006 3F4D     		ldr	r5, .L88
 1094 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1095 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1096 000c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 1097 0010 07C4     		stmia	r4!, {r0, r1, r2}
 1098 0012 24F8023B 		strh	r3, [r4], #2	@ movhi
 1099 0016 1B0C     		lsrs	r3, r3, #16
 1100 0018 2370     		strb	r3, [r4]
 1101              	.LVL100:
 1102              	.LBB103:
 1103              	.LBB104:
 101:Src/nRF24.c   **** }
ARM GAS  /tmp/ccrbCVze.s 			page 27


 1104              		.loc 1 101 0
 1105 001a 46A8     		add	r0, sp, #280
 1106              	.LVL101:
 1107 001c FFF7FEFF 		bl	strlen
 1108              	.LVL102:
 1109 0020 394C     		ldr	r4, .L88+4
 1110              	.LVL103:
 1111 0022 6423     		movs	r3, #100
 1112 0024 82B2     		uxth	r2, r0
 1113 0026 46A9     		add	r1, sp, #280
 1114              	.LVL104:
 1115 0028 2046     		mov	r0, r4
 1116 002a FFF7FEFF 		bl	HAL_UART_Transmit
 1117              	.LVL105:
 1118              	.LBE104:
 1119              	.LBE103:
 368:Src/nRF24.c   **** 	serial_print(message1);
 369:Src/nRF24.c   **** 
 370:Src/nRF24.c   ****   char message2[] = "---- This test to verifies function of a tranmitter send without a receiver. -
 1120              		.loc 1 370 0
 1121 002e 5322     		movs	r2, #83
 1122 0030 3649     		ldr	r1, .L88+8
 1123 0032 31A8     		add	r0, sp, #196
 1124 0034 FFF7FEFF 		bl	memcpy
 1125              	.LVL106:
 1126              	.LBB105:
 1127              	.LBB106:
 101:Src/nRF24.c   **** }
 1128              		.loc 1 101 0
 1129 0038 31A8     		add	r0, sp, #196
 1130              	.LVL107:
 1131 003a FFF7FEFF 		bl	strlen
 1132              	.LVL108:
 1133 003e 6423     		movs	r3, #100
 1134 0040 82B2     		uxth	r2, r0
 1135 0042 31A9     		add	r1, sp, #196
 1136              	.LVL109:
 1137 0044 2046     		mov	r0, r4
 1138 0046 FFF7FEFF 		bl	HAL_UART_Transmit
 1139              	.LVL110:
 1140              	.LBE106:
 1141              	.LBE105:
 371:Src/nRF24.c   **** 	serial_print(message2);
 372:Src/nRF24.c   **** 
 373:Src/nRF24.c   ****   uint8_t nRF24_status = 0x00;
 374:Src/nRF24.c   **** 
 375:Src/nRF24.c   ****   // Note that if we reset the nRF connected without re-poweron the chip, initial value of register
 376:Src/nRF24.c   ****   // [Current State: Power-on reset 100 ms] 
 377:Src/nRF24.c   ****   nRF24_CE_0();
 1142              		.loc 1 377 0
 1143 004a FFF7FEFF 		bl	nRF24_CE_0
 1144              	.LVL111:
 378:Src/nRF24.c   ****   // [Current State: (RF transmission is) Power Down (But SPI is alive.)]
 379:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 1145              		.loc 1 379 0
 1146 004e 4EAC     		add	r4, sp, #312
 1147 0050 0023     		movs	r3, #0
ARM GAS  /tmp/ccrbCVze.s 			page 28


 1148 0052 04F8753D 		strb	r3, [r4, #-117]!
 380:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
 1149              		.loc 1 380 0
 1150 0056 2246     		mov	r2, r4
 1151 0058 0121     		movs	r1, #1
 1152 005a 2120     		movs	r0, #33
 1153 005c FFF7FEFF 		bl	nRF24_verified_write_register
 1154              	.LVL112:
 381:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
 1155              		.loc 1 381 0
 1156 0060 2246     		mov	r2, r4
 1157 0062 0121     		movs	r1, #1
 1158 0064 2220     		movs	r0, #34
 1159 0066 FFF7FEFF 		bl	nRF24_verified_write_register
 1160              	.LVL113:
 382:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 1161              		.loc 1 382 0
 1162 006a 2246     		mov	r2, r4
 1163 006c 0121     		movs	r1, #1
 1164 006e 2420     		movs	r0, #36
 1165 0070 FFF7FEFF 		bl	nRF24_verified_write_register
 1166              	.LVL114:
 383:Src/nRF24.c   ****   writing_byte = 0x0E;
 1167              		.loc 1 383 0
 1168 0074 0E23     		movs	r3, #14
 1169 0076 8DF8C330 		strb	r3, [sp, #195]
 384:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
 1170              		.loc 1 384 0
 1171 007a 2246     		mov	r2, r4
 1172 007c 0121     		movs	r1, #1
 1173 007e 2020     		movs	r0, #32
 1174 0080 FFF7FEFF 		bl	nRF24_verified_write_register
 1175              	.LVL115:
 385:Src/nRF24.c   **** 
 386:Src/nRF24.c   ****   // PWR_UP=1, state transition to [Standby-I]
 387:Src/nRF24.c   ****   uint8_t test_payload[4] = {0xC0, 0xFE, 0xBE, 0xEF}; // clock in a payload, now TX FIFO not empty 
 1176              		.loc 1 387 0
 1177 0084 224B     		ldr	r3, .L88+12
 1178 0086 1B68     		ldr	r3, [r3]
 1179 0088 4EAA     		add	r2, sp, #312
 1180 008a 42F87C3D 		str	r3, [r2, #-124]!
 388:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 1181              		.loc 1 388 0
 1182 008e 0421     		movs	r1, #4
 1183 0090 A020     		movs	r0, #160
 1184 0092 FFF7FEFF 		bl	spi_write_register
 1185              	.LVL116:
 389:Src/nRF24.c   ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 1186              		.loc 1 389 0
 1187 0096 FFF7FEFF 		bl	nRF24_CE_1
 1188              	.LVL117:
 390:Src/nRF24.c   ****   
 391:Src/nRF24.c   ****   // TX FIFO not empty AND CE = 1, state transition to [TX MODE]
 392:Src/nRF24.c   ****   nRF24_status = nRF24_get_STATUS();
 1189              		.loc 1 392 0
 1190 009a FFF7FEFF 		bl	nRF24_get_STATUS
 1191              	.LVL118:
ARM GAS  /tmp/ccrbCVze.s 			page 29


 1192 009e 0546     		mov	r5, r0
 1193              	.LVL119:
 393:Src/nRF24.c   ****   spi_delay(1);
 1194              		.loc 1 393 0
 1195 00a0 0120     		movs	r0, #1
 1196 00a2 FFF7FEFF 		bl	spi_delay
 1197              	.LVL120:
 394:Src/nRF24.c   **** 
 395:Src/nRF24.c   ****   // CE=0, state transition -> now return to [Standby-I]. 
 396:Src/nRF24.c   ****   nRF24_CE_0();
 1198              		.loc 1 396 0
 1199 00a6 FFF7FEFF 		bl	nRF24_CE_0
 1200              	.LVL121:
 397:Src/nRF24.c   ****   // PWR_UP = 0, state transition -> now return to [Power Down]
 398:Src/nRF24.c   ****   writing_byte = 0x08; // write default value for CONFIG register (writing_byte = 0)
 1201              		.loc 1 398 0
 1202 00aa 0823     		movs	r3, #8
 1203 00ac 8DF8C330 		strb	r3, [sp, #195]
 399:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       
 1204              		.loc 1 399 0
 1205 00b0 2246     		mov	r2, r4
 1206 00b2 0121     		movs	r1, #1
 1207 00b4 2020     		movs	r0, #32
 1208 00b6 FFF7FEFF 		bl	nRF24_verified_write_register
 1209              	.LVL122:
 400:Src/nRF24.c   **** 
 401:Src/nRF24.c   ****   // Now the chip is back to power down mode, check test result. 
 402:Src/nRF24.c   ****   if (nRF24_status & 0x2E) 
 1210              		.loc 1 402 0
 1211 00ba 15F02E0F 		tst	r5, #46
 1212 00be 10D1     		bne	.L87
 1213              	.LBB107:
 403:Src/nRF24.c   ****   {
 404:Src/nRF24.c   ****     char message3[] = "\n > nRF24 transmission self-test has passed. \
 405:Src/nRF24.c   **** 											 STATUS has value of 0x2E. \
 406:Src/nRF24.c   **** 											 TX_DS (transfer data sent) was set. \
 407:Src/nRF24.c   **** 											 RX_P_NO = 111, means RX FIFO Empty. \n";
 408:Src/nRF24.c   **** 		serial_print(message3);
 409:Src/nRF24.c   ****     return true;
 410:Src/nRF24.c   ****   } 
 411:Src/nRF24.c   ****   else 
 412:Src/nRF24.c   ****   {
 413:Src/nRF24.c   ****     char message4[] = "\n > nRF24 transmission self-test has failed. STATUS is expected 0x2E.";
 1214              		.loc 1 413 0
 1215 00c0 4622     		movs	r2, #70
 1216 00c2 1449     		ldr	r1, .L88+16
 1217 00c4 01A8     		add	r0, sp, #4
 1218 00c6 FFF7FEFF 		bl	memcpy
 1219              	.LVL123:
 1220              	.LBB108:
 1221              	.LBB109:
 101:Src/nRF24.c   **** }
 1222              		.loc 1 101 0
 1223 00ca 01A8     		add	r0, sp, #4
 1224              	.LVL124:
 1225 00cc FFF7FEFF 		bl	strlen
 1226              	.LVL125:
ARM GAS  /tmp/ccrbCVze.s 			page 30


 1227 00d0 6423     		movs	r3, #100
 1228 00d2 82B2     		uxth	r2, r0
 1229 00d4 01A9     		add	r1, sp, #4
 1230              	.LVL126:
 1231 00d6 0C48     		ldr	r0, .L88+4
 1232 00d8 FFF7FEFF 		bl	HAL_UART_Transmit
 1233              	.LVL127:
 1234              	.LBE109:
 1235              	.LBE108:
 414:Src/nRF24.c   **** 		serial_print(message4);
 415:Src/nRF24.c   ****     return false;
 1236              		.loc 1 415 0
 1237 00dc 0020     		movs	r0, #0
 1238              	.L85:
 1239              	.LBE107:
 416:Src/nRF24.c   ****   }
 417:Src/nRF24.c   ****   
 418:Src/nRF24.c   **** }
 1240              		.loc 1 418 0 discriminator 1
 1241 00de 4FB0     		add	sp, sp, #316
 1242              	.LCFI30:
 1243              		.cfi_remember_state
 1244              		.cfi_def_cfa_offset 12
 1245              		@ sp needed
 1246 00e0 30BD     		pop	{r4, r5, pc}
 1247              	.LVL128:
 1248              	.L87:
 1249              	.LCFI31:
 1250              		.cfi_restore_state
 1251              	.LBB110:
 404:Src/nRF24.c   **** 											 STATUS has value of 0x2E. \
 1252              		.loc 1 404 0
 1253 00e2 B522     		movs	r2, #181
 1254 00e4 0C49     		ldr	r1, .L88+20
 1255 00e6 01A8     		add	r0, sp, #4
 1256 00e8 FFF7FEFF 		bl	memcpy
 1257              	.LVL129:
 1258              	.LBB111:
 1259              	.LBB112:
 101:Src/nRF24.c   **** }
 1260              		.loc 1 101 0
 1261 00ec 01A8     		add	r0, sp, #4
 1262              	.LVL130:
 1263 00ee FFF7FEFF 		bl	strlen
 1264              	.LVL131:
 1265 00f2 6423     		movs	r3, #100
 1266 00f4 82B2     		uxth	r2, r0
 1267 00f6 01A9     		add	r1, sp, #4
 1268              	.LVL132:
 1269 00f8 0348     		ldr	r0, .L88+4
 1270 00fa FFF7FEFF 		bl	HAL_UART_Transmit
 1271              	.LVL133:
 1272              	.LBE112:
 1273              	.LBE111:
 409:Src/nRF24.c   ****   } 
 1274              		.loc 1 409 0
 1275 00fe 0120     		movs	r0, #1
ARM GAS  /tmp/ccrbCVze.s 			page 31


 1276 0100 EDE7     		b	.L85
 1277              	.L89:
 1278 0102 00BF     		.align	2
 1279              	.L88:
 1280 0104 00000000 		.word	.LC6
 1281 0108 00000000 		.word	huart2
 1282 010c 20000000 		.word	.LC7
 1283 0110 00000000 		.word	.LANCHOR0
 1284 0114 74000000 		.word	.LC9
 1285 0118 BC000000 		.word	.LC8
 1286              	.LBE110:
 1287              		.cfi_endproc
 1288              	.LFE150:
 1290              		.section	.text.nRF24_configure_tx_mode,"ax",%progbits
 1291              		.align	1
 1292              		.global	nRF24_configure_tx_mode
 1293              		.syntax unified
 1294              		.thumb
 1295              		.thumb_func
 1296              		.fpu fpv4-sp-d16
 1298              	nRF24_configure_tx_mode:
 1299              	.LFB151:
 419:Src/nRF24.c   **** 
 420:Src/nRF24.c   **** /**
 421:Src/nRF24.c   ****   * @brief  Configure nRF24 to work in TX (transmit) mode.
 422:Src/nRF24.c   ****   * @param  None.
 423:Src/nRF24.c   ****   * @retval None.
 424:Src/nRF24.c   ****   * @note   After nRF24_configure_tx_mode() is called, use nRF24_keep_sending() to keep sending dat
 425:Src/nRF24.c   ****   */
 426:Src/nRF24.c   **** void nRF24_configure_tx_mode() 
 427:Src/nRF24.c   **** {
 1300              		.loc 1 427 0
 1301              		.cfi_startproc
 1302              		@ args = 0, pretend = 0, frame = 16
 1303              		@ frame_needed = 0, uses_anonymous_args = 0
 1304 0000 30B5     		push	{r4, r5, lr}
 1305              	.LCFI32:
 1306              		.cfi_def_cfa_offset 12
 1307              		.cfi_offset 4, -12
 1308              		.cfi_offset 5, -8
 1309              		.cfi_offset 14, -4
 1310 0002 85B0     		sub	sp, sp, #20
 1311              	.LCFI33:
 1312              		.cfi_def_cfa_offset 32
 428:Src/nRF24.c   ****     nRF24_CE_0();
 1313              		.loc 1 428 0
 1314 0004 FFF7FEFF 		bl	nRF24_CE_0
 1315              	.LVL134:
 429:Src/nRF24.c   **** 
 430:Src/nRF24.c   ****     // Set TX_ADDR for sender. On the Receiver side, set RX_ADDR_P0 with same value.
 431:Src/nRF24.c   ****     uint8_t TX_ADDRESS[5] = {0x10,0xDE,0x10,0x10,0x10};  // 5 byte transmit-address
 1316              		.loc 1 431 0
 1317 0008 1F4B     		ldr	r3, .L92
 1318 000a 93E80300 		ldm	r3, {r0, r1}
 1319 000e 0290     		str	r0, [sp, #8]
 1320 0010 8DF80C10 		strb	r1, [sp, #12]
 432:Src/nRF24.c   ****     spi_write_register(W_REGISTER_MASK + TX_ADDR, 5, TX_ADDRESS);     // Write transmit-address to 
ARM GAS  /tmp/ccrbCVze.s 			page 32


 1321              		.loc 1 432 0
 1322 0014 02AA     		add	r2, sp, #8
 1323 0016 0521     		movs	r1, #5
 1324 0018 3020     		movs	r0, #48
 1325 001a FFF7FEFF 		bl	spi_write_register
 1326              	.LVL135:
 433:Src/nRF24.c   **** 
 434:Src/nRF24.c   ****     uint8_t writing_byte;
 435:Src/nRF24.c   **** 
 436:Src/nRF24.c   ****     writing_byte = 0x00;
 1327              		.loc 1 436 0
 1328 001e 0025     		movs	r5, #0
 1329 0020 04AC     		add	r4, sp, #16
 1330 0022 04F8095D 		strb	r5, [r4, #-9]!
 437:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);
 1331              		.loc 1 437 0
 1332 0026 2246     		mov	r2, r4
 1333 0028 0121     		movs	r1, #1
 1334 002a 2120     		movs	r0, #33
 1335 002c FFF7FEFF 		bl	nRF24_verified_write_register
 1336              	.LVL136:
 438:Src/nRF24.c   **** 
 439:Src/nRF24.c   ****     writing_byte = 0x00;
 1337              		.loc 1 439 0
 1338 0030 8DF80750 		strb	r5, [sp, #7]
 440:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);
 1339              		.loc 1 440 0
 1340 0034 2246     		mov	r2, r4
 1341 0036 0121     		movs	r1, #1
 1342 0038 2220     		movs	r0, #34
 1343 003a FFF7FEFF 		bl	nRF24_verified_write_register
 1344              	.LVL137:
 441:Src/nRF24.c   **** 
 442:Src/nRF24.c   ****     writing_byte = 0x00;
 1345              		.loc 1 442 0
 1346 003e 8DF80750 		strb	r5, [sp, #7]
 443:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);
 1347              		.loc 1 443 0
 1348 0042 2246     		mov	r2, r4
 1349 0044 0121     		movs	r1, #1
 1350 0046 2420     		movs	r0, #36
 1351 0048 FFF7FEFF 		bl	nRF24_verified_write_register
 1352              	.LVL138:
 444:Src/nRF24.c   **** 
 445:Src/nRF24.c   ****     writing_byte = 40;
 1353              		.loc 1 445 0
 1354 004c 2823     		movs	r3, #40
 1355 004e 8DF80730 		strb	r3, [sp, #7]
 446:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_CH, 1, &writing_byte);
 1356              		.loc 1 446 0
 1357 0052 2246     		mov	r2, r4
 1358 0054 0121     		movs	r1, #1
 1359 0056 2520     		movs	r0, #37
 1360 0058 FFF7FEFF 		bl	nRF24_verified_write_register
 1361              	.LVL139:
 447:Src/nRF24.c   **** 
 448:Src/nRF24.c   ****     writing_byte = 0x07;
ARM GAS  /tmp/ccrbCVze.s 			page 33


 1362              		.loc 1 448 0
 1363 005c 0723     		movs	r3, #7
 1364 005e 8DF80730 		strb	r3, [sp, #7]
 449:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 1365              		.loc 1 449 0
 1366 0062 2246     		mov	r2, r4
 1367 0064 0121     		movs	r1, #1
 1368 0066 2620     		movs	r0, #38
 1369 0068 FFF7FEFF 		bl	nRF24_verified_write_register
 1370              	.LVL140:
 450:Src/nRF24.c   **** 
 451:Src/nRF24.c   ****     // PWR_UP, state transition to [Standby-I]
 452:Src/nRF24.c   ****     writing_byte = 0x0e;
 1371              		.loc 1 452 0
 1372 006c 0E23     		movs	r3, #14
 1373 006e 8DF80730 		strb	r3, [sp, #7]
 453:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);
 1374              		.loc 1 453 0
 1375 0072 2246     		mov	r2, r4
 1376 0074 0121     		movs	r1, #1
 1377 0076 2020     		movs	r0, #32
 1378 0078 FFF7FEFF 		bl	nRF24_verified_write_register
 1379              	.LVL141:
 454:Src/nRF24.c   ****     spi_delay(150);
 1380              		.loc 1 454 0
 1381 007c 9620     		movs	r0, #150
 1382 007e FFF7FEFF 		bl	spi_delay
 1383              	.LVL142:
 455:Src/nRF24.c   **** 
 456:Src/nRF24.c   **** 		// CE is not set to 1, nRF24 still stays in [Standby-I] Mode.
 457:Src/nRF24.c   ****     // CE = 1 is not activated until we write to TX FIFO so stays in Standby-I mode.
 458:Src/nRF24.c   **** }
 1384              		.loc 1 458 0
 1385 0082 05B0     		add	sp, sp, #20
 1386              	.LCFI34:
 1387              		.cfi_def_cfa_offset 12
 1388              		@ sp needed
 1389 0084 30BD     		pop	{r4, r5, pc}
 1390              	.L93:
 1391 0086 00BF     		.align	2
 1392              	.L92:
 1393 0088 04000000 		.word	.LANCHOR0+4
 1394              		.cfi_endproc
 1395              	.LFE151:
 1397              		.section	.text.nRF24_keep_sending,"ax",%progbits
 1398              		.align	1
 1399              		.global	nRF24_keep_sending
 1400              		.syntax unified
 1401              		.thumb
 1402              		.thumb_func
 1403              		.fpu fpv4-sp-d16
 1405              	nRF24_keep_sending:
 1406              	.LFB152:
 459:Src/nRF24.c   **** 
 460:Src/nRF24.c   **** 
 461:Src/nRF24.c   **** /**
 462:Src/nRF24.c   ****   * @brief  Make nRF24 keep sending data.
ARM GAS  /tmp/ccrbCVze.s 			page 34


 463:Src/nRF24.c   ****   * @param  None.
 464:Src/nRF24.c   ****   * @retval None.
 465:Src/nRF24.c   ****   */
 466:Src/nRF24.c   **** void nRF24_keep_sending() 
 467:Src/nRF24.c   **** {
 1407              		.loc 1 467 0
 1408              		.cfi_startproc
 1409              		@ args = 0, pretend = 0, frame = 72
 1410              		@ frame_needed = 0, uses_anonymous_args = 0
 1411 0000 30B5     		push	{r4, r5, lr}
 1412              	.LCFI35:
 1413              		.cfi_def_cfa_offset 12
 1414              		.cfi_offset 4, -12
 1415              		.cfi_offset 5, -8
 1416              		.cfi_offset 14, -4
 1417 0002 93B0     		sub	sp, sp, #76
 1418              	.LCFI36:
 1419              		.cfi_def_cfa_offset 88
 468:Src/nRF24.c   ****   uint8_t payload[] = {0xBE, 0xEF, 0xCA, 0xFE}; // clock in a payload, TX FIFO not empty 
 1420              		.loc 1 468 0
 1421 0004 254B     		ldr	r3, .L99
 1422 0006 DB68     		ldr	r3, [r3, #12]
 1423 0008 12AA     		add	r2, sp, #72
 1424 000a 42F8043D 		str	r3, [r2, #-4]!
 469:Src/nRF24.c   **** 
 470:Src/nRF24.c   ****   char debug_msg[64];
 471:Src/nRF24.c   ****   
 472:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, (uint8_t*) payload);
 1425              		.loc 1 472 0
 1426 000e 0421     		movs	r1, #4
 1427 0010 A020     		movs	r0, #160
 1428 0012 FFF7FEFF 		bl	spi_write_register
 1429              	.LVL143:
 473:Src/nRF24.c   **** 
 474:Src/nRF24.c   ****   /* Fire out the transmit packet */
 475:Src/nRF24.c   ****   nRF24_CE_1(); 
 1430              		.loc 1 475 0
 1431 0016 FFF7FEFF 		bl	nRF24_CE_1
 1432              	.LVL144:
 476:Src/nRF24.c   **** 
 477:Src/nRF24.c   ****   uint8_t stat = nRF24_get_STATUS();
 1433              		.loc 1 477 0
 1434 001a FFF7FEFF 		bl	nRF24_get_STATUS
 1435              	.LVL145:
 1436 001e 0446     		mov	r4, r0
 1437              	.LVL146:
 478:Src/nRF24.c   **** 
 479:Src/nRF24.c   ****   sprintf(debug_msg, "<STATUS> register : %x\n", stat);
 1438              		.loc 1 479 0
 1439 0020 0246     		mov	r2, r0
 1440 0022 1F49     		ldr	r1, .L99+4
 1441 0024 01A8     		add	r0, sp, #4
 1442              	.LVL147:
 1443 0026 FFF7FEFF 		bl	sprintf
 1444              	.LVL148:
 1445              	.LBB113:
 1446              	.LBB114:
ARM GAS  /tmp/ccrbCVze.s 			page 35


 101:Src/nRF24.c   **** }
 1447              		.loc 1 101 0
 1448 002a 01A8     		add	r0, sp, #4
 1449              	.LVL149:
 1450 002c FFF7FEFF 		bl	strlen
 1451              	.LVL150:
 1452 0030 6423     		movs	r3, #100
 1453 0032 82B2     		uxth	r2, r0
 1454 0034 01A9     		add	r1, sp, #4
 1455              	.LVL151:
 1456 0036 1B48     		ldr	r0, .L99+8
 1457 0038 FFF7FEFF 		bl	HAL_UART_Transmit
 1458              	.LVL152:
 1459              	.LBE114:
 1460              	.LBE113:
 480:Src/nRF24.c   **** 	serial_print(debug_msg);
 481:Src/nRF24.c   **** 
 482:Src/nRF24.c   ****   if (stat == 0x2e) // TX_DS bit is set.
 1461              		.loc 1 482 0
 1462 003c 2E2C     		cmp	r4, #46
 1463 003e 1AD0     		beq	.L98
 483:Src/nRF24.c   ****   {
 484:Src/nRF24.c   ****     strcpy(debug_msg, "nRF24 send successful.\n");
 485:Src/nRF24.c   **** 		serial_print(debug_msg);
 486:Src/nRF24.c   ****   } 
 487:Src/nRF24.c   ****   else 
 488:Src/nRF24.c   ****   {
 489:Src/nRF24.c   ****     strcpy(debug_msg, "nRF24 send failed.\n");
 1464              		.loc 1 489 0
 1465 0040 01AC     		add	r4, sp, #4
 1466 0042 194D     		ldr	r5, .L99+12
 1467 0044 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1468 0046 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1469 0048 2B68     		ldr	r3, [r5]
 1470 004a 2360     		str	r3, [r4]
 1471              	.LVL153:
 1472              	.LBB115:
 1473              	.LBB116:
 101:Src/nRF24.c   **** }
 1474              		.loc 1 101 0
 1475 004c 01A8     		add	r0, sp, #4
 1476              	.LVL154:
 1477 004e FFF7FEFF 		bl	strlen
 1478              	.LVL155:
 1479 0052 6423     		movs	r3, #100
 1480 0054 82B2     		uxth	r2, r0
 1481 0056 01A9     		add	r1, sp, #4
 1482              	.LVL156:
 1483 0058 1248     		ldr	r0, .L99+8
 1484 005a FFF7FEFF 		bl	HAL_UART_Transmit
 1485              	.LVL157:
 1486              	.L96:
 1487              	.LBE116:
 1488              	.LBE115:
 490:Src/nRF24.c   **** 		serial_print(debug_msg);
 491:Src/nRF24.c   ****   }
 492:Src/nRF24.c   ****   // write 1 to clear TX_DS, TX_DS bit is Write-to-Clear.
ARM GAS  /tmp/ccrbCVze.s 			page 36


 493:Src/nRF24.c   ****   uint8_t writing_byte = 0x20;
 1489              		.loc 1 493 0
 1490 005e 12AA     		add	r2, sp, #72
 1491 0060 2023     		movs	r3, #32
 1492 0062 02F8453D 		strb	r3, [r2, #-69]!
 494:Src/nRF24.c   ****   spi_write_register(W_REGISTER_MASK + STATUS, 1, &writing_byte); 
 1493              		.loc 1 494 0
 1494 0066 0121     		movs	r1, #1
 1495 0068 2720     		movs	r0, #39
 1496 006a FFF7FEFF 		bl	spi_write_register
 1497              	.LVL158:
 495:Src/nRF24.c   **** 
 496:Src/nRF24.c   ****   nRF24_CE_0(); /* stop transmission. Returns to [Standby-I]. */
 1498              		.loc 1 496 0
 1499 006e FFF7FEFF 		bl	nRF24_CE_0
 1500              	.LVL159:
 497:Src/nRF24.c   **** }
 1501              		.loc 1 497 0
 1502 0072 13B0     		add	sp, sp, #76
 1503              	.LCFI37:
 1504              		.cfi_remember_state
 1505              		.cfi_def_cfa_offset 12
 1506              		@ sp needed
 1507 0074 30BD     		pop	{r4, r5, pc}
 1508              	.L98:
 1509              	.LCFI38:
 1510              		.cfi_restore_state
 484:Src/nRF24.c   **** 		serial_print(debug_msg);
 1511              		.loc 1 484 0
 1512 0076 01AC     		add	r4, sp, #4
 1513 0078 0C4D     		ldr	r5, .L99+16
 1514 007a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1515 007c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1516 007e 95E80300 		ldm	r5, {r0, r1}
 1517 0082 84E80300 		stm	r4, {r0, r1}
 1518              	.LVL160:
 1519              	.LBB117:
 1520              	.LBB118:
 101:Src/nRF24.c   **** }
 1521              		.loc 1 101 0
 1522 0086 01A8     		add	r0, sp, #4
 1523              	.LVL161:
 1524 0088 FFF7FEFF 		bl	strlen
 1525              	.LVL162:
 1526 008c 6423     		movs	r3, #100
 1527 008e 82B2     		uxth	r2, r0
 1528 0090 01A9     		add	r1, sp, #4
 1529              	.LVL163:
 1530 0092 0448     		ldr	r0, .L99+8
 1531 0094 FFF7FEFF 		bl	HAL_UART_Transmit
 1532              	.LVL164:
 1533 0098 E1E7     		b	.L96
 1534              	.L100:
 1535 009a 00BF     		.align	2
 1536              	.L99:
 1537 009c 00000000 		.word	.LANCHOR0
 1538 00a0 00000000 		.word	.LC10
ARM GAS  /tmp/ccrbCVze.s 			page 37


 1539 00a4 00000000 		.word	huart2
 1540 00a8 30000000 		.word	.LC12
 1541 00ac 18000000 		.word	.LC11
 1542              	.LBE118:
 1543              	.LBE117:
 1544              		.cfi_endproc
 1545              	.LFE152:
 1547              		.section	.rodata
 1548              		.align	2
 1549              		.set	.LANCHOR0,. + 0
 1550              	.LC0:
 1551 0000 C0       		.byte	-64
 1552 0001 FE       		.byte	-2
 1553 0002 BE       		.byte	-66
 1554 0003 EF       		.byte	-17
 1555              	.LC1:
 1556 0004 10       		.byte	16
 1557 0005 DE       		.byte	-34
 1558 0006 10       		.byte	16
 1559 0007 10       		.byte	16
 1560 0008 10       		.byte	16
 1561 0009 000000   		.space	3
 1562              	.LC2:
 1563 000c BE       		.byte	-66
 1564 000d EF       		.byte	-17
 1565 000e CA       		.byte	-54
 1566 000f FE       		.byte	-2
 1567              		.section	.rodata.nRF24_keep_sending.str1.4,"aMS",%progbits,1
 1568              		.align	2
 1569              	.LC10:
 1570 0000 3C535441 		.ascii	"<STATUS> register : %x\012\000"
 1570      5455533E 
 1570      20726567 
 1570      69737465 
 1570      72203A20 
 1571              	.LC11:
 1572 0018 6E524632 		.ascii	"nRF24 send successful.\012\000"
 1572      34207365 
 1572      6E642073 
 1572      75636365 
 1572      73736675 
 1573              	.LC12:
 1574 0030 6E524632 		.ascii	"nRF24 send failed.\012\000"
 1574      34207365 
 1574      6E642066 
 1574      61696C65 
 1574      642E0A00 
 1575              		.section	.rodata.nRF24_tx_self_test.str1.4,"aMS",%progbits,1
 1576              		.align	2
 1577              	.LC6:
 1578 0000 2D2D2D2D 		.ascii	"---- nrf24 tx self test. ----\012\000"
 1578      206E7266 
 1578      32342074 
 1578      78207365 
 1578      6C662074 
 1579 001f 00       		.space	1
 1580              	.LC7:
ARM GAS  /tmp/ccrbCVze.s 			page 38


 1581 0020 2D2D2D2D 		.ascii	"---- This test to verifies function of a tranmitter"
 1581      20546869 
 1581      73207465 
 1581      73742074 
 1581      6F207665 
 1582 0053 2073656E 		.ascii	" send without a receiver. ----\012\000"
 1582      64207769 
 1582      74686F75 
 1582      74206120 
 1582      72656365 
 1583 0073 00       		.space	1
 1584              	.LC9:
 1585 0074 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has failed. STA"
 1585      6E524632 
 1585      34207472 
 1585      616E736D 
 1585      69737369 
 1586 00a4 54555320 		.ascii	"TUS is expected 0x2E.\000"
 1586      69732065 
 1586      78706563 
 1586      74656420 
 1586      30783245 
 1587 00ba 0000     		.space	2
 1588              	.LC8:
 1589 00bc 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has passed. \011"
 1589      6E524632 
 1589      34207472 
 1589      616E736D 
 1589      69737369 
 1590 00ea 09090909 		.ascii	"\011\011\011\011\011\011\011\011\011\011 STATUS has"
 1590      09090909 
 1590      09092053 
 1590      54415455 
 1590      53206861 
 1591 00ff 2076616C 		.ascii	" value of 0x2E. \011\011\011\011\011\011\011\011\011"
 1591      7565206F 
 1591      66203078 
 1591      32452E20 
 1591      09090909 
 1592 0118 09092054 		.ascii	"\011\011 TX_DS (transfer data sent) was set. \011\011"
 1592      585F4453 
 1592      20287472 
 1592      616E7366 
 1592      65722064 
 1593 0141 09090909 		.ascii	"\011\011\011\011\011\011\011\011\011 RX_P_NO = 111,"
 1593      09090909 
 1593      09205258 
 1593      5F505F4E 
 1593      4F203D20 
 1594 0159 206D6561 		.ascii	" means RX FIFO Empty. \012\000"
 1594      6E732052 
 1594      58204649 
 1594      464F2045 
 1594      6D707479 
 1595              		.section	.rodata.nRF24_verified_write_register.str1.4,"aMS",%progbits,1
 1596              		.align	2
 1597              	.LC3:
ARM GAS  /tmp/ccrbCVze.s 			page 39


 1598 0000 50726F62 		.ascii	"Problem writing to SPI register -- \000"
 1598      6C656D20 
 1598      77726974 
 1598      696E6720 
 1598      746F2053 
 1599              	.LC4:
 1600 0024 77726974 		.ascii	"writing data: <%#02x> read_data: <%#02x>\012\000"
 1600      696E6720 
 1600      64617461 
 1600      3A203C25 
 1600      23303278 
 1601 004e 0000     		.space	2
 1602              	.LC5:
 1603 0050 53756363 		.ascii	"Success writing to SPI register -- \000"
 1603      65737320 
 1603      77726974 
 1603      696E6720 
 1603      746F2053 
 1604              		.text
 1605              	.Letext0:
 1606              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 1607              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 1608              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 1609              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 1610              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 1611              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 1612              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 1613              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 1614              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 1615              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 1616              		.file 12 "/usr/include/newlib/sys/lock.h"
 1617              		.file 13 "/usr/include/newlib/sys/_types.h"
 1618              		.file 14 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1619              		.file 15 "/usr/include/newlib/sys/reent.h"
 1620              		.file 16 "Inc/nRF24.h"
 1621              		.file 17 "/usr/include/newlib/string.h"
 1622              		.file 18 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccrbCVze.s 			page 40


DEFINED SYMBOLS
                            *ABS*:0000000000000000 nRF24.c
     /tmp/ccrbCVze.s:18     .text.SPI_SCK_1:0000000000000000 $t
     /tmp/ccrbCVze.s:25     .text.SPI_SCK_1:0000000000000000 SPI_SCK_1
     /tmp/ccrbCVze.s:47     .text.SPI_SCK_1:0000000000000010 $d
     /tmp/ccrbCVze.s:52     .text.SPI_SCK_0:0000000000000000 $t
     /tmp/ccrbCVze.s:59     .text.SPI_SCK_0:0000000000000000 SPI_SCK_0
     /tmp/ccrbCVze.s:80     .text.SPI_SCK_0:0000000000000010 $d
     /tmp/ccrbCVze.s:85     .text.SPI_MOSI_1:0000000000000000 $t
     /tmp/ccrbCVze.s:92     .text.SPI_MOSI_1:0000000000000000 SPI_MOSI_1
     /tmp/ccrbCVze.s:113    .text.SPI_MOSI_1:0000000000000010 $d
     /tmp/ccrbCVze.s:118    .text.SPI_MOSI_0:0000000000000000 $t
     /tmp/ccrbCVze.s:125    .text.SPI_MOSI_0:0000000000000000 SPI_MOSI_0
     /tmp/ccrbCVze.s:146    .text.SPI_MOSI_0:0000000000000010 $d
     /tmp/ccrbCVze.s:151    .text.SPI_CS_1:0000000000000000 $t
     /tmp/ccrbCVze.s:158    .text.SPI_CS_1:0000000000000000 SPI_CS_1
     /tmp/ccrbCVze.s:179    .text.SPI_CS_1:0000000000000010 $d
     /tmp/ccrbCVze.s:184    .text.SPI_CS_0:0000000000000000 $t
     /tmp/ccrbCVze.s:191    .text.SPI_CS_0:0000000000000000 SPI_CS_0
     /tmp/ccrbCVze.s:212    .text.SPI_CS_0:0000000000000010 $d
     /tmp/ccrbCVze.s:217    .text.SPI_READ_MISO:0000000000000000 $t
     /tmp/ccrbCVze.s:224    .text.SPI_READ_MISO:0000000000000000 SPI_READ_MISO
     /tmp/ccrbCVze.s:245    .text.SPI_READ_MISO:0000000000000010 $d
     /tmp/ccrbCVze.s:250    .text.spi_delay:0000000000000000 $t
     /tmp/ccrbCVze.s:257    .text.spi_delay:0000000000000000 spi_delay
     /tmp/ccrbCVze.s:277    .text.gpio_clockout_8_bits:0000000000000000 $t
     /tmp/ccrbCVze.s:284    .text.gpio_clockout_8_bits:0000000000000000 gpio_clockout_8_bits
     /tmp/ccrbCVze.s:386    .text.gpio_clockout_8_bits:0000000000000064 $d
     /tmp/ccrbCVze.s:394    .text.gpio_clockin_8_bits:0000000000000000 $t
     /tmp/ccrbCVze.s:401    .text.gpio_clockin_8_bits:0000000000000000 gpio_clockin_8_bits
     /tmp/ccrbCVze.s:513    .text.gpio_clockin_8_bits:0000000000000068 $d
     /tmp/ccrbCVze.s:519    .text.spi_read_register:0000000000000000 $t
     /tmp/ccrbCVze.s:526    .text.spi_read_register:0000000000000000 spi_read_register
     /tmp/ccrbCVze.s:591    .text.spi_read_register:0000000000000034 $d
     /tmp/ccrbCVze.s:598    .text.spi_write_register:0000000000000000 $t
     /tmp/ccrbCVze.s:605    .text.spi_write_register:0000000000000000 spi_write_register
     /tmp/ccrbCVze.s:672    .text.spi_write_register:0000000000000034 $d
     /tmp/ccrbCVze.s:679    .text.nRF24_CE_1:0000000000000000 $t
     /tmp/ccrbCVze.s:686    .text.nRF24_CE_1:0000000000000000 nRF24_CE_1
     /tmp/ccrbCVze.s:707    .text.nRF24_CE_1:0000000000000010 $d
     /tmp/ccrbCVze.s:712    .text.nRF24_CE_0:0000000000000000 $t
     /tmp/ccrbCVze.s:719    .text.nRF24_CE_0:0000000000000000 nRF24_CE_0
     /tmp/ccrbCVze.s:740    .text.nRF24_CE_0:0000000000000010 $d
     /tmp/ccrbCVze.s:745    .text.nRF24_verified_write_register:0000000000000000 $t
     /tmp/ccrbCVze.s:752    .text.nRF24_verified_write_register:0000000000000000 nRF24_verified_write_register
     /tmp/ccrbCVze.s:950    .text.nRF24_verified_write_register:00000000000000f8 $d
     /tmp/ccrbCVze.s:958    .text.nRF24_get_STATUS:0000000000000000 $t
     /tmp/ccrbCVze.s:965    .text.nRF24_get_STATUS:0000000000000000 nRF24_get_STATUS
     /tmp/ccrbCVze.s:995    .text.nRF24_get_FIFO_STATUS:0000000000000000 $t
     /tmp/ccrbCVze.s:1002   .text.nRF24_get_FIFO_STATUS:0000000000000000 nRF24_get_FIFO_STATUS
     /tmp/ccrbCVze.s:1032   .text.nRF24_get_CONFIG:0000000000000000 $t
     /tmp/ccrbCVze.s:1039   .text.nRF24_get_CONFIG:0000000000000000 nRF24_get_CONFIG
     /tmp/ccrbCVze.s:1069   .text.nRF24_tx_self_test:0000000000000000 $t
     /tmp/ccrbCVze.s:1076   .text.nRF24_tx_self_test:0000000000000000 nRF24_tx_self_test
     /tmp/ccrbCVze.s:1280   .text.nRF24_tx_self_test:0000000000000104 $d
     /tmp/ccrbCVze.s:1291   .text.nRF24_configure_tx_mode:0000000000000000 $t
     /tmp/ccrbCVze.s:1298   .text.nRF24_configure_tx_mode:0000000000000000 nRF24_configure_tx_mode
ARM GAS  /tmp/ccrbCVze.s 			page 41


     /tmp/ccrbCVze.s:1393   .text.nRF24_configure_tx_mode:0000000000000088 $d
     /tmp/ccrbCVze.s:1398   .text.nRF24_keep_sending:0000000000000000 $t
     /tmp/ccrbCVze.s:1405   .text.nRF24_keep_sending:0000000000000000 nRF24_keep_sending
     /tmp/ccrbCVze.s:1537   .text.nRF24_keep_sending:000000000000009c $d
     /tmp/ccrbCVze.s:1548   .rodata:0000000000000000 $d
     /tmp/ccrbCVze.s:1568   .rodata.nRF24_keep_sending.str1.4:0000000000000000 $d
     /tmp/ccrbCVze.s:1576   .rodata.nRF24_tx_self_test.str1.4:0000000000000000 $d
     /tmp/ccrbCVze.s:1596   .rodata.nRF24_verified_write_register.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_ReadPin
HAL_Delay
memset
strlen
HAL_UART_Transmit
sprintf
huart2
memcpy
