ARM GAS  /tmp/ccQFqAzx.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"nRF24.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SPI_SCK_1,"ax",%progbits
  18              		.align	1
  19              		.global	SPI_SCK_1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SPI_SCK_1:
  26              	.LFB131:
  27              		.file 1 "Src/nRF24.c"
   1:Src/nRF24.c   **** /**
   2:Src/nRF24.c   ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
   3:Src/nRF24.c   ****   * @file      :     nRF24.c
   4:Src/nRF24.c   ****   * @author    :     Luyao Han
   5:Src/nRF24.c   ****   * @email     :     luyaohan1001@gmail.com
   6:Src/nRF24.c   ****   * @brief     :     C library for Nordic nRF24L01+ (or nRF24L01p) 2.4GHz wireless transceiver.
   7:Src/nRF24.c   ****   * @date      :     04-21-2022
   8:Src/nRF24.c   **** 	* @note      :     The library nRF24.c and nRF24.h strictly follows the "nRF24L01+ Single Chip 2.4
   9:Src/nRF24.c   **** 	                   Name Conventions:
  10:Src/nRF24.c   **** 											   <REGISTER>
  11:Src/nRF24.c   **** 												 high-level actions uses more snake cases, while lower-level GPIO / Delays uses more ca
  12:Src/nRF24.c   ****   * Copyright (C) 2022-2122 Luyao Han. The following code may be shared or modified for personal us
  13:Src/nRF24.c   ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
  14:Src/nRF24.c   **** 
  15:Src/nRF24.c   **** /* Includes ---------------------------------------------------------------------------------------
  16:Src/nRF24.c   **** #include "nRF24.h"
  17:Src/nRF24.c   **** 
  18:Src/nRF24.c   **** /* Macro Define -----------------------------------------------------------------------------------
  19:Src/nRF24.c   **** #define NRF24_DEBUG /* When defined, debug messages are logged through UART. */
  20:Src/nRF24.c   **** /* GPIO Physical Layer ----------------------------------------------------------------------------
  21:Src/nRF24.c   **** 
  22:Src/nRF24.c   **** /* SCK    PA8  */
  23:Src/nRF24.c   **** /* MOSI   PB10 */
  24:Src/nRF24.c   **** /* CSN    PB4  */
  25:Src/nRF24.c   **** /* CE     PB5  */
  26:Src/nRF24.c   **** /* MISO   PA10 */
  27:Src/nRF24.c   **** 
  28:Src/nRF24.c   **** /**
  29:Src/nRF24.c   ****   * @brief Set high on SCK pin of SPI bus.
  30:Src/nRF24.c   ****   * @param None
  31:Src/nRF24.c   ****   * @retval None */
ARM GAS  /tmp/ccQFqAzx.s 			page 2


  32:Src/nRF24.c   **** __inline__ void SPI_SCK_1()
  33:Src/nRF24.c   **** {
  28              		.loc 1 33 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  34:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  
  37              		.loc 1 34 0
  38 0002 0122     		movs	r2, #1
  39 0004 4FF48071 		mov	r1, #256
  40 0008 0148     		ldr	r0, .L3
  41 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  42              	.LVL0:
  43 000e 08BD     		pop	{r3, pc}
  44              	.L4:
  45              		.align	2
  46              	.L3:
  47 0010 00000240 		.word	1073872896
  48              		.cfi_endproc
  49              	.LFE131:
  51              		.section	.text.SPI_SCK_0,"ax",%progbits
  52              		.align	1
  53              		.global	SPI_SCK_0
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	SPI_SCK_0:
  60              	.LFB132:
  35:Src/nRF24.c   **** }
  36:Src/nRF24.c   **** 
  37:Src/nRF24.c   **** /**
  38:Src/nRF24.c   ****   * @brief Set low on SCK pin of SPI bus.
  39:Src/nRF24.c   ****   * @param None
  40:Src/nRF24.c   ****   * @retval None
  41:Src/nRF24.c   ****   */
  42:Src/nRF24.c   **** __inline__ void SPI_SCK_0()
  43:Src/nRF24.c   **** {
  61              		.loc 1 43 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
  44:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  
  70              		.loc 1 44 0
  71 0002 0022     		movs	r2, #0
  72 0004 4FF48071 		mov	r1, #256
  73 0008 0148     		ldr	r0, .L7
ARM GAS  /tmp/ccQFqAzx.s 			page 3


  74 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  75              	.LVL1:
  76 000e 08BD     		pop	{r3, pc}
  77              	.L8:
  78              		.align	2
  79              	.L7:
  80 0010 00000240 		.word	1073872896
  81              		.cfi_endproc
  82              	.LFE132:
  84              		.section	.text.SPI_MOSI_1,"ax",%progbits
  85              		.align	1
  86              		.global	SPI_MOSI_1
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	SPI_MOSI_1:
  93              	.LFB133:
  45:Src/nRF24.c   **** } 
  46:Src/nRF24.c   **** 
  47:Src/nRF24.c   **** /**
  48:Src/nRF24.c   ****   * @brief Set high on MOSI pin of SPI bus.
  49:Src/nRF24.c   ****   * @param None
  50:Src/nRF24.c   ****   * @retval None
  51:Src/nRF24.c   ****   */
  52:Src/nRF24.c   **** __inline__ void SPI_MOSI_1()
  53:Src/nRF24.c   **** {
  94              		.loc 1 53 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 08B5     		push	{r3, lr}
  99              	.LCFI2:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
  54:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  
 103              		.loc 1 54 0
 104 0002 0122     		movs	r2, #1
 105 0004 4FF48061 		mov	r1, #1024
 106 0008 0148     		ldr	r0, .L11
 107 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL2:
 109 000e 08BD     		pop	{r3, pc}
 110              	.L12:
 111              		.align	2
 112              	.L11:
 113 0010 00040240 		.word	1073873920
 114              		.cfi_endproc
 115              	.LFE133:
 117              		.section	.text.SPI_MOSI_0,"ax",%progbits
 118              		.align	1
 119              		.global	SPI_MOSI_0
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQFqAzx.s 			page 4


 125              	SPI_MOSI_0:
 126              	.LFB134:
  55:Src/nRF24.c   **** }
  56:Src/nRF24.c   **** 
  57:Src/nRF24.c   **** /**
  58:Src/nRF24.c   ****   * @brief Set low on MOSI pin of SPI bus.
  59:Src/nRF24.c   ****   * @param None
  60:Src/nRF24.c   ****   * @retval None
  61:Src/nRF24.c   ****   */
  62:Src/nRF24.c   **** __inline__ void SPI_MOSI_0()
  63:Src/nRF24.c   **** {
 127              		.loc 1 63 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131 0000 08B5     		push	{r3, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 3, -8
 135              		.cfi_offset 14, -4
  64:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);  
 136              		.loc 1 64 0
 137 0002 0022     		movs	r2, #0
 138 0004 4FF48061 		mov	r1, #1024
 139 0008 0148     		ldr	r0, .L15
 140 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 141              	.LVL3:
 142 000e 08BD     		pop	{r3, pc}
 143              	.L16:
 144              		.align	2
 145              	.L15:
 146 0010 00040240 		.word	1073873920
 147              		.cfi_endproc
 148              	.LFE134:
 150              		.section	.text.SPI_CS_1,"ax",%progbits
 151              		.align	1
 152              		.global	SPI_CS_1
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu fpv4-sp-d16
 158              	SPI_CS_1:
 159              	.LFB135:
  65:Src/nRF24.c   **** }
  66:Src/nRF24.c   **** 
  67:Src/nRF24.c   **** /**
  68:Src/nRF24.c   ****   * @brief Set high on CS pin of SPI bus.
  69:Src/nRF24.c   ****   * @param None
  70:Src/nRF24.c   ****   * @retval None
  71:Src/nRF24.c   ****   */
  72:Src/nRF24.c   **** __inline__ void SPI_CS_1() 
  73:Src/nRF24.c   **** {
 160              		.loc 1 73 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccQFqAzx.s 			page 5


 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 3, -8
 168              		.cfi_offset 14, -4
  74:Src/nRF24.c   ****     /* CS High == CSN Low */
  75:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  
 169              		.loc 1 75 0
 170 0002 0022     		movs	r2, #0
 171 0004 1021     		movs	r1, #16
 172 0006 0248     		ldr	r0, .L19
 173 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 174              	.LVL4:
 175 000c 08BD     		pop	{r3, pc}
 176              	.L20:
 177 000e 00BF     		.align	2
 178              	.L19:
 179 0010 00040240 		.word	1073873920
 180              		.cfi_endproc
 181              	.LFE135:
 183              		.section	.text.SPI_CS_0,"ax",%progbits
 184              		.align	1
 185              		.global	SPI_CS_0
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	SPI_CS_0:
 192              	.LFB136:
  76:Src/nRF24.c   **** }
  77:Src/nRF24.c   **** 
  78:Src/nRF24.c   **** /**
  79:Src/nRF24.c   ****   * @brief Set low on CS pin of SPI bus.
  80:Src/nRF24.c   ****   * @param None
  81:Src/nRF24.c   ****   * @retval None
  82:Src/nRF24.c   ****   */
  83:Src/nRF24.c   **** __inline__ void SPI_CS_0()
  84:Src/nRF24.c   **** {
 193              		.loc 1 84 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 08B5     		push	{r3, lr}
 198              	.LCFI5:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 3, -8
 201              		.cfi_offset 14, -4
  85:Src/nRF24.c   ****     /* CS Low == CSN High */
  86:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 202              		.loc 1 86 0
 203 0002 0122     		movs	r2, #1
 204 0004 1021     		movs	r1, #16
 205 0006 0248     		ldr	r0, .L23
 206 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 207              	.LVL5:
 208 000c 08BD     		pop	{r3, pc}
 209              	.L24:
 210 000e 00BF     		.align	2
ARM GAS  /tmp/ccQFqAzx.s 			page 6


 211              	.L23:
 212 0010 00040240 		.word	1073873920
 213              		.cfi_endproc
 214              	.LFE136:
 216              		.section	.text.SPI_READ_MISO,"ax",%progbits
 217              		.align	1
 218              		.global	SPI_READ_MISO
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	SPI_READ_MISO:
 225              	.LFB137:
  87:Src/nRF24.c   **** }
  88:Src/nRF24.c   **** 
  89:Src/nRF24.c   **** 
  90:Src/nRF24.c   **** /**
  91:Src/nRF24.c   ****   * @brief  Get pin-level on MISO pin of SPI bus.
  92:Src/nRF24.c   ****   * @param  None
  93:Src/nRF24.c   ****   * @retval None
  94:Src/nRF24.c   ****   */
  95:Src/nRF24.c   **** __inline__ GPIO_PinState SPI_READ_MISO()
  96:Src/nRF24.c   **** {
 226              		.loc 1 96 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI6:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
  97:Src/nRF24.c   ****   return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 235              		.loc 1 97 0
 236 0002 4FF48061 		mov	r1, #1024
 237 0006 0248     		ldr	r0, .L27
 238 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 239              	.LVL6:
  98:Src/nRF24.c   **** }
 240              		.loc 1 98 0
 241 000c 08BD     		pop	{r3, pc}
 242              	.L28:
 243 000e 00BF     		.align	2
 244              	.L27:
 245 0010 00000240 		.word	1073872896
 246              		.cfi_endproc
 247              	.LFE137:
 249              		.section	.text.serial_print,"ax",%progbits
 250              		.align	1
 251              		.global	serial_print
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv4-sp-d16
 257              	serial_print:
 258              	.LFB138:
  99:Src/nRF24.c   **** 
ARM GAS  /tmp/ccQFqAzx.s 			page 7


 100:Src/nRF24.c   **** /**
 101:Src/nRF24.c   ****   * @brief   Print debug string through USART.
 102:Src/nRF24.c   ****   * @param   p_msg Pointer to anynomous message string.
 103:Src/nRF24.c   ****   * @retval  None.
 104:Src/nRF24.c   ****   * @note    When testing on STM32F401RE Nucleo Board, the board supports virtual COM (serial) port
 105:Src/nRF24.c   ****   *            Connecting a USB-TTL adapter such as CH340 to the 'TX/D1' on morpho connector will n
 106:Src/nRF24.c   ****   *             In the datasheet it has been confirmed that the USART2 pins have been to multiplexe
 107:Src/nRF24.c   ****   *            On the PC, look for port /dev/ttyACM0 as the virtual serial port.  
 108:Src/nRF24.c   ****   */
 109:Src/nRF24.c   **** __inline__ void serial_print(char* message)
 110:Src/nRF24.c   **** {
 259              		.loc 1 110 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL7:
 264 0000 10B5     		push	{r4, lr}
 265              	.LCFI7:
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 4, -8
 268              		.cfi_offset 14, -4
 269 0002 0446     		mov	r4, r0
 111:Src/nRF24.c   ****   HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
 270              		.loc 1 111 0
 271 0004 FFF7FEFF 		bl	strlen
 272              	.LVL8:
 273 0008 6423     		movs	r3, #100
 274 000a 82B2     		uxth	r2, r0
 275 000c 2146     		mov	r1, r4
 276 000e 0248     		ldr	r0, .L31
 277 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 278              	.LVL9:
 279 0014 10BD     		pop	{r4, pc}
 280              	.LVL10:
 281              	.L32:
 282 0016 00BF     		.align	2
 283              	.L31:
 284 0018 00000000 		.word	huart2
 285              		.cfi_endproc
 286              	.LFE138:
 288              		.section	.text.spi_delay,"ax",%progbits
 289              		.align	1
 290              		.global	spi_delay
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	spi_delay:
 297              	.LFB141:
 112:Src/nRF24.c   **** }
 113:Src/nRF24.c   **** 
 114:Src/nRF24.c   **** /**
 115:Src/nRF24.c   ****   * @brief      Clock out (write) 8 bits on MOSI of SPI bus on SCK high.
 116:Src/nRF24.c   ****   * @param[in]  tx_data One byte of data to transmit.
 117:Src/nRF24.c   ****   * @retval     None.
 118:Src/nRF24.c   ****   * @note  
 119:Src/nRF24.c   ****   *   Endianess: Most Significant Bit First. Cn: Command Bits. Sn: Status Register bits. Dn: data b
ARM GAS  /tmp/ccQFqAzx.s 			page 8


 120:Src/nRF24.c   ****   *
 121:Src/nRF24.c   ****   *   Following is a diagram for time sequence:
 122:Src/nRF24.c   ****   *   CSN ````\____________________________________________________________________________________
 123:Src/nRF24.c   ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|D7|__|D6|__|D5|__|D4|__|D3|__|
 124:Src/nRF24.c   ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 125:Src/nRF24.c   ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 126:Src/nRF24.c   ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 127:Src/nRF24.c   ****   *
 128:Src/nRF24.c   ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 129:Src/nRF24.c   ****   */
 130:Src/nRF24.c   **** void gpio_clockout_8_bits(uint8_t tx_data) 
 131:Src/nRF24.c   **** {
 132:Src/nRF24.c   ****   spi_delay();
 133:Src/nRF24.c   ****   for (int i = 0; i < 8; ++i) 
 134:Src/nRF24.c   ****   {
 135:Src/nRF24.c   ****       SPI_SCK_0();
 136:Src/nRF24.c   ****       spi_delay();
 137:Src/nRF24.c   **** 
 138:Src/nRF24.c   ****       if(tx_data & 0x80) // MSBit first
 139:Src/nRF24.c   ****           SPI_MOSI_1();
 140:Src/nRF24.c   ****       else
 141:Src/nRF24.c   ****           SPI_MOSI_0();
 142:Src/nRF24.c   **** 
 143:Src/nRF24.c   **** 			/* setup time */	
 144:Src/nRF24.c   ****       spi_delay();
 145:Src/nRF24.c   **** 
 146:Src/nRF24.c   ****       SPI_SCK_1(); // clock data
 147:Src/nRF24.c   ****       tx_data = tx_data << 1; // load next MSB
 148:Src/nRF24.c   **** 
 149:Src/nRF24.c   **** 			/* hold time */
 150:Src/nRF24.c   ****       spi_delay();
 151:Src/nRF24.c   ****   }
 152:Src/nRF24.c   ****   SPI_SCK_0();
 153:Src/nRF24.c   **** }
 154:Src/nRF24.c   **** 
 155:Src/nRF24.c   **** /**
 156:Src/nRF24.c   ****   * @brief  Clock in (read) 8 bits from MISO of SPI bus on SCK high.
 157:Src/nRF24.c   ****   * @param  None
 158:Src/nRF24.c   ****   * @retval A byte of read data.
 159:Src/nRF24.c   ****   * @note
 160:Src/nRF24.c   ****   *   Endianess: Most Significant Bit first. Cn: Command bits. Sn: Status register bits. Dn: Data b
 161:Src/nRF24.c   ****   *    
 162:Src/nRF24.c   ****   *   Following is a diagram for time sequence:
 163:Src/nRF24.c   ****   *   CSN ````\____________________________________________________________________________________
 164:Src/nRF24.c   ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|00|__|00|__|00|__|00|__|00|__|
 165:Src/nRF24.c   ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 166:Src/nRF24.c   ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 167:Src/nRF24.c   ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______|D0|__|D1|__|D2|__|D3|__|D4|__|
 168:Src/nRF24.c   ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 169:Src/nRF24.c   ****   */
 170:Src/nRF24.c   **** uint8_t gpio_clockin_8_bits(void)
 171:Src/nRF24.c   **** {
 172:Src/nRF24.c   ****   uint8_t rx_data = 0;
 173:Src/nRF24.c   **** 
 174:Src/nRF24.c   ****   spi_delay();
 175:Src/nRF24.c   ****   for (int i=0; i < 8; ++i) 
 176:Src/nRF24.c   ****   {
ARM GAS  /tmp/ccQFqAzx.s 			page 9


 177:Src/nRF24.c   ****       SPI_SCK_0();
 178:Src/nRF24.c   ****       spi_delay();
 179:Src/nRF24.c   ****       SPI_MOSI_0();
 180:Src/nRF24.c   **** 
 181:Src/nRF24.c   **** 			/* setup time */
 182:Src/nRF24.c   ****       SPI_SCK_1();
 183:Src/nRF24.c   ****       spi_delay();
 184:Src/nRF24.c   ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 185:Src/nRF24.c   ****       rx_data |= SPI_READ_MISO();
 186:Src/nRF24.c   **** 
 187:Src/nRF24.c   **** 			/* hold time */
 188:Src/nRF24.c   ****       spi_delay();
 189:Src/nRF24.c   ****   }
 190:Src/nRF24.c   **** 
 191:Src/nRF24.c   ****   SPI_SCK_0();
 192:Src/nRF24.c   ****   return rx_data;
 193:Src/nRF24.c   **** }
 194:Src/nRF24.c   ****   
 195:Src/nRF24.c   **** 
 196:Src/nRF24.c   **** /* SPI Datalink Layer------------------------------------------------------------------------------
 197:Src/nRF24.c   **** void spi_delay() 
 198:Src/nRF24.c   **** {
 298              		.loc 1 198 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302 0000 08B5     		push	{r3, lr}
 303              	.LCFI8:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 3, -8
 306              		.cfi_offset 14, -4
 199:Src/nRF24.c   ****   HAL_Delay(1);
 307              		.loc 1 199 0
 308 0002 0120     		movs	r0, #1
 309 0004 FFF7FEFF 		bl	HAL_Delay
 310              	.LVL11:
 311 0008 08BD     		pop	{r3, pc}
 312              		.cfi_endproc
 313              	.LFE141:
 315              		.section	.text.gpio_clockout_8_bits,"ax",%progbits
 316              		.align	1
 317              		.global	gpio_clockout_8_bits
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu fpv4-sp-d16
 323              	gpio_clockout_8_bits:
 324              	.LFB139:
 131:Src/nRF24.c   ****   spi_delay();
 325              		.loc 1 131 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              	.LVL12:
 330 0000 38B5     		push	{r3, r4, r5, lr}
 331              	.LCFI9:
 332              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccQFqAzx.s 			page 10


 333              		.cfi_offset 3, -16
 334              		.cfi_offset 4, -12
 335              		.cfi_offset 5, -8
 336              		.cfi_offset 14, -4
 337 0002 0446     		mov	r4, r0
 132:Src/nRF24.c   ****   for (int i = 0; i < 8; ++i) 
 338              		.loc 1 132 0
 339 0004 FFF7FEFF 		bl	spi_delay
 340              	.LVL13:
 341              	.LBB35:
 133:Src/nRF24.c   ****   {
 342              		.loc 1 133 0
 343 0008 0025     		movs	r5, #0
 344 000a 12E0     		b	.L36
 345              	.LVL14:
 346              	.L42:
 347              	.LBB36:
 348              	.LBB37:
  54:Src/nRF24.c   **** }
 349              		.loc 1 54 0
 350 000c 0122     		movs	r2, #1
 351 000e 4FF48061 		mov	r1, #1024
 352 0012 1548     		ldr	r0, .L43
 353 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 354              	.LVL15:
 355              	.L38:
 356              	.LBE37:
 357              	.LBE36:
 144:Src/nRF24.c   **** 
 358              		.loc 1 144 0 discriminator 2
 359 0018 FFF7FEFF 		bl	spi_delay
 360              	.LVL16:
 361              	.LBB38:
 362              	.LBB39:
  34:Src/nRF24.c   **** }
 363              		.loc 1 34 0 discriminator 2
 364 001c 0122     		movs	r2, #1
 365 001e 4FF48071 		mov	r1, #256
 366 0022 1248     		ldr	r0, .L43+4
 367 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 368              	.LVL17:
 369              	.LBE39:
 370              	.LBE38:
 147:Src/nRF24.c   **** 
 371              		.loc 1 147 0 discriminator 2
 372 0028 6400     		lsls	r4, r4, #1
 373              	.LVL18:
 374 002a E4B2     		uxtb	r4, r4
 375              	.LVL19:
 150:Src/nRF24.c   ****   }
 376              		.loc 1 150 0 discriminator 2
 377 002c FFF7FEFF 		bl	spi_delay
 378              	.LVL20:
 133:Src/nRF24.c   ****   {
 379              		.loc 1 133 0 discriminator 2
 380 0030 0135     		adds	r5, r5, #1
 381              	.LVL21:
ARM GAS  /tmp/ccQFqAzx.s 			page 11


 382              	.L36:
 133:Src/nRF24.c   ****   {
 383              		.loc 1 133 0 is_stmt 0 discriminator 1
 384 0032 072D     		cmp	r5, #7
 385 0034 11DC     		bgt	.L41
 386              	.LBB40:
 387              	.LBB41:
  44:Src/nRF24.c   **** } 
 388              		.loc 1 44 0 is_stmt 1
 389 0036 0022     		movs	r2, #0
 390 0038 4FF48071 		mov	r1, #256
 391 003c 0B48     		ldr	r0, .L43+4
 392 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 393              	.LVL22:
 394              	.LBE41:
 395              	.LBE40:
 136:Src/nRF24.c   **** 
 396              		.loc 1 136 0
 397 0042 FFF7FEFF 		bl	spi_delay
 398              	.LVL23:
 138:Src/nRF24.c   ****           SPI_MOSI_1();
 399              		.loc 1 138 0
 400 0046 14F0800F 		tst	r4, #128
 401 004a DFD1     		bne	.L42
 402              	.LBB42:
 403              	.LBB43:
  64:Src/nRF24.c   **** }
 404              		.loc 1 64 0
 405 004c 0022     		movs	r2, #0
 406 004e 4FF48061 		mov	r1, #1024
 407 0052 0548     		ldr	r0, .L43
 408 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 409              	.LVL24:
 410 0058 DEE7     		b	.L38
 411              	.L41:
 412              	.LBE43:
 413              	.LBE42:
 414              	.LBE35:
 415              	.LBB44:
 416              	.LBB45:
  44:Src/nRF24.c   **** } 
 417              		.loc 1 44 0
 418 005a 0022     		movs	r2, #0
 419 005c 4FF48071 		mov	r1, #256
 420 0060 0248     		ldr	r0, .L43+4
 421 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 422              	.LVL25:
 423 0066 38BD     		pop	{r3, r4, r5, pc}
 424              	.LVL26:
 425              	.L44:
 426              		.align	2
 427              	.L43:
 428 0068 00040240 		.word	1073873920
 429 006c 00000240 		.word	1073872896
 430              	.LBE45:
 431              	.LBE44:
 432              		.cfi_endproc
ARM GAS  /tmp/ccQFqAzx.s 			page 12


 433              	.LFE139:
 435              		.section	.text.gpio_clockin_8_bits,"ax",%progbits
 436              		.align	1
 437              		.global	gpio_clockin_8_bits
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	gpio_clockin_8_bits:
 444              	.LFB140:
 171:Src/nRF24.c   ****   uint8_t rx_data = 0;
 445              		.loc 1 171 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449 0000 70B5     		push	{r4, r5, r6, lr}
 450              	.LCFI10:
 451              		.cfi_def_cfa_offset 16
 452              		.cfi_offset 4, -16
 453              		.cfi_offset 5, -12
 454              		.cfi_offset 6, -8
 455              		.cfi_offset 14, -4
 456              	.LVL27:
 174:Src/nRF24.c   ****   for (int i=0; i < 8; ++i) 
 457              		.loc 1 174 0
 458 0002 FFF7FEFF 		bl	spi_delay
 459              	.LVL28:
 460              	.LBB46:
 175:Src/nRF24.c   ****   {
 461              		.loc 1 175 0
 462 0006 0026     		movs	r6, #0
 463              	.LBE46:
 172:Src/nRF24.c   **** 
 464              		.loc 1 172 0
 465 0008 3446     		mov	r4, r6
 466              	.LBB55:
 175:Src/nRF24.c   ****   {
 467              		.loc 1 175 0
 468 000a 22E0     		b	.L46
 469              	.LVL29:
 470              	.L47:
 471              	.LBB47:
 472              	.LBB48:
  44:Src/nRF24.c   **** } 
 473              		.loc 1 44 0
 474 000c 164D     		ldr	r5, .L49
 475 000e 0022     		movs	r2, #0
 476 0010 4FF48071 		mov	r1, #256
 477 0014 2846     		mov	r0, r5
 478 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 479              	.LVL30:
 480              	.LBE48:
 481              	.LBE47:
 178:Src/nRF24.c   ****       SPI_MOSI_0();
 482              		.loc 1 178 0
 483 001a FFF7FEFF 		bl	spi_delay
 484              	.LVL31:
ARM GAS  /tmp/ccQFqAzx.s 			page 13


 485              	.LBB49:
 486              	.LBB50:
  64:Src/nRF24.c   **** }
 487              		.loc 1 64 0
 488 001e 0022     		movs	r2, #0
 489 0020 4FF48061 		mov	r1, #1024
 490 0024 1148     		ldr	r0, .L49+4
 491 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 492              	.LVL32:
 493              	.LBE50:
 494              	.LBE49:
 495              	.LBB51:
 496              	.LBB52:
  34:Src/nRF24.c   **** }
 497              		.loc 1 34 0
 498 002a 0122     		movs	r2, #1
 499 002c 4FF48071 		mov	r1, #256
 500 0030 2846     		mov	r0, r5
 501 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 502              	.LVL33:
 503              	.LBE52:
 504              	.LBE51:
 183:Src/nRF24.c   ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 505              		.loc 1 183 0
 506 0036 FFF7FEFF 		bl	spi_delay
 507              	.LVL34:
 184:Src/nRF24.c   ****       rx_data |= SPI_READ_MISO();
 508              		.loc 1 184 0
 509 003a 6400     		lsls	r4, r4, #1
 510              	.LVL35:
 511 003c E4B2     		uxtb	r4, r4
 512              	.LVL36:
 513              	.LBB53:
 514              	.LBB54:
  97:Src/nRF24.c   **** }
 515              		.loc 1 97 0
 516 003e 4FF48061 		mov	r1, #1024
 517 0042 2846     		mov	r0, r5
 518 0044 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 519              	.LVL37:
 520              	.LBE54:
 521              	.LBE53:
 185:Src/nRF24.c   **** 
 522              		.loc 1 185 0
 523 0048 0443     		orrs	r4, r4, r0
 524              	.LVL38:
 525 004a E4B2     		uxtb	r4, r4
 526              	.LVL39:
 188:Src/nRF24.c   ****   }
 527              		.loc 1 188 0
 528 004c FFF7FEFF 		bl	spi_delay
 529              	.LVL40:
 175:Src/nRF24.c   ****   {
 530              		.loc 1 175 0
 531 0050 0136     		adds	r6, r6, #1
 532              	.LVL41:
 533              	.L46:
ARM GAS  /tmp/ccQFqAzx.s 			page 14


 175:Src/nRF24.c   ****   {
 534              		.loc 1 175 0 is_stmt 0 discriminator 1
 535 0052 072E     		cmp	r6, #7
 536 0054 DADD     		ble	.L47
 537              	.LBE55:
 538              	.LBB56:
 539              	.LBB57:
  44:Src/nRF24.c   **** } 
 540              		.loc 1 44 0 is_stmt 1
 541 0056 0022     		movs	r2, #0
 542 0058 4FF48071 		mov	r1, #256
 543 005c 0248     		ldr	r0, .L49
 544 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 545              	.LVL42:
 546              	.LBE57:
 547              	.LBE56:
 193:Src/nRF24.c   ****   
 548              		.loc 1 193 0
 549 0062 2046     		mov	r0, r4
 550 0064 70BD     		pop	{r4, r5, r6, pc}
 551              	.LVL43:
 552              	.L50:
 553 0066 00BF     		.align	2
 554              	.L49:
 555 0068 00000240 		.word	1073872896
 556 006c 00040240 		.word	1073873920
 557              		.cfi_endproc
 558              	.LFE140:
 560              		.section	.text.spi_read_register,"ax",%progbits
 561              		.align	1
 562              		.global	spi_read_register
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	spi_read_register:
 569              	.LFB142:
 200:Src/nRF24.c   **** }
 201:Src/nRF24.c   **** 
 202:Src/nRF24.c   **** 
 203:Src/nRF24.c   **** /**
 204:Src/nRF24.c   ****   * @brief      Read data from the SPI target device register. Endianess: LSByte first.
 205:Src/nRF24.c   ****   * @param[in]  reg SPI target device register to write to.
 206:Src/nRF24.c   ****   * @param[in]  num_bytes Number of bytes needed to write to that address.
 207:Src/nRF24.c   ****   * @param[out] p_read_data A pointer pointing to a memory location that can store the data read fr
 208:Src/nRF24.c   ****   * @retval     none.
 209:Src/nRF24.c   ****   */
 210:Src/nRF24.c   **** void spi_read_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_read_data)
 211:Src/nRF24.c   **** {
 570              		.loc 1 211 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              	.LVL44:
 575 0000 70B5     		push	{r4, r5, r6, lr}
 576              	.LCFI11:
 577              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccQFqAzx.s 			page 15


 578              		.cfi_offset 4, -16
 579              		.cfi_offset 5, -12
 580              		.cfi_offset 6, -8
 581              		.cfi_offset 14, -4
 582 0002 0446     		mov	r4, r0
 583 0004 0D46     		mov	r5, r1
 584 0006 1646     		mov	r6, r2
 585              	.LBB58:
 586              	.LBB59:
  75:Src/nRF24.c   **** }
 587              		.loc 1 75 0
 588 0008 0022     		movs	r2, #0
 589              	.LVL45:
 590 000a 1021     		movs	r1, #16
 591              	.LVL46:
 592 000c 0948     		ldr	r0, .L55
 593              	.LVL47:
 594 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 595              	.LVL48:
 596              	.LBE59:
 597              	.LBE58:
 212:Src/nRF24.c   ****   /* SPI CHIP SELECT */
 213:Src/nRF24.c   ****   SPI_CS_1();
 214:Src/nRF24.c   ****   
 215:Src/nRF24.c   ****   /* Clock out target register. */
 216:Src/nRF24.c   ****   gpio_clockout_8_bits(reg);
 598              		.loc 1 216 0
 599 0012 2046     		mov	r0, r4
 600 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 601              	.LVL49:
 602              	.LBB60:
 217:Src/nRF24.c   **** 
 218:Src/nRF24.c   ****   /* Clock in target register value. */
 219:Src/nRF24.c   ****   for (int i = 0; i < num_bytes; ++i) 
 603              		.loc 1 219 0
 604 0018 0024     		movs	r4, #0
 605 001a 03E0     		b	.L52
 606              	.LVL50:
 607              	.L53:
 220:Src/nRF24.c   ****   {
 221:Src/nRF24.c   ****     p_read_data[i] = gpio_clockin_8_bits();
 608              		.loc 1 221 0 discriminator 3
 609 001c FFF7FEFF 		bl	gpio_clockin_8_bits
 610              	.LVL51:
 611 0020 3055     		strb	r0, [r6, r4]
 219:Src/nRF24.c   ****   {
 612              		.loc 1 219 0 discriminator 3
 613 0022 0134     		adds	r4, r4, #1
 614              	.LVL52:
 615              	.L52:
 219:Src/nRF24.c   ****   {
 616              		.loc 1 219 0 is_stmt 0 discriminator 1
 617 0024 AC42     		cmp	r4, r5
 618 0026 F9DB     		blt	.L53
 619              	.LBE60:
 620              	.LBB61:
 621              	.LBB62:
ARM GAS  /tmp/ccQFqAzx.s 			page 16


  86:Src/nRF24.c   **** }
 622              		.loc 1 86 0 is_stmt 1
 623 0028 0122     		movs	r2, #1
 624 002a 1021     		movs	r1, #16
 625 002c 0148     		ldr	r0, .L55
 626 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 627              	.LVL53:
 628 0032 70BD     		pop	{r4, r5, r6, pc}
 629              	.LVL54:
 630              	.L56:
 631              		.align	2
 632              	.L55:
 633 0034 00040240 		.word	1073873920
 634              	.LBE62:
 635              	.LBE61:
 636              		.cfi_endproc
 637              	.LFE142:
 639              		.section	.text.spi_write_register,"ax",%progbits
 640              		.align	1
 641              		.global	spi_write_register
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	spi_write_register:
 648              	.LFB143:
 222:Src/nRF24.c   ****   }
 223:Src/nRF24.c   ****   
 224:Src/nRF24.c   ****   /* SPI CHIP DESELECT */
 225:Src/nRF24.c   ****   SPI_CS_0();
 226:Src/nRF24.c   **** }
 227:Src/nRF24.c   **** 
 228:Src/nRF24.c   **** 
 229:Src/nRF24.c   **** /**
 230:Src/nRF24.c   ****   * @brief      Write a number of bytes to the spi target device register.
 231:Src/nRF24.c   ****   * @param[in]  reg spi target device register to write to.
 232:Src/nRF24.c   ****   * @param[in]  num_bytes number of bytes needed to write to that address.
 233:Src/nRF24.c   ****   * @param[in]  p_writing_data A pointer pointing to a memory location storing the data to write.
 234:Src/nRF24.c   ****   * @retval     none.
 235:Src/nRF24.c   ****   */
 236:Src/nRF24.c   **** void spi_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 237:Src/nRF24.c   **** {
 649              		.loc 1 237 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 0
 652              		@ frame_needed = 0, uses_anonymous_args = 0
 653              	.LVL55:
 654 0000 70B5     		push	{r4, r5, r6, lr}
 655              	.LCFI12:
 656              		.cfi_def_cfa_offset 16
 657              		.cfi_offset 4, -16
 658              		.cfi_offset 5, -12
 659              		.cfi_offset 6, -8
 660              		.cfi_offset 14, -4
 661 0002 0446     		mov	r4, r0
 662 0004 0D46     		mov	r5, r1
 663 0006 1646     		mov	r6, r2
ARM GAS  /tmp/ccQFqAzx.s 			page 17


 664              	.LBB63:
 665              	.LBB64:
  75:Src/nRF24.c   **** }
 666              		.loc 1 75 0
 667 0008 0022     		movs	r2, #0
 668              	.LVL56:
 669 000a 1021     		movs	r1, #16
 670              	.LVL57:
 671 000c 0948     		ldr	r0, .L61
 672              	.LVL58:
 673 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 674              	.LVL59:
 675              	.LBE64:
 676              	.LBE63:
 238:Src/nRF24.c   ****   /* SPI CHIP SELECT */
 239:Src/nRF24.c   ****   SPI_CS_1();
 240:Src/nRF24.c   **** 
 241:Src/nRF24.c   ****   /* Clock out target register. */
 242:Src/nRF24.c   ****   gpio_clockout_8_bits(reg); 
 677              		.loc 1 242 0
 678 0012 2046     		mov	r0, r4
 679 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 680              	.LVL60:
 681              	.LBB65:
 243:Src/nRF24.c   **** 
 244:Src/nRF24.c   ****   /* Clock out value bytes to the target. */
 245:Src/nRF24.c   ****   for (int i = 0; i < num_bytes; ++i)
 682              		.loc 1 245 0
 683 0018 0024     		movs	r4, #0
 684 001a 03E0     		b	.L58
 685              	.LVL61:
 686              	.L59:
 687              	.LBB66:
 246:Src/nRF24.c   ****   {
 247:Src/nRF24.c   ****     uint8_t writing_byte = p_writing_data[i];
 248:Src/nRF24.c   ****     gpio_clockout_8_bits(writing_byte);
 688              		.loc 1 248 0 discriminator 3
 689 001c 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 690 001e FFF7FEFF 		bl	gpio_clockout_8_bits
 691              	.LVL62:
 692              	.LBE66:
 245:Src/nRF24.c   ****   {
 693              		.loc 1 245 0 discriminator 3
 694 0022 0134     		adds	r4, r4, #1
 695              	.LVL63:
 696              	.L58:
 245:Src/nRF24.c   ****   {
 697              		.loc 1 245 0 is_stmt 0 discriminator 1
 698 0024 AC42     		cmp	r4, r5
 699 0026 F9DB     		blt	.L59
 700              	.LBE65:
 701              	.LBB67:
 702              	.LBB68:
  86:Src/nRF24.c   **** }
 703              		.loc 1 86 0 is_stmt 1
 704 0028 0122     		movs	r2, #1
 705 002a 1021     		movs	r1, #16
ARM GAS  /tmp/ccQFqAzx.s 			page 18


 706 002c 0148     		ldr	r0, .L61
 707 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 708              	.LVL64:
 709 0032 70BD     		pop	{r4, r5, r6, pc}
 710              	.LVL65:
 711              	.L62:
 712              		.align	2
 713              	.L61:
 714 0034 00040240 		.word	1073873920
 715              	.LBE68:
 716              	.LBE67:
 717              		.cfi_endproc
 718              	.LFE143:
 720              		.section	.text.nRF24_CE_1,"ax",%progbits
 721              		.align	1
 722              		.global	nRF24_CE_1
 723              		.syntax unified
 724              		.thumb
 725              		.thumb_func
 726              		.fpu fpv4-sp-d16
 728              	nRF24_CE_1:
 729              	.LFB144:
 249:Src/nRF24.c   ****   }
 250:Src/nRF24.c   **** 
 251:Src/nRF24.c   ****   /* SPI CHIP DESELECT */
 252:Src/nRF24.c   ****   SPI_CS_0();
 253:Src/nRF24.c   **** }
 254:Src/nRF24.c   **** 
 255:Src/nRF24.c   **** 
 256:Src/nRF24.c   **** /* nRF24 Operations -------------------------------------------------------------------------------
 257:Src/nRF24.c   **** 
 258:Src/nRF24.c   **** 
 259:Src/nRF24.c   **** /**
 260:Src/nRF24.c   ****   * @brief Set high on Chip-Enable pin of nRF24L01.
 261:Src/nRF24.c   ****   * @param None
 262:Src/nRF24.c   ****   * @retval None
 263:Src/nRF24.c   ****   */
 264:Src/nRF24.c   **** void nRF24_CE_1()
 265:Src/nRF24.c   **** {
 730              		.loc 1 265 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734 0000 08B5     		push	{r3, lr}
 735              	.LCFI13:
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 3, -8
 738              		.cfi_offset 14, -4
 266:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  
 739              		.loc 1 266 0
 740 0002 0122     		movs	r2, #1
 741 0004 2021     		movs	r1, #32
 742 0006 0248     		ldr	r0, .L65
 743 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 744              	.LVL66:
 745 000c 08BD     		pop	{r3, pc}
 746              	.L66:
ARM GAS  /tmp/ccQFqAzx.s 			page 19


 747 000e 00BF     		.align	2
 748              	.L65:
 749 0010 00040240 		.word	1073873920
 750              		.cfi_endproc
 751              	.LFE144:
 753              		.section	.text.nRF24_CE_0,"ax",%progbits
 754              		.align	1
 755              		.global	nRF24_CE_0
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv4-sp-d16
 761              	nRF24_CE_0:
 762              	.LFB145:
 267:Src/nRF24.c   **** }
 268:Src/nRF24.c   **** 
 269:Src/nRF24.c   **** 
 270:Src/nRF24.c   **** /**
 271:Src/nRF24.c   ****   * @brief Set low on Chip-Enable pin of nRF24L01.
 272:Src/nRF24.c   ****   * @param None
 273:Src/nRF24.c   ****   * @retval None
 274:Src/nRF24.c   ****   */
 275:Src/nRF24.c   **** void nRF24_CE_0()
 276:Src/nRF24.c   **** {
 763              		.loc 1 276 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767 0000 08B5     		push	{r3, lr}
 768              	.LCFI14:
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 3, -8
 771              		.cfi_offset 14, -4
 277:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 772              		.loc 1 277 0
 773 0002 0022     		movs	r2, #0
 774 0004 2021     		movs	r1, #32
 775 0006 0248     		ldr	r0, .L69
 776 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 777              	.LVL67:
 778 000c 08BD     		pop	{r3, pc}
 779              	.L70:
 780 000e 00BF     		.align	2
 781              	.L69:
 782 0010 00040240 		.word	1073873920
 783              		.cfi_endproc
 784              	.LFE145:
 786              		.section	.text.nRF24_verified_write_register,"ax",%progbits
 787              		.align	1
 788              		.global	nRF24_verified_write_register
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 792              		.fpu fpv4-sp-d16
 794              	nRF24_verified_write_register:
 795              	.LFB146:
 278:Src/nRF24.c   **** }
ARM GAS  /tmp/ccQFqAzx.s 			page 20


 279:Src/nRF24.c   **** 
 280:Src/nRF24.c   **** /**
 281:Src/nRF24.c   ****   * @brief      Write to a register on nRF24L01+ through SPI. Read the same registers after write t
 282:Src/nRF24.c   ****   * @param[in]  reg The target register to write value to.
 283:Src/nRF24.c   ****   * @param[in]  num_bytes Number of bytes to write.
 284:Src/nRF24.c   ****   * @param[in]  p_writing_data Data to write.
 285:Src/nRF24.c   ****   * @retval     Boolean. 1 for mistakes happen. 0 for success.
 286:Src/nRF24.c   ****   * @note       reg & ~ W_REGISTER_MASK is reverse operation of reg | W_REGISTER_MASK,
 287:Src/nRF24.c   **** 	*               essentially get rid of Write Regiter Mask and add a Read Register Mask. 
 288:Src/nRF24.c   ****   */
 289:Src/nRF24.c   **** bool nRF24_verified_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 290:Src/nRF24.c   **** {
 796              		.loc 1 290 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 64
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800              	.LVL68:
 801 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 802              	.LCFI15:
 803              		.cfi_def_cfa_offset 32
 804              		.cfi_offset 4, -32
 805              		.cfi_offset 5, -28
 806              		.cfi_offset 6, -24
 807              		.cfi_offset 7, -20
 808              		.cfi_offset 8, -16
 809              		.cfi_offset 9, -12
 810              		.cfi_offset 10, -8
 811              		.cfi_offset 14, -4
 812 0004 90B0     		sub	sp, sp, #64
 813              	.LCFI16:
 814              		.cfi_def_cfa_offset 96
 815 0006 00AF     		add	r7, sp, #0
 816              	.LCFI17:
 817              		.cfi_def_cfa_register 7
 818 0008 0546     		mov	r5, r0
 819 000a 0C46     		mov	r4, r1
 820 000c 9046     		mov	r8, r2
 291:Src/nRF24.c   **** 
 292:Src/nRF24.c   ****     char message[64] = {'\0'};
 821              		.loc 1 292 0
 822 000e 4022     		movs	r2, #64
 823              	.LVL69:
 824 0010 0021     		movs	r1, #0
 825              	.LVL70:
 826 0012 3846     		mov	r0, r7
 827              	.LVL71:
 828 0014 FFF7FEFF 		bl	memset
 829              	.LVL72:
 293:Src/nRF24.c   ****     uint8_t read_data[num_bytes];
 830              		.loc 1 293 0
 831 0018 A246     		mov	r10, r4
 832              	.LVL73:
 833 001a E31D     		adds	r3, r4, #7
 834 001c 23F00703 		bic	r3, r3, #7
 835 0020 ADEB030D 		sub	sp, sp, r3
 836 0024 E946     		mov	r9, sp
 837              	.LVL74:
ARM GAS  /tmp/ccQFqAzx.s 			page 21


 294:Src/nRF24.c   **** 
 295:Src/nRF24.c   **** 		/* Write the data to target register. */
 296:Src/nRF24.c   ****     spi_write_register(reg, num_bytes, p_writing_data); 
 838              		.loc 1 296 0
 839 0026 4246     		mov	r2, r8
 840 0028 2146     		mov	r1, r4
 841 002a 2846     		mov	r0, r5
 842 002c FFF7FEFF 		bl	spi_write_register
 843              	.LVL75:
 297:Src/nRF24.c   **** 
 298:Src/nRF24.c   **** 		/* Read from same target register to verify if data has been successfully written. */
 299:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK | (reg & ~W_REGISTER_MASK), num_bytes, read_data);
 844              		.loc 1 299 0
 845 0030 6A46     		mov	r2, sp
 846 0032 2146     		mov	r1, r4
 847 0034 05F0DF00 		and	r0, r5, #223
 848 0038 FFF7FEFF 		bl	spi_read_register
 849              	.LVL76:
 850              	.LBB78:
 300:Src/nRF24.c   **** 
 301:Src/nRF24.c   ****     for (int i = 0; i < num_bytes; ++i) 
 851              		.loc 1 301 0
 852 003c 0026     		movs	r6, #0
 853              	.LVL77:
 854              	.L72:
 855              		.loc 1 301 0 is_stmt 0 discriminator 1
 856 003e 5645     		cmp	r6, r10
 857 0040 59DA     		bge	.L77
 302:Src/nRF24.c   ****     {
 303:Src/nRF24.c   ****       if (read_data[i] != p_writing_data[i])  /* check mismatch between written data and read data 
 858              		.loc 1 303 0 is_stmt 1
 859 0042 19F80620 		ldrb	r2, [r9, r6]	@ zero_extendqisi2
 860 0046 08EB0604 		add	r4, r8, r6
 861 004a 18F80630 		ldrb	r3, [r8, r6]	@ zero_extendqisi2
 862 004e 9A42     		cmp	r2, r3
 863 0050 27D1     		bne	.L78
 304:Src/nRF24.c   ****       {
 305:Src/nRF24.c   **** 				#ifdef NRF24_DEBUG
 306:Src/nRF24.c   ****         strcpy(message, "Problem writing to nRF24 register -- ");
 307:Src/nRF24.c   ****         serial_print(message);
 308:Src/nRF24.c   ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 309:Src/nRF24.c   ****         serial_print(message);
 310:Src/nRF24.c   **** 				#endif 
 311:Src/nRF24.c   ****         return true;
 312:Src/nRF24.c   ****       } else {
 313:Src/nRF24.c   **** 				#ifdef NRF24_DEBUG
 314:Src/nRF24.c   ****         strcpy(message, "Success writing to nRF24 register -- ");
 864              		.loc 1 314 0 discriminator 2
 865 0052 3C46     		mov	r4, r7
 866 0054 2A4D     		ldr	r5, .L79
 867 0056 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 868 0058 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 869 005a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 870 005c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 871 005e 95E80300 		ldm	r5, {r0, r1}
 872 0062 44F8040B 		str	r0, [r4], #4
 873 0066 2180     		strh	r1, [r4]	@ movhi
ARM GAS  /tmp/ccQFqAzx.s 			page 22


 874              	.LVL78:
 875              	.LBB79:
 876              	.LBB80:
 111:Src/nRF24.c   **** }
 877              		.loc 1 111 0 discriminator 2
 878 0068 3846     		mov	r0, r7
 879              	.LVL79:
 880 006a FFF7FEFF 		bl	strlen
 881              	.LVL80:
 882 006e 254C     		ldr	r4, .L79+4
 883              	.LVL81:
 884 0070 6423     		movs	r3, #100
 885 0072 82B2     		uxth	r2, r0
 886 0074 3946     		mov	r1, r7
 887              	.LVL82:
 888 0076 2046     		mov	r0, r4
 889 0078 FFF7FEFF 		bl	HAL_UART_Transmit
 890              	.LVL83:
 891              	.LBE80:
 892              	.LBE79:
 315:Src/nRF24.c   ****         serial_print(message);
 316:Src/nRF24.c   ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 893              		.loc 1 316 0 discriminator 2
 894 007c 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 895 0080 18F80620 		ldrb	r2, [r8, r6]	@ zero_extendqisi2
 896 0084 2049     		ldr	r1, .L79+8
 897 0086 3846     		mov	r0, r7
 898 0088 FFF7FEFF 		bl	sprintf
 899              	.LVL84:
 900              	.LBB81:
 901              	.LBB82:
 111:Src/nRF24.c   **** }
 902              		.loc 1 111 0 discriminator 2
 903 008c 3846     		mov	r0, r7
 904              	.LVL85:
 905 008e FFF7FEFF 		bl	strlen
 906              	.LVL86:
 907 0092 6423     		movs	r3, #100
 908 0094 82B2     		uxth	r2, r0
 909 0096 3946     		mov	r1, r7
 910              	.LVL87:
 911 0098 2046     		mov	r0, r4
 912 009a FFF7FEFF 		bl	HAL_UART_Transmit
 913              	.LVL88:
 914              	.LBE82:
 915              	.LBE81:
 301:Src/nRF24.c   ****     {
 916              		.loc 1 301 0 discriminator 2
 917 009e 0136     		adds	r6, r6, #1
 918              	.LVL89:
 919 00a0 CDE7     		b	.L72
 920              	.L78:
 306:Src/nRF24.c   ****         serial_print(message);
 921              		.loc 1 306 0
 922 00a2 3D46     		mov	r5, r7
 923 00a4 DFF864E0 		ldr	lr, .L79+12
 924 00a8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccQFqAzx.s 			page 23


 925 00ac 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 926 00ae BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 927 00b2 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 928 00b4 9EE80300 		ldm	lr, {r0, r1}
 929 00b8 45F8040B 		str	r0, [r5], #4
 930 00bc 2980     		strh	r1, [r5]	@ movhi
 931              	.LVL90:
 932              	.LBB83:
 933              	.LBB84:
 111:Src/nRF24.c   **** }
 934              		.loc 1 111 0
 935 00be 3846     		mov	r0, r7
 936              	.LVL91:
 937 00c0 FFF7FEFF 		bl	strlen
 938              	.LVL92:
 939 00c4 0F4D     		ldr	r5, .L79+4
 940              	.LVL93:
 941 00c6 6423     		movs	r3, #100
 942 00c8 82B2     		uxth	r2, r0
 943 00ca 3946     		mov	r1, r7
 944              	.LVL94:
 945 00cc 2846     		mov	r0, r5
 946 00ce FFF7FEFF 		bl	HAL_UART_Transmit
 947              	.LVL95:
 948              	.LBE84:
 949              	.LBE83:
 308:Src/nRF24.c   ****         serial_print(message);
 950              		.loc 1 308 0
 951 00d2 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 952 00d6 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 953 00d8 0B49     		ldr	r1, .L79+8
 954 00da 3846     		mov	r0, r7
 955 00dc FFF7FEFF 		bl	sprintf
 956              	.LVL96:
 957              	.LBB85:
 958              	.LBB86:
 111:Src/nRF24.c   **** }
 959              		.loc 1 111 0
 960 00e0 3846     		mov	r0, r7
 961              	.LVL97:
 962 00e2 FFF7FEFF 		bl	strlen
 963              	.LVL98:
 964 00e6 6423     		movs	r3, #100
 965 00e8 82B2     		uxth	r2, r0
 966 00ea 3946     		mov	r1, r7
 967              	.LVL99:
 968 00ec 2846     		mov	r0, r5
 969 00ee FFF7FEFF 		bl	HAL_UART_Transmit
 970              	.LVL100:
 971              	.LBE86:
 972              	.LBE85:
 311:Src/nRF24.c   ****       } else {
 973              		.loc 1 311 0
 974 00f2 0120     		movs	r0, #1
 975 00f4 00E0     		b	.L74
 976              	.LVL101:
 977              	.L77:
ARM GAS  /tmp/ccQFqAzx.s 			page 24


 978              	.LBE78:
 317:Src/nRF24.c   ****         serial_print(message);
 318:Src/nRF24.c   **** 				#endif
 319:Src/nRF24.c   ****       }
 320:Src/nRF24.c   ****   }
 321:Src/nRF24.c   ****   return false;
 979              		.loc 1 321 0
 980 00f6 0020     		movs	r0, #0
 981              	.L74:
 322:Src/nRF24.c   **** }
 982              		.loc 1 322 0
 983 00f8 4037     		adds	r7, r7, #64
 984              	.LCFI18:
 985              		.cfi_def_cfa_offset 32
 986 00fa BD46     		mov	sp, r7
 987              	.LCFI19:
 988              		.cfi_def_cfa_register 13
 989              		@ sp needed
 990 00fc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 991              	.LVL102:
 992              	.L80:
 993              		.align	2
 994              	.L79:
 995 0100 54000000 		.word	.LC5
 996 0104 00000000 		.word	huart2
 997 0108 28000000 		.word	.LC4
 998 010c 00000000 		.word	.LC3
 999              		.cfi_endproc
 1000              	.LFE146:
 1002              		.section	.text.nRF24_mvt_tx_self_test,"ax",%progbits
 1003              		.align	1
 1004              		.global	nRF24_mvt_tx_self_test
 1005              		.syntax unified
 1006              		.thumb
 1007              		.thumb_func
 1008              		.fpu fpv4-sp-d16
 1010              	nRF24_mvt_tx_self_test:
 1011              	.LFB147:
 323:Src/nRF24.c   **** 
 324:Src/nRF24.c   **** 
 325:Src/nRF24.c   **** /**  
 326:Src/nRF24.c   ****  *  @brief  MVP: Minial Viable Test. Test nRF24 transmitter function without a receiver. Use this f
 327:Src/nRF24.c   ****  *  @param  None.
 328:Src/nRF24.c   ****  *  @retval exit status. 0 success, 1 failure.
 329:Src/nRF24.c   ****  *  @note  
 330:Src/nRF24.c   ****  *      Steps: 1. Disable Auto Acknowledgement, disable Auto Retransmit.
 331:Src/nRF24.c   ****  *             2. TX_DS (in STATUS register) is expected to be set when data has been clock into TX
 332:Src/nRF24.c   ****  *             3. Check if STATUS = 0x2E, if so we have a working TX module.
 333:Src/nRF24.c   ****  *            
 334:Src/nRF24.c   ****  *            After writing to W_TX_PAYLOAD, TX_EMPTY (in FIFO_STATUS register) becomes 0.
 335:Src/nRF24.c   ****  *            
 336:Src/nRF24.c   ****  *            What happens if sending is not successful?
 337:Src/nRF24.c   ****  *            TX_FULL (in FIFO_STATUS register) becomes 1.
 338:Src/nRF24.c   ****  *            TX_FULL (in STATUS register) becomes 1.
 339:Src/nRF24.c   ****  *            TX_DS (in STATUS register) remains 0.  
 340:Src/nRF24.c   ****  *
 341:Src/nRF24.c   ****  *      States: 
ARM GAS  /tmp/ccQFqAzx.s 			page 25


 342:Src/nRF24.c   ****  *            The states can be referred in 6.1.1 State diagram.
 343:Src/nRF24.c   ****  *      
 344:Src/nRF24.c   ****  *      STATUS register
 345:Src/nRF24.c   ****  *                7             6           5         4         3:1         0
 346:Src/nRF24.c   ****  *            <reserved>      RX_DR       TX_DS     MAX_RT     RX_P_NO     TX_FULL
 347:Src/nRF24.c   ****  *            -----------------------------------------------------------------------
 348:Src/nRF24.c   ****  *             Always 0       Receive     Transfer  Maximum    000-101 :    1: 
 349:Src/nRF24.c   ****  *                            Data        Data      TX         Data Pipe #  TX_FULL
 350:Src/nRF24.c   ****  *                            Ready       Sent      Transmits  110 :
 351:Src/nRF24.c   ****  *                                                             Not Used.
 352:Src/nRF24.c   ****  *                                                             111:
 353:Src/nRF24.c   ****  *                                                             RX FIFO Empty.
 354:Src/nRF24.c   ****  */
 355:Src/nRF24.c   **** bool nRF24_mvt_tx_self_test() 
 356:Src/nRF24.c   **** {
 1012              		.loc 1 356 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 136
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016 0000 30B5     		push	{r4, r5, lr}
 1017              	.LCFI20:
 1018              		.cfi_def_cfa_offset 12
 1019              		.cfi_offset 4, -12
 1020              		.cfi_offset 5, -8
 1021              		.cfi_offset 14, -4
 1022 0002 A3B0     		sub	sp, sp, #140
 1023              	.LCFI21:
 1024              		.cfi_def_cfa_offset 152
 357:Src/nRF24.c   **** 	char message[128];
 358:Src/nRF24.c   **** 	uint8_t writing_byte;
 359:Src/nRF24.c   **** 
 360:Src/nRF24.c   ****   #ifdef NRF24_DEBUG
 361:Src/nRF24.c   ****   strcpy(message, "---- nrf24 tx self test. ----\n");
 1025              		.loc 1 361 0
 1026 0004 02AC     		add	r4, sp, #8
 1027 0006 424D     		ldr	r5, .L86
 1028 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1029 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1030 000c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 1031 0010 07C4     		stmia	r4!, {r0, r1, r2}
 1032 0012 24F8023B 		strh	r3, [r4], #2	@ movhi
 1033 0016 1B0C     		lsrs	r3, r3, #16
 1034 0018 2370     		strb	r3, [r4]
 1035              	.LVL103:
 1036              	.LBB95:
 1037              	.LBB96:
 111:Src/nRF24.c   **** }
 1038              		.loc 1 111 0
 1039 001a 02A8     		add	r0, sp, #8
 1040              	.LVL104:
 1041 001c FFF7FEFF 		bl	strlen
 1042              	.LVL105:
 1043 0020 3C4C     		ldr	r4, .L86+4
 1044              	.LVL106:
 1045 0022 6423     		movs	r3, #100
 1046 0024 82B2     		uxth	r2, r0
 1047 0026 02A9     		add	r1, sp, #8
ARM GAS  /tmp/ccQFqAzx.s 			page 26


 1048              	.LVL107:
 1049 0028 2046     		mov	r0, r4
 1050 002a FFF7FEFF 		bl	HAL_UART_Transmit
 1051              	.LVL108:
 1052              	.LBE96:
 1053              	.LBE95:
 362:Src/nRF24.c   ****   serial_print(message);
 363:Src/nRF24.c   **** 
 364:Src/nRF24.c   ****   strcpy(message, "---- This test to verifies function of a tranmitter send without a receiver. ---
 1054              		.loc 1 364 0
 1055 002e 5322     		movs	r2, #83
 1056 0030 3949     		ldr	r1, .L86+8
 1057 0032 02A8     		add	r0, sp, #8
 1058 0034 FFF7FEFF 		bl	memcpy
 1059              	.LVL109:
 1060              	.LBB97:
 1061              	.LBB98:
 111:Src/nRF24.c   **** }
 1062              		.loc 1 111 0
 1063 0038 02A8     		add	r0, sp, #8
 1064              	.LVL110:
 1065 003a FFF7FEFF 		bl	strlen
 1066              	.LVL111:
 1067 003e 6423     		movs	r3, #100
 1068 0040 82B2     		uxth	r2, r0
 1069 0042 02A9     		add	r1, sp, #8
 1070              	.LVL112:
 1071 0044 2046     		mov	r0, r4
 1072 0046 FFF7FEFF 		bl	HAL_UART_Transmit
 1073              	.LVL113:
 1074              	.LBE98:
 1075              	.LBE97:
 365:Src/nRF24.c   ****   serial_print(message);
 366:Src/nRF24.c   ****   #endif
 367:Src/nRF24.c   **** 
 368:Src/nRF24.c   ****   uint8_t nRF24_status = 0x00;
 1076              		.loc 1 368 0
 1077 004a 0025     		movs	r5, #0
 1078 004c 8DF80650 		strb	r5, [sp, #6]
 369:Src/nRF24.c   **** 
 370:Src/nRF24.c   ****   // Note that if we reset the nRF connected without re-poweron the chip, initial value of register
 371:Src/nRF24.c   ****   /* Current State: [Power-on reset 100 ms] */
 372:Src/nRF24.c   ****   nRF24_CE_0();
 1079              		.loc 1 372 0
 1080 0050 FFF7FEFF 		bl	nRF24_CE_0
 1081              	.LVL114:
 373:Src/nRF24.c   **** 
 374:Src/nRF24.c   ****   /* Current State: [Power-Down] (RF transmission is Power-Down, but SPI is alive.) */
 375:Src/nRF24.c   ****   writing_byte = 0x00;
 1082              		.loc 1 375 0
 1083 0054 22AC     		add	r4, sp, #136
 1084 0056 04F8815D 		strb	r5, [r4, #-129]!
 376:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
 1085              		.loc 1 376 0
 1086 005a 2246     		mov	r2, r4
 1087 005c 0121     		movs	r1, #1
 1088 005e 2120     		movs	r0, #33
ARM GAS  /tmp/ccQFqAzx.s 			page 27


 1089 0060 FFF7FEFF 		bl	nRF24_verified_write_register
 1090              	.LVL115:
 377:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
 1091              		.loc 1 377 0
 1092 0064 2246     		mov	r2, r4
 1093 0066 0121     		movs	r1, #1
 1094 0068 2220     		movs	r0, #34
 1095 006a FFF7FEFF 		bl	nRF24_verified_write_register
 1096              	.LVL116:
 378:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 1097              		.loc 1 378 0
 1098 006e 2246     		mov	r2, r4
 1099 0070 0121     		movs	r1, #1
 1100 0072 2420     		movs	r0, #36
 1101 0074 FFF7FEFF 		bl	nRF24_verified_write_register
 1102              	.LVL117:
 379:Src/nRF24.c   **** 
 380:Src/nRF24.c   ****   writing_byte = 0x0E;
 1103              		.loc 1 380 0
 1104 0078 0E23     		movs	r3, #14
 1105 007a 8DF80730 		strb	r3, [sp, #7]
 381:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
 1106              		.loc 1 381 0
 1107 007e 2246     		mov	r2, r4
 1108 0080 0121     		movs	r1, #1
 1109 0082 2020     		movs	r0, #32
 1110 0084 FFF7FEFF 		bl	nRF24_verified_write_register
 1111              	.LVL118:
 382:Src/nRF24.c   **** 
 383:Src/nRF24.c   ****   /* PWR_UP=1, state transition to [Standby-I] */
 384:Src/nRF24.c   ****   uint8_t test_payload[4] = {0xC0, 0xFE, 0xBE, 0xEF}; // clock in a payload, now TX FIFO not empty 
 1112              		.loc 1 384 0
 1113 0088 244B     		ldr	r3, .L86+12
 1114 008a 1B68     		ldr	r3, [r3]
 1115 008c 22AA     		add	r2, sp, #136
 1116 008e 42F8883D 		str	r3, [r2, #-136]!
 385:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 1117              		.loc 1 385 0
 1118 0092 0421     		movs	r1, #4
 1119 0094 A020     		movs	r0, #160
 1120 0096 FFF7FEFF 		bl	spi_write_register
 1121              	.LVL119:
 386:Src/nRF24.c   ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 1122              		.loc 1 386 0
 1123 009a FFF7FEFF 		bl	nRF24_CE_1
 1124              	.LVL120:
 387:Src/nRF24.c   ****   
 388:Src/nRF24.c   ****   /* TX FIFO not empty AND CE = 1, state transition to [TX MODE] */
 389:Src/nRF24.c   **** 	/* Get nRF24 <STATUS> register value. */
 390:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &nRF24_status);
 1125              		.loc 1 390 0
 1126 009e 0DF10602 		add	r2, sp, #6
 1127 00a2 0121     		movs	r1, #1
 1128 00a4 0720     		movs	r0, #7
 1129 00a6 FFF7FEFF 		bl	spi_read_register
 1130              	.LVL121:
 391:Src/nRF24.c   **** 
ARM GAS  /tmp/ccQFqAzx.s 			page 28


 392:Src/nRF24.c   ****   spi_delay(1);
 1131              		.loc 1 392 0
 1132 00aa 0120     		movs	r0, #1
 1133 00ac FFF7FEFF 		bl	spi_delay
 1134              	.LVL122:
 393:Src/nRF24.c   **** 
 394:Src/nRF24.c   ****   /* CE=0, state transition -> now return to [Standby-I]. */
 395:Src/nRF24.c   ****   nRF24_CE_0();
 1135              		.loc 1 395 0
 1136 00b0 FFF7FEFF 		bl	nRF24_CE_0
 1137              	.LVL123:
 396:Src/nRF24.c   **** 
 397:Src/nRF24.c   ****   /* PWR_UP = 0, state transition to [Power Down] */
 398:Src/nRF24.c   ****   writing_byte = 0x08; // write default value for CONFIG register (writing_byte = 0)
 1138              		.loc 1 398 0
 1139 00b4 0823     		movs	r3, #8
 1140 00b6 8DF80730 		strb	r3, [sp, #7]
 399:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       
 1141              		.loc 1 399 0
 1142 00ba 2246     		mov	r2, r4
 1143 00bc 0121     		movs	r1, #1
 1144 00be 2020     		movs	r0, #32
 1145 00c0 FFF7FEFF 		bl	nRF24_verified_write_register
 1146              	.LVL124:
 400:Src/nRF24.c   **** 
 401:Src/nRF24.c   ****   /* Now the chip is back to power down mode, check test result. */
 402:Src/nRF24.c   ****   if (nRF24_status & 0x2E) 
 1147              		.loc 1 402 0
 1148 00c4 9DF80620 		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 1149 00c8 12F02E0F 		tst	r2, #46
 1150 00cc 0FD1     		bne	.L85
 403:Src/nRF24.c   ****   {
 404:Src/nRF24.c   **** 		#ifdef NRF24_DEBUG
 405:Src/nRF24.c   ****     strcpy(message, "\n > nRF24 transmission self-test has passed. \
 406:Src/nRF24.c   ****                        <STATUS> has value of 0x2E. \
 407:Src/nRF24.c   ****                        TX_DS (transfer data sent) was set. \
 408:Src/nRF24.c   ****                        RX_P_NO = 111, this means RX FIFO Empty. \n");
 409:Src/nRF24.c   ****     serial_print(message);
 410:Src/nRF24.c   ****     #endif
 411:Src/nRF24.c   ****     return 0;
 412:Src/nRF24.c   ****   } 
 413:Src/nRF24.c   ****   else 
 414:Src/nRF24.c   ****   {
 415:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 416:Src/nRF24.c   ****     sprintf(message, "\n > nRF24 transmission self-test has failed. <STATUS> is expected 0x2E. Curr
 1151              		.loc 1 416 0
 1152 00ce 1449     		ldr	r1, .L86+16
 1153 00d0 02A8     		add	r0, sp, #8
 1154 00d2 FFF7FEFF 		bl	sprintf
 1155              	.LVL125:
 1156              	.LBB99:
 1157              	.LBB100:
 111:Src/nRF24.c   **** }
 1158              		.loc 1 111 0
 1159 00d6 02A8     		add	r0, sp, #8
 1160              	.LVL126:
 1161 00d8 FFF7FEFF 		bl	strlen
ARM GAS  /tmp/ccQFqAzx.s 			page 29


 1162              	.LVL127:
 1163 00dc 6423     		movs	r3, #100
 1164 00de 82B2     		uxth	r2, r0
 1165 00e0 02A9     		add	r1, sp, #8
 1166              	.LVL128:
 1167 00e2 0C48     		ldr	r0, .L86+4
 1168 00e4 FFF7FEFF 		bl	HAL_UART_Transmit
 1169              	.LVL129:
 1170              	.LBE100:
 1171              	.LBE99:
 417:Src/nRF24.c   ****     serial_print(message);
 418:Src/nRF24.c   ****     #endif
 419:Src/nRF24.c   ****     return 1;
 1172              		.loc 1 419 0
 1173 00e8 0120     		movs	r0, #1
 1174              	.LVL130:
 1175              	.L83:
 420:Src/nRF24.c   ****   }
 421:Src/nRF24.c   ****   
 422:Src/nRF24.c   **** }
 1176              		.loc 1 422 0
 1177 00ea 23B0     		add	sp, sp, #140
 1178              	.LCFI22:
 1179              		.cfi_remember_state
 1180              		.cfi_def_cfa_offset 12
 1181              		@ sp needed
 1182 00ec 30BD     		pop	{r4, r5, pc}
 1183              	.L85:
 1184              	.LCFI23:
 1185              		.cfi_restore_state
 405:Src/nRF24.c   ****                        <STATUS> has value of 0x2E. \
 1186              		.loc 1 405 0
 1187 00ee DD22     		movs	r2, #221
 1188 00f0 0C49     		ldr	r1, .L86+20
 1189 00f2 02A8     		add	r0, sp, #8
 1190 00f4 FFF7FEFF 		bl	memcpy
 1191              	.LVL131:
 1192              	.LBB101:
 1193              	.LBB102:
 111:Src/nRF24.c   **** }
 1194              		.loc 1 111 0
 1195 00f8 02A8     		add	r0, sp, #8
 1196              	.LVL132:
 1197 00fa FFF7FEFF 		bl	strlen
 1198              	.LVL133:
 1199 00fe 6423     		movs	r3, #100
 1200 0100 82B2     		uxth	r2, r0
 1201 0102 02A9     		add	r1, sp, #8
 1202              	.LVL134:
 1203 0104 0348     		ldr	r0, .L86+4
 1204 0106 FFF7FEFF 		bl	HAL_UART_Transmit
 1205              	.LVL135:
 1206              	.LBE102:
 1207              	.LBE101:
 411:Src/nRF24.c   ****   } 
 1208              		.loc 1 411 0
 1209 010a 2846     		mov	r0, r5
ARM GAS  /tmp/ccQFqAzx.s 			page 30


 1210 010c EDE7     		b	.L83
 1211              	.L87:
 1212 010e 00BF     		.align	2
 1213              	.L86:
 1214 0110 00000000 		.word	.LC6
 1215 0114 00000000 		.word	huart2
 1216 0118 20000000 		.word	.LC7
 1217 011c 00000000 		.word	.LANCHOR0
 1218 0120 54010000 		.word	.LC9
 1219 0124 74000000 		.word	.LC8
 1220              		.cfi_endproc
 1221              	.LFE147:
 1223              		.section	.text.nRF24_mvt_configure_tx_mode,"ax",%progbits
 1224              		.align	1
 1225              		.global	nRF24_mvt_configure_tx_mode
 1226              		.syntax unified
 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv4-sp-d16
 1231              	nRF24_mvt_configure_tx_mode:
 1232              	.LFB148:
 423:Src/nRF24.c   **** 
 424:Src/nRF24.c   **** /**
 425:Src/nRF24.c   ****   * @brief  MVT: Minial Viable Test. Configure nRF24 to work in TX (transmit) mode.
 426:Src/nRF24.c   ****   * @param  None.
 427:Src/nRF24.c   ****   * @retval None.
 428:Src/nRF24.c   ****   * @note   After nRF24_mvt_configure_tx_mode() is called, use nRF24_mvt_keep_sending() to keep sen
 429:Src/nRF24.c   ****   */
 430:Src/nRF24.c   **** void nRF24_mvt_configure_tx_mode() 
 431:Src/nRF24.c   **** {
 1233              		.loc 1 431 0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 16
 1236              		@ frame_needed = 0, uses_anonymous_args = 0
 1237 0000 30B5     		push	{r4, r5, lr}
 1238              	.LCFI24:
 1239              		.cfi_def_cfa_offset 12
 1240              		.cfi_offset 4, -12
 1241              		.cfi_offset 5, -8
 1242              		.cfi_offset 14, -4
 1243 0002 85B0     		sub	sp, sp, #20
 1244              	.LCFI25:
 1245              		.cfi_def_cfa_offset 32
 432:Src/nRF24.c   ****     nRF24_CE_0();
 1246              		.loc 1 432 0
 1247 0004 FFF7FEFF 		bl	nRF24_CE_0
 1248              	.LVL136:
 433:Src/nRF24.c   **** 
 434:Src/nRF24.c   ****     /* Set TX_ADDR for sender. On the Receiver side, set RX_ADDR_P0 with same value. */
 435:Src/nRF24.c   **** 
 436:Src/nRF24.c   ****     uint8_t TX_ADDRESS[5] = {0x10,0xDE,0x10,0x10,0x10};  // 5 byte transmit-address
 1249              		.loc 1 436 0
 1250 0008 1F4B     		ldr	r3, .L90
 1251 000a 93E80300 		ldm	r3, {r0, r1}
 1252 000e 0290     		str	r0, [sp, #8]
 1253 0010 8DF80C10 		strb	r1, [sp, #12]
 437:Src/nRF24.c   ****     spi_write_register(W_REGISTER_MASK + TX_ADDR, 5, TX_ADDRESS);     // Write transmit-address to 
ARM GAS  /tmp/ccQFqAzx.s 			page 31


 1254              		.loc 1 437 0
 1255 0014 02AA     		add	r2, sp, #8
 1256 0016 0521     		movs	r1, #5
 1257 0018 3020     		movs	r0, #48
 1258 001a FFF7FEFF 		bl	spi_write_register
 1259              	.LVL137:
 438:Src/nRF24.c   **** 
 439:Src/nRF24.c   ****     uint8_t writing_byte;
 440:Src/nRF24.c   **** 
 441:Src/nRF24.c   ****     writing_byte = 0x00;
 1260              		.loc 1 441 0
 1261 001e 0025     		movs	r5, #0
 1262 0020 04AC     		add	r4, sp, #16
 1263 0022 04F8095D 		strb	r5, [r4, #-9]!
 442:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);
 1264              		.loc 1 442 0
 1265 0026 2246     		mov	r2, r4
 1266 0028 0121     		movs	r1, #1
 1267 002a 2120     		movs	r0, #33
 1268 002c FFF7FEFF 		bl	nRF24_verified_write_register
 1269              	.LVL138:
 443:Src/nRF24.c   **** 
 444:Src/nRF24.c   ****     writing_byte = 0x00;
 1270              		.loc 1 444 0
 1271 0030 8DF80750 		strb	r5, [sp, #7]
 445:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);
 1272              		.loc 1 445 0
 1273 0034 2246     		mov	r2, r4
 1274 0036 0121     		movs	r1, #1
 1275 0038 2220     		movs	r0, #34
 1276 003a FFF7FEFF 		bl	nRF24_verified_write_register
 1277              	.LVL139:
 446:Src/nRF24.c   **** 
 447:Src/nRF24.c   ****     writing_byte = 0x00;
 1278              		.loc 1 447 0
 1279 003e 8DF80750 		strb	r5, [sp, #7]
 448:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);
 1280              		.loc 1 448 0
 1281 0042 2246     		mov	r2, r4
 1282 0044 0121     		movs	r1, #1
 1283 0046 2420     		movs	r0, #36
 1284 0048 FFF7FEFF 		bl	nRF24_verified_write_register
 1285              	.LVL140:
 449:Src/nRF24.c   **** 
 450:Src/nRF24.c   ****     writing_byte = 40;
 1286              		.loc 1 450 0
 1287 004c 2823     		movs	r3, #40
 1288 004e 8DF80730 		strb	r3, [sp, #7]
 451:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_CH, 1, &writing_byte);
 1289              		.loc 1 451 0
 1290 0052 2246     		mov	r2, r4
 1291 0054 0121     		movs	r1, #1
 1292 0056 2520     		movs	r0, #37
 1293 0058 FFF7FEFF 		bl	nRF24_verified_write_register
 1294              	.LVL141:
 452:Src/nRF24.c   **** 
 453:Src/nRF24.c   ****     writing_byte = 0x07;
ARM GAS  /tmp/ccQFqAzx.s 			page 32


 1295              		.loc 1 453 0
 1296 005c 0723     		movs	r3, #7
 1297 005e 8DF80730 		strb	r3, [sp, #7]
 454:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 1298              		.loc 1 454 0
 1299 0062 2246     		mov	r2, r4
 1300 0064 0121     		movs	r1, #1
 1301 0066 2620     		movs	r0, #38
 1302 0068 FFF7FEFF 		bl	nRF24_verified_write_register
 1303              	.LVL142:
 455:Src/nRF24.c   **** 
 456:Src/nRF24.c   ****     // PWR_UP, state transition to [Standby-I]
 457:Src/nRF24.c   ****     writing_byte = 0x0e;
 1304              		.loc 1 457 0
 1305 006c 0E23     		movs	r3, #14
 1306 006e 8DF80730 		strb	r3, [sp, #7]
 458:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);
 1307              		.loc 1 458 0
 1308 0072 2246     		mov	r2, r4
 1309 0074 0121     		movs	r1, #1
 1310 0076 2020     		movs	r0, #32
 1311 0078 FFF7FEFF 		bl	nRF24_verified_write_register
 1312              	.LVL143:
 459:Src/nRF24.c   ****     spi_delay(150);
 1313              		.loc 1 459 0
 1314 007c 9620     		movs	r0, #150
 1315 007e FFF7FEFF 		bl	spi_delay
 1316              	.LVL144:
 460:Src/nRF24.c   **** 
 461:Src/nRF24.c   ****     // CE is not set to 1, nRF24 still stays in [Standby-I] Mode.
 462:Src/nRF24.c   ****     // CE = 1 is not activated until we write to TX FIFO so stays in Standby-I mode.
 463:Src/nRF24.c   **** }
 1317              		.loc 1 463 0
 1318 0082 05B0     		add	sp, sp, #20
 1319              	.LCFI26:
 1320              		.cfi_def_cfa_offset 12
 1321              		@ sp needed
 1322 0084 30BD     		pop	{r4, r5, pc}
 1323              	.L91:
 1324 0086 00BF     		.align	2
 1325              	.L90:
 1326 0088 04000000 		.word	.LANCHOR0+4
 1327              		.cfi_endproc
 1328              	.LFE148:
 1330              		.section	.text.nRF24_mvt_keep_sending,"ax",%progbits
 1331              		.align	1
 1332              		.global	nRF24_mvt_keep_sending
 1333              		.syntax unified
 1334              		.thumb
 1335              		.thumb_func
 1336              		.fpu fpv4-sp-d16
 1338              	nRF24_mvt_keep_sending:
 1339              	.LFB149:
 464:Src/nRF24.c   **** 
 465:Src/nRF24.c   **** 
 466:Src/nRF24.c   **** /**
 467:Src/nRF24.c   ****   * @brief  Make nRF24 keep sending data.
ARM GAS  /tmp/ccQFqAzx.s 			page 33


 468:Src/nRF24.c   ****   * @param  None.
 469:Src/nRF24.c   ****   * @retval None.
 470:Src/nRF24.c   **** 	* @note   Call nRF24_mvt_configure_tx_mode() before this test to initailize TX mode in nRF24L01+.
 471:Src/nRF24.c   ****   */
 472:Src/nRF24.c   **** void nRF24_mvt_keep_sending() 
 473:Src/nRF24.c   **** {
 1340              		.loc 1 473 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 72
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344 0000 30B5     		push	{r4, r5, lr}
 1345              	.LCFI27:
 1346              		.cfi_def_cfa_offset 12
 1347              		.cfi_offset 4, -12
 1348              		.cfi_offset 5, -8
 1349              		.cfi_offset 14, -4
 1350 0002 93B0     		sub	sp, sp, #76
 1351              	.LCFI28:
 1352              		.cfi_def_cfa_offset 88
 474:Src/nRF24.c   ****   uint8_t payload[] = {0xBE, 0xEF, 0xCA, 0xFE}; /* clock out a four-byte payload "BEEF CAFE" */
 1353              		.loc 1 474 0
 1354 0004 2C4B     		ldr	r3, .L97
 1355 0006 DB68     		ldr	r3, [r3, #12]
 1356 0008 12AA     		add	r2, sp, #72
 1357 000a 42F8043D 		str	r3, [r2, #-4]!
 475:Src/nRF24.c   **** 
 476:Src/nRF24.c   ****   char debug_msg[64];
 477:Src/nRF24.c   ****   
 478:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, (uint8_t*) payload);
 1358              		.loc 1 478 0
 1359 000e 0421     		movs	r1, #4
 1360 0010 A020     		movs	r0, #160
 1361 0012 FFF7FEFF 		bl	spi_write_register
 1362              	.LVL145:
 479:Src/nRF24.c   **** 
 480:Src/nRF24.c   ****   /* Fire out the transmit packet */
 481:Src/nRF24.c   ****   nRF24_CE_1(); 
 1363              		.loc 1 481 0
 1364 0016 FFF7FEFF 		bl	nRF24_CE_1
 1365              	.LVL146:
 482:Src/nRF24.c   **** 
 483:Src/nRF24.c   **** 	/* read <STATUS> register*/
 484:Src/nRF24.c   ****   uint8_t status;
 485:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 1366              		.loc 1 485 0
 1367 001a 0DF10302 		add	r2, sp, #3
 1368 001e 0121     		movs	r1, #1
 1369 0020 0720     		movs	r0, #7
 1370 0022 FFF7FEFF 		bl	spi_read_register
 1371              	.LVL147:
 486:Src/nRF24.c   **** 
 487:Src/nRF24.c   ****   #ifdef NRF24_DEBUG
 488:Src/nRF24.c   ****   sprintf(debug_msg, "<STATUS> REGISTER : %#02x\n", status);
 1372              		.loc 1 488 0
 1373 0026 9DF80320 		ldrb	r2, [sp, #3]	@ zero_extendqisi2
 1374 002a 2449     		ldr	r1, .L97+4
 1375 002c 01A8     		add	r0, sp, #4
ARM GAS  /tmp/ccQFqAzx.s 			page 34


 1376 002e FFF7FEFF 		bl	sprintf
 1377              	.LVL148:
 1378              	.LBB109:
 1379              	.LBB110:
 111:Src/nRF24.c   **** }
 1380              		.loc 1 111 0
 1381 0032 01A8     		add	r0, sp, #4
 1382              	.LVL149:
 1383 0034 FFF7FEFF 		bl	strlen
 1384              	.LVL150:
 1385 0038 6423     		movs	r3, #100
 1386 003a 82B2     		uxth	r2, r0
 1387 003c 01A9     		add	r1, sp, #4
 1388              	.LVL151:
 1389 003e 2048     		ldr	r0, .L97+8
 1390 0040 FFF7FEFF 		bl	HAL_UART_Transmit
 1391              	.LVL152:
 1392              	.LBE110:
 1393              	.LBE109:
 489:Src/nRF24.c   ****   serial_print(debug_msg);
 490:Src/nRF24.c   ****   #endif
 491:Src/nRF24.c   **** 
 492:Src/nRF24.c   ****   if (status == 0x2e) /* TX_DS bit is set. */
 1394              		.loc 1 492 0
 1395 0044 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 1396 0048 2E2B     		cmp	r3, #46
 1397 004a 1FD0     		beq	.L96
 493:Src/nRF24.c   ****   {
 494:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 495:Src/nRF24.c   ****     strcpy(debug_msg, "nRF24 mvt send status - success -\n");
 496:Src/nRF24.c   ****     serial_print(debug_msg);
 497:Src/nRF24.c   ****     #endif
 498:Src/nRF24.c   ****   } 
 499:Src/nRF24.c   ****   else 
 500:Src/nRF24.c   ****   {
 501:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 502:Src/nRF24.c   ****     strcpy(debug_msg, "nRF24 mvt send status - failure -\n");
 1398              		.loc 1 502 0
 1399 004c 01AC     		add	r4, sp, #4
 1400 004e 1D4D     		ldr	r5, .L97+12
 1401 0050 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1402 0052 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1403 0054 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1404 0056 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1405 0058 2B68     		ldr	r3, [r5]
 1406 005a 24F8023B 		strh	r3, [r4], #2	@ movhi
 1407 005e 1B0C     		lsrs	r3, r3, #16
 1408 0060 2370     		strb	r3, [r4]
 1409              	.LVL153:
 1410              	.LBB111:
 1411              	.LBB112:
 111:Src/nRF24.c   **** }
 1412              		.loc 1 111 0
 1413 0062 01A8     		add	r0, sp, #4
 1414              	.LVL154:
 1415 0064 FFF7FEFF 		bl	strlen
 1416              	.LVL155:
ARM GAS  /tmp/ccQFqAzx.s 			page 35


 1417 0068 6423     		movs	r3, #100
 1418 006a 82B2     		uxth	r2, r0
 1419 006c 01A9     		add	r1, sp, #4
 1420              	.LVL156:
 1421 006e 1448     		ldr	r0, .L97+8
 1422 0070 FFF7FEFF 		bl	HAL_UART_Transmit
 1423              	.LVL157:
 1424              	.L94:
 1425              	.LBE112:
 1426              	.LBE111:
 503:Src/nRF24.c   ****     serial_print(debug_msg);
 504:Src/nRF24.c   ****     #endif
 505:Src/nRF24.c   ****   }
 506:Src/nRF24.c   ****   /* write 1 to clear TX_DS, TX_DS bit is Write-to-Clear. */
 507:Src/nRF24.c   ****   uint8_t writing_byte = 0x20;
 1427              		.loc 1 507 0
 1428 0074 12AA     		add	r2, sp, #72
 1429 0076 2023     		movs	r3, #32
 1430 0078 02F8463D 		strb	r3, [r2, #-70]!
 508:Src/nRF24.c   ****   spi_write_register(W_REGISTER_MASK + STATUS, 1, &writing_byte); 
 1431              		.loc 1 508 0
 1432 007c 0121     		movs	r1, #1
 1433 007e 2720     		movs	r0, #39
 1434 0080 FFF7FEFF 		bl	spi_write_register
 1435              	.LVL158:
 509:Src/nRF24.c   **** 
 510:Src/nRF24.c   ****   nRF24_CE_0(); /* stop transmission. Returns to [Standby-I]. */
 1436              		.loc 1 510 0
 1437 0084 FFF7FEFF 		bl	nRF24_CE_0
 1438              	.LVL159:
 511:Src/nRF24.c   **** }
 1439              		.loc 1 511 0
 1440 0088 13B0     		add	sp, sp, #76
 1441              	.LCFI29:
 1442              		.cfi_remember_state
 1443              		.cfi_def_cfa_offset 12
 1444              		@ sp needed
 1445 008a 30BD     		pop	{r4, r5, pc}
 1446              	.L96:
 1447              	.LCFI30:
 1448              		.cfi_restore_state
 495:Src/nRF24.c   ****     serial_print(debug_msg);
 1449              		.loc 1 495 0
 1450 008c 01AC     		add	r4, sp, #4
 1451 008e 0E4D     		ldr	r5, .L97+16
 1452 0090 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1453 0092 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1454 0094 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1455 0096 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1456 0098 2B68     		ldr	r3, [r5]
 1457 009a 24F8023B 		strh	r3, [r4], #2	@ movhi
 1458 009e 1B0C     		lsrs	r3, r3, #16
 1459 00a0 2370     		strb	r3, [r4]
 1460              	.LVL160:
 1461              	.LBB113:
 1462              	.LBB114:
 111:Src/nRF24.c   **** }
ARM GAS  /tmp/ccQFqAzx.s 			page 36


 1463              		.loc 1 111 0
 1464 00a2 01A8     		add	r0, sp, #4
 1465              	.LVL161:
 1466 00a4 FFF7FEFF 		bl	strlen
 1467              	.LVL162:
 1468 00a8 6423     		movs	r3, #100
 1469 00aa 82B2     		uxth	r2, r0
 1470 00ac 01A9     		add	r1, sp, #4
 1471              	.LVL163:
 1472 00ae 0448     		ldr	r0, .L97+8
 1473 00b0 FFF7FEFF 		bl	HAL_UART_Transmit
 1474              	.LVL164:
 1475 00b4 DEE7     		b	.L94
 1476              	.L98:
 1477 00b6 00BF     		.align	2
 1478              	.L97:
 1479 00b8 00000000 		.word	.LANCHOR0
 1480 00bc 00000000 		.word	.LC10
 1481 00c0 00000000 		.word	huart2
 1482 00c4 40000000 		.word	.LC12
 1483 00c8 1C000000 		.word	.LC11
 1484              	.LBE114:
 1485              	.LBE113:
 1486              		.cfi_endproc
 1487              	.LFE149:
 1489              		.section	.text.nRF24_print_all_registers,"ax",%progbits
 1490              		.align	1
 1491              		.global	nRF24_print_all_registers
 1492              		.syntax unified
 1493              		.thumb
 1494              		.thumb_func
 1495              		.fpu fpv4-sp-d16
 1497              	nRF24_print_all_registers:
 1498              	.LFB150:
 512:Src/nRF24.c   **** 
 513:Src/nRF24.c   **** 
 514:Src/nRF24.c   **** 
 515:Src/nRF24.c   **** /**
 516:Src/nRF24.c   ****   * @brief  Print all registers on nRF24. 
 517:Src/nRF24.c   ****   * @param  None.
 518:Src/nRF24.c   ****   * @retval None.
 519:Src/nRF24.c   ****   */
 520:Src/nRF24.c   **** void nRF24_print_all_registers()
 521:Src/nRF24.c   **** {
 1499              		.loc 1 521 0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 40
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503 0000 10B5     		push	{r4, lr}
 1504              	.LCFI31:
 1505              		.cfi_def_cfa_offset 8
 1506              		.cfi_offset 4, -8
 1507              		.cfi_offset 14, -4
 1508 0002 8CB0     		sub	sp, sp, #48
 1509              	.LCFI32:
 1510              		.cfi_def_cfa_offset 56
 522:Src/nRF24.c   **** 	  uint8_t read_data;
ARM GAS  /tmp/ccQFqAzx.s 			page 37


 523:Src/nRF24.c   **** 		uint8_t read_buf[4];
 524:Src/nRF24.c   **** 		char message[32];
 525:Src/nRF24.c   ****   
 526:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + CONFIG, 1, &read_data);
 1511              		.loc 1 526 0
 1512 0004 0DF12F02 		add	r2, sp, #47
 1513 0008 0121     		movs	r1, #1
 1514 000a 0020     		movs	r0, #0
 1515 000c FFF7FEFF 		bl	spi_read_register
 1516              	.LVL165:
 527:Src/nRF24.c   **** 		sprintf(message, "CONFIG: <0x%02x>\n", read_data);
 1517              		.loc 1 527 0
 1518 0010 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1519 0014 B349     		ldr	r1, .L101
 1520 0016 02A8     		add	r0, sp, #8
 1521 0018 FFF7FEFF 		bl	sprintf
 1522              	.LVL166:
 1523              	.LBB145:
 1524              	.LBB146:
 111:Src/nRF24.c   **** }
 1525              		.loc 1 111 0
 1526 001c 02A8     		add	r0, sp, #8
 1527              	.LVL167:
 1528 001e FFF7FEFF 		bl	strlen
 1529              	.LVL168:
 1530 0022 B14C     		ldr	r4, .L101+4
 1531 0024 6423     		movs	r3, #100
 1532 0026 82B2     		uxth	r2, r0
 1533 0028 02A9     		add	r1, sp, #8
 1534              	.LVL169:
 1535 002a 2046     		mov	r0, r4
 1536 002c FFF7FEFF 		bl	HAL_UART_Transmit
 1537              	.LVL170:
 1538              	.LBE146:
 1539              	.LBE145:
 528:Src/nRF24.c   ****     serial_print(message);
 529:Src/nRF24.c   **** 
 530:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_data);
 1540              		.loc 1 530 0
 1541 0030 0DF12F02 		add	r2, sp, #47
 1542 0034 0121     		movs	r1, #1
 1543 0036 0846     		mov	r0, r1
 1544 0038 FFF7FEFF 		bl	spi_read_register
 1545              	.LVL171:
 531:Src/nRF24.c   **** 		sprintf(message, "EN_AA: <0x%02x>\n", read_data);
 1546              		.loc 1 531 0
 1547 003c 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1548 0040 AA49     		ldr	r1, .L101+8
 1549 0042 02A8     		add	r0, sp, #8
 1550 0044 FFF7FEFF 		bl	sprintf
 1551              	.LVL172:
 1552              	.LBB147:
 1553              	.LBB148:
 111:Src/nRF24.c   **** }
 1554              		.loc 1 111 0
 1555 0048 02A8     		add	r0, sp, #8
 1556              	.LVL173:
ARM GAS  /tmp/ccQFqAzx.s 			page 38


 1557 004a FFF7FEFF 		bl	strlen
 1558              	.LVL174:
 1559 004e 6423     		movs	r3, #100
 1560 0050 82B2     		uxth	r2, r0
 1561 0052 02A9     		add	r1, sp, #8
 1562              	.LVL175:
 1563 0054 2046     		mov	r0, r4
 1564 0056 FFF7FEFF 		bl	HAL_UART_Transmit
 1565              	.LVL176:
 1566              	.LBE148:
 1567              	.LBE147:
 532:Src/nRF24.c   ****     serial_print(message);
 533:Src/nRF24.c   **** 
 534:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_data);
 1568              		.loc 1 534 0
 1569 005a 0DF12F02 		add	r2, sp, #47
 1570 005e 0121     		movs	r1, #1
 1571 0060 0220     		movs	r0, #2
 1572 0062 FFF7FEFF 		bl	spi_read_register
 1573              	.LVL177:
 535:Src/nRF24.c   **** 		sprintf(message, "EN_RXADDR: <0x%02x>\n", read_data);
 1574              		.loc 1 535 0
 1575 0066 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1576 006a A149     		ldr	r1, .L101+12
 1577 006c 02A8     		add	r0, sp, #8
 1578 006e FFF7FEFF 		bl	sprintf
 1579              	.LVL178:
 1580              	.LBB149:
 1581              	.LBB150:
 111:Src/nRF24.c   **** }
 1582              		.loc 1 111 0
 1583 0072 02A8     		add	r0, sp, #8
 1584              	.LVL179:
 1585 0074 FFF7FEFF 		bl	strlen
 1586              	.LVL180:
 1587 0078 6423     		movs	r3, #100
 1588 007a 82B2     		uxth	r2, r0
 1589 007c 02A9     		add	r1, sp, #8
 1590              	.LVL181:
 1591 007e 2046     		mov	r0, r4
 1592 0080 FFF7FEFF 		bl	HAL_UART_Transmit
 1593              	.LVL182:
 1594              	.LBE150:
 1595              	.LBE149:
 536:Src/nRF24.c   ****     serial_print(message);
 537:Src/nRF24.c   **** 
 538:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_data);
 1596              		.loc 1 538 0
 1597 0084 0DF12F02 		add	r2, sp, #47
 1598 0088 0121     		movs	r1, #1
 1599 008a 0320     		movs	r0, #3
 1600 008c FFF7FEFF 		bl	spi_read_register
 1601              	.LVL183:
 539:Src/nRF24.c   **** 		sprintf(message, "SETUP_AW: <0x%02x>\n", read_data);
 1602              		.loc 1 539 0
 1603 0090 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1604 0094 9749     		ldr	r1, .L101+16
ARM GAS  /tmp/ccQFqAzx.s 			page 39


 1605 0096 02A8     		add	r0, sp, #8
 1606 0098 FFF7FEFF 		bl	sprintf
 1607              	.LVL184:
 1608              	.LBB151:
 1609              	.LBB152:
 111:Src/nRF24.c   **** }
 1610              		.loc 1 111 0
 1611 009c 02A8     		add	r0, sp, #8
 1612              	.LVL185:
 1613 009e FFF7FEFF 		bl	strlen
 1614              	.LVL186:
 1615 00a2 6423     		movs	r3, #100
 1616 00a4 82B2     		uxth	r2, r0
 1617 00a6 02A9     		add	r1, sp, #8
 1618              	.LVL187:
 1619 00a8 2046     		mov	r0, r4
 1620 00aa FFF7FEFF 		bl	HAL_UART_Transmit
 1621              	.LVL188:
 1622              	.LBE152:
 1623              	.LBE151:
 540:Src/nRF24.c   ****     serial_print(message);
 541:Src/nRF24.c   **** 
 542:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_data);
 1624              		.loc 1 542 0
 1625 00ae 0DF12F02 		add	r2, sp, #47
 1626 00b2 0121     		movs	r1, #1
 1627 00b4 0420     		movs	r0, #4
 1628 00b6 FFF7FEFF 		bl	spi_read_register
 1629              	.LVL189:
 543:Src/nRF24.c   **** 		sprintf(message, "SETUP_RETR: <0x%02x>\n", read_data);
 1630              		.loc 1 543 0
 1631 00ba 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1632 00be 8E49     		ldr	r1, .L101+20
 1633 00c0 02A8     		add	r0, sp, #8
 1634 00c2 FFF7FEFF 		bl	sprintf
 1635              	.LVL190:
 1636              	.LBB153:
 1637              	.LBB154:
 111:Src/nRF24.c   **** }
 1638              		.loc 1 111 0
 1639 00c6 02A8     		add	r0, sp, #8
 1640              	.LVL191:
 1641 00c8 FFF7FEFF 		bl	strlen
 1642              	.LVL192:
 1643 00cc 6423     		movs	r3, #100
 1644 00ce 82B2     		uxth	r2, r0
 1645 00d0 02A9     		add	r1, sp, #8
 1646              	.LVL193:
 1647 00d2 2046     		mov	r0, r4
 1648 00d4 FFF7FEFF 		bl	HAL_UART_Transmit
 1649              	.LVL194:
 1650              	.LBE154:
 1651              	.LBE153:
 544:Src/nRF24.c   ****     serial_print(message);
 545:Src/nRF24.c   **** 
 546:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_data);
 1652              		.loc 1 546 0
ARM GAS  /tmp/ccQFqAzx.s 			page 40


 1653 00d8 0DF12F02 		add	r2, sp, #47
 1654 00dc 0121     		movs	r1, #1
 1655 00de 0520     		movs	r0, #5
 1656 00e0 FFF7FEFF 		bl	spi_read_register
 1657              	.LVL195:
 547:Src/nRF24.c   **** 		sprintf(message, "RF_CH: <0x%02x>\n", read_data);
 1658              		.loc 1 547 0
 1659 00e4 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1660 00e8 8449     		ldr	r1, .L101+24
 1661 00ea 02A8     		add	r0, sp, #8
 1662 00ec FFF7FEFF 		bl	sprintf
 1663              	.LVL196:
 1664              	.LBB155:
 1665              	.LBB156:
 111:Src/nRF24.c   **** }
 1666              		.loc 1 111 0
 1667 00f0 02A8     		add	r0, sp, #8
 1668              	.LVL197:
 1669 00f2 FFF7FEFF 		bl	strlen
 1670              	.LVL198:
 1671 00f6 6423     		movs	r3, #100
 1672 00f8 82B2     		uxth	r2, r0
 1673 00fa 02A9     		add	r1, sp, #8
 1674              	.LVL199:
 1675 00fc 2046     		mov	r0, r4
 1676 00fe FFF7FEFF 		bl	HAL_UART_Transmit
 1677              	.LVL200:
 1678              	.LBE156:
 1679              	.LBE155:
 548:Src/nRF24.c   ****     serial_print(message);
 549:Src/nRF24.c   **** 
 550:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_data);
 1680              		.loc 1 550 0
 1681 0102 0DF12F02 		add	r2, sp, #47
 1682 0106 0121     		movs	r1, #1
 1683 0108 0620     		movs	r0, #6
 1684 010a FFF7FEFF 		bl	spi_read_register
 1685              	.LVL201:
 551:Src/nRF24.c   **** 		sprintf(message, "RF_SETUP: <0x%02x>\n", read_data);
 1686              		.loc 1 551 0
 1687 010e 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1688 0112 7B49     		ldr	r1, .L101+28
 1689 0114 02A8     		add	r0, sp, #8
 1690 0116 FFF7FEFF 		bl	sprintf
 1691              	.LVL202:
 1692              	.LBB157:
 1693              	.LBB158:
 111:Src/nRF24.c   **** }
 1694              		.loc 1 111 0
 1695 011a 02A8     		add	r0, sp, #8
 1696              	.LVL203:
 1697 011c FFF7FEFF 		bl	strlen
 1698              	.LVL204:
 1699 0120 6423     		movs	r3, #100
 1700 0122 82B2     		uxth	r2, r0
 1701 0124 02A9     		add	r1, sp, #8
 1702              	.LVL205:
ARM GAS  /tmp/ccQFqAzx.s 			page 41


 1703 0126 2046     		mov	r0, r4
 1704 0128 FFF7FEFF 		bl	HAL_UART_Transmit
 1705              	.LVL206:
 1706              	.LBE158:
 1707              	.LBE157:
 552:Src/nRF24.c   ****     serial_print(message);
 553:Src/nRF24.c   **** 
 554:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + STATUS, 1, &read_data);
 1708              		.loc 1 554 0
 1709 012c 0DF12F02 		add	r2, sp, #47
 1710 0130 0121     		movs	r1, #1
 1711 0132 0720     		movs	r0, #7
 1712 0134 FFF7FEFF 		bl	spi_read_register
 1713              	.LVL207:
 555:Src/nRF24.c   **** 		sprintf(message, "STATUS: <0x%02x>\n", read_data);
 1714              		.loc 1 555 0
 1715 0138 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1716 013c 7149     		ldr	r1, .L101+32
 1717 013e 02A8     		add	r0, sp, #8
 1718 0140 FFF7FEFF 		bl	sprintf
 1719              	.LVL208:
 1720              	.LBB159:
 1721              	.LBB160:
 111:Src/nRF24.c   **** }
 1722              		.loc 1 111 0
 1723 0144 02A8     		add	r0, sp, #8
 1724              	.LVL209:
 1725 0146 FFF7FEFF 		bl	strlen
 1726              	.LVL210:
 1727 014a 6423     		movs	r3, #100
 1728 014c 82B2     		uxth	r2, r0
 1729 014e 02A9     		add	r1, sp, #8
 1730              	.LVL211:
 1731 0150 2046     		mov	r0, r4
 1732 0152 FFF7FEFF 		bl	HAL_UART_Transmit
 1733              	.LVL212:
 1734              	.LBE160:
 1735              	.LBE159:
 556:Src/nRF24.c   ****     serial_print(message);
 557:Src/nRF24.c   **** 
 558:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, 4, read_buf);
 1736              		.loc 1 558 0
 1737 0156 0AAA     		add	r2, sp, #40
 1738 0158 0421     		movs	r1, #4
 1739 015a 0A20     		movs	r0, #10
 1740 015c FFF7FEFF 		bl	spi_read_register
 1741              	.LVL213:
 559:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P0: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1742              		.loc 1 559 0
 1743 0160 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1744 0164 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1745 0168 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1746 016c 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1747 0170 0190     		str	r0, [sp, #4]
 1748 0172 0091     		str	r1, [sp]
 1749 0174 6449     		ldr	r1, .L101+36
 1750 0176 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccQFqAzx.s 			page 42


 1751 0178 FFF7FEFF 		bl	sprintf
 1752              	.LVL214:
 1753              	.LBB161:
 1754              	.LBB162:
 111:Src/nRF24.c   **** }
 1755              		.loc 1 111 0
 1756 017c 02A8     		add	r0, sp, #8
 1757              	.LVL215:
 1758 017e FFF7FEFF 		bl	strlen
 1759              	.LVL216:
 1760 0182 6423     		movs	r3, #100
 1761 0184 82B2     		uxth	r2, r0
 1762 0186 02A9     		add	r1, sp, #8
 1763              	.LVL217:
 1764 0188 2046     		mov	r0, r4
 1765 018a FFF7FEFF 		bl	HAL_UART_Transmit
 1766              	.LVL218:
 1767              	.LBE162:
 1768              	.LBE161:
 560:Src/nRF24.c   ****     serial_print(message);
 561:Src/nRF24.c   **** 
 562:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, 4, read_buf);
 1769              		.loc 1 562 0
 1770 018e 0AAA     		add	r2, sp, #40
 1771 0190 0421     		movs	r1, #4
 1772 0192 0B20     		movs	r0, #11
 1773 0194 FFF7FEFF 		bl	spi_read_register
 1774              	.LVL219:
 563:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P1: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1775              		.loc 1 563 0
 1776 0198 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1777 019c 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1778 01a0 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1779 01a4 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1780 01a8 0190     		str	r0, [sp, #4]
 1781 01aa 0091     		str	r1, [sp]
 1782 01ac 5749     		ldr	r1, .L101+40
 1783 01ae 02A8     		add	r0, sp, #8
 1784 01b0 FFF7FEFF 		bl	sprintf
 1785              	.LVL220:
 1786              	.LBB163:
 1787              	.LBB164:
 111:Src/nRF24.c   **** }
 1788              		.loc 1 111 0
 1789 01b4 02A8     		add	r0, sp, #8
 1790              	.LVL221:
 1791 01b6 FFF7FEFF 		bl	strlen
 1792              	.LVL222:
 1793 01ba 6423     		movs	r3, #100
 1794 01bc 82B2     		uxth	r2, r0
 1795 01be 02A9     		add	r1, sp, #8
 1796              	.LVL223:
 1797 01c0 2046     		mov	r0, r4
 1798 01c2 FFF7FEFF 		bl	HAL_UART_Transmit
 1799              	.LVL224:
 1800              	.LBE164:
 1801              	.LBE163:
ARM GAS  /tmp/ccQFqAzx.s 			page 43


 564:Src/nRF24.c   ****     serial_print(message);
 565:Src/nRF24.c   **** 
 566:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, 4, read_buf);
 1802              		.loc 1 566 0
 1803 01c6 0AAA     		add	r2, sp, #40
 1804 01c8 0421     		movs	r1, #4
 1805 01ca 0C20     		movs	r0, #12
 1806 01cc FFF7FEFF 		bl	spi_read_register
 1807              	.LVL225:
 567:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P2: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1808              		.loc 1 567 0
 1809 01d0 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1810 01d4 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1811 01d8 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1812 01dc 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1813 01e0 0190     		str	r0, [sp, #4]
 1814 01e2 0091     		str	r1, [sp]
 1815 01e4 4A49     		ldr	r1, .L101+44
 1816 01e6 02A8     		add	r0, sp, #8
 1817 01e8 FFF7FEFF 		bl	sprintf
 1818              	.LVL226:
 1819              	.LBB165:
 1820              	.LBB166:
 111:Src/nRF24.c   **** }
 1821              		.loc 1 111 0
 1822 01ec 02A8     		add	r0, sp, #8
 1823              	.LVL227:
 1824 01ee FFF7FEFF 		bl	strlen
 1825              	.LVL228:
 1826 01f2 6423     		movs	r3, #100
 1827 01f4 82B2     		uxth	r2, r0
 1828 01f6 02A9     		add	r1, sp, #8
 1829              	.LVL229:
 1830 01f8 2046     		mov	r0, r4
 1831 01fa FFF7FEFF 		bl	HAL_UART_Transmit
 1832              	.LVL230:
 1833              	.LBE166:
 1834              	.LBE165:
 568:Src/nRF24.c   ****     serial_print(message);
 569:Src/nRF24.c   **** 
 570:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, 4, read_buf);
 1835              		.loc 1 570 0
 1836 01fe 0AAA     		add	r2, sp, #40
 1837 0200 0421     		movs	r1, #4
 1838 0202 0D20     		movs	r0, #13
 1839 0204 FFF7FEFF 		bl	spi_read_register
 1840              	.LVL231:
 571:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P3: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1841              		.loc 1 571 0
 1842 0208 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1843 020c 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1844 0210 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1845 0214 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1846 0218 0190     		str	r0, [sp, #4]
 1847 021a 0091     		str	r1, [sp]
 1848 021c 3D49     		ldr	r1, .L101+48
 1849 021e 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccQFqAzx.s 			page 44


 1850 0220 FFF7FEFF 		bl	sprintf
 1851              	.LVL232:
 1852              	.LBB167:
 1853              	.LBB168:
 111:Src/nRF24.c   **** }
 1854              		.loc 1 111 0
 1855 0224 02A8     		add	r0, sp, #8
 1856              	.LVL233:
 1857 0226 FFF7FEFF 		bl	strlen
 1858              	.LVL234:
 1859 022a 6423     		movs	r3, #100
 1860 022c 82B2     		uxth	r2, r0
 1861 022e 02A9     		add	r1, sp, #8
 1862              	.LVL235:
 1863 0230 2046     		mov	r0, r4
 1864 0232 FFF7FEFF 		bl	HAL_UART_Transmit
 1865              	.LVL236:
 1866              	.LBE168:
 1867              	.LBE167:
 572:Src/nRF24.c   ****     serial_print(message);
 573:Src/nRF24.c   **** 
 574:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, 4, read_buf);
 1868              		.loc 1 574 0
 1869 0236 0AAA     		add	r2, sp, #40
 1870 0238 0421     		movs	r1, #4
 1871 023a 0E20     		movs	r0, #14
 1872 023c FFF7FEFF 		bl	spi_read_register
 1873              	.LVL237:
 575:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P4: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1874              		.loc 1 575 0
 1875 0240 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1876 0244 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1877 0248 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1878 024c 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1879 0250 0190     		str	r0, [sp, #4]
 1880 0252 0091     		str	r1, [sp]
 1881 0254 3049     		ldr	r1, .L101+52
 1882 0256 02A8     		add	r0, sp, #8
 1883 0258 FFF7FEFF 		bl	sprintf
 1884              	.LVL238:
 1885              	.LBB169:
 1886              	.LBB170:
 111:Src/nRF24.c   **** }
 1887              		.loc 1 111 0
 1888 025c 02A8     		add	r0, sp, #8
 1889              	.LVL239:
 1890 025e FFF7FEFF 		bl	strlen
 1891              	.LVL240:
 1892 0262 6423     		movs	r3, #100
 1893 0264 82B2     		uxth	r2, r0
 1894 0266 02A9     		add	r1, sp, #8
 1895              	.LVL241:
 1896 0268 2046     		mov	r0, r4
 1897 026a FFF7FEFF 		bl	HAL_UART_Transmit
 1898              	.LVL242:
 1899              	.LBE170:
 1900              	.LBE169:
ARM GAS  /tmp/ccQFqAzx.s 			page 45


 576:Src/nRF24.c   ****     serial_print(message);
 577:Src/nRF24.c   **** 
 578:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_PW_P5, 4, read_buf);
 1901              		.loc 1 578 0
 1902 026e 0AAA     		add	r2, sp, #40
 1903 0270 0421     		movs	r1, #4
 1904 0272 1620     		movs	r0, #22
 1905 0274 FFF7FEFF 		bl	spi_read_register
 1906              	.LVL243:
 579:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P5: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1907              		.loc 1 579 0
 1908 0278 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1909 027c 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1910 0280 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1911 0284 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1912 0288 0190     		str	r0, [sp, #4]
 1913 028a 0091     		str	r1, [sp]
 1914 028c 2349     		ldr	r1, .L101+56
 1915 028e 02A8     		add	r0, sp, #8
 1916 0290 FFF7FEFF 		bl	sprintf
 1917              	.LVL244:
 1918              	.LBB171:
 1919              	.LBB172:
 111:Src/nRF24.c   **** }
 1920              		.loc 1 111 0
 1921 0294 02A8     		add	r0, sp, #8
 1922              	.LVL245:
 1923 0296 FFF7FEFF 		bl	strlen
 1924              	.LVL246:
 1925 029a 6423     		movs	r3, #100
 1926 029c 82B2     		uxth	r2, r0
 1927 029e 02A9     		add	r1, sp, #8
 1928              	.LVL247:
 1929 02a0 2046     		mov	r0, r4
 1930 02a2 FFF7FEFF 		bl	HAL_UART_Transmit
 1931              	.LVL248:
 1932              	.LBE172:
 1933              	.LBE171:
 580:Src/nRF24.c   ****     serial_print(message);
 581:Src/nRF24.c   **** 
 582:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + TX_ADDR, 4, read_buf);
 1934              		.loc 1 582 0
 1935 02a6 0AAA     		add	r2, sp, #40
 1936 02a8 0421     		movs	r1, #4
 1937 02aa 1020     		movs	r0, #16
 1938 02ac FFF7FEFF 		bl	spi_read_register
 1939              	.LVL249:
 583:Src/nRF24.c   **** 		sprintf(message, "TX_ADDR: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2], re
 1940              		.loc 1 583 0
 1941 02b0 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1942 02b4 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1943 02b8 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1944 02bc 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1945 02c0 0190     		str	r0, [sp, #4]
 1946 02c2 0091     		str	r1, [sp]
 1947 02c4 1649     		ldr	r1, .L101+60
 1948 02c6 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccQFqAzx.s 			page 46


 1949 02c8 FFF7FEFF 		bl	sprintf
 1950              	.LVL250:
 1951              	.LBB173:
 1952              	.LBB174:
 111:Src/nRF24.c   **** }
 1953              		.loc 1 111 0
 1954 02cc 02A8     		add	r0, sp, #8
 1955              	.LVL251:
 1956 02ce FFF7FEFF 		bl	strlen
 1957              	.LVL252:
 1958 02d2 6423     		movs	r3, #100
 1959 02d4 82B2     		uxth	r2, r0
 1960 02d6 02A9     		add	r1, sp, #8
 1961              	.LVL253:
 1962 02d8 2046     		mov	r0, r4
 1963 02da FFF7FEFF 		bl	HAL_UART_Transmit
 1964              	.LVL254:
 1965              	.LBE174:
 1966              	.LBE173:
 584:Src/nRF24.c   ****     serial_print(message);
 585:Src/nRF24.c   **** 
 586:Src/nRF24.c   **** }
 1967              		.loc 1 586 0
 1968 02de 0CB0     		add	sp, sp, #48
 1969              	.LCFI33:
 1970              		.cfi_def_cfa_offset 8
 1971              		@ sp needed
 1972 02e0 10BD     		pop	{r4, pc}
 1973              	.L102:
 1974 02e2 00BF     		.align	2
 1975              	.L101:
 1976 02e4 00000000 		.word	.LC13
 1977 02e8 00000000 		.word	huart2
 1978 02ec 14000000 		.word	.LC14
 1979 02f0 28000000 		.word	.LC15
 1980 02f4 40000000 		.word	.LC16
 1981 02f8 54000000 		.word	.LC17
 1982 02fc 6C000000 		.word	.LC18
 1983 0300 80000000 		.word	.LC19
 1984 0304 94000000 		.word	.LC20
 1985 0308 A8000000 		.word	.LC21
 1986 030c D0000000 		.word	.LC22
 1987 0310 F8000000 		.word	.LC23
 1988 0314 20010000 		.word	.LC24
 1989 0318 48010000 		.word	.LC25
 1990 031c 70010000 		.word	.LC26
 1991 0320 98010000 		.word	.LC27
 1992              		.cfi_endproc
 1993              	.LFE150:
 1995              		.section	.text.nRF24_set_CONFIG,"ax",%progbits
 1996              		.align	1
 1997              		.global	nRF24_set_CONFIG
 1998              		.syntax unified
 1999              		.thumb
 2000              		.thumb_func
 2001              		.fpu fpv4-sp-d16
 2003              	nRF24_set_CONFIG:
ARM GAS  /tmp/ccQFqAzx.s 			page 47


 2004              	.LFB151:
 587:Src/nRF24.c   **** 
 588:Src/nRF24.c   **** /* Following Function Provides High Level Access to nRF24L01+ registers. --------------------------
 589:Src/nRF24.c   **** /* Instead of using spi_write_register() or nRF24_verified_write_register(). Following can be used 
 590:Src/nRF24.c   **** 
 591:Src/nRF24.c   **** /**
 592:Src/nRF24.c   **** 	* @brief  nRF24 set <CONFIG> register
 593:Src/nRF24.c   **** 	* @param  mask_rx_dr Mask interrupt caused by RX_IDR. [ MASK_RX_DR_MASK1 | MASK_RX_DR_MASK0 | MASK
 594:Src/nRF24.c   **** 	* @param  mask_tx_ds Mask interrupt caused by TX_DS.  [ MASK_TX_DS_MASK1 | MASK_TX_DS_MASK0 | MASK
 595:Src/nRF24.c   **** 	* @param  mask_max_rt Mask interrupt cause by MAX_RT. [ MASK_MAX_RT_MASK1 | MASK_MAX_RT_MASK0 | MA
 596:Src/nRF24.c   **** 	* @param  en_crc Enable CRC. [ EN_CRC_MASK1 | EN_CRC_MASK0 | EN_CRC_MASKDEFAULT ]
 597:Src/nRF24.c   **** 	* @param  crco CRC encoding scheme. [ CRCO_MASK1 | CRCO_MASK0 | CRCO_MASKDEFAULT ]
 598:Src/nRF24.c   **** 	* @param  pwr_up Power Up / Down. [ PWR_UP_MASK1 | PWR_UP_MASK0 | PWR_UP_MASKDEFAULT ]
 599:Src/nRF24.c   **** 	* @param  prim_rx RX/TX control. [ PRIM_RX_MASK1 | PRIM_RX_MASK0 | PRIM_RX_MASKDEFAULT ]
 600:Src/nRF24.c   **** 	* @retval None.
 601:Src/nRF24.c   **** 	*/
 602:Src/nRF24.c   **** void nRF24_set_CONFIG(uint8_t mask_rx_dr, uint8_t mask_tx_ds, uint8_t mask_max_rt, uint8_t en_crc, 
 603:Src/nRF24.c   **** {
 2005              		.loc 1 603 0
 2006              		.cfi_startproc
 2007              		@ args = 12, pretend = 0, frame = 8
 2008              		@ frame_needed = 0, uses_anonymous_args = 0
 2009              	.LVL255:
 2010 0000 00B5     		push	{lr}
 2011              	.LCFI34:
 2012              		.cfi_def_cfa_offset 4
 2013              		.cfi_offset 14, -4
 2014 0002 83B0     		sub	sp, sp, #12
 2015              	.LCFI35:
 2016              		.cfi_def_cfa_offset 16
 604:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 605:Src/nRF24.c   **** 	writing_byte |= mask_rx_dr | mask_tx_ds | mask_max_rt | en_crc | crco | pwr_up | prim_rx; 
 2017              		.loc 1 605 0
 2018 0004 0143     		orrs	r1, r1, r0
 2019              	.LVL256:
 2020 0006 1143     		orrs	r1, r1, r2
 2021 0008 1943     		orrs	r1, r1, r3
 2022 000a 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2023              	.LVL257:
 2024 000e 1943     		orrs	r1, r1, r3
 2025 0010 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 2026 0014 0B43     		orrs	r3, r3, r1
 2027 0016 9DF81810 		ldrb	r1, [sp, #24]	@ zero_extendqisi2
 2028 001a 1943     		orrs	r1, r1, r3
 2029 001c 02AA     		add	r2, sp, #8
 2030              	.LVL258:
 2031 001e 02F8011D 		strb	r1, [r2, #-1]!
 606:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);
 2032              		.loc 1 606 0
 2033 0022 0121     		movs	r1, #1
 2034 0024 2020     		movs	r0, #32
 2035              	.LVL259:
 2036 0026 FFF7FEFF 		bl	nRF24_verified_write_register
 2037              	.LVL260:
 607:Src/nRF24.c   **** }
 2038              		.loc 1 607 0
 2039 002a 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccQFqAzx.s 			page 48


 2040              	.LCFI36:
 2041              		.cfi_def_cfa_offset 4
 2042              		@ sp needed
 2043 002c 5DF804FB 		ldr	pc, [sp], #4
 2044              		.cfi_endproc
 2045              	.LFE151:
 2047              		.section	.text.nRF24_get_CONFIG,"ax",%progbits
 2048              		.align	1
 2049              		.global	nRF24_get_CONFIG
 2050              		.syntax unified
 2051              		.thumb
 2052              		.thumb_func
 2053              		.fpu fpv4-sp-d16
 2055              	nRF24_get_CONFIG:
 2056              	.LFB152:
 608:Src/nRF24.c   **** 
 609:Src/nRF24.c   **** 
 610:Src/nRF24.c   **** /**
 611:Src/nRF24.c   ****   * @brief      Read <CONFIG> register from nRF24L01+.
 612:Src/nRF24.c   ****   * @param      None.
 613:Src/nRF24.c   ****   * @retval     <CONFIG> register value.
 614:Src/nRF24.c   ****   */
 615:Src/nRF24.c   **** uint8_t nRF24_get_CONFIG() 
 616:Src/nRF24.c   **** {
 2057              		.loc 1 616 0
 2058              		.cfi_startproc
 2059              		@ args = 0, pretend = 0, frame = 8
 2060              		@ frame_needed = 0, uses_anonymous_args = 0
 2061 0000 00B5     		push	{lr}
 2062              	.LCFI37:
 2063              		.cfi_def_cfa_offset 4
 2064              		.cfi_offset 14, -4
 2065 0002 83B0     		sub	sp, sp, #12
 2066              	.LCFI38:
 2067              		.cfi_def_cfa_offset 16
 617:Src/nRF24.c   ****   uint8_t config_reg;
 618:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + CONFIG, 1, &config_reg);
 2068              		.loc 1 618 0
 2069 0004 0DF10702 		add	r2, sp, #7
 2070 0008 0121     		movs	r1, #1
 2071 000a 0020     		movs	r0, #0
 2072 000c FFF7FEFF 		bl	spi_read_register
 2073              	.LVL261:
 619:Src/nRF24.c   ****   return config_reg;
 620:Src/nRF24.c   **** }
 2074              		.loc 1 620 0
 2075 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2076 0014 03B0     		add	sp, sp, #12
 2077              	.LCFI39:
 2078              		.cfi_def_cfa_offset 4
 2079              		@ sp needed
 2080 0016 5DF804FB 		ldr	pc, [sp], #4
 2081              		.cfi_endproc
 2082              	.LFE152:
 2084              		.section	.text.nRF24_set_EN_AA,"ax",%progbits
 2085              		.align	1
 2086              		.global	nRF24_set_EN_AA
ARM GAS  /tmp/ccQFqAzx.s 			page 49


 2087              		.syntax unified
 2088              		.thumb
 2089              		.thumb_func
 2090              		.fpu fpv4-sp-d16
 2092              	nRF24_set_EN_AA:
 2093              	.LFB153:
 621:Src/nRF24.c   **** 
 622:Src/nRF24.c   **** 
 623:Src/nRF24.c   **** /**
 624:Src/nRF24.c   **** 	* @brief  nRF24 set <EN_AA> register
 625:Src/nRF24.c   **** 	* @param  enaa_p5 Enable auto acknowledgement in data pipe 5. [ ENAA_P5_MASK1 | ENAA_P5_MASK0 | EN
 626:Src/nRF24.c   **** 	* @param  enaa_p4 Enable auto acknowledgement in data pipe 4. [ ENAA_P4_MASK1 | ENAA_P4_MASK0 | EN
 627:Src/nRF24.c   **** 	* @param  enaa_p3 Enable auto acknowledgement in data pipe 3. [ ENAA_P3_MASK1 | ENAA_P3_MASK0 | EN
 628:Src/nRF24.c   **** 	* @param  enaa_p2 Enable auto acknowledgement in data pipe 2. [ ENAA_P2_MASK1 | ENAA_P2_MASK0 | EN
 629:Src/nRF24.c   **** 	* @param  enaa_p1 Enable auto acknowledgement in data pipe 1. [ ENAA_P1_MASK1 | ENAA_P1_MASK0 | EN
 630:Src/nRF24.c   **** 	* @param  enaa_p0 Enable auto acknowledgement in data pipe 0. [ ENAA_P0_MASK1 | ENAA_P0_MASK0 | EN
 631:Src/nRF24.c   **** 	* @retval None.
 632:Src/nRF24.c   **** 	*/
 633:Src/nRF24.c   **** void nRF24_set_EN_AA(uint8_t enaa_p5, uint8_t enaa_p4, uint8_t enaa_p3, uint8_t enaa_p2, uint8_t en
 634:Src/nRF24.c   **** {
 2094              		.loc 1 634 0
 2095              		.cfi_startproc
 2096              		@ args = 8, pretend = 0, frame = 8
 2097              		@ frame_needed = 0, uses_anonymous_args = 0
 2098              	.LVL262:
 2099 0000 00B5     		push	{lr}
 2100              	.LCFI40:
 2101              		.cfi_def_cfa_offset 4
 2102              		.cfi_offset 14, -4
 2103 0002 83B0     		sub	sp, sp, #12
 2104              	.LCFI41:
 2105              		.cfi_def_cfa_offset 16
 635:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 636:Src/nRF24.c   **** 	writing_byte |= enaa_p5 | enaa_p4 | enaa_p3 | enaa_p2 | enaa_p1 | enaa_p0;
 2106              		.loc 1 636 0
 2107 0004 0143     		orrs	r1, r1, r0
 2108              	.LVL263:
 2109 0006 1143     		orrs	r1, r1, r2
 2110 0008 1943     		orrs	r1, r1, r3
 2111 000a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 2112              	.LVL264:
 2113 000e 0A43     		orrs	r2, r2, r1
 2114 0010 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 2115 0014 1143     		orrs	r1, r1, r2
 2116 0016 02AA     		add	r2, sp, #8
 2117 0018 02F8011D 		strb	r1, [r2, #-1]!
 637:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);
 2118              		.loc 1 637 0
 2119 001c 0121     		movs	r1, #1
 2120 001e 2120     		movs	r0, #33
 2121              	.LVL265:
 2122 0020 FFF7FEFF 		bl	nRF24_verified_write_register
 2123              	.LVL266:
 638:Src/nRF24.c   **** }
 2124              		.loc 1 638 0
 2125 0024 03B0     		add	sp, sp, #12
 2126              	.LCFI42:
ARM GAS  /tmp/ccQFqAzx.s 			page 50


 2127              		.cfi_def_cfa_offset 4
 2128              		@ sp needed
 2129 0026 5DF804FB 		ldr	pc, [sp], #4
 2130              		.cfi_endproc
 2131              	.LFE153:
 2133              		.section	.text.nRF24_get_EN_AA,"ax",%progbits
 2134              		.align	1
 2135              		.global	nRF24_get_EN_AA
 2136              		.syntax unified
 2137              		.thumb
 2138              		.thumb_func
 2139              		.fpu fpv4-sp-d16
 2141              	nRF24_get_EN_AA:
 2142              	.LFB154:
 639:Src/nRF24.c   **** 
 640:Src/nRF24.c   **** /**
 641:Src/nRF24.c   ****   * @brief      Read <EN_AA> register from nRF24L01+.
 642:Src/nRF24.c   ****   * @param      None.
 643:Src/nRF24.c   ****   * @retval     <EN_AA> register value.
 644:Src/nRF24.c   ****   */
 645:Src/nRF24.c   **** uint8_t nRF24_get_EN_AA() 
 646:Src/nRF24.c   **** {
 2143              		.loc 1 646 0
 2144              		.cfi_startproc
 2145              		@ args = 0, pretend = 0, frame = 8
 2146              		@ frame_needed = 0, uses_anonymous_args = 0
 2147 0000 00B5     		push	{lr}
 2148              	.LCFI43:
 2149              		.cfi_def_cfa_offset 4
 2150              		.cfi_offset 14, -4
 2151 0002 83B0     		sub	sp, sp, #12
 2152              	.LCFI44:
 2153              		.cfi_def_cfa_offset 16
 647:Src/nRF24.c   ****   uint8_t read_byte;
 648:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_byte);
 2154              		.loc 1 648 0
 2155 0004 0DF10702 		add	r2, sp, #7
 2156 0008 0121     		movs	r1, #1
 2157 000a 0846     		mov	r0, r1
 2158 000c FFF7FEFF 		bl	spi_read_register
 2159              	.LVL267:
 649:Src/nRF24.c   ****   return read_byte;
 650:Src/nRF24.c   **** }
 2160              		.loc 1 650 0
 2161 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2162 0014 03B0     		add	sp, sp, #12
 2163              	.LCFI45:
 2164              		.cfi_def_cfa_offset 4
 2165              		@ sp needed
 2166 0016 5DF804FB 		ldr	pc, [sp], #4
 2167              		.cfi_endproc
 2168              	.LFE154:
 2170              		.section	.text.nRF24_set_EN_RXADDR,"ax",%progbits
 2171              		.align	1
 2172              		.global	nRF24_set_EN_RXADDR
 2173              		.syntax unified
 2174              		.thumb
ARM GAS  /tmp/ccQFqAzx.s 			page 51


 2175              		.thumb_func
 2176              		.fpu fpv4-sp-d16
 2178              	nRF24_set_EN_RXADDR:
 2179              	.LFB155:
 651:Src/nRF24.c   **** 
 652:Src/nRF24.c   **** 
 653:Src/nRF24.c   **** /**
 654:Src/nRF24.c   **** 	* @brief  nRF24 set <EN_RXADDR> register
 655:Src/nRF24.c   **** 	* @param  erx_p5 enable RX in data pipe 5.   [ ERX_P5_MASK1 | ERX_P5_MASK0 | ERX_P5_MASKDEFAULT ] 
 656:Src/nRF24.c   **** 	* @param  erx_p4 enable RX in data pipe 4.   [ ERX_P4_MASK1 | ERX_P4_MASK0 | ERX_P4_MASKDEFAULT ] 
 657:Src/nRF24.c   **** 	* @param  erx_p3 enable RX in data pipe 3.   [ ERX_P3_MASK1 | ERX_P3_MASK0 | ERX_P3_MASKDEFAULT ] 
 658:Src/nRF24.c   **** 	* @param  erx_p2 enable RX in data pipe 2.   [ ERX_P2_MASK1 | ERX_P2_MASK0 | ERX_P2_MASKDEFAULT ] 
 659:Src/nRF24.c   **** 	* @param  erx_p1 enable RX in data pipe 1.   [ ERX_P1_MASK1 | ERX_P1_MASK0 | ERX_P1_MASKDEFAULT ] 
 660:Src/nRF24.c   **** 	* @param  erx_p0 enable RX in data pipe 0.   [ ERX_P0_MASK1 | ERX_P0_MASK0 | ERX_P0_MASKDEFAULT ] 
 661:Src/nRF24.c   **** 	* @retval None.
 662:Src/nRF24.c   **** 	*/
 663:Src/nRF24.c   **** void nRF24_set_EN_RXADDR(uint8_t erx_p5, uint8_t erx_p4, uint8_t erx_p3, uint8_t erx_p2, uint8_t er
 664:Src/nRF24.c   **** {
 2180              		.loc 1 664 0
 2181              		.cfi_startproc
 2182              		@ args = 8, pretend = 0, frame = 8
 2183              		@ frame_needed = 0, uses_anonymous_args = 0
 2184              	.LVL268:
 2185 0000 00B5     		push	{lr}
 2186              	.LCFI46:
 2187              		.cfi_def_cfa_offset 4
 2188              		.cfi_offset 14, -4
 2189 0002 83B0     		sub	sp, sp, #12
 2190              	.LCFI47:
 2191              		.cfi_def_cfa_offset 16
 665:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 666:Src/nRF24.c   **** 	writing_byte |= erx_p5 | erx_p4 | erx_p3 | erx_p2 | erx_p1 | erx_p0;
 2192              		.loc 1 666 0
 2193 0004 0143     		orrs	r1, r1, r0
 2194              	.LVL269:
 2195 0006 1143     		orrs	r1, r1, r2
 2196 0008 1943     		orrs	r1, r1, r3
 2197 000a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 2198              	.LVL270:
 2199 000e 0A43     		orrs	r2, r2, r1
 2200 0010 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 2201 0014 1143     		orrs	r1, r1, r2
 2202 0016 02AA     		add	r2, sp, #8
 2203 0018 02F8011D 		strb	r1, [r2, #-1]!
 667:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);
 2204              		.loc 1 667 0
 2205 001c 0121     		movs	r1, #1
 2206 001e 2220     		movs	r0, #34
 2207              	.LVL271:
 2208 0020 FFF7FEFF 		bl	nRF24_verified_write_register
 2209              	.LVL272:
 668:Src/nRF24.c   **** }
 2210              		.loc 1 668 0
 2211 0024 03B0     		add	sp, sp, #12
 2212              	.LCFI48:
 2213              		.cfi_def_cfa_offset 4
 2214              		@ sp needed
ARM GAS  /tmp/ccQFqAzx.s 			page 52


 2215 0026 5DF804FB 		ldr	pc, [sp], #4
 2216              		.cfi_endproc
 2217              	.LFE155:
 2219              		.section	.text.nRF24_get_EN_RXADDR,"ax",%progbits
 2220              		.align	1
 2221              		.global	nRF24_get_EN_RXADDR
 2222              		.syntax unified
 2223              		.thumb
 2224              		.thumb_func
 2225              		.fpu fpv4-sp-d16
 2227              	nRF24_get_EN_RXADDR:
 2228              	.LFB156:
 669:Src/nRF24.c   **** 
 670:Src/nRF24.c   **** 
 671:Src/nRF24.c   **** /**
 672:Src/nRF24.c   ****   * @brief      Read <EN_RXADDR> register from nRF24L01+.
 673:Src/nRF24.c   ****   * @param      None.
 674:Src/nRF24.c   ****   * @retval     <EN_RXADDR> register value.
 675:Src/nRF24.c   ****   */
 676:Src/nRF24.c   **** uint8_t nRF24_get_EN_RXADDR() 
 677:Src/nRF24.c   **** {
 2229              		.loc 1 677 0
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 8
 2232              		@ frame_needed = 0, uses_anonymous_args = 0
 2233 0000 00B5     		push	{lr}
 2234              	.LCFI49:
 2235              		.cfi_def_cfa_offset 4
 2236              		.cfi_offset 14, -4
 2237 0002 83B0     		sub	sp, sp, #12
 2238              	.LCFI50:
 2239              		.cfi_def_cfa_offset 16
 678:Src/nRF24.c   ****   uint8_t read_byte;
 679:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_byte);
 2240              		.loc 1 679 0
 2241 0004 0DF10702 		add	r2, sp, #7
 2242 0008 0121     		movs	r1, #1
 2243 000a 0220     		movs	r0, #2
 2244 000c FFF7FEFF 		bl	spi_read_register
 2245              	.LVL273:
 680:Src/nRF24.c   ****   return read_byte;
 681:Src/nRF24.c   **** }
 2246              		.loc 1 681 0
 2247 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2248 0014 03B0     		add	sp, sp, #12
 2249              	.LCFI51:
 2250              		.cfi_def_cfa_offset 4
 2251              		@ sp needed
 2252 0016 5DF804FB 		ldr	pc, [sp], #4
 2253              		.cfi_endproc
 2254              	.LFE156:
 2256              		.section	.text.nRF24_set_SETUP_AW,"ax",%progbits
 2257              		.align	1
 2258              		.global	nRF24_set_SETUP_AW
 2259              		.syntax unified
 2260              		.thumb
 2261              		.thumb_func
ARM GAS  /tmp/ccQFqAzx.s 			page 53


 2262              		.fpu fpv4-sp-d16
 2264              	nRF24_set_SETUP_AW:
 2265              	.LFB157:
 682:Src/nRF24.c   **** 
 683:Src/nRF24.c   **** /**
 684:Src/nRF24.c   **** 	* @brief  nRF24 set <AW> register
 685:Src/nRF24.c   **** 	* @param  aw Setup of Address Widths. [ AW_MASK3bytes | AW_MASK4bytes | AW_MASK5bytes | AW_MASKDEF
 686:Src/nRF24.c   **** 	* @retval None.
 687:Src/nRF24.c   **** 	*/
 688:Src/nRF24.c   **** void nRF24_set_SETUP_AW(uint8_t aw) 
 689:Src/nRF24.c   **** {
 2266              		.loc 1 689 0
 2267              		.cfi_startproc
 2268              		@ args = 0, pretend = 0, frame = 8
 2269              		@ frame_needed = 0, uses_anonymous_args = 0
 2270              	.LVL274:
 2271 0000 00B5     		push	{lr}
 2272              	.LCFI52:
 2273              		.cfi_def_cfa_offset 4
 2274              		.cfi_offset 14, -4
 2275 0002 83B0     		sub	sp, sp, #12
 2276              	.LCFI53:
 2277              		.cfi_def_cfa_offset 16
 690:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 691:Src/nRF24.c   **** 	writing_byte |= aw;
 2278              		.loc 1 691 0
 2279 0004 02AA     		add	r2, sp, #8
 2280 0006 02F8010D 		strb	r0, [r2, #-1]!
 692:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_AW, 1, &writing_byte);
 2281              		.loc 1 692 0
 2282 000a 0121     		movs	r1, #1
 2283 000c 2320     		movs	r0, #35
 2284              	.LVL275:
 2285 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2286              	.LVL276:
 693:Src/nRF24.c   **** }
 2287              		.loc 1 693 0
 2288 0012 03B0     		add	sp, sp, #12
 2289              	.LCFI54:
 2290              		.cfi_def_cfa_offset 4
 2291              		@ sp needed
 2292 0014 5DF804FB 		ldr	pc, [sp], #4
 2293              		.cfi_endproc
 2294              	.LFE157:
 2296              		.section	.text.nRF24_get_SETUP_AW,"ax",%progbits
 2297              		.align	1
 2298              		.global	nRF24_get_SETUP_AW
 2299              		.syntax unified
 2300              		.thumb
 2301              		.thumb_func
 2302              		.fpu fpv4-sp-d16
 2304              	nRF24_get_SETUP_AW:
 2305              	.LFB158:
 694:Src/nRF24.c   **** 
 695:Src/nRF24.c   **** /**
 696:Src/nRF24.c   ****   * @brief      Read <SETUP_AW> register from nRF24L01+.
 697:Src/nRF24.c   ****   * @param      None.
ARM GAS  /tmp/ccQFqAzx.s 			page 54


 698:Src/nRF24.c   ****   * @retval     <SETUP_AW> register value.
 699:Src/nRF24.c   ****   */
 700:Src/nRF24.c   **** uint8_t nRF24_get_SETUP_AW() 
 701:Src/nRF24.c   **** {
 2306              		.loc 1 701 0
 2307              		.cfi_startproc
 2308              		@ args = 0, pretend = 0, frame = 8
 2309              		@ frame_needed = 0, uses_anonymous_args = 0
 2310 0000 00B5     		push	{lr}
 2311              	.LCFI55:
 2312              		.cfi_def_cfa_offset 4
 2313              		.cfi_offset 14, -4
 2314 0002 83B0     		sub	sp, sp, #12
 2315              	.LCFI56:
 2316              		.cfi_def_cfa_offset 16
 702:Src/nRF24.c   ****   uint8_t read_byte;
 703:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_byte);
 2317              		.loc 1 703 0
 2318 0004 0DF10702 		add	r2, sp, #7
 2319 0008 0121     		movs	r1, #1
 2320 000a 0320     		movs	r0, #3
 2321 000c FFF7FEFF 		bl	spi_read_register
 2322              	.LVL277:
 704:Src/nRF24.c   ****   return read_byte;
 705:Src/nRF24.c   **** }
 2323              		.loc 1 705 0
 2324 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2325 0014 03B0     		add	sp, sp, #12
 2326              	.LCFI57:
 2327              		.cfi_def_cfa_offset 4
 2328              		@ sp needed
 2329 0016 5DF804FB 		ldr	pc, [sp], #4
 2330              		.cfi_endproc
 2331              	.LFE158:
 2333              		.section	.text.nRF24_set_SETUP_RETR,"ax",%progbits
 2334              		.align	1
 2335              		.global	nRF24_set_SETUP_RETR
 2336              		.syntax unified
 2337              		.thumb
 2338              		.thumb_func
 2339              		.fpu fpv4-sp-d16
 2341              	nRF24_set_SETUP_RETR:
 2342              	.LFB159:
 706:Src/nRF24.c   **** 
 707:Src/nRF24.c   **** /**
 708:Src/nRF24.c   **** 	* @brief  nRF24 configure auto-retransmit delay and auto retransmit count.
 709:Src/nRF24.c   **** 	* @param  ard Auto-Retransmit Delay
 710:Src/nRF24.c   ****   *   [ ARD_MASK250us  | ARD_MASK500us  | ARD_MASK750us  | ARD_MASK1000us | ARD_MASK1250us        
 711:Src/nRF24.c   ****   *   | ARD_MASK1500us | ARD_MASK1750us | ARD_MASK2000us | ARD_MASK2250us | ARD_MASK2500us        
 712:Src/nRF24.c   ****   *   | ARD_MASK2750us | ARD_MASK3000us | ARD_MASK3250us | ARD_MASK3500us | ARD_MASK3750us        
 713:Src/nRF24.c   ****   *   | ARD_MASK4000us | ARD_MASKDEFAULT ]
 714:Src/nRF24.c   **** 	* @param  arc Auto-Retransmit Count
 715:Src/nRF24.c   ****   *		[	ARC_MASK0 | ARC_MASK1 | ARC_MASK2  | ARC_MASK3  | ARC_MASK4  | ARC_MASK5   | ARC_MASK6  | AR
 716:Src/nRF24.c   **** 	*   | ARC_MASK8 | ARC_MASK9 | ARC_MASK10 | ARC_MASK11 | ARC_MASK12 |	ARC_MASK13 | ARC_MASK14 | ARC
 717:Src/nRF24.c   **** 	*   | ARC_MASKDEFAULT ]
 718:Src/nRF24.c   **** 	* @retval None.
 719:Src/nRF24.c   **** 	*/
ARM GAS  /tmp/ccQFqAzx.s 			page 55


 720:Src/nRF24.c   **** void nRF24_set_SETUP_RETR(uint8_t ard, uint8_t arc)
 721:Src/nRF24.c   **** {
 2343              		.loc 1 721 0
 2344              		.cfi_startproc
 2345              		@ args = 0, pretend = 0, frame = 8
 2346              		@ frame_needed = 0, uses_anonymous_args = 0
 2347              	.LVL278:
 2348 0000 00B5     		push	{lr}
 2349              	.LCFI58:
 2350              		.cfi_def_cfa_offset 4
 2351              		.cfi_offset 14, -4
 2352 0002 83B0     		sub	sp, sp, #12
 2353              	.LCFI59:
 2354              		.cfi_def_cfa_offset 16
 722:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 723:Src/nRF24.c   **** 	writing_byte |= ard | arc;
 2355              		.loc 1 723 0
 2356 0004 0143     		orrs	r1, r1, r0
 2357              	.LVL279:
 2358 0006 02AA     		add	r2, sp, #8
 2359 0008 02F8011D 		strb	r1, [r2, #-1]!
 724:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);
 2360              		.loc 1 724 0
 2361 000c 0121     		movs	r1, #1
 2362 000e 2420     		movs	r0, #36
 2363              	.LVL280:
 2364 0010 FFF7FEFF 		bl	nRF24_verified_write_register
 2365              	.LVL281:
 725:Src/nRF24.c   **** }
 2366              		.loc 1 725 0
 2367 0014 03B0     		add	sp, sp, #12
 2368              	.LCFI60:
 2369              		.cfi_def_cfa_offset 4
 2370              		@ sp needed
 2371 0016 5DF804FB 		ldr	pc, [sp], #4
 2372              		.cfi_endproc
 2373              	.LFE159:
 2375              		.section	.text.nRF24_get_SETUP_RETR,"ax",%progbits
 2376              		.align	1
 2377              		.global	nRF24_get_SETUP_RETR
 2378              		.syntax unified
 2379              		.thumb
 2380              		.thumb_func
 2381              		.fpu fpv4-sp-d16
 2383              	nRF24_get_SETUP_RETR:
 2384              	.LFB160:
 726:Src/nRF24.c   **** 
 727:Src/nRF24.c   **** 
 728:Src/nRF24.c   **** uint8_t nRF24_get_SETUP_RETR(uint8_t ARD, uint8_t ARC)
 729:Src/nRF24.c   **** {
 2385              		.loc 1 729 0
 2386              		.cfi_startproc
 2387              		@ args = 0, pretend = 0, frame = 8
 2388              		@ frame_needed = 0, uses_anonymous_args = 0
 2389              	.LVL282:
 2390 0000 00B5     		push	{lr}
 2391              	.LCFI61:
ARM GAS  /tmp/ccQFqAzx.s 			page 56


 2392              		.cfi_def_cfa_offset 4
 2393              		.cfi_offset 14, -4
 2394 0002 83B0     		sub	sp, sp, #12
 2395              	.LCFI62:
 2396              		.cfi_def_cfa_offset 16
 730:Src/nRF24.c   ****   uint8_t read_byte;
 731:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_byte);
 2397              		.loc 1 731 0
 2398 0004 0DF10702 		add	r2, sp, #7
 2399 0008 0121     		movs	r1, #1
 2400              	.LVL283:
 2401 000a 0420     		movs	r0, #4
 2402              	.LVL284:
 2403 000c FFF7FEFF 		bl	spi_read_register
 2404              	.LVL285:
 732:Src/nRF24.c   ****   return read_byte;
 733:Src/nRF24.c   **** }
 2405              		.loc 1 733 0
 2406 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2407 0014 03B0     		add	sp, sp, #12
 2408              	.LCFI63:
 2409              		.cfi_def_cfa_offset 4
 2410              		@ sp needed
 2411 0016 5DF804FB 		ldr	pc, [sp], #4
 2412              		.cfi_endproc
 2413              	.LFE160:
 2415              		.section	.text.nRF24_set_RF_CH,"ax",%progbits
 2416              		.align	1
 2417              		.global	nRF24_set_RF_CH
 2418              		.syntax unified
 2419              		.thumb
 2420              		.thumb_func
 2421              		.fpu fpv4-sp-d16
 2423              	nRF24_set_RF_CH:
 2424              	.LFB161:
 734:Src/nRF24.c   **** 
 735:Src/nRF24.c   **** 
 736:Src/nRF24.c   **** 
 737:Src/nRF24.c   **** /**
 738:Src/nRF24.c   **** 	* @brief  nRF24 sets the frequency channel of nRF24L01+ operates on.
 739:Src/nRF24.c   **** 	* @param  ch Channel. It is basically frequency in MHz. [ RF_CH_MASKDEFAULT ]
 740:Src/nRF24.c   **** 	* @retval None.
 741:Src/nRF24.c   **** 	* @note   frequency = (2400 + ch) MHz
 742:Src/nRF24.c   **** 	*/
 743:Src/nRF24.c   **** void nRF24_set_RF_CH(uint8_t ch)
 744:Src/nRF24.c   **** {
 2425              		.loc 1 744 0
 2426              		.cfi_startproc
 2427              		@ args = 0, pretend = 0, frame = 8
 2428              		@ frame_needed = 0, uses_anonymous_args = 0
 2429              	.LVL286:
 2430 0000 00B5     		push	{lr}
 2431              	.LCFI64:
 2432              		.cfi_def_cfa_offset 4
 2433              		.cfi_offset 14, -4
 2434 0002 83B0     		sub	sp, sp, #12
 2435              	.LCFI65:
ARM GAS  /tmp/ccQFqAzx.s 			page 57


 2436              		.cfi_def_cfa_offset 16
 745:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 746:Src/nRF24.c   **** 	writing_byte |= ch;
 2437              		.loc 1 746 0
 2438 0004 02AA     		add	r2, sp, #8
 2439 0006 02F8010D 		strb	r0, [r2, #-1]!
 747:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RF_CH, 1, &writing_byte);
 2440              		.loc 1 747 0
 2441 000a 0121     		movs	r1, #1
 2442 000c 2520     		movs	r0, #37
 2443              	.LVL287:
 2444 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2445              	.LVL288:
 748:Src/nRF24.c   **** }
 2446              		.loc 1 748 0
 2447 0012 03B0     		add	sp, sp, #12
 2448              	.LCFI66:
 2449              		.cfi_def_cfa_offset 4
 2450              		@ sp needed
 2451 0014 5DF804FB 		ldr	pc, [sp], #4
 2452              		.cfi_endproc
 2453              	.LFE161:
 2455              		.section	.text.nRF24_get_RF_CH,"ax",%progbits
 2456              		.align	1
 2457              		.global	nRF24_get_RF_CH
 2458              		.syntax unified
 2459              		.thumb
 2460              		.thumb_func
 2461              		.fpu fpv4-sp-d16
 2463              	nRF24_get_RF_CH:
 2464              	.LFB162:
 749:Src/nRF24.c   **** 
 750:Src/nRF24.c   **** uint8_t nRF24_get_RF_CH()
 751:Src/nRF24.c   **** {
 2465              		.loc 1 751 0
 2466              		.cfi_startproc
 2467              		@ args = 0, pretend = 0, frame = 8
 2468              		@ frame_needed = 0, uses_anonymous_args = 0
 2469 0000 00B5     		push	{lr}
 2470              	.LCFI67:
 2471              		.cfi_def_cfa_offset 4
 2472              		.cfi_offset 14, -4
 2473 0002 83B0     		sub	sp, sp, #12
 2474              	.LCFI68:
 2475              		.cfi_def_cfa_offset 16
 752:Src/nRF24.c   ****   uint8_t read_byte;
 753:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_byte);
 2476              		.loc 1 753 0
 2477 0004 0DF10702 		add	r2, sp, #7
 2478 0008 0121     		movs	r1, #1
 2479 000a 0520     		movs	r0, #5
 2480 000c FFF7FEFF 		bl	spi_read_register
 2481              	.LVL289:
 754:Src/nRF24.c   ****   return read_byte;
 755:Src/nRF24.c   **** }
 2482              		.loc 1 755 0
 2483 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
ARM GAS  /tmp/ccQFqAzx.s 			page 58


 2484 0014 03B0     		add	sp, sp, #12
 2485              	.LCFI69:
 2486              		.cfi_def_cfa_offset 4
 2487              		@ sp needed
 2488 0016 5DF804FB 		ldr	pc, [sp], #4
 2489              		.cfi_endproc
 2490              	.LFE162:
 2492              		.section	.text.nRF24_set_RF_SETUP,"ax",%progbits
 2493              		.align	1
 2494              		.global	nRF24_set_RF_SETUP
 2495              		.syntax unified
 2496              		.thumb
 2497              		.thumb_func
 2498              		.fpu fpv4-sp-d16
 2500              	nRF24_set_RF_SETUP:
 2501              	.LFB163:
 756:Src/nRF24.c   **** 
 757:Src/nRF24.c   **** /**
 758:Src/nRF24.c   **** 	* @brief nRF24 RF SETUP register configuration. 
 759:Src/nRF24.c   **** 	* @param cont_wave Enables continuous carrier transmit when high. [ CONT_WAVE_MASK1 | CONT_WAVE_MA
 760:Src/nRF24.c   **** 	* @param rf_dr_low Sets RF data rate to 250 kbps. [ RF_DR_LOW_MASK1 | RF_DR_LOW_MASK0 | RF_DR_LOW_
 761:Src/nRF24.c   **** 	* @param pll_lock (!) TEST-ONLY SIGNAL for Nordic's internal testing purpose. Forces PLL lock sign
 762:Src/nRF24.c   **** 	* @param rf_dr_high Select between high speed data rates. This bit is don't care if RF_DR_LOW bit 
 763:Src/nRF24.c   **** 	*  
 764:Src/nRF24.c   **** 	*    [ RF_DR_HIGH_MASK1 | RF_DR_HIGH_MASK0 | RF_DR_HIGH_MASKDEFAULT ]
 765:Src/nRF24.c   **** 	*
 766:Src/nRF24.c   **** 	* @note Use RF_DR_HIGH_MASKx and RF_DR_LOW_MASKx or you can use the following masks that combines 
 767:Src/nRF24.c   **** 	*
 768:Src/nRF24.c   **** 	*     Encoding for RF data rate: 
 769:Src/nRF24.c   **** 	*     {RF_DR_LOW, RF_DR_HIGH}   Data-Rate
 770:Src/nRF24.c   **** 	*          0    ,     0            1   Mbps
 771:Src/nRF24.c   **** 	*          0    ,     1            2   Mbps
 772:Src/nRF24.c   **** 	*          1    ,     0            250 kbps
 773:Src/nRF24.c   **** 	*          1    ,     1            Reserved
 774:Src/nRF24.c   ****   *  
 775:Src/nRF24.c   **** 	*    [ RF_DR_MASK1Mbps | RF_DR_MASK2Mbps | RF_DR_MASK250kbps ]
 776:Src/nRF24.c   ****   *
 777:Src/nRF24.c   **** 	* @param rf_pwr RF Output power in TX mode. [ RF_PWR_MASKNEG18dBm | RF_PWR_MASKNEG12dBm | RF_PWR_M
 778:Src/nRF24.c   **** 	*                Power
 779:Src/nRF24.c   **** 	*         11   -18 dBm
 780:Src/nRF24.c   **** 	*         01   -12 dBm
 781:Src/nRF24.c   **** 	*         10    -6 dBm
 782:Src/nRF24.c   **** 	*         11     0 dBm
 783:Src/nRF24.c   **** 	* @retval None.
 784:Src/nRF24.c   **** 	*/
 785:Src/nRF24.c   **** void nRF24_set_RF_SETUP(uint8_t cont_wave, uint8_t rf_dr_low, uint8_t pll_lock, uint8_t rf_dr_high,
 786:Src/nRF24.c   **** {
 2502              		.loc 1 786 0
 2503              		.cfi_startproc
 2504              		@ args = 4, pretend = 0, frame = 8
 2505              		@ frame_needed = 0, uses_anonymous_args = 0
 2506              	.LVL290:
 2507 0000 00B5     		push	{lr}
 2508              	.LCFI70:
 2509              		.cfi_def_cfa_offset 4
 2510              		.cfi_offset 14, -4
 2511 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccQFqAzx.s 			page 59


 2512              	.LCFI71:
 2513              		.cfi_def_cfa_offset 16
 787:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 788:Src/nRF24.c   **** 	writing_byte |= cont_wave | rf_dr_low | pll_lock | rf_dr_high | rf_pwr;
 2514              		.loc 1 788 0
 2515 0004 0143     		orrs	r1, r1, r0
 2516              	.LVL291:
 2517 0006 1143     		orrs	r1, r1, r2
 2518 0008 1943     		orrs	r1, r1, r3
 2519 000a 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2520              	.LVL292:
 2521 000e 1943     		orrs	r1, r1, r3
 2522 0010 02AA     		add	r2, sp, #8
 2523              	.LVL293:
 2524 0012 02F8011D 		strb	r1, [r2, #-1]!
 789:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 2525              		.loc 1 789 0
 2526 0016 0121     		movs	r1, #1
 2527 0018 2620     		movs	r0, #38
 2528              	.LVL294:
 2529 001a FFF7FEFF 		bl	nRF24_verified_write_register
 2530              	.LVL295:
 790:Src/nRF24.c   **** }
 2531              		.loc 1 790 0
 2532 001e 03B0     		add	sp, sp, #12
 2533              	.LCFI72:
 2534              		.cfi_def_cfa_offset 4
 2535              		@ sp needed
 2536 0020 5DF804FB 		ldr	pc, [sp], #4
 2537              		.cfi_endproc
 2538              	.LFE163:
 2540              		.section	.text.nRF24_get_RF_SETUP,"ax",%progbits
 2541              		.align	1
 2542              		.global	nRF24_get_RF_SETUP
 2543              		.syntax unified
 2544              		.thumb
 2545              		.thumb_func
 2546              		.fpu fpv4-sp-d16
 2548              	nRF24_get_RF_SETUP:
 2549              	.LFB164:
 791:Src/nRF24.c   **** 
 792:Src/nRF24.c   **** uint8_t nRF24_get_RF_SETUP()
 793:Src/nRF24.c   **** {
 2550              		.loc 1 793 0
 2551              		.cfi_startproc
 2552              		@ args = 0, pretend = 0, frame = 8
 2553              		@ frame_needed = 0, uses_anonymous_args = 0
 2554 0000 00B5     		push	{lr}
 2555              	.LCFI73:
 2556              		.cfi_def_cfa_offset 4
 2557              		.cfi_offset 14, -4
 2558 0002 83B0     		sub	sp, sp, #12
 2559              	.LCFI74:
 2560              		.cfi_def_cfa_offset 16
 794:Src/nRF24.c   ****   uint8_t read_byte;
 795:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_byte);
 2561              		.loc 1 795 0
ARM GAS  /tmp/ccQFqAzx.s 			page 60


 2562 0004 0DF10702 		add	r2, sp, #7
 2563 0008 0121     		movs	r1, #1
 2564 000a 0620     		movs	r0, #6
 2565 000c FFF7FEFF 		bl	spi_read_register
 2566              	.LVL296:
 796:Src/nRF24.c   ****   return read_byte;
 797:Src/nRF24.c   **** }
 2567              		.loc 1 797 0
 2568 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2569 0014 03B0     		add	sp, sp, #12
 2570              	.LCFI75:
 2571              		.cfi_def_cfa_offset 4
 2572              		@ sp needed
 2573 0016 5DF804FB 		ldr	pc, [sp], #4
 2574              		.cfi_endproc
 2575              	.LFE164:
 2577              		.section	.text.nRF24_clear_STATUS,"ax",%progbits
 2578              		.align	1
 2579              		.global	nRF24_clear_STATUS
 2580              		.syntax unified
 2581              		.thumb
 2582              		.thumb_func
 2583              		.fpu fpv4-sp-d16
 2585              	nRF24_clear_STATUS:
 2586              	.LFB165:
 798:Src/nRF24.c   **** 
 799:Src/nRF24.c   **** 
 800:Src/nRF24.c   **** 
 801:Src/nRF24.c   **** 
 802:Src/nRF24.c   **** /**
 803:Src/nRF24.c   ****   * @brief      Clear flag bits in 'STATUS' register.
 804:Src/nRF24.c   ****   * @param      rx_dr Data Ready RX FIFO interrupt. Asserted when new data arrives RX FIFO.
 805:Src/nRF24.c   ****   *               Write 1 to clear bit [ RX_DR_MASK1 ]
 806:Src/nRF24.c   **** 	* @param      tx_ds Data Sent TX FIFO interrupt. Asserted when packet transmitted on TX. 
 807:Src/nRF24.c   **** 	*               If AUTO_ACK is activated, this bit is set high only when ACK is received. Write 1 
 808:Src/nRF24.c   **** 	* @param      max_rt Maximum number of TX retransmits interrupt. Write 1 to clear bit. 
 809:Src/nRF24.c   **** 	*               If MAX_RT is asserted it must be cleared to enable further communication. [ MAX_RT
 810:Src/nRF24.c   ****   * @retval     None.
 811:Src/nRF24.c   ****   */
 812:Src/nRF24.c   **** void nRF24_clear_STATUS(uint8_t rx_dr, uint8_t tx_ds, uint8_t max_rt) 
 813:Src/nRF24.c   **** {
 2587              		.loc 1 813 0
 2588              		.cfi_startproc
 2589              		@ args = 0, pretend = 0, frame = 8
 2590              		@ frame_needed = 0, uses_anonymous_args = 0
 2591              	.LVL297:
 2592 0000 00B5     		push	{lr}
 2593              	.LCFI76:
 2594              		.cfi_def_cfa_offset 4
 2595              		.cfi_offset 14, -4
 2596 0002 83B0     		sub	sp, sp, #12
 2597              	.LCFI77:
 2598              		.cfi_def_cfa_offset 16
 814:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 815:Src/nRF24.c   **** 	writing_byte |= rx_dr | tx_ds | max_rt;
 2599              		.loc 1 815 0
 2600 0004 0143     		orrs	r1, r1, r0
ARM GAS  /tmp/ccQFqAzx.s 			page 61


 2601              	.LVL298:
 2602 0006 1143     		orrs	r1, r1, r2
 2603 0008 02AA     		add	r2, sp, #8
 2604              	.LVL299:
 2605 000a 02F8011D 		strb	r1, [r2, #-1]!
 816:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + STATUS, 1, &writing_byte);
 2606              		.loc 1 816 0
 2607 000e 0121     		movs	r1, #1
 2608 0010 2720     		movs	r0, #39
 2609              	.LVL300:
 2610 0012 FFF7FEFF 		bl	nRF24_verified_write_register
 2611              	.LVL301:
 817:Src/nRF24.c   **** }
 2612              		.loc 1 817 0
 2613 0016 03B0     		add	sp, sp, #12
 2614              	.LCFI78:
 2615              		.cfi_def_cfa_offset 4
 2616              		@ sp needed
 2617 0018 5DF804FB 		ldr	pc, [sp], #4
 2618              		.cfi_endproc
 2619              	.LFE165:
 2621              		.section	.text.nRF24_get_STATUS,"ax",%progbits
 2622              		.align	1
 2623              		.global	nRF24_get_STATUS
 2624              		.syntax unified
 2625              		.thumb
 2626              		.thumb_func
 2627              		.fpu fpv4-sp-d16
 2629              	nRF24_get_STATUS:
 2630              	.LFB166:
 818:Src/nRF24.c   **** 
 819:Src/nRF24.c   **** /**
 820:Src/nRF24.c   ****   * @brief      Read <STATUS> register from nRF24.
 821:Src/nRF24.c   ****   * @param      None.
 822:Src/nRF24.c   ****   * @retval     <STATUS> register value.
 823:Src/nRF24.c   **** 	* @note    Following masks can be used:
 824:Src/nRF24.c   ****   *   RX_DR_READMASK   
 825:Src/nRF24.c   ****   *   TX_DS_READMASK   
 826:Src/nRF24.c   ****   *   MAX_RT_READMASK  
 827:Src/nRF24.c   ****   *   RX_P_NO_READMASK    
 828:Src/nRF24.c   ****   *   TX_FULL_READMASK    
 829:Src/nRF24.c   ****   */
 830:Src/nRF24.c   **** uint8_t nRF24_get_STATUS(void) 
 831:Src/nRF24.c   **** {
 2631              		.loc 1 831 0
 2632              		.cfi_startproc
 2633              		@ args = 0, pretend = 0, frame = 8
 2634              		@ frame_needed = 0, uses_anonymous_args = 0
 2635 0000 00B5     		push	{lr}
 2636              	.LCFI79:
 2637              		.cfi_def_cfa_offset 4
 2638              		.cfi_offset 14, -4
 2639 0002 83B0     		sub	sp, sp, #12
 2640              	.LCFI80:
 2641              		.cfi_def_cfa_offset 16
 832:Src/nRF24.c   ****   uint8_t status;
 833:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
ARM GAS  /tmp/ccQFqAzx.s 			page 62


 2642              		.loc 1 833 0
 2643 0004 0DF10702 		add	r2, sp, #7
 2644 0008 0121     		movs	r1, #1
 2645 000a 0720     		movs	r0, #7
 2646 000c FFF7FEFF 		bl	spi_read_register
 2647              	.LVL302:
 834:Src/nRF24.c   ****   return status;
 835:Src/nRF24.c   **** }
 2648              		.loc 1 835 0
 2649 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2650 0014 03B0     		add	sp, sp, #12
 2651              	.LCFI81:
 2652              		.cfi_def_cfa_offset 4
 2653              		@ sp needed
 2654 0016 5DF804FB 		ldr	pc, [sp], #4
 2655              		.cfi_endproc
 2656              	.LFE166:
 2658              		.section	.text.nRF24_get_OBSERVE_TX,"ax",%progbits
 2659              		.align	1
 2660              		.global	nRF24_get_OBSERVE_TX
 2661              		.syntax unified
 2662              		.thumb
 2663              		.thumb_func
 2664              		.fpu fpv4-sp-d16
 2666              	nRF24_get_OBSERVE_TX:
 2667              	.LFB167:
 836:Src/nRF24.c   **** 
 837:Src/nRF24.c   **** 
 838:Src/nRF24.c   **** 
 839:Src/nRF24.c   **** /**
 840:Src/nRF24.c   ****   * @brief      Read <OBSERVE_TX> register from nRF24.
 841:Src/nRF24.c   ****   * @param      None.
 842:Src/nRF24.c   ****   * @retval     <OBSERVE_TX> register value.
 843:Src/nRF24.c   ****   */
 844:Src/nRF24.c   **** uint8_t nRF24_get_OBSERVE_TX()
 845:Src/nRF24.c   **** {
 2668              		.loc 1 845 0
 2669              		.cfi_startproc
 2670              		@ args = 0, pretend = 0, frame = 8
 2671              		@ frame_needed = 0, uses_anonymous_args = 0
 2672 0000 00B5     		push	{lr}
 2673              	.LCFI82:
 2674              		.cfi_def_cfa_offset 4
 2675              		.cfi_offset 14, -4
 2676 0002 83B0     		sub	sp, sp, #12
 2677              	.LCFI83:
 2678              		.cfi_def_cfa_offset 16
 846:Src/nRF24.c   **** 	#define PLOS_CNT_READMASK  0b1111 << 4
 847:Src/nRF24.c   **** 	#define ARC_CNT_READMASK   0b1111 << 0
 848:Src/nRF24.c   ****   uint8_t read_byte;
 849:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + OBSERVE_TX, 1, &read_byte);
 2679              		.loc 1 849 0
 2680 0004 0DF10702 		add	r2, sp, #7
 2681 0008 0121     		movs	r1, #1
 2682 000a 0820     		movs	r0, #8
 2683 000c FFF7FEFF 		bl	spi_read_register
 2684              	.LVL303:
ARM GAS  /tmp/ccQFqAzx.s 			page 63


 850:Src/nRF24.c   ****   return read_byte;
 851:Src/nRF24.c   **** }
 2685              		.loc 1 851 0
 2686 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2687 0014 03B0     		add	sp, sp, #12
 2688              	.LCFI84:
 2689              		.cfi_def_cfa_offset 4
 2690              		@ sp needed
 2691 0016 5DF804FB 		ldr	pc, [sp], #4
 2692              		.cfi_endproc
 2693              	.LFE167:
 2695              		.section	.text.nRF24_get_RPD,"ax",%progbits
 2696              		.align	1
 2697              		.global	nRF24_get_RPD
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2701              		.fpu fpv4-sp-d16
 2703              	nRF24_get_RPD:
 2704              	.LFB168:
 852:Src/nRF24.c   **** 
 853:Src/nRF24.c   **** /**
 854:Src/nRF24.c   ****   * @brief      Read <RPD> register from nRF24.
 855:Src/nRF24.c   ****   * @param      None.
 856:Src/nRF24.c   ****   * @retval     <RPD> register value.
 857:Src/nRF24.c   ****   */
 858:Src/nRF24.c   **** uint8_t nRF24_get_RPD() 
 859:Src/nRF24.c   **** {
 2705              		.loc 1 859 0
 2706              		.cfi_startproc
 2707              		@ args = 0, pretend = 0, frame = 8
 2708              		@ frame_needed = 0, uses_anonymous_args = 0
 2709 0000 00B5     		push	{lr}
 2710              	.LCFI85:
 2711              		.cfi_def_cfa_offset 4
 2712              		.cfi_offset 14, -4
 2713 0002 83B0     		sub	sp, sp, #12
 2714              	.LCFI86:
 2715              		.cfi_def_cfa_offset 16
 860:Src/nRF24.c   ****   uint8_t read_byte;
 861:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RPD, 1, &read_byte);
 2716              		.loc 1 861 0
 2717 0004 0DF10702 		add	r2, sp, #7
 2718 0008 0121     		movs	r1, #1
 2719 000a 0920     		movs	r0, #9
 2720 000c FFF7FEFF 		bl	spi_read_register
 2721              	.LVL304:
 862:Src/nRF24.c   ****   return read_byte;
 863:Src/nRF24.c   **** }
 2722              		.loc 1 863 0
 2723 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2724 0014 03B0     		add	sp, sp, #12
 2725              	.LCFI87:
 2726              		.cfi_def_cfa_offset 4
 2727              		@ sp needed
 2728 0016 5DF804FB 		ldr	pc, [sp], #4
 2729              		.cfi_endproc
ARM GAS  /tmp/ccQFqAzx.s 			page 64


 2730              	.LFE168:
 2732              		.section	.text.nRF24_set_RX_ADDR_P0,"ax",%progbits
 2733              		.align	1
 2734              		.global	nRF24_set_RX_ADDR_P0
 2735              		.syntax unified
 2736              		.thumb
 2737              		.thumb_func
 2738              		.fpu fpv4-sp-d16
 2740              	nRF24_set_RX_ADDR_P0:
 2741              	.LFB169:
 864:Src/nRF24.c   **** 
 865:Src/nRF24.c   **** 
 866:Src/nRF24.c   **** /**
 867:Src/nRF24.c   **** 	* @brief  Set RX (receive) address for data pipe 0. Least Significant Byte written first.
 868:Src/nRF24.c   **** 	* @param  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
 869:Src/nRF24.c   **** 	* @param  p_rx_addr_p0 Pointer to an array storing receive address for data pipe 0. 
 870:Src/nRF24.c   **** 	*           The array pointed should have a length of either 3, 4, or 5 bytes. 
 871:Src/nRF24.c   **** 	*           The SET_AW register determines the length of the address array. Default length is 5.
 872:Src/nRF24.c   **** 	* @retval None.
 873:Src/nRF24.c   **** 	*/
 874:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P0(uint8_t rx_addr_width, uint8_t* p_rx_addr_p0) 
 875:Src/nRF24.c   **** {
 2742              		.loc 1 875 0
 2743              		.cfi_startproc
 2744              		@ args = 0, pretend = 0, frame = 0
 2745              		@ frame_needed = 0, uses_anonymous_args = 0
 2746              	.LVL305:
 2747 0000 08B5     		push	{r3, lr}
 2748              	.LCFI88:
 2749              		.cfi_def_cfa_offset 8
 2750              		.cfi_offset 3, -8
 2751              		.cfi_offset 14, -4
 876:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P0, rx_addr_width, p_rx_addr_p0);
 2752              		.loc 1 876 0
 2753 0002 0A46     		mov	r2, r1
 2754 0004 0146     		mov	r1, r0
 2755              	.LVL306:
 2756 0006 2A20     		movs	r0, #42
 2757              	.LVL307:
 2758 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 2759              	.LVL308:
 2760 000c 08BD     		pop	{r3, pc}
 2761              		.cfi_endproc
 2762              	.LFE169:
 2764              		.section	.text.nRF24_get_RX_ADDR_P0,"ax",%progbits
 2765              		.align	1
 2766              		.global	nRF24_get_RX_ADDR_P0
 2767              		.syntax unified
 2768              		.thumb
 2769              		.thumb_func
 2770              		.fpu fpv4-sp-d16
 2772              	nRF24_get_RX_ADDR_P0:
 2773              	.LFB170:
 877:Src/nRF24.c   **** }
 878:Src/nRF24.c   **** 
 879:Src/nRF24.c   **** 
 880:Src/nRF24.c   **** /**
ARM GAS  /tmp/ccQFqAzx.s 			page 65


 881:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P0> register from nRF24.
 882:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
 883:Src/nRF24.c   **** 	* @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 0
 884:Src/nRF24.c   ****   * @retval     None.
 885:Src/nRF24.c   ****   */
 886:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P0(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
 887:Src/nRF24.c   **** {
 2774              		.loc 1 887 0
 2775              		.cfi_startproc
 2776              		@ args = 0, pretend = 0, frame = 0
 2777              		@ frame_needed = 0, uses_anonymous_args = 0
 2778              	.LVL309:
 2779 0000 08B5     		push	{r3, lr}
 2780              	.LCFI89:
 2781              		.cfi_def_cfa_offset 8
 2782              		.cfi_offset 3, -8
 2783              		.cfi_offset 14, -4
 888:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, rx_addr_width, p_read_buffer);
 2784              		.loc 1 888 0
 2785 0002 0A46     		mov	r2, r1
 2786 0004 0146     		mov	r1, r0
 2787              	.LVL310:
 2788 0006 0A20     		movs	r0, #10
 2789              	.LVL311:
 2790 0008 FFF7FEFF 		bl	spi_read_register
 2791              	.LVL312:
 2792 000c 08BD     		pop	{r3, pc}
 2793              		.cfi_endproc
 2794              	.LFE170:
 2796              		.section	.text.nRF24_set_RX_ADDR_P1,"ax",%progbits
 2797              		.align	1
 2798              		.global	nRF24_set_RX_ADDR_P1
 2799              		.syntax unified
 2800              		.thumb
 2801              		.thumb_func
 2802              		.fpu fpv4-sp-d16
 2804              	nRF24_set_RX_ADDR_P1:
 2805              	.LFB171:
 889:Src/nRF24.c   **** }
 890:Src/nRF24.c   **** 
 891:Src/nRF24.c   **** 
 892:Src/nRF24.c   **** /**
 893:Src/nRF24.c   **** 	* @brief  Set RX (receive) address for data pipe 1. Least Significant Byte written first.
 894:Src/nRF24.c   **** 	* @param  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
 895:Src/nRF24.c   **** 	* @param  p_rx_addr_p1 Pointer to an array storing receive address for data pipe 1. 
 896:Src/nRF24.c   **** 	*           The array pointed should have a length of either 3, 4, or 5 bytes. 
 897:Src/nRF24.c   **** 	*           The SET_AW register determines the length of the address array. Default length is 5.
 898:Src/nRF24.c   **** 	* @note   The RX data pipe 0 and pipe 1 and have totally different addresses. 
 899:Src/nRF24.c   **** 	*           However, for RX pipe 2,3,4,5 the [39:8] addresses byte need to be same as RX pipe 1.
 900:Src/nRF24.c   **** 	*           Given an example,
 901:Src/nRF24.c   **** 	*           RX_ADDR_P0 = 0xE7E7E7E7E7
 902:Src/nRF24.c   **** 	*           RX_ADDR_P1 = 0xC2C2C2C2C2
 903:Src/nRF24.c   **** 	*           RX_ADDR_P2 = 0x--------C3 = 0xC2C2C2C2C3
 904:Src/nRF24.c   **** 	*           RX_ADDR_P3 = 0x--------C4 = 0xC2C2C2C2C4
 905:Src/nRF24.c   **** 	*           RX_ADDR_P4 = 0x--------C5 = 0xC2C2C2C2C5
 906:Src/nRF24.c   **** 	*           RX_ADDR_P5 = 0x--------C6 = 0xC2C2C2C2C6
 907:Src/nRF24.c   **** 	* @retval None.
ARM GAS  /tmp/ccQFqAzx.s 			page 66


 908:Src/nRF24.c   **** 	*/
 909:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P1(uint8_t rx_addr_width, uint8_t* p_rx_addr_p1) 
 910:Src/nRF24.c   **** {
 2806              		.loc 1 910 0
 2807              		.cfi_startproc
 2808              		@ args = 0, pretend = 0, frame = 0
 2809              		@ frame_needed = 0, uses_anonymous_args = 0
 2810              	.LVL313:
 2811 0000 08B5     		push	{r3, lr}
 2812              	.LCFI90:
 2813              		.cfi_def_cfa_offset 8
 2814              		.cfi_offset 3, -8
 2815              		.cfi_offset 14, -4
 911:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P1, rx_addr_width, p_rx_addr_p1);
 2816              		.loc 1 911 0
 2817 0002 0A46     		mov	r2, r1
 2818 0004 0146     		mov	r1, r0
 2819              	.LVL314:
 2820 0006 2B20     		movs	r0, #43
 2821              	.LVL315:
 2822 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 2823              	.LVL316:
 2824 000c 08BD     		pop	{r3, pc}
 2825              		.cfi_endproc
 2826              	.LFE171:
 2828              		.section	.text.nRF24_get_RX_ADDR_P1,"ax",%progbits
 2829              		.align	1
 2830              		.global	nRF24_get_RX_ADDR_P1
 2831              		.syntax unified
 2832              		.thumb
 2833              		.thumb_func
 2834              		.fpu fpv4-sp-d16
 2836              	nRF24_get_RX_ADDR_P1:
 2837              	.LFB172:
 912:Src/nRF24.c   **** }
 913:Src/nRF24.c   **** 
 914:Src/nRF24.c   **** 
 915:Src/nRF24.c   **** /**
 916:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P1> register from nRF24.
 917:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
 918:Src/nRF24.c   **** 	* @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 1
 919:Src/nRF24.c   ****   * @retval     None.
 920:Src/nRF24.c   ****   */
 921:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P1(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
 922:Src/nRF24.c   **** {
 2838              		.loc 1 922 0
 2839              		.cfi_startproc
 2840              		@ args = 0, pretend = 0, frame = 0
 2841              		@ frame_needed = 0, uses_anonymous_args = 0
 2842              	.LVL317:
 2843 0000 08B5     		push	{r3, lr}
 2844              	.LCFI91:
 2845              		.cfi_def_cfa_offset 8
 2846              		.cfi_offset 3, -8
 2847              		.cfi_offset 14, -4
 923:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, rx_addr_width, p_read_buffer);
 2848              		.loc 1 923 0
ARM GAS  /tmp/ccQFqAzx.s 			page 67


 2849 0002 0A46     		mov	r2, r1
 2850 0004 0146     		mov	r1, r0
 2851              	.LVL318:
 2852 0006 0B20     		movs	r0, #11
 2853              	.LVL319:
 2854 0008 FFF7FEFF 		bl	spi_read_register
 2855              	.LVL320:
 2856 000c 08BD     		pop	{r3, pc}
 2857              		.cfi_endproc
 2858              	.LFE172:
 2860              		.section	.text.nRF24_set_RX_ADDR_P2,"ax",%progbits
 2861              		.align	1
 2862              		.global	nRF24_set_RX_ADDR_P2
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2866              		.fpu fpv4-sp-d16
 2868              	nRF24_set_RX_ADDR_P2:
 2869              	.LFB173:
 924:Src/nRF24.c   **** }
 925:Src/nRF24.c   **** 
 926:Src/nRF24.c   **** /**
 927:Src/nRF24.c   **** 	* @brief  Set RX (receive) address for data pipe 2. 
 928:Src/nRF24.c   **** 	* @param  rx_addr_p2 Byte storing receive address for data pipe 2. 
 929:Src/nRF24.c   **** 	*           rx_addr_p2 overwrite the Least Significant Byte on RX_ADDR_P1
 930:Src/nRF24.c   **** 	*           Given an example,
 931:Src/nRF24.c   **** 	*           RX_ADDR_P1 = 0xC2C2C2C2C2
 932:Src/nRF24.c   **** 	*           RX_ADDR_P2 = 0x--------C3 = 0xC2C2C2C2C3
 933:Src/nRF24.c   **** 	* @retval None.
 934:Src/nRF24.c   **** 	*/
 935:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P2(uint8_t rx_addr_p2) 
 936:Src/nRF24.c   **** {
 2870              		.loc 1 936 0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 8
 2873              		@ frame_needed = 0, uses_anonymous_args = 0
 2874              	.LVL321:
 2875 0000 00B5     		push	{lr}
 2876              	.LCFI92:
 2877              		.cfi_def_cfa_offset 4
 2878              		.cfi_offset 14, -4
 2879 0002 83B0     		sub	sp, sp, #12
 2880              	.LCFI93:
 2881              		.cfi_def_cfa_offset 16
 937:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 938:Src/nRF24.c   **** 	writing_byte |= rx_addr_p2;
 2882              		.loc 1 938 0
 2883 0004 02AA     		add	r2, sp, #8
 2884 0006 02F8010D 		strb	r0, [r2, #-1]!
 939:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P2, 1, &writing_byte);
 2885              		.loc 1 939 0
 2886 000a 0121     		movs	r1, #1
 2887 000c 2C20     		movs	r0, #44
 2888              	.LVL322:
 2889 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2890              	.LVL323:
 940:Src/nRF24.c   **** }
ARM GAS  /tmp/ccQFqAzx.s 			page 68


 2891              		.loc 1 940 0
 2892 0012 03B0     		add	sp, sp, #12
 2893              	.LCFI94:
 2894              		.cfi_def_cfa_offset 4
 2895              		@ sp needed
 2896 0014 5DF804FB 		ldr	pc, [sp], #4
 2897              		.cfi_endproc
 2898              	.LFE173:
 2900              		.section	.text.nRF24_get_RX_ADDR_P2,"ax",%progbits
 2901              		.align	1
 2902              		.global	nRF24_get_RX_ADDR_P2
 2903              		.syntax unified
 2904              		.thumb
 2905              		.thumb_func
 2906              		.fpu fpv4-sp-d16
 2908              	nRF24_get_RX_ADDR_P2:
 2909              	.LFB174:
 941:Src/nRF24.c   **** 
 942:Src/nRF24.c   **** 
 943:Src/nRF24.c   **** 
 944:Src/nRF24.c   **** /**
 945:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P2> register from nRF24.
 946:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
 947:Src/nRF24.c   **** 	* @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 2
 948:Src/nRF24.c   ****   * @retval     None.
 949:Src/nRF24.c   ****   */
 950:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P2(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
 951:Src/nRF24.c   **** {
 2910              		.loc 1 951 0
 2911              		.cfi_startproc
 2912              		@ args = 0, pretend = 0, frame = 0
 2913              		@ frame_needed = 0, uses_anonymous_args = 0
 2914              	.LVL324:
 2915 0000 08B5     		push	{r3, lr}
 2916              	.LCFI95:
 2917              		.cfi_def_cfa_offset 8
 2918              		.cfi_offset 3, -8
 2919              		.cfi_offset 14, -4
 952:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, rx_addr_width, p_read_buffer);
 2920              		.loc 1 952 0
 2921 0002 0A46     		mov	r2, r1
 2922 0004 0146     		mov	r1, r0
 2923              	.LVL325:
 2924 0006 0C20     		movs	r0, #12
 2925              	.LVL326:
 2926 0008 FFF7FEFF 		bl	spi_read_register
 2927              	.LVL327:
 2928 000c 08BD     		pop	{r3, pc}
 2929              		.cfi_endproc
 2930              	.LFE174:
 2932              		.section	.text.nRF24_set_RX_ADDR_P3,"ax",%progbits
 2933              		.align	1
 2934              		.global	nRF24_set_RX_ADDR_P3
 2935              		.syntax unified
 2936              		.thumb
 2937              		.thumb_func
 2938              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccQFqAzx.s 			page 69


 2940              	nRF24_set_RX_ADDR_P3:
 2941              	.LFB175:
 953:Src/nRF24.c   **** }
 954:Src/nRF24.c   **** 
 955:Src/nRF24.c   **** 
 956:Src/nRF24.c   **** /**
 957:Src/nRF24.c   **** 	* @brief  Set RX (receive) address for data pipe 3. 
 958:Src/nRF24.c   **** 	* @param  rx_addr_p3 Byte storing receive address for data pipe 3. 
 959:Src/nRF24.c   **** 	*           rx_addr_p3 overwrite the Least Significant Byte on RX_ADDR_P1
 960:Src/nRF24.c   **** 	*           Given an example,
 961:Src/nRF24.c   **** 	*           RX_ADDR_P1 = 0xC2C2C2C2C2
 962:Src/nRF24.c   **** 	*           RX_ADDR_P3 = 0x--------C4 = 0xC2C2C2C2C4
 963:Src/nRF24.c   **** 	* @retval None.
 964:Src/nRF24.c   **** 	*/
 965:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P3(uint8_t rx_addr_p3) 
 966:Src/nRF24.c   **** {
 2942              		.loc 1 966 0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 8
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 2946              	.LVL328:
 2947 0000 00B5     		push	{lr}
 2948              	.LCFI96:
 2949              		.cfi_def_cfa_offset 4
 2950              		.cfi_offset 14, -4
 2951 0002 83B0     		sub	sp, sp, #12
 2952              	.LCFI97:
 2953              		.cfi_def_cfa_offset 16
 967:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 968:Src/nRF24.c   **** 	writing_byte |= rx_addr_p3;
 2954              		.loc 1 968 0
 2955 0004 02AA     		add	r2, sp, #8
 2956 0006 02F8010D 		strb	r0, [r2, #-1]!
 969:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P3, 1, &writing_byte);
 2957              		.loc 1 969 0
 2958 000a 0121     		movs	r1, #1
 2959 000c 2D20     		movs	r0, #45
 2960              	.LVL329:
 2961 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2962              	.LVL330:
 970:Src/nRF24.c   **** }
 2963              		.loc 1 970 0
 2964 0012 03B0     		add	sp, sp, #12
 2965              	.LCFI98:
 2966              		.cfi_def_cfa_offset 4
 2967              		@ sp needed
 2968 0014 5DF804FB 		ldr	pc, [sp], #4
 2969              		.cfi_endproc
 2970              	.LFE175:
 2972              		.section	.text.nRF24_get_RX_ADDR_P3,"ax",%progbits
 2973              		.align	1
 2974              		.global	nRF24_get_RX_ADDR_P3
 2975              		.syntax unified
 2976              		.thumb
 2977              		.thumb_func
 2978              		.fpu fpv4-sp-d16
 2980              	nRF24_get_RX_ADDR_P3:
ARM GAS  /tmp/ccQFqAzx.s 			page 70


 2981              	.LFB176:
 971:Src/nRF24.c   **** 
 972:Src/nRF24.c   **** /**
 973:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P3> register from nRF24.
 974:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
 975:Src/nRF24.c   **** 	* @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 3
 976:Src/nRF24.c   ****   * @retval     None.
 977:Src/nRF24.c   ****   */
 978:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P3(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
 979:Src/nRF24.c   **** {
 2982              		.loc 1 979 0
 2983              		.cfi_startproc
 2984              		@ args = 0, pretend = 0, frame = 0
 2985              		@ frame_needed = 0, uses_anonymous_args = 0
 2986              	.LVL331:
 2987 0000 08B5     		push	{r3, lr}
 2988              	.LCFI99:
 2989              		.cfi_def_cfa_offset 8
 2990              		.cfi_offset 3, -8
 2991              		.cfi_offset 14, -4
 980:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, rx_addr_width, p_read_buffer);
 2992              		.loc 1 980 0
 2993 0002 0A46     		mov	r2, r1
 2994 0004 0146     		mov	r1, r0
 2995              	.LVL332:
 2996 0006 0D20     		movs	r0, #13
 2997              	.LVL333:
 2998 0008 FFF7FEFF 		bl	spi_read_register
 2999              	.LVL334:
 3000 000c 08BD     		pop	{r3, pc}
 3001              		.cfi_endproc
 3002              	.LFE176:
 3004              		.section	.text.nRF24_set_RX_ADDR_P4,"ax",%progbits
 3005              		.align	1
 3006              		.global	nRF24_set_RX_ADDR_P4
 3007              		.syntax unified
 3008              		.thumb
 3009              		.thumb_func
 3010              		.fpu fpv4-sp-d16
 3012              	nRF24_set_RX_ADDR_P4:
 3013              	.LFB177:
 981:Src/nRF24.c   **** }
 982:Src/nRF24.c   **** 
 983:Src/nRF24.c   **** /**
 984:Src/nRF24.c   **** 	* @brief  Set RX (receive) address for data pipe 4.
 985:Src/nRF24.c   **** 	* @param  rx_addr_p4 Byte storing receive address for data pipe 4. 
 986:Src/nRF24.c   **** 	*           rx_addr_p4 overwrite the Least Significant Byte on RX_ADDR_P1
 987:Src/nRF24.c   **** 	*           Given an example,
 988:Src/nRF24.c   **** 	*           RX_ADDR_P1 = 0xC2C2C2C2C2
 989:Src/nRF24.c   **** 	*           RX_ADDR_P4 = 0x--------C5 = 0xC2C2C2C2C5
 990:Src/nRF24.c   **** 	* @retval None.
 991:Src/nRF24.c   **** 	*/
 992:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P4(uint8_t rx_addr_p4) 
 993:Src/nRF24.c   **** {
 3014              		.loc 1 993 0
 3015              		.cfi_startproc
 3016              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccQFqAzx.s 			page 71


 3017              		@ frame_needed = 0, uses_anonymous_args = 0
 3018              	.LVL335:
 3019 0000 00B5     		push	{lr}
 3020              	.LCFI100:
 3021              		.cfi_def_cfa_offset 4
 3022              		.cfi_offset 14, -4
 3023 0002 83B0     		sub	sp, sp, #12
 3024              	.LCFI101:
 3025              		.cfi_def_cfa_offset 16
 994:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 995:Src/nRF24.c   **** 	writing_byte |= rx_addr_p4;
 3026              		.loc 1 995 0
 3027 0004 02AA     		add	r2, sp, #8
 3028 0006 02F8010D 		strb	r0, [r2, #-1]!
 996:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P4, 1, &writing_byte);
 3029              		.loc 1 996 0
 3030 000a 0121     		movs	r1, #1
 3031 000c 2E20     		movs	r0, #46
 3032              	.LVL336:
 3033 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3034              	.LVL337:
 997:Src/nRF24.c   **** }
 3035              		.loc 1 997 0
 3036 0012 03B0     		add	sp, sp, #12
 3037              	.LCFI102:
 3038              		.cfi_def_cfa_offset 4
 3039              		@ sp needed
 3040 0014 5DF804FB 		ldr	pc, [sp], #4
 3041              		.cfi_endproc
 3042              	.LFE177:
 3044              		.section	.text.nRF24_get_RX_ADDR_P4,"ax",%progbits
 3045              		.align	1
 3046              		.global	nRF24_get_RX_ADDR_P4
 3047              		.syntax unified
 3048              		.thumb
 3049              		.thumb_func
 3050              		.fpu fpv4-sp-d16
 3052              	nRF24_get_RX_ADDR_P4:
 3053              	.LFB178:
 998:Src/nRF24.c   **** 
 999:Src/nRF24.c   **** /**
1000:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P4> register from nRF24.
1001:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1002:Src/nRF24.c   **** 	* @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 4
1003:Src/nRF24.c   ****   * @retval     None.
1004:Src/nRF24.c   ****   */
1005:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P4(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1006:Src/nRF24.c   **** {
 3054              		.loc 1 1006 0
 3055              		.cfi_startproc
 3056              		@ args = 0, pretend = 0, frame = 0
 3057              		@ frame_needed = 0, uses_anonymous_args = 0
 3058              	.LVL338:
 3059 0000 08B5     		push	{r3, lr}
 3060              	.LCFI103:
 3061              		.cfi_def_cfa_offset 8
 3062              		.cfi_offset 3, -8
ARM GAS  /tmp/ccQFqAzx.s 			page 72


 3063              		.cfi_offset 14, -4
1007:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, rx_addr_width, p_read_buffer);
 3064              		.loc 1 1007 0
 3065 0002 0A46     		mov	r2, r1
 3066 0004 0146     		mov	r1, r0
 3067              	.LVL339:
 3068 0006 0E20     		movs	r0, #14
 3069              	.LVL340:
 3070 0008 FFF7FEFF 		bl	spi_read_register
 3071              	.LVL341:
 3072 000c 08BD     		pop	{r3, pc}
 3073              		.cfi_endproc
 3074              	.LFE178:
 3076              		.section	.text.nRF24_set_RX_ADDR_P5,"ax",%progbits
 3077              		.align	1
 3078              		.global	nRF24_set_RX_ADDR_P5
 3079              		.syntax unified
 3080              		.thumb
 3081              		.thumb_func
 3082              		.fpu fpv4-sp-d16
 3084              	nRF24_set_RX_ADDR_P5:
 3085              	.LFB179:
1008:Src/nRF24.c   **** }
1009:Src/nRF24.c   **** 
1010:Src/nRF24.c   **** /**
1011:Src/nRF24.c   **** 	* @brief  Set RX (receive) address for data pipe 5.
1012:Src/nRF24.c   **** 	* @param  rx_addr_p5 Byte storing receive address for data pipe 5. 
1013:Src/nRF24.c   **** 	*           rx_addr_p5 overwrite the Least Significant Byte on RX_ADDR_P1
1014:Src/nRF24.c   **** 	*           Given an example,
1015:Src/nRF24.c   **** 	*           RX_ADDR_P1 = 0xC2C2C2C2C2
1016:Src/nRF24.c   **** 	*           RX_ADDR_P5 = 0x--------C6 = 0xC2C2C2C2C6
1017:Src/nRF24.c   **** 	* @retval None.
1018:Src/nRF24.c   **** 	*/
1019:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P5(uint8_t rx_addr_p5) 
1020:Src/nRF24.c   **** {
 3086              		.loc 1 1020 0
 3087              		.cfi_startproc
 3088              		@ args = 0, pretend = 0, frame = 8
 3089              		@ frame_needed = 0, uses_anonymous_args = 0
 3090              	.LVL342:
 3091 0000 00B5     		push	{lr}
 3092              	.LCFI104:
 3093              		.cfi_def_cfa_offset 4
 3094              		.cfi_offset 14, -4
 3095 0002 83B0     		sub	sp, sp, #12
 3096              	.LCFI105:
 3097              		.cfi_def_cfa_offset 16
1021:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1022:Src/nRF24.c   **** 	writing_byte |= rx_addr_p5;
 3098              		.loc 1 1022 0
 3099 0004 02AA     		add	r2, sp, #8
 3100 0006 02F8010D 		strb	r0, [r2, #-1]!
1023:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P5, 1, &writing_byte);
 3101              		.loc 1 1023 0
 3102 000a 0121     		movs	r1, #1
 3103 000c 2F20     		movs	r0, #47
 3104              	.LVL343:
ARM GAS  /tmp/ccQFqAzx.s 			page 73


 3105 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3106              	.LVL344:
1024:Src/nRF24.c   **** }
 3107              		.loc 1 1024 0
 3108 0012 03B0     		add	sp, sp, #12
 3109              	.LCFI106:
 3110              		.cfi_def_cfa_offset 4
 3111              		@ sp needed
 3112 0014 5DF804FB 		ldr	pc, [sp], #4
 3113              		.cfi_endproc
 3114              	.LFE179:
 3116              		.section	.text.nRF24_get_RX_ADDR_P5,"ax",%progbits
 3117              		.align	1
 3118              		.global	nRF24_get_RX_ADDR_P5
 3119              		.syntax unified
 3120              		.thumb
 3121              		.thumb_func
 3122              		.fpu fpv4-sp-d16
 3124              	nRF24_get_RX_ADDR_P5:
 3125              	.LFB180:
1025:Src/nRF24.c   **** 
1026:Src/nRF24.c   **** 
1027:Src/nRF24.c   **** /**
1028:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P5> register from nRF24.
1029:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1030:Src/nRF24.c   **** 	* @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 5
1031:Src/nRF24.c   ****   * @retval     None.
1032:Src/nRF24.c   ****   */
1033:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P5(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1034:Src/nRF24.c   **** {
 3126              		.loc 1 1034 0
 3127              		.cfi_startproc
 3128              		@ args = 0, pretend = 0, frame = 0
 3129              		@ frame_needed = 0, uses_anonymous_args = 0
 3130              	.LVL345:
 3131 0000 08B5     		push	{r3, lr}
 3132              	.LCFI107:
 3133              		.cfi_def_cfa_offset 8
 3134              		.cfi_offset 3, -8
 3135              		.cfi_offset 14, -4
1035:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P5, rx_addr_width, p_read_buffer);
 3136              		.loc 1 1035 0
 3137 0002 0A46     		mov	r2, r1
 3138 0004 0146     		mov	r1, r0
 3139              	.LVL346:
 3140 0006 0F20     		movs	r0, #15
 3141              	.LVL347:
 3142 0008 FFF7FEFF 		bl	spi_read_register
 3143              	.LVL348:
 3144 000c 08BD     		pop	{r3, pc}
 3145              		.cfi_endproc
 3146              	.LFE180:
 3148              		.section	.text.nRF24_set_TX_ADDR,"ax",%progbits
 3149              		.align	1
 3150              		.global	nRF24_set_TX_ADDR
 3151              		.syntax unified
 3152              		.thumb
ARM GAS  /tmp/ccQFqAzx.s 			page 74


 3153              		.thumb_func
 3154              		.fpu fpv4-sp-d16
 3156              	nRF24_set_TX_ADDR:
 3157              	.LFB181:
1036:Src/nRF24.c   **** }
1037:Src/nRF24.c   **** 
1038:Src/nRF24.c   **** /**
1039:Src/nRF24.c   **** 	* @brief  Set TX (transmit) address. Least Significant Byte written first.
1040:Src/nRF24.c   **** 	* @param  tx_addr_width The width of TX address. Needs to be consistent with SET_AW.
1041:Src/nRF24.c   **** 	* @param  p_tx_addr Pointer to an array storing the transmit address.
1042:Src/nRF24.c   **** 	* @retval None.
1043:Src/nRF24.c   **** 	*/
1044:Src/nRF24.c   **** void nRF24_set_TX_ADDR(uint8_t tx_addr_width, uint8_t* p_tx_addr) 
1045:Src/nRF24.c   **** {
 3158              		.loc 1 1045 0
 3159              		.cfi_startproc
 3160              		@ args = 0, pretend = 0, frame = 0
 3161              		@ frame_needed = 0, uses_anonymous_args = 0
 3162              	.LVL349:
 3163 0000 08B5     		push	{r3, lr}
 3164              	.LCFI108:
 3165              		.cfi_def_cfa_offset 8
 3166              		.cfi_offset 3, -8
 3167              		.cfi_offset 14, -4
1046:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + TX_ADDR, tx_addr_width, p_tx_addr);
 3168              		.loc 1 1046 0
 3169 0002 0A46     		mov	r2, r1
 3170 0004 0146     		mov	r1, r0
 3171              	.LVL350:
 3172 0006 3020     		movs	r0, #48
 3173              	.LVL351:
 3174 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 3175              	.LVL352:
 3176 000c 08BD     		pop	{r3, pc}
 3177              		.cfi_endproc
 3178              	.LFE181:
 3180              		.section	.text.nRF24_get_TX_ADDR,"ax",%progbits
 3181              		.align	1
 3182              		.global	nRF24_get_TX_ADDR
 3183              		.syntax unified
 3184              		.thumb
 3185              		.thumb_func
 3186              		.fpu fpv4-sp-d16
 3188              	nRF24_get_TX_ADDR:
 3189              	.LFB182:
1047:Src/nRF24.c   **** }
1048:Src/nRF24.c   **** 
1049:Src/nRF24.c   **** 
1050:Src/nRF24.c   **** /**
1051:Src/nRF24.c   ****   * @brief      Read <TX_ADDR> register from nRF24.
1052:Src/nRF24.c   ****   * @param[in]  tx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1053:Src/nRF24.c   **** 	* @param[out] p_read_buffer Pointer to an array that's used to store the read TX address.
1054:Src/nRF24.c   ****   * @retval     None.
1055:Src/nRF24.c   ****   */
1056:Src/nRF24.c   **** void nRF24_get_TX_ADDR(uint8_t tx_addr_width, uint8_t* p_read_buffer) 
1057:Src/nRF24.c   **** {
 3190              		.loc 1 1057 0
ARM GAS  /tmp/ccQFqAzx.s 			page 75


 3191              		.cfi_startproc
 3192              		@ args = 0, pretend = 0, frame = 0
 3193              		@ frame_needed = 0, uses_anonymous_args = 0
 3194              	.LVL353:
 3195 0000 08B5     		push	{r3, lr}
 3196              	.LCFI109:
 3197              		.cfi_def_cfa_offset 8
 3198              		.cfi_offset 3, -8
 3199              		.cfi_offset 14, -4
1058:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P5, tx_addr_width, p_read_buffer);
 3200              		.loc 1 1058 0
 3201 0002 0A46     		mov	r2, r1
 3202 0004 0146     		mov	r1, r0
 3203              	.LVL354:
 3204 0006 0F20     		movs	r0, #15
 3205              	.LVL355:
 3206 0008 FFF7FEFF 		bl	spi_read_register
 3207              	.LVL356:
 3208 000c 08BD     		pop	{r3, pc}
 3209              		.cfi_endproc
 3210              	.LFE182:
 3212              		.section	.text.nRF24_set_RX_PW_P0,"ax",%progbits
 3213              		.align	1
 3214              		.global	nRF24_set_RX_PW_P0
 3215              		.syntax unified
 3216              		.thumb
 3217              		.thumb_func
 3218              		.fpu fpv4-sp-d16
 3220              	nRF24_set_RX_PW_P0:
 3221              	.LFB183:
1059:Src/nRF24.c   **** }
1060:Src/nRF24.c   **** 
1061:Src/nRF24.c   **** /**
1062:Src/nRF24.c   **** 	* @brief Set number of bytes in RX payload in data pipe 0.
1063:Src/nRF24.c   **** 	* @param rx_pw_p0 Number of bytes. 
1064:Src/nRF24.c   **** 	*          0 = pipe not used.
1065:Src/nRF24.c   **** 	*          1 = 1 byte.
1066:Src/nRF24.c   **** 	*          2 = 2 bytes.
1067:Src/nRF24.c   **** 	*          ...
1068:Src/nRF24.c   **** 	*          32 = 32 bytes.
1069:Src/nRF24.c   **** 	*/
1070:Src/nRF24.c   **** void nRF24_set_RX_PW_P0(uint8_t rx_pw_p0) 
1071:Src/nRF24.c   **** {
 3222              		.loc 1 1071 0
 3223              		.cfi_startproc
 3224              		@ args = 0, pretend = 0, frame = 8
 3225              		@ frame_needed = 0, uses_anonymous_args = 0
 3226              	.LVL357:
 3227 0000 00B5     		push	{lr}
 3228              	.LCFI110:
 3229              		.cfi_def_cfa_offset 4
 3230              		.cfi_offset 14, -4
 3231 0002 83B0     		sub	sp, sp, #12
 3232              	.LCFI111:
 3233              		.cfi_def_cfa_offset 16
1072:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1073:Src/nRF24.c   **** 	writing_byte |= rx_pw_p0;
ARM GAS  /tmp/ccQFqAzx.s 			page 76


 3234              		.loc 1 1073 0
 3235 0004 02AA     		add	r2, sp, #8
 3236 0006 02F8010D 		strb	r0, [r2, #-1]!
1074:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P0, 1, &writing_byte);
 3237              		.loc 1 1074 0
 3238 000a 0121     		movs	r1, #1
 3239 000c 3120     		movs	r0, #49
 3240              	.LVL358:
 3241 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3242              	.LVL359:
1075:Src/nRF24.c   **** }
 3243              		.loc 1 1075 0
 3244 0012 03B0     		add	sp, sp, #12
 3245              	.LCFI112:
 3246              		.cfi_def_cfa_offset 4
 3247              		@ sp needed
 3248 0014 5DF804FB 		ldr	pc, [sp], #4
 3249              		.cfi_endproc
 3250              	.LFE183:
 3252              		.section	.text.nRF24_get_RX_PW_P0,"ax",%progbits
 3253              		.align	1
 3254              		.global	nRF24_get_RX_PW_P0
 3255              		.syntax unified
 3256              		.thumb
 3257              		.thumb_func
 3258              		.fpu fpv4-sp-d16
 3260              	nRF24_get_RX_PW_P0:
 3261              	.LFB184:
1076:Src/nRF24.c   **** 
1077:Src/nRF24.c   **** 
1078:Src/nRF24.c   **** /**
1079:Src/nRF24.c   ****   * @brief      Read <RX_PW_P0> register from nRF24.
1080:Src/nRF24.c   ****   * @param      None.
1081:Src/nRF24.c   ****   * @retval     <RX_PW_P0> register value.
1082:Src/nRF24.c   ****   */
1083:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P0() 
1084:Src/nRF24.c   **** {
 3262              		.loc 1 1084 0
 3263              		.cfi_startproc
 3264              		@ args = 0, pretend = 0, frame = 8
 3265              		@ frame_needed = 0, uses_anonymous_args = 0
 3266 0000 00B5     		push	{lr}
 3267              	.LCFI113:
 3268              		.cfi_def_cfa_offset 4
 3269              		.cfi_offset 14, -4
 3270 0002 83B0     		sub	sp, sp, #12
 3271              	.LCFI114:
 3272              		.cfi_def_cfa_offset 16
1085:Src/nRF24.c   ****   uint8_t read_byte;
1086:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P0, 1, &read_byte);
 3273              		.loc 1 1086 0
 3274 0004 0DF10702 		add	r2, sp, #7
 3275 0008 0121     		movs	r1, #1
 3276 000a 1120     		movs	r0, #17
 3277 000c FFF7FEFF 		bl	spi_read_register
 3278              	.LVL360:
1087:Src/nRF24.c   ****   return read_byte;
ARM GAS  /tmp/ccQFqAzx.s 			page 77


1088:Src/nRF24.c   **** }
 3279              		.loc 1 1088 0
 3280 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3281 0014 03B0     		add	sp, sp, #12
 3282              	.LCFI115:
 3283              		.cfi_def_cfa_offset 4
 3284              		@ sp needed
 3285 0016 5DF804FB 		ldr	pc, [sp], #4
 3286              		.cfi_endproc
 3287              	.LFE184:
 3289              		.section	.text.nRF24_set_RX_PW_P1,"ax",%progbits
 3290              		.align	1
 3291              		.global	nRF24_set_RX_PW_P1
 3292              		.syntax unified
 3293              		.thumb
 3294              		.thumb_func
 3295              		.fpu fpv4-sp-d16
 3297              	nRF24_set_RX_PW_P1:
 3298              	.LFB185:
1089:Src/nRF24.c   **** 
1090:Src/nRF24.c   **** 
1091:Src/nRF24.c   **** /**
1092:Src/nRF24.c   **** 	* @brief Set number of bytes in RX payload in data pipe 1.
1093:Src/nRF24.c   **** 	* @param rx_pw_p1 Number of bytes. 
1094:Src/nRF24.c   **** 	*          0 = pipe not used.
1095:Src/nRF24.c   **** 	*          1 = 1 byte.
1096:Src/nRF24.c   **** 	*          2 = 2 bytes.
1097:Src/nRF24.c   **** 	*          ...
1098:Src/nRF24.c   **** 	*          32 = 32 bytes.
1099:Src/nRF24.c   **** 	* @retval None.
1100:Src/nRF24.c   **** 	*/
1101:Src/nRF24.c   **** void nRF24_set_RX_PW_P1(uint8_t rx_pw_p1) 
1102:Src/nRF24.c   **** {
 3299              		.loc 1 1102 0
 3300              		.cfi_startproc
 3301              		@ args = 0, pretend = 0, frame = 8
 3302              		@ frame_needed = 0, uses_anonymous_args = 0
 3303              	.LVL361:
 3304 0000 00B5     		push	{lr}
 3305              	.LCFI116:
 3306              		.cfi_def_cfa_offset 4
 3307              		.cfi_offset 14, -4
 3308 0002 83B0     		sub	sp, sp, #12
 3309              	.LCFI117:
 3310              		.cfi_def_cfa_offset 16
1103:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1104:Src/nRF24.c   **** 	writing_byte |= rx_pw_p1;
 3311              		.loc 1 1104 0
 3312 0004 02AA     		add	r2, sp, #8
 3313 0006 02F8010D 		strb	r0, [r2, #-1]!
1105:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P1, 1, &writing_byte);
 3314              		.loc 1 1105 0
 3315 000a 0121     		movs	r1, #1
 3316 000c 3220     		movs	r0, #50
 3317              	.LVL362:
 3318 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3319              	.LVL363:
ARM GAS  /tmp/ccQFqAzx.s 			page 78


1106:Src/nRF24.c   **** }
 3320              		.loc 1 1106 0
 3321 0012 03B0     		add	sp, sp, #12
 3322              	.LCFI118:
 3323              		.cfi_def_cfa_offset 4
 3324              		@ sp needed
 3325 0014 5DF804FB 		ldr	pc, [sp], #4
 3326              		.cfi_endproc
 3327              	.LFE185:
 3329              		.section	.text.nRF24_get_RX_PW_P1,"ax",%progbits
 3330              		.align	1
 3331              		.global	nRF24_get_RX_PW_P1
 3332              		.syntax unified
 3333              		.thumb
 3334              		.thumb_func
 3335              		.fpu fpv4-sp-d16
 3337              	nRF24_get_RX_PW_P1:
 3338              	.LFB186:
1107:Src/nRF24.c   **** 
1108:Src/nRF24.c   **** 
1109:Src/nRF24.c   **** /**
1110:Src/nRF24.c   ****   * @brief      Read <RX_PW_P1> register from nRF24.
1111:Src/nRF24.c   ****   * @param      None.
1112:Src/nRF24.c   ****   * @retval     <RX_PW_P1> register value.
1113:Src/nRF24.c   ****   */
1114:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P1() 
1115:Src/nRF24.c   **** {
 3339              		.loc 1 1115 0
 3340              		.cfi_startproc
 3341              		@ args = 0, pretend = 0, frame = 8
 3342              		@ frame_needed = 0, uses_anonymous_args = 0
 3343 0000 00B5     		push	{lr}
 3344              	.LCFI119:
 3345              		.cfi_def_cfa_offset 4
 3346              		.cfi_offset 14, -4
 3347 0002 83B0     		sub	sp, sp, #12
 3348              	.LCFI120:
 3349              		.cfi_def_cfa_offset 16
1116:Src/nRF24.c   ****   uint8_t read_byte;
1117:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P1, 1, &read_byte);
 3350              		.loc 1 1117 0
 3351 0004 0DF10702 		add	r2, sp, #7
 3352 0008 0121     		movs	r1, #1
 3353 000a 1220     		movs	r0, #18
 3354 000c FFF7FEFF 		bl	spi_read_register
 3355              	.LVL364:
1118:Src/nRF24.c   ****   return read_byte;
1119:Src/nRF24.c   **** }
 3356              		.loc 1 1119 0
 3357 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3358 0014 03B0     		add	sp, sp, #12
 3359              	.LCFI121:
 3360              		.cfi_def_cfa_offset 4
 3361              		@ sp needed
 3362 0016 5DF804FB 		ldr	pc, [sp], #4
 3363              		.cfi_endproc
 3364              	.LFE186:
ARM GAS  /tmp/ccQFqAzx.s 			page 79


 3366              		.section	.text.nRF24_set_RX_PW_P2,"ax",%progbits
 3367              		.align	1
 3368              		.global	nRF24_set_RX_PW_P2
 3369              		.syntax unified
 3370              		.thumb
 3371              		.thumb_func
 3372              		.fpu fpv4-sp-d16
 3374              	nRF24_set_RX_PW_P2:
 3375              	.LFB187:
1120:Src/nRF24.c   **** 
1121:Src/nRF24.c   **** 
1122:Src/nRF24.c   **** /**
1123:Src/nRF24.c   **** 	* @brief Set number of bytes in RX payload in data pipe 2.
1124:Src/nRF24.c   **** 	* @param rx_pw_p2 Number of bytes. 
1125:Src/nRF24.c   **** 	*          0 = pipe not used.
1126:Src/nRF24.c   **** 	*          1 = 1 byte.
1127:Src/nRF24.c   **** 	*          2 = 2 bytes.
1128:Src/nRF24.c   **** 	*          ...
1129:Src/nRF24.c   **** 	*          32 = 32 bytes.
1130:Src/nRF24.c   **** 	* @retval None.
1131:Src/nRF24.c   **** 	*/
1132:Src/nRF24.c   **** void nRF24_set_RX_PW_P2(uint8_t rx_pw_p2) 
1133:Src/nRF24.c   **** {
 3376              		.loc 1 1133 0
 3377              		.cfi_startproc
 3378              		@ args = 0, pretend = 0, frame = 8
 3379              		@ frame_needed = 0, uses_anonymous_args = 0
 3380              	.LVL365:
 3381 0000 00B5     		push	{lr}
 3382              	.LCFI122:
 3383              		.cfi_def_cfa_offset 4
 3384              		.cfi_offset 14, -4
 3385 0002 83B0     		sub	sp, sp, #12
 3386              	.LCFI123:
 3387              		.cfi_def_cfa_offset 16
1134:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1135:Src/nRF24.c   **** 	writing_byte |= rx_pw_p2;
 3388              		.loc 1 1135 0
 3389 0004 02AA     		add	r2, sp, #8
 3390 0006 02F8010D 		strb	r0, [r2, #-1]!
1136:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P2, 1, &writing_byte);
 3391              		.loc 1 1136 0
 3392 000a 0121     		movs	r1, #1
 3393 000c 3320     		movs	r0, #51
 3394              	.LVL366:
 3395 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3396              	.LVL367:
1137:Src/nRF24.c   **** }
 3397              		.loc 1 1137 0
 3398 0012 03B0     		add	sp, sp, #12
 3399              	.LCFI124:
 3400              		.cfi_def_cfa_offset 4
 3401              		@ sp needed
 3402 0014 5DF804FB 		ldr	pc, [sp], #4
 3403              		.cfi_endproc
 3404              	.LFE187:
 3406              		.section	.text.nRF24_get_RX_PW_P2,"ax",%progbits
ARM GAS  /tmp/ccQFqAzx.s 			page 80


 3407              		.align	1
 3408              		.global	nRF24_get_RX_PW_P2
 3409              		.syntax unified
 3410              		.thumb
 3411              		.thumb_func
 3412              		.fpu fpv4-sp-d16
 3414              	nRF24_get_RX_PW_P2:
 3415              	.LFB188:
1138:Src/nRF24.c   **** 
1139:Src/nRF24.c   **** 
1140:Src/nRF24.c   **** /**
1141:Src/nRF24.c   ****   * @brief      Read <RX_PW_P2> register from nRF24.
1142:Src/nRF24.c   ****   * @param      None.
1143:Src/nRF24.c   ****   * @retval     <RX_PW_P2> register value.
1144:Src/nRF24.c   ****   */
1145:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P2() 
1146:Src/nRF24.c   **** {
 3416              		.loc 1 1146 0
 3417              		.cfi_startproc
 3418              		@ args = 0, pretend = 0, frame = 8
 3419              		@ frame_needed = 0, uses_anonymous_args = 0
 3420 0000 00B5     		push	{lr}
 3421              	.LCFI125:
 3422              		.cfi_def_cfa_offset 4
 3423              		.cfi_offset 14, -4
 3424 0002 83B0     		sub	sp, sp, #12
 3425              	.LCFI126:
 3426              		.cfi_def_cfa_offset 16
1147:Src/nRF24.c   ****   uint8_t read_byte;
1148:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P2, 1, &read_byte);
 3427              		.loc 1 1148 0
 3428 0004 0DF10702 		add	r2, sp, #7
 3429 0008 0121     		movs	r1, #1
 3430 000a 1320     		movs	r0, #19
 3431 000c FFF7FEFF 		bl	spi_read_register
 3432              	.LVL368:
1149:Src/nRF24.c   ****   return read_byte;
1150:Src/nRF24.c   **** }
 3433              		.loc 1 1150 0
 3434 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3435 0014 03B0     		add	sp, sp, #12
 3436              	.LCFI127:
 3437              		.cfi_def_cfa_offset 4
 3438              		@ sp needed
 3439 0016 5DF804FB 		ldr	pc, [sp], #4
 3440              		.cfi_endproc
 3441              	.LFE188:
 3443              		.section	.text.nRF24_set_RX_PW_P3,"ax",%progbits
 3444              		.align	1
 3445              		.global	nRF24_set_RX_PW_P3
 3446              		.syntax unified
 3447              		.thumb
 3448              		.thumb_func
 3449              		.fpu fpv4-sp-d16
 3451              	nRF24_set_RX_PW_P3:
 3452              	.LFB189:
1151:Src/nRF24.c   **** 
ARM GAS  /tmp/ccQFqAzx.s 			page 81


1152:Src/nRF24.c   **** 
1153:Src/nRF24.c   **** /**
1154:Src/nRF24.c   **** 	* @brief Set number of bytes in RX payload in data pipe 3.
1155:Src/nRF24.c   **** 	* @param rx_pw_p3 Number of bytes. 
1156:Src/nRF24.c   **** 	*          0 = pipe not used.
1157:Src/nRF24.c   **** 	*          1 = 1 byte.
1158:Src/nRF24.c   **** 	*          2 = 2 bytes.
1159:Src/nRF24.c   **** 	*          ...
1160:Src/nRF24.c   **** 	*          32 = 32 bytes.
1161:Src/nRF24.c   **** 	* @retval None.
1162:Src/nRF24.c   **** 	*/
1163:Src/nRF24.c   **** void nRF24_set_RX_PW_P3(uint8_t rx_pw_p3) 
1164:Src/nRF24.c   **** {
 3453              		.loc 1 1164 0
 3454              		.cfi_startproc
 3455              		@ args = 0, pretend = 0, frame = 8
 3456              		@ frame_needed = 0, uses_anonymous_args = 0
 3457              	.LVL369:
 3458 0000 00B5     		push	{lr}
 3459              	.LCFI128:
 3460              		.cfi_def_cfa_offset 4
 3461              		.cfi_offset 14, -4
 3462 0002 83B0     		sub	sp, sp, #12
 3463              	.LCFI129:
 3464              		.cfi_def_cfa_offset 16
1165:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1166:Src/nRF24.c   **** 	writing_byte |= rx_pw_p3;
 3465              		.loc 1 1166 0
 3466 0004 02AA     		add	r2, sp, #8
 3467 0006 02F8010D 		strb	r0, [r2, #-1]!
1167:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P3, 1, &writing_byte);
 3468              		.loc 1 1167 0
 3469 000a 0121     		movs	r1, #1
 3470 000c 3420     		movs	r0, #52
 3471              	.LVL370:
 3472 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3473              	.LVL371:
1168:Src/nRF24.c   **** }
 3474              		.loc 1 1168 0
 3475 0012 03B0     		add	sp, sp, #12
 3476              	.LCFI130:
 3477              		.cfi_def_cfa_offset 4
 3478              		@ sp needed
 3479 0014 5DF804FB 		ldr	pc, [sp], #4
 3480              		.cfi_endproc
 3481              	.LFE189:
 3483              		.section	.text.nRF24_get_RX_PW_P3,"ax",%progbits
 3484              		.align	1
 3485              		.global	nRF24_get_RX_PW_P3
 3486              		.syntax unified
 3487              		.thumb
 3488              		.thumb_func
 3489              		.fpu fpv4-sp-d16
 3491              	nRF24_get_RX_PW_P3:
 3492              	.LFB190:
1169:Src/nRF24.c   **** 
1170:Src/nRF24.c   **** /**
ARM GAS  /tmp/ccQFqAzx.s 			page 82


1171:Src/nRF24.c   ****   * @brief      Read <RX_PW_P3> register from nRF24.
1172:Src/nRF24.c   ****   * @param      None.
1173:Src/nRF24.c   ****   * @retval     <RX_PW_P3> register value.
1174:Src/nRF24.c   ****   */
1175:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P3() 
1176:Src/nRF24.c   **** {
 3493              		.loc 1 1176 0
 3494              		.cfi_startproc
 3495              		@ args = 0, pretend = 0, frame = 8
 3496              		@ frame_needed = 0, uses_anonymous_args = 0
 3497 0000 00B5     		push	{lr}
 3498              	.LCFI131:
 3499              		.cfi_def_cfa_offset 4
 3500              		.cfi_offset 14, -4
 3501 0002 83B0     		sub	sp, sp, #12
 3502              	.LCFI132:
 3503              		.cfi_def_cfa_offset 16
1177:Src/nRF24.c   ****   uint8_t read_byte;
1178:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P3, 1, &read_byte);
 3504              		.loc 1 1178 0
 3505 0004 0DF10702 		add	r2, sp, #7
 3506 0008 0121     		movs	r1, #1
 3507 000a 1420     		movs	r0, #20
 3508 000c FFF7FEFF 		bl	spi_read_register
 3509              	.LVL372:
1179:Src/nRF24.c   ****   return read_byte;
1180:Src/nRF24.c   **** }
 3510              		.loc 1 1180 0
 3511 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3512 0014 03B0     		add	sp, sp, #12
 3513              	.LCFI133:
 3514              		.cfi_def_cfa_offset 4
 3515              		@ sp needed
 3516 0016 5DF804FB 		ldr	pc, [sp], #4
 3517              		.cfi_endproc
 3518              	.LFE190:
 3520              		.section	.text.nRF24_set_RX_PW_P4,"ax",%progbits
 3521              		.align	1
 3522              		.global	nRF24_set_RX_PW_P4
 3523              		.syntax unified
 3524              		.thumb
 3525              		.thumb_func
 3526              		.fpu fpv4-sp-d16
 3528              	nRF24_set_RX_PW_P4:
 3529              	.LFB191:
1181:Src/nRF24.c   **** 
1182:Src/nRF24.c   **** 
1183:Src/nRF24.c   **** /**
1184:Src/nRF24.c   **** 	* @brief Set number of bytes in RX payload in data pipe 4.
1185:Src/nRF24.c   **** 	* @param rx_pw_p4 Number of bytes. 
1186:Src/nRF24.c   **** 	*          0 = pipe not used.
1187:Src/nRF24.c   **** 	*          1 = 1 byte.
1188:Src/nRF24.c   **** 	*          2 = 2 bytes.
1189:Src/nRF24.c   **** 	*          ...
1190:Src/nRF24.c   **** 	*          32 = 32 bytes.
1191:Src/nRF24.c   **** 	* @retval None.
1192:Src/nRF24.c   **** 	*/
ARM GAS  /tmp/ccQFqAzx.s 			page 83


1193:Src/nRF24.c   **** void nRF24_set_RX_PW_P4(uint8_t rx_pw_p4) 
1194:Src/nRF24.c   **** {
 3530              		.loc 1 1194 0
 3531              		.cfi_startproc
 3532              		@ args = 0, pretend = 0, frame = 8
 3533              		@ frame_needed = 0, uses_anonymous_args = 0
 3534              	.LVL373:
 3535 0000 00B5     		push	{lr}
 3536              	.LCFI134:
 3537              		.cfi_def_cfa_offset 4
 3538              		.cfi_offset 14, -4
 3539 0002 83B0     		sub	sp, sp, #12
 3540              	.LCFI135:
 3541              		.cfi_def_cfa_offset 16
1195:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1196:Src/nRF24.c   **** 	writing_byte |= rx_pw_p4;
 3542              		.loc 1 1196 0
 3543 0004 02AA     		add	r2, sp, #8
 3544 0006 02F8010D 		strb	r0, [r2, #-1]!
1197:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P4, 1, &writing_byte);
 3545              		.loc 1 1197 0
 3546 000a 0121     		movs	r1, #1
 3547 000c 3520     		movs	r0, #53
 3548              	.LVL374:
 3549 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3550              	.LVL375:
1198:Src/nRF24.c   **** }
 3551              		.loc 1 1198 0
 3552 0012 03B0     		add	sp, sp, #12
 3553              	.LCFI136:
 3554              		.cfi_def_cfa_offset 4
 3555              		@ sp needed
 3556 0014 5DF804FB 		ldr	pc, [sp], #4
 3557              		.cfi_endproc
 3558              	.LFE191:
 3560              		.section	.text.nRF24_get_RX_PW_P4,"ax",%progbits
 3561              		.align	1
 3562              		.global	nRF24_get_RX_PW_P4
 3563              		.syntax unified
 3564              		.thumb
 3565              		.thumb_func
 3566              		.fpu fpv4-sp-d16
 3568              	nRF24_get_RX_PW_P4:
 3569              	.LFB192:
1199:Src/nRF24.c   **** 
1200:Src/nRF24.c   **** /**
1201:Src/nRF24.c   ****   * @brief      Read <RX_PW_P4> register from nRF24.
1202:Src/nRF24.c   ****   * @param      None.
1203:Src/nRF24.c   ****   * @retval     <RX_PW_P4> register value.
1204:Src/nRF24.c   ****   */
1205:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P4() 
1206:Src/nRF24.c   **** {
 3570              		.loc 1 1206 0
 3571              		.cfi_startproc
 3572              		@ args = 0, pretend = 0, frame = 8
 3573              		@ frame_needed = 0, uses_anonymous_args = 0
 3574 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccQFqAzx.s 			page 84


 3575              	.LCFI137:
 3576              		.cfi_def_cfa_offset 4
 3577              		.cfi_offset 14, -4
 3578 0002 83B0     		sub	sp, sp, #12
 3579              	.LCFI138:
 3580              		.cfi_def_cfa_offset 16
1207:Src/nRF24.c   ****   uint8_t read_byte;
1208:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P4, 1, &read_byte);
 3581              		.loc 1 1208 0
 3582 0004 0DF10702 		add	r2, sp, #7
 3583 0008 0121     		movs	r1, #1
 3584 000a 1520     		movs	r0, #21
 3585 000c FFF7FEFF 		bl	spi_read_register
 3586              	.LVL376:
1209:Src/nRF24.c   ****   return read_byte;
1210:Src/nRF24.c   **** }
 3587              		.loc 1 1210 0
 3588 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3589 0014 03B0     		add	sp, sp, #12
 3590              	.LCFI139:
 3591              		.cfi_def_cfa_offset 4
 3592              		@ sp needed
 3593 0016 5DF804FB 		ldr	pc, [sp], #4
 3594              		.cfi_endproc
 3595              	.LFE192:
 3597              		.section	.text.nRF24_set_RX_PW_P5,"ax",%progbits
 3598              		.align	1
 3599              		.global	nRF24_set_RX_PW_P5
 3600              		.syntax unified
 3601              		.thumb
 3602              		.thumb_func
 3603              		.fpu fpv4-sp-d16
 3605              	nRF24_set_RX_PW_P5:
 3606              	.LFB193:
1211:Src/nRF24.c   **** 
1212:Src/nRF24.c   **** /**
1213:Src/nRF24.c   **** 	* @brief Set number of bytes in RX payload in data pipe 5.
1214:Src/nRF24.c   **** 	* @param rx_pw_p5 Number of bytes. 
1215:Src/nRF24.c   **** 	*          0 = pipe not used.
1216:Src/nRF24.c   **** 	*          1 = 1 byte.
1217:Src/nRF24.c   **** 	*          2 = 2 bytes.
1218:Src/nRF24.c   **** 	*          ...
1219:Src/nRF24.c   **** 	*          32 = 32 bytes.
1220:Src/nRF24.c   **** 	* @retval None.
1221:Src/nRF24.c   **** 	*/
1222:Src/nRF24.c   **** void nRF24_set_RX_PW_P5(uint8_t rx_pw_p5) 
1223:Src/nRF24.c   **** {
 3607              		.loc 1 1223 0
 3608              		.cfi_startproc
 3609              		@ args = 0, pretend = 0, frame = 8
 3610              		@ frame_needed = 0, uses_anonymous_args = 0
 3611              	.LVL377:
 3612 0000 00B5     		push	{lr}
 3613              	.LCFI140:
 3614              		.cfi_def_cfa_offset 4
 3615              		.cfi_offset 14, -4
 3616 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccQFqAzx.s 			page 85


 3617              	.LCFI141:
 3618              		.cfi_def_cfa_offset 16
1224:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1225:Src/nRF24.c   **** 	writing_byte |= rx_pw_p5;
 3619              		.loc 1 1225 0
 3620 0004 02AA     		add	r2, sp, #8
 3621 0006 02F8010D 		strb	r0, [r2, #-1]!
1226:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P5, 1, &writing_byte);
 3622              		.loc 1 1226 0
 3623 000a 0121     		movs	r1, #1
 3624 000c 3620     		movs	r0, #54
 3625              	.LVL378:
 3626 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3627              	.LVL379:
1227:Src/nRF24.c   **** }
 3628              		.loc 1 1227 0
 3629 0012 03B0     		add	sp, sp, #12
 3630              	.LCFI142:
 3631              		.cfi_def_cfa_offset 4
 3632              		@ sp needed
 3633 0014 5DF804FB 		ldr	pc, [sp], #4
 3634              		.cfi_endproc
 3635              	.LFE193:
 3637              		.section	.text.nRF24_get_RX_PW_P5,"ax",%progbits
 3638              		.align	1
 3639              		.global	nRF24_get_RX_PW_P5
 3640              		.syntax unified
 3641              		.thumb
 3642              		.thumb_func
 3643              		.fpu fpv4-sp-d16
 3645              	nRF24_get_RX_PW_P5:
 3646              	.LFB194:
1228:Src/nRF24.c   **** 
1229:Src/nRF24.c   **** /**
1230:Src/nRF24.c   ****   * @brief      Read <RX_PW_P5> register from nRF24.
1231:Src/nRF24.c   ****   * @param      None.
1232:Src/nRF24.c   ****   * @retval     <RX_PW_P5> register value.
1233:Src/nRF24.c   ****   */
1234:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P5() 
1235:Src/nRF24.c   **** {
 3647              		.loc 1 1235 0
 3648              		.cfi_startproc
 3649              		@ args = 0, pretend = 0, frame = 8
 3650              		@ frame_needed = 0, uses_anonymous_args = 0
 3651 0000 00B5     		push	{lr}
 3652              	.LCFI143:
 3653              		.cfi_def_cfa_offset 4
 3654              		.cfi_offset 14, -4
 3655 0002 83B0     		sub	sp, sp, #12
 3656              	.LCFI144:
 3657              		.cfi_def_cfa_offset 16
1236:Src/nRF24.c   ****   uint8_t read_byte;
1237:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P5, 1, &read_byte);
 3658              		.loc 1 1237 0
 3659 0004 0DF10702 		add	r2, sp, #7
 3660 0008 0121     		movs	r1, #1
 3661 000a 1620     		movs	r0, #22
ARM GAS  /tmp/ccQFqAzx.s 			page 86


 3662 000c FFF7FEFF 		bl	spi_read_register
 3663              	.LVL380:
1238:Src/nRF24.c   ****   return read_byte;
1239:Src/nRF24.c   **** }
 3664              		.loc 1 1239 0
 3665 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3666 0014 03B0     		add	sp, sp, #12
 3667              	.LCFI145:
 3668              		.cfi_def_cfa_offset 4
 3669              		@ sp needed
 3670 0016 5DF804FB 		ldr	pc, [sp], #4
 3671              		.cfi_endproc
 3672              	.LFE194:
 3674              		.section	.text.nRF24_get_FIFO_STATUS,"ax",%progbits
 3675              		.align	1
 3676              		.global	nRF24_get_FIFO_STATUS
 3677              		.syntax unified
 3678              		.thumb
 3679              		.thumb_func
 3680              		.fpu fpv4-sp-d16
 3682              	nRF24_get_FIFO_STATUS:
 3683              	.LFB195:
1240:Src/nRF24.c   **** 
1241:Src/nRF24.c   **** 
1242:Src/nRF24.c   **** /**
1243:Src/nRF24.c   ****   * @brief      Read 'FIFO_STATUS' register from nRF24.
1244:Src/nRF24.c   ****   * @param      None.
1245:Src/nRF24.c   ****   * @retval     FIFO_STATUS register value.
1246:Src/nRF24.c   **** 	* @note  Following masks can be used:
1247:Src/nRF24.c   **** 	*  TX_REUSE_READMASK  
1248:Src/nRF24.c   **** 	*  TX_EMPTY_READMASK  
1249:Src/nRF24.c   **** 	*  RX_FULL_READMASK 
1250:Src/nRF24.c   **** 	*  RX_EMPTY_READMASK 
1251:Src/nRF24.c   ****   */
1252:Src/nRF24.c   **** 
1253:Src/nRF24.c   **** 
1254:Src/nRF24.c   **** uint8_t nRF24_get_FIFO_STATUS() 
1255:Src/nRF24.c   **** {
 3684              		.loc 1 1255 0
 3685              		.cfi_startproc
 3686              		@ args = 0, pretend = 0, frame = 8
 3687              		@ frame_needed = 0, uses_anonymous_args = 0
 3688 0000 00B5     		push	{lr}
 3689              	.LCFI146:
 3690              		.cfi_def_cfa_offset 4
 3691              		.cfi_offset 14, -4
 3692 0002 83B0     		sub	sp, sp, #12
 3693              	.LCFI147:
 3694              		.cfi_def_cfa_offset 16
1256:Src/nRF24.c   ****   uint8_t fifo_status;
1257:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + FIFO_STATUS, 1, &fifo_status);
 3695              		.loc 1 1257 0
 3696 0004 0DF10702 		add	r2, sp, #7
 3697 0008 0121     		movs	r1, #1
 3698 000a 1720     		movs	r0, #23
 3699 000c FFF7FEFF 		bl	spi_read_register
 3700              	.LVL381:
ARM GAS  /tmp/ccQFqAzx.s 			page 87


1258:Src/nRF24.c   **** 
1259:Src/nRF24.c   ****   return fifo_status;
1260:Src/nRF24.c   **** }
 3701              		.loc 1 1260 0
 3702 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3703 0014 03B0     		add	sp, sp, #12
 3704              	.LCFI148:
 3705              		.cfi_def_cfa_offset 4
 3706              		@ sp needed
 3707 0016 5DF804FB 		ldr	pc, [sp], #4
 3708              		.cfi_endproc
 3709              	.LFE195:
 3711              		.section	.rodata
 3712              		.align	2
 3713              		.set	.LANCHOR0,. + 0
 3714              	.LC0:
 3715 0000 C0       		.byte	-64
 3716 0001 FE       		.byte	-2
 3717 0002 BE       		.byte	-66
 3718 0003 EF       		.byte	-17
 3719              	.LC1:
 3720 0004 10       		.byte	16
 3721 0005 DE       		.byte	-34
 3722 0006 10       		.byte	16
 3723 0007 10       		.byte	16
 3724 0008 10       		.byte	16
 3725 0009 000000   		.space	3
 3726              	.LC2:
 3727 000c BE       		.byte	-66
 3728 000d EF       		.byte	-17
 3729 000e CA       		.byte	-54
 3730 000f FE       		.byte	-2
 3731              		.section	.rodata.nRF24_mvt_keep_sending.str1.4,"aMS",%progbits,1
 3732              		.align	2
 3733              	.LC10:
 3734 0000 3C535441 		.ascii	"<STATUS> REGISTER : %#02x\012\000"
 3734      5455533E 
 3734      20524547 
 3734      49535445 
 3734      52203A20 
 3735 001b 00       		.space	1
 3736              	.LC11:
 3737 001c 6E524632 		.ascii	"nRF24 mvt send status - success -\012\000"
 3737      34206D76 
 3737      74207365 
 3737      6E642073 
 3737      74617475 
 3738 003f 00       		.space	1
 3739              	.LC12:
 3740 0040 6E524632 		.ascii	"nRF24 mvt send status - failure -\012\000"
 3740      34206D76 
 3740      74207365 
 3740      6E642073 
 3740      74617475 
 3741              		.section	.rodata.nRF24_mvt_tx_self_test.str1.4,"aMS",%progbits,1
 3742              		.align	2
 3743              	.LC6:
ARM GAS  /tmp/ccQFqAzx.s 			page 88


 3744 0000 2D2D2D2D 		.ascii	"---- nrf24 tx self test. ----\012\000"
 3744      206E7266 
 3744      32342074 
 3744      78207365 
 3744      6C662074 
 3745 001f 00       		.space	1
 3746              	.LC7:
 3747 0020 2D2D2D2D 		.ascii	"---- This test to verifies function of a tranmitter"
 3747      20546869 
 3747      73207465 
 3747      73742074 
 3747      6F207665 
 3748 0053 2073656E 		.ascii	" send without a receiver. ----\012\000"
 3748      64207769 
 3748      74686F75 
 3748      74206120 
 3748      72656365 
 3749 0073 00       		.space	1
 3750              	.LC8:
 3751 0074 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has passed.    "
 3751      6E524632 
 3751      34207472 
 3751      616E736D 
 3751      69737369 
 3752 00a4 20202020 		.ascii	"                    <STATUS> has value of 0x2E.    "
 3752      20202020 
 3752      20202020 
 3752      20202020 
 3752      20202020 
 3753 00d7 20202020 		.ascii	"                    TX_DS (transfer data sent) was "
 3753      20202020 
 3753      20202020 
 3753      20202020 
 3753      20202020 
 3754 010a 7365742E 		.ascii	"set.                        RX_P_NO = 111, this mea"
 3754      20202020 
 3754      20202020 
 3754      20202020 
 3754      20202020 
 3755 013d 6E732052 		.ascii	"ns RX FIFO Empty. \012\000"
 3755      58204649 
 3755      464F2045 
 3755      6D707479 
 3755      2E200A00 
 3756 0151 000000   		.space	3
 3757              	.LC9:
 3758 0154 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has failed. <ST"
 3758      6E524632 
 3758      34207472 
 3758      616E736D 
 3758      69737369 
 3759 0184 41545553 		.ascii	"ATUS> is expected 0x2E. Current value: %#02x\012\000"
 3759      3E206973 
 3759      20657870 
 3759      65637465 
 3759      64203078 
 3760              		.section	.rodata.nRF24_print_all_registers.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccQFqAzx.s 			page 89


 3761              		.align	2
 3762              	.LC13:
 3763 0000 434F4E46 		.ascii	"CONFIG: <0x%02x>\012\000"
 3763      49473A20 
 3763      3C307825 
 3763      3032783E 
 3763      0A00
 3764 0012 0000     		.space	2
 3765              	.LC14:
 3766 0014 454E5F41 		.ascii	"EN_AA: <0x%02x>\012\000"
 3766      413A203C 
 3766      30782530 
 3766      32783E0A 
 3766      00
 3767 0025 000000   		.space	3
 3768              	.LC15:
 3769 0028 454E5F52 		.ascii	"EN_RXADDR: <0x%02x>\012\000"
 3769      58414444 
 3769      523A203C 
 3769      30782530 
 3769      32783E0A 
 3770 003d 000000   		.space	3
 3771              	.LC16:
 3772 0040 53455455 		.ascii	"SETUP_AW: <0x%02x>\012\000"
 3772      505F4157 
 3772      3A203C30 
 3772      78253032 
 3772      783E0A00 
 3773              	.LC17:
 3774 0054 53455455 		.ascii	"SETUP_RETR: <0x%02x>\012\000"
 3774      505F5245 
 3774      54523A20 
 3774      3C307825 
 3774      3032783E 
 3775 006a 0000     		.space	2
 3776              	.LC18:
 3777 006c 52465F43 		.ascii	"RF_CH: <0x%02x>\012\000"
 3777      483A203C 
 3777      30782530 
 3777      32783E0A 
 3777      00
 3778 007d 000000   		.space	3
 3779              	.LC19:
 3780 0080 52465F53 		.ascii	"RF_SETUP: <0x%02x>\012\000"
 3780      45545550 
 3780      3A203C30 
 3780      78253032 
 3780      783E0A00 
 3781              	.LC20:
 3782 0094 53544154 		.ascii	"STATUS: <0x%02x>\012\000"
 3782      55533A20 
 3782      3C307825 
 3782      3032783E 
 3782      0A00
 3783 00a6 0000     		.space	2
 3784              	.LC21:
 3785 00a8 52585F41 		.ascii	"RX_ADDR_P0: %#02x %#02x %#02x %#02x>\012\000"
ARM GAS  /tmp/ccQFqAzx.s 			page 90


 3785      4444525F 
 3785      50303A20 
 3785      25233032 
 3785      78202523 
 3786 00ce 0000     		.space	2
 3787              	.LC22:
 3788 00d0 52585F41 		.ascii	"RX_ADDR_P1: %#02x %#02x %#02x %#02x>\012\000"
 3788      4444525F 
 3788      50313A20 
 3788      25233032 
 3788      78202523 
 3789 00f6 0000     		.space	2
 3790              	.LC23:
 3791 00f8 52585F41 		.ascii	"RX_ADDR_P2: %#02x %#02x %#02x %#02x>\012\000"
 3791      4444525F 
 3791      50323A20 
 3791      25233032 
 3791      78202523 
 3792 011e 0000     		.space	2
 3793              	.LC24:
 3794 0120 52585F41 		.ascii	"RX_ADDR_P3: %#02x %#02x %#02x %#02x>\012\000"
 3794      4444525F 
 3794      50333A20 
 3794      25233032 
 3794      78202523 
 3795 0146 0000     		.space	2
 3796              	.LC25:
 3797 0148 52585F41 		.ascii	"RX_ADDR_P4: %#02x %#02x %#02x %#02x>\012\000"
 3797      4444525F 
 3797      50343A20 
 3797      25233032 
 3797      78202523 
 3798 016e 0000     		.space	2
 3799              	.LC26:
 3800 0170 52585F41 		.ascii	"RX_ADDR_P5: %#02x %#02x %#02x %#02x>\012\000"
 3800      4444525F 
 3800      50353A20 
 3800      25233032 
 3800      78202523 
 3801 0196 0000     		.space	2
 3802              	.LC27:
 3803 0198 54585F41 		.ascii	"TX_ADDR: %#02x %#02x %#02x %#02x>\012\000"
 3803      4444523A 
 3803      20252330 
 3803      32782025 
 3803      23303278 
 3804              		.section	.rodata.nRF24_verified_write_register.str1.4,"aMS",%progbits,1
 3805              		.align	2
 3806              	.LC3:
 3807 0000 50726F62 		.ascii	"Problem writing to nRF24 register -- \000"
 3807      6C656D20 
 3807      77726974 
 3807      696E6720 
 3807      746F206E 
 3808 0026 0000     		.space	2
 3809              	.LC4:
 3810 0028 77726974 		.ascii	"writing data: <%#02x> read_data: <%#02x>\012\000"
ARM GAS  /tmp/ccQFqAzx.s 			page 91


 3810      696E6720 
 3810      64617461 
 3810      3A203C25 
 3810      23303278 
 3811 0052 0000     		.space	2
 3812              	.LC5:
 3813 0054 53756363 		.ascii	"Success writing to nRF24 register -- \000"
 3813      65737320 
 3813      77726974 
 3813      696E6720 
 3813      746F206E 
 3814              		.text
 3815              	.Letext0:
 3816              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 3817              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 3818              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 3819              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 3820              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 3821              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 3822              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 3823              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 3824              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 3825              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 3826              		.file 12 "/usr/include/newlib/sys/lock.h"
 3827              		.file 13 "/usr/include/newlib/sys/_types.h"
 3828              		.file 14 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 3829              		.file 15 "/usr/include/newlib/sys/reent.h"
 3830              		.file 16 "Inc/nRF24.h"
 3831              		.file 17 "/usr/include/newlib/string.h"
 3832              		.file 18 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccQFqAzx.s 			page 92


DEFINED SYMBOLS
                            *ABS*:0000000000000000 nRF24.c
     /tmp/ccQFqAzx.s:18     .text.SPI_SCK_1:0000000000000000 $t
     /tmp/ccQFqAzx.s:25     .text.SPI_SCK_1:0000000000000000 SPI_SCK_1
     /tmp/ccQFqAzx.s:47     .text.SPI_SCK_1:0000000000000010 $d
     /tmp/ccQFqAzx.s:52     .text.SPI_SCK_0:0000000000000000 $t
     /tmp/ccQFqAzx.s:59     .text.SPI_SCK_0:0000000000000000 SPI_SCK_0
     /tmp/ccQFqAzx.s:80     .text.SPI_SCK_0:0000000000000010 $d
     /tmp/ccQFqAzx.s:85     .text.SPI_MOSI_1:0000000000000000 $t
     /tmp/ccQFqAzx.s:92     .text.SPI_MOSI_1:0000000000000000 SPI_MOSI_1
     /tmp/ccQFqAzx.s:113    .text.SPI_MOSI_1:0000000000000010 $d
     /tmp/ccQFqAzx.s:118    .text.SPI_MOSI_0:0000000000000000 $t
     /tmp/ccQFqAzx.s:125    .text.SPI_MOSI_0:0000000000000000 SPI_MOSI_0
     /tmp/ccQFqAzx.s:146    .text.SPI_MOSI_0:0000000000000010 $d
     /tmp/ccQFqAzx.s:151    .text.SPI_CS_1:0000000000000000 $t
     /tmp/ccQFqAzx.s:158    .text.SPI_CS_1:0000000000000000 SPI_CS_1
     /tmp/ccQFqAzx.s:179    .text.SPI_CS_1:0000000000000010 $d
     /tmp/ccQFqAzx.s:184    .text.SPI_CS_0:0000000000000000 $t
     /tmp/ccQFqAzx.s:191    .text.SPI_CS_0:0000000000000000 SPI_CS_0
     /tmp/ccQFqAzx.s:212    .text.SPI_CS_0:0000000000000010 $d
     /tmp/ccQFqAzx.s:217    .text.SPI_READ_MISO:0000000000000000 $t
     /tmp/ccQFqAzx.s:224    .text.SPI_READ_MISO:0000000000000000 SPI_READ_MISO
     /tmp/ccQFqAzx.s:245    .text.SPI_READ_MISO:0000000000000010 $d
     /tmp/ccQFqAzx.s:250    .text.serial_print:0000000000000000 $t
     /tmp/ccQFqAzx.s:257    .text.serial_print:0000000000000000 serial_print
     /tmp/ccQFqAzx.s:284    .text.serial_print:0000000000000018 $d
     /tmp/ccQFqAzx.s:289    .text.spi_delay:0000000000000000 $t
     /tmp/ccQFqAzx.s:296    .text.spi_delay:0000000000000000 spi_delay
     /tmp/ccQFqAzx.s:316    .text.gpio_clockout_8_bits:0000000000000000 $t
     /tmp/ccQFqAzx.s:323    .text.gpio_clockout_8_bits:0000000000000000 gpio_clockout_8_bits
     /tmp/ccQFqAzx.s:428    .text.gpio_clockout_8_bits:0000000000000068 $d
     /tmp/ccQFqAzx.s:436    .text.gpio_clockin_8_bits:0000000000000000 $t
     /tmp/ccQFqAzx.s:443    .text.gpio_clockin_8_bits:0000000000000000 gpio_clockin_8_bits
     /tmp/ccQFqAzx.s:555    .text.gpio_clockin_8_bits:0000000000000068 $d
     /tmp/ccQFqAzx.s:561    .text.spi_read_register:0000000000000000 $t
     /tmp/ccQFqAzx.s:568    .text.spi_read_register:0000000000000000 spi_read_register
     /tmp/ccQFqAzx.s:633    .text.spi_read_register:0000000000000034 $d
     /tmp/ccQFqAzx.s:640    .text.spi_write_register:0000000000000000 $t
     /tmp/ccQFqAzx.s:647    .text.spi_write_register:0000000000000000 spi_write_register
     /tmp/ccQFqAzx.s:714    .text.spi_write_register:0000000000000034 $d
     /tmp/ccQFqAzx.s:721    .text.nRF24_CE_1:0000000000000000 $t
     /tmp/ccQFqAzx.s:728    .text.nRF24_CE_1:0000000000000000 nRF24_CE_1
     /tmp/ccQFqAzx.s:749    .text.nRF24_CE_1:0000000000000010 $d
     /tmp/ccQFqAzx.s:754    .text.nRF24_CE_0:0000000000000000 $t
     /tmp/ccQFqAzx.s:761    .text.nRF24_CE_0:0000000000000000 nRF24_CE_0
     /tmp/ccQFqAzx.s:782    .text.nRF24_CE_0:0000000000000010 $d
     /tmp/ccQFqAzx.s:787    .text.nRF24_verified_write_register:0000000000000000 $t
     /tmp/ccQFqAzx.s:794    .text.nRF24_verified_write_register:0000000000000000 nRF24_verified_write_register
     /tmp/ccQFqAzx.s:995    .text.nRF24_verified_write_register:0000000000000100 $d
     /tmp/ccQFqAzx.s:1003   .text.nRF24_mvt_tx_self_test:0000000000000000 $t
     /tmp/ccQFqAzx.s:1010   .text.nRF24_mvt_tx_self_test:0000000000000000 nRF24_mvt_tx_self_test
     /tmp/ccQFqAzx.s:1214   .text.nRF24_mvt_tx_self_test:0000000000000110 $d
     /tmp/ccQFqAzx.s:1224   .text.nRF24_mvt_configure_tx_mode:0000000000000000 $t
     /tmp/ccQFqAzx.s:1231   .text.nRF24_mvt_configure_tx_mode:0000000000000000 nRF24_mvt_configure_tx_mode
     /tmp/ccQFqAzx.s:1326   .text.nRF24_mvt_configure_tx_mode:0000000000000088 $d
     /tmp/ccQFqAzx.s:1331   .text.nRF24_mvt_keep_sending:0000000000000000 $t
     /tmp/ccQFqAzx.s:1338   .text.nRF24_mvt_keep_sending:0000000000000000 nRF24_mvt_keep_sending
ARM GAS  /tmp/ccQFqAzx.s 			page 93


     /tmp/ccQFqAzx.s:1479   .text.nRF24_mvt_keep_sending:00000000000000b8 $d
     /tmp/ccQFqAzx.s:1490   .text.nRF24_print_all_registers:0000000000000000 $t
     /tmp/ccQFqAzx.s:1497   .text.nRF24_print_all_registers:0000000000000000 nRF24_print_all_registers
     /tmp/ccQFqAzx.s:1976   .text.nRF24_print_all_registers:00000000000002e4 $d
     /tmp/ccQFqAzx.s:1996   .text.nRF24_set_CONFIG:0000000000000000 $t
     /tmp/ccQFqAzx.s:2003   .text.nRF24_set_CONFIG:0000000000000000 nRF24_set_CONFIG
     /tmp/ccQFqAzx.s:2048   .text.nRF24_get_CONFIG:0000000000000000 $t
     /tmp/ccQFqAzx.s:2055   .text.nRF24_get_CONFIG:0000000000000000 nRF24_get_CONFIG
     /tmp/ccQFqAzx.s:2085   .text.nRF24_set_EN_AA:0000000000000000 $t
     /tmp/ccQFqAzx.s:2092   .text.nRF24_set_EN_AA:0000000000000000 nRF24_set_EN_AA
     /tmp/ccQFqAzx.s:2134   .text.nRF24_get_EN_AA:0000000000000000 $t
     /tmp/ccQFqAzx.s:2141   .text.nRF24_get_EN_AA:0000000000000000 nRF24_get_EN_AA
     /tmp/ccQFqAzx.s:2171   .text.nRF24_set_EN_RXADDR:0000000000000000 $t
     /tmp/ccQFqAzx.s:2178   .text.nRF24_set_EN_RXADDR:0000000000000000 nRF24_set_EN_RXADDR
     /tmp/ccQFqAzx.s:2220   .text.nRF24_get_EN_RXADDR:0000000000000000 $t
     /tmp/ccQFqAzx.s:2227   .text.nRF24_get_EN_RXADDR:0000000000000000 nRF24_get_EN_RXADDR
     /tmp/ccQFqAzx.s:2257   .text.nRF24_set_SETUP_AW:0000000000000000 $t
     /tmp/ccQFqAzx.s:2264   .text.nRF24_set_SETUP_AW:0000000000000000 nRF24_set_SETUP_AW
     /tmp/ccQFqAzx.s:2297   .text.nRF24_get_SETUP_AW:0000000000000000 $t
     /tmp/ccQFqAzx.s:2304   .text.nRF24_get_SETUP_AW:0000000000000000 nRF24_get_SETUP_AW
     /tmp/ccQFqAzx.s:2334   .text.nRF24_set_SETUP_RETR:0000000000000000 $t
     /tmp/ccQFqAzx.s:2341   .text.nRF24_set_SETUP_RETR:0000000000000000 nRF24_set_SETUP_RETR
     /tmp/ccQFqAzx.s:2376   .text.nRF24_get_SETUP_RETR:0000000000000000 $t
     /tmp/ccQFqAzx.s:2383   .text.nRF24_get_SETUP_RETR:0000000000000000 nRF24_get_SETUP_RETR
     /tmp/ccQFqAzx.s:2416   .text.nRF24_set_RF_CH:0000000000000000 $t
     /tmp/ccQFqAzx.s:2423   .text.nRF24_set_RF_CH:0000000000000000 nRF24_set_RF_CH
     /tmp/ccQFqAzx.s:2456   .text.nRF24_get_RF_CH:0000000000000000 $t
     /tmp/ccQFqAzx.s:2463   .text.nRF24_get_RF_CH:0000000000000000 nRF24_get_RF_CH
     /tmp/ccQFqAzx.s:2493   .text.nRF24_set_RF_SETUP:0000000000000000 $t
     /tmp/ccQFqAzx.s:2500   .text.nRF24_set_RF_SETUP:0000000000000000 nRF24_set_RF_SETUP
     /tmp/ccQFqAzx.s:2541   .text.nRF24_get_RF_SETUP:0000000000000000 $t
     /tmp/ccQFqAzx.s:2548   .text.nRF24_get_RF_SETUP:0000000000000000 nRF24_get_RF_SETUP
     /tmp/ccQFqAzx.s:2578   .text.nRF24_clear_STATUS:0000000000000000 $t
     /tmp/ccQFqAzx.s:2585   .text.nRF24_clear_STATUS:0000000000000000 nRF24_clear_STATUS
     /tmp/ccQFqAzx.s:2622   .text.nRF24_get_STATUS:0000000000000000 $t
     /tmp/ccQFqAzx.s:2629   .text.nRF24_get_STATUS:0000000000000000 nRF24_get_STATUS
     /tmp/ccQFqAzx.s:2659   .text.nRF24_get_OBSERVE_TX:0000000000000000 $t
     /tmp/ccQFqAzx.s:2666   .text.nRF24_get_OBSERVE_TX:0000000000000000 nRF24_get_OBSERVE_TX
     /tmp/ccQFqAzx.s:2696   .text.nRF24_get_RPD:0000000000000000 $t
     /tmp/ccQFqAzx.s:2703   .text.nRF24_get_RPD:0000000000000000 nRF24_get_RPD
     /tmp/ccQFqAzx.s:2733   .text.nRF24_set_RX_ADDR_P0:0000000000000000 $t
     /tmp/ccQFqAzx.s:2740   .text.nRF24_set_RX_ADDR_P0:0000000000000000 nRF24_set_RX_ADDR_P0
     /tmp/ccQFqAzx.s:2765   .text.nRF24_get_RX_ADDR_P0:0000000000000000 $t
     /tmp/ccQFqAzx.s:2772   .text.nRF24_get_RX_ADDR_P0:0000000000000000 nRF24_get_RX_ADDR_P0
     /tmp/ccQFqAzx.s:2797   .text.nRF24_set_RX_ADDR_P1:0000000000000000 $t
     /tmp/ccQFqAzx.s:2804   .text.nRF24_set_RX_ADDR_P1:0000000000000000 nRF24_set_RX_ADDR_P1
     /tmp/ccQFqAzx.s:2829   .text.nRF24_get_RX_ADDR_P1:0000000000000000 $t
     /tmp/ccQFqAzx.s:2836   .text.nRF24_get_RX_ADDR_P1:0000000000000000 nRF24_get_RX_ADDR_P1
     /tmp/ccQFqAzx.s:2861   .text.nRF24_set_RX_ADDR_P2:0000000000000000 $t
     /tmp/ccQFqAzx.s:2868   .text.nRF24_set_RX_ADDR_P2:0000000000000000 nRF24_set_RX_ADDR_P2
     /tmp/ccQFqAzx.s:2901   .text.nRF24_get_RX_ADDR_P2:0000000000000000 $t
     /tmp/ccQFqAzx.s:2908   .text.nRF24_get_RX_ADDR_P2:0000000000000000 nRF24_get_RX_ADDR_P2
     /tmp/ccQFqAzx.s:2933   .text.nRF24_set_RX_ADDR_P3:0000000000000000 $t
     /tmp/ccQFqAzx.s:2940   .text.nRF24_set_RX_ADDR_P3:0000000000000000 nRF24_set_RX_ADDR_P3
     /tmp/ccQFqAzx.s:2973   .text.nRF24_get_RX_ADDR_P3:0000000000000000 $t
     /tmp/ccQFqAzx.s:2980   .text.nRF24_get_RX_ADDR_P3:0000000000000000 nRF24_get_RX_ADDR_P3
     /tmp/ccQFqAzx.s:3005   .text.nRF24_set_RX_ADDR_P4:0000000000000000 $t
ARM GAS  /tmp/ccQFqAzx.s 			page 94


     /tmp/ccQFqAzx.s:3012   .text.nRF24_set_RX_ADDR_P4:0000000000000000 nRF24_set_RX_ADDR_P4
     /tmp/ccQFqAzx.s:3045   .text.nRF24_get_RX_ADDR_P4:0000000000000000 $t
     /tmp/ccQFqAzx.s:3052   .text.nRF24_get_RX_ADDR_P4:0000000000000000 nRF24_get_RX_ADDR_P4
     /tmp/ccQFqAzx.s:3077   .text.nRF24_set_RX_ADDR_P5:0000000000000000 $t
     /tmp/ccQFqAzx.s:3084   .text.nRF24_set_RX_ADDR_P5:0000000000000000 nRF24_set_RX_ADDR_P5
     /tmp/ccQFqAzx.s:3117   .text.nRF24_get_RX_ADDR_P5:0000000000000000 $t
     /tmp/ccQFqAzx.s:3124   .text.nRF24_get_RX_ADDR_P5:0000000000000000 nRF24_get_RX_ADDR_P5
     /tmp/ccQFqAzx.s:3149   .text.nRF24_set_TX_ADDR:0000000000000000 $t
     /tmp/ccQFqAzx.s:3156   .text.nRF24_set_TX_ADDR:0000000000000000 nRF24_set_TX_ADDR
     /tmp/ccQFqAzx.s:3181   .text.nRF24_get_TX_ADDR:0000000000000000 $t
     /tmp/ccQFqAzx.s:3188   .text.nRF24_get_TX_ADDR:0000000000000000 nRF24_get_TX_ADDR
     /tmp/ccQFqAzx.s:3213   .text.nRF24_set_RX_PW_P0:0000000000000000 $t
     /tmp/ccQFqAzx.s:3220   .text.nRF24_set_RX_PW_P0:0000000000000000 nRF24_set_RX_PW_P0
     /tmp/ccQFqAzx.s:3253   .text.nRF24_get_RX_PW_P0:0000000000000000 $t
     /tmp/ccQFqAzx.s:3260   .text.nRF24_get_RX_PW_P0:0000000000000000 nRF24_get_RX_PW_P0
     /tmp/ccQFqAzx.s:3290   .text.nRF24_set_RX_PW_P1:0000000000000000 $t
     /tmp/ccQFqAzx.s:3297   .text.nRF24_set_RX_PW_P1:0000000000000000 nRF24_set_RX_PW_P1
     /tmp/ccQFqAzx.s:3330   .text.nRF24_get_RX_PW_P1:0000000000000000 $t
     /tmp/ccQFqAzx.s:3337   .text.nRF24_get_RX_PW_P1:0000000000000000 nRF24_get_RX_PW_P1
     /tmp/ccQFqAzx.s:3367   .text.nRF24_set_RX_PW_P2:0000000000000000 $t
     /tmp/ccQFqAzx.s:3374   .text.nRF24_set_RX_PW_P2:0000000000000000 nRF24_set_RX_PW_P2
     /tmp/ccQFqAzx.s:3407   .text.nRF24_get_RX_PW_P2:0000000000000000 $t
     /tmp/ccQFqAzx.s:3414   .text.nRF24_get_RX_PW_P2:0000000000000000 nRF24_get_RX_PW_P2
     /tmp/ccQFqAzx.s:3444   .text.nRF24_set_RX_PW_P3:0000000000000000 $t
     /tmp/ccQFqAzx.s:3451   .text.nRF24_set_RX_PW_P3:0000000000000000 nRF24_set_RX_PW_P3
     /tmp/ccQFqAzx.s:3484   .text.nRF24_get_RX_PW_P3:0000000000000000 $t
     /tmp/ccQFqAzx.s:3491   .text.nRF24_get_RX_PW_P3:0000000000000000 nRF24_get_RX_PW_P3
     /tmp/ccQFqAzx.s:3521   .text.nRF24_set_RX_PW_P4:0000000000000000 $t
     /tmp/ccQFqAzx.s:3528   .text.nRF24_set_RX_PW_P4:0000000000000000 nRF24_set_RX_PW_P4
     /tmp/ccQFqAzx.s:3561   .text.nRF24_get_RX_PW_P4:0000000000000000 $t
     /tmp/ccQFqAzx.s:3568   .text.nRF24_get_RX_PW_P4:0000000000000000 nRF24_get_RX_PW_P4
     /tmp/ccQFqAzx.s:3598   .text.nRF24_set_RX_PW_P5:0000000000000000 $t
     /tmp/ccQFqAzx.s:3605   .text.nRF24_set_RX_PW_P5:0000000000000000 nRF24_set_RX_PW_P5
     /tmp/ccQFqAzx.s:3638   .text.nRF24_get_RX_PW_P5:0000000000000000 $t
     /tmp/ccQFqAzx.s:3645   .text.nRF24_get_RX_PW_P5:0000000000000000 nRF24_get_RX_PW_P5
     /tmp/ccQFqAzx.s:3675   .text.nRF24_get_FIFO_STATUS:0000000000000000 $t
     /tmp/ccQFqAzx.s:3682   .text.nRF24_get_FIFO_STATUS:0000000000000000 nRF24_get_FIFO_STATUS
     /tmp/ccQFqAzx.s:3712   .rodata:0000000000000000 $d
     /tmp/ccQFqAzx.s:3732   .rodata.nRF24_mvt_keep_sending.str1.4:0000000000000000 $d
     /tmp/ccQFqAzx.s:3742   .rodata.nRF24_mvt_tx_self_test.str1.4:0000000000000000 $d
     /tmp/ccQFqAzx.s:3761   .rodata.nRF24_print_all_registers.str1.4:0000000000000000 $d
     /tmp/ccQFqAzx.s:3805   .rodata.nRF24_verified_write_register.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_ReadPin
strlen
HAL_UART_Transmit
huart2
HAL_Delay
memset
sprintf
memcpy
