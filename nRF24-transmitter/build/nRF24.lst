ARM GAS  /tmp/ccrkxNaW.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"nRF24.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SPI_SCK_1,"ax",%progbits
  18              		.align	1
  19              		.global	SPI_SCK_1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SPI_SCK_1:
  26              	.LFB131:
  27              		.file 1 "Src/nRF24.c"
   1:Src/nRF24.c   **** /**
   2:Src/nRF24.c   ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
   3:Src/nRF24.c   ****   * @file      :     nRF24.c
   4:Src/nRF24.c   ****   * @author    :     Luyao Han
   5:Src/nRF24.c   ****   * @email     :     luyaohan1001@gmail.com
   6:Src/nRF24.c   ****   * @brief     :     C library for Nordic nRF24L01+ (or nRF24L01p) 2.4GHz wireless transceiver.
   7:Src/nRF24.c   ****   * @date      :     04-21-2022
   8:Src/nRF24.c   ****   * @note      :     The library nRF24.c and nRF24.h strictly follows the "nRF24L01+ Single Chip 2.
   9:Src/nRF24.c   ****                      Name Conventions:
  10:Src/nRF24.c   ****                          <REGISTER>
  11:Src/nRF24.c   ****                          high-level actions uses more snake cases, while lower-level GPIO / Delays 
  12:Src/nRF24.c   ****   * Copyright (C) 2022-2122 Luyao Han. The following code may be shared or modified for personal us
  13:Src/nRF24.c   ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
  14:Src/nRF24.c   **** 
  15:Src/nRF24.c   **** /* Includes ---------------------------------------------------------------------------------------
  16:Src/nRF24.c   **** #include "nRF24.h"
  17:Src/nRF24.c   **** 
  18:Src/nRF24.c   **** /* Macro Define -----------------------------------------------------------------------------------
  19:Src/nRF24.c   **** #define NRF24_DEBUG /* When defined, debug messages are logged through UART. */
  20:Src/nRF24.c   **** /* GPIO Physical Layer ----------------------------------------------------------------------------
  21:Src/nRF24.c   **** 
  22:Src/nRF24.c   **** /* SCK    PA8  */
  23:Src/nRF24.c   **** /* MOSI   PB10 */
  24:Src/nRF24.c   **** /* CSN    PB4  */
  25:Src/nRF24.c   **** /* CE     PB5  */
  26:Src/nRF24.c   **** /* MISO   PA10 */
  27:Src/nRF24.c   **** 
  28:Src/nRF24.c   **** /**
  29:Src/nRF24.c   ****   * @brief Set high on SCK pin of SPI bus.
  30:Src/nRF24.c   ****   * @param None
  31:Src/nRF24.c   ****   * @retval None */
ARM GAS  /tmp/ccrkxNaW.s 			page 2


  32:Src/nRF24.c   **** __inline__ void SPI_SCK_1()
  33:Src/nRF24.c   **** {
  28              		.loc 1 33 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  34:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  
  37              		.loc 1 34 0
  38 0002 0122     		movs	r2, #1
  39 0004 4FF48071 		mov	r1, #256
  40 0008 0148     		ldr	r0, .L3
  41 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  42              	.LVL0:
  43 000e 08BD     		pop	{r3, pc}
  44              	.L4:
  45              		.align	2
  46              	.L3:
  47 0010 00000240 		.word	1073872896
  48              		.cfi_endproc
  49              	.LFE131:
  51              		.section	.text.SPI_SCK_0,"ax",%progbits
  52              		.align	1
  53              		.global	SPI_SCK_0
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	SPI_SCK_0:
  60              	.LFB132:
  35:Src/nRF24.c   **** }
  36:Src/nRF24.c   **** 
  37:Src/nRF24.c   **** /**
  38:Src/nRF24.c   ****   * @brief Set low on SCK pin of SPI bus.
  39:Src/nRF24.c   ****   * @param None
  40:Src/nRF24.c   ****   * @retval None
  41:Src/nRF24.c   ****   */
  42:Src/nRF24.c   **** __inline__ void SPI_SCK_0()
  43:Src/nRF24.c   **** {
  61              		.loc 1 43 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
  44:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  
  70              		.loc 1 44 0
  71 0002 0022     		movs	r2, #0
  72 0004 4FF48071 		mov	r1, #256
  73 0008 0148     		ldr	r0, .L7
ARM GAS  /tmp/ccrkxNaW.s 			page 3


  74 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  75              	.LVL1:
  76 000e 08BD     		pop	{r3, pc}
  77              	.L8:
  78              		.align	2
  79              	.L7:
  80 0010 00000240 		.word	1073872896
  81              		.cfi_endproc
  82              	.LFE132:
  84              		.section	.text.SPI_MOSI_1,"ax",%progbits
  85              		.align	1
  86              		.global	SPI_MOSI_1
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	SPI_MOSI_1:
  93              	.LFB133:
  45:Src/nRF24.c   **** } 
  46:Src/nRF24.c   **** 
  47:Src/nRF24.c   **** /**
  48:Src/nRF24.c   ****   * @brief Set high on MOSI pin of SPI bus.
  49:Src/nRF24.c   ****   * @param None
  50:Src/nRF24.c   ****   * @retval None
  51:Src/nRF24.c   ****   */
  52:Src/nRF24.c   **** __inline__ void SPI_MOSI_1()
  53:Src/nRF24.c   **** {
  94              		.loc 1 53 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 08B5     		push	{r3, lr}
  99              	.LCFI2:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
  54:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  
 103              		.loc 1 54 0
 104 0002 0122     		movs	r2, #1
 105 0004 4FF48061 		mov	r1, #1024
 106 0008 0148     		ldr	r0, .L11
 107 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL2:
 109 000e 08BD     		pop	{r3, pc}
 110              	.L12:
 111              		.align	2
 112              	.L11:
 113 0010 00040240 		.word	1073873920
 114              		.cfi_endproc
 115              	.LFE133:
 117              		.section	.text.SPI_MOSI_0,"ax",%progbits
 118              		.align	1
 119              		.global	SPI_MOSI_0
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccrkxNaW.s 			page 4


 125              	SPI_MOSI_0:
 126              	.LFB134:
  55:Src/nRF24.c   **** }
  56:Src/nRF24.c   **** 
  57:Src/nRF24.c   **** /**
  58:Src/nRF24.c   ****   * @brief Set low on MOSI pin of SPI bus.
  59:Src/nRF24.c   ****   * @param None
  60:Src/nRF24.c   ****   * @retval None
  61:Src/nRF24.c   ****   */
  62:Src/nRF24.c   **** __inline__ void SPI_MOSI_0()
  63:Src/nRF24.c   **** {
 127              		.loc 1 63 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131 0000 08B5     		push	{r3, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 3, -8
 135              		.cfi_offset 14, -4
  64:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);  
 136              		.loc 1 64 0
 137 0002 0022     		movs	r2, #0
 138 0004 4FF48061 		mov	r1, #1024
 139 0008 0148     		ldr	r0, .L15
 140 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 141              	.LVL3:
 142 000e 08BD     		pop	{r3, pc}
 143              	.L16:
 144              		.align	2
 145              	.L15:
 146 0010 00040240 		.word	1073873920
 147              		.cfi_endproc
 148              	.LFE134:
 150              		.section	.text.SPI_CS_1,"ax",%progbits
 151              		.align	1
 152              		.global	SPI_CS_1
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu fpv4-sp-d16
 158              	SPI_CS_1:
 159              	.LFB135:
  65:Src/nRF24.c   **** }
  66:Src/nRF24.c   **** 
  67:Src/nRF24.c   **** /**
  68:Src/nRF24.c   ****   * @brief Set high on CS pin of SPI bus.
  69:Src/nRF24.c   ****   * @param None
  70:Src/nRF24.c   ****   * @retval None
  71:Src/nRF24.c   ****   */
  72:Src/nRF24.c   **** __inline__ void SPI_CS_1() 
  73:Src/nRF24.c   **** {
 160              		.loc 1 73 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/ccrkxNaW.s 			page 5


 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 3, -8
 168              		.cfi_offset 14, -4
  74:Src/nRF24.c   ****     /* CS High == CSN Low */
  75:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  
 169              		.loc 1 75 0
 170 0002 0022     		movs	r2, #0
 171 0004 1021     		movs	r1, #16
 172 0006 0248     		ldr	r0, .L19
 173 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 174              	.LVL4:
 175 000c 08BD     		pop	{r3, pc}
 176              	.L20:
 177 000e 00BF     		.align	2
 178              	.L19:
 179 0010 00040240 		.word	1073873920
 180              		.cfi_endproc
 181              	.LFE135:
 183              		.section	.text.SPI_CS_0,"ax",%progbits
 184              		.align	1
 185              		.global	SPI_CS_0
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	SPI_CS_0:
 192              	.LFB136:
  76:Src/nRF24.c   **** }
  77:Src/nRF24.c   **** 
  78:Src/nRF24.c   **** /**
  79:Src/nRF24.c   ****   * @brief Set low on CS pin of SPI bus.
  80:Src/nRF24.c   ****   * @param None
  81:Src/nRF24.c   ****   * @retval None
  82:Src/nRF24.c   ****   */
  83:Src/nRF24.c   **** __inline__ void SPI_CS_0()
  84:Src/nRF24.c   **** {
 193              		.loc 1 84 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 08B5     		push	{r3, lr}
 198              	.LCFI5:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 3, -8
 201              		.cfi_offset 14, -4
  85:Src/nRF24.c   ****     /* CS Low == CSN High */
  86:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 202              		.loc 1 86 0
 203 0002 0122     		movs	r2, #1
 204 0004 1021     		movs	r1, #16
 205 0006 0248     		ldr	r0, .L23
 206 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 207              	.LVL5:
 208 000c 08BD     		pop	{r3, pc}
 209              	.L24:
 210 000e 00BF     		.align	2
ARM GAS  /tmp/ccrkxNaW.s 			page 6


 211              	.L23:
 212 0010 00040240 		.word	1073873920
 213              		.cfi_endproc
 214              	.LFE136:
 216              		.section	.text.SPI_READ_MISO,"ax",%progbits
 217              		.align	1
 218              		.global	SPI_READ_MISO
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	SPI_READ_MISO:
 225              	.LFB137:
  87:Src/nRF24.c   **** }
  88:Src/nRF24.c   **** 
  89:Src/nRF24.c   **** 
  90:Src/nRF24.c   **** /**
  91:Src/nRF24.c   ****   * @brief  Get pin-level on MISO pin of SPI bus.
  92:Src/nRF24.c   ****   * @param  None
  93:Src/nRF24.c   ****   * @retval None
  94:Src/nRF24.c   ****   */
  95:Src/nRF24.c   **** __inline__ GPIO_PinState SPI_READ_MISO()
  96:Src/nRF24.c   **** {
 226              		.loc 1 96 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI6:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
  97:Src/nRF24.c   ****   return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 235              		.loc 1 97 0
 236 0002 4FF48061 		mov	r1, #1024
 237 0006 0248     		ldr	r0, .L27
 238 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 239              	.LVL6:
  98:Src/nRF24.c   **** }
 240              		.loc 1 98 0
 241 000c 08BD     		pop	{r3, pc}
 242              	.L28:
 243 000e 00BF     		.align	2
 244              	.L27:
 245 0010 00000240 		.word	1073872896
 246              		.cfi_endproc
 247              	.LFE137:
 249              		.section	.text.serial_print,"ax",%progbits
 250              		.align	1
 251              		.global	serial_print
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv4-sp-d16
 257              	serial_print:
 258              	.LFB138:
  99:Src/nRF24.c   **** 
ARM GAS  /tmp/ccrkxNaW.s 			page 7


 100:Src/nRF24.c   **** /**
 101:Src/nRF24.c   ****   * @brief   Print debug string through USART.
 102:Src/nRF24.c   ****   * @param   p_msg Pointer to anynomous message string.
 103:Src/nRF24.c   ****   * @retval  None.
 104:Src/nRF24.c   ****   * @note    When testing on STM32F401RE Nucleo Board, the board supports virtual COM (serial) port
 105:Src/nRF24.c   ****   *            Connecting a USB-TTL adapter such as CH340 to the 'TX/D1' on morpho connector will n
 106:Src/nRF24.c   ****   *             In the datasheet it has been confirmed that the USART2 pins have been to multiplexe
 107:Src/nRF24.c   ****   *            On the PC, look for port /dev/ttyACM0 as the virtual serial port.  
 108:Src/nRF24.c   ****   */
 109:Src/nRF24.c   **** __inline__ void serial_print(char* message)
 110:Src/nRF24.c   **** {
 259              		.loc 1 110 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL7:
 264 0000 10B5     		push	{r4, lr}
 265              	.LCFI7:
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 4, -8
 268              		.cfi_offset 14, -4
 269 0002 0446     		mov	r4, r0
 111:Src/nRF24.c   ****   HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
 270              		.loc 1 111 0
 271 0004 FFF7FEFF 		bl	strlen
 272              	.LVL8:
 273 0008 6423     		movs	r3, #100
 274 000a 82B2     		uxth	r2, r0
 275 000c 2146     		mov	r1, r4
 276 000e 0248     		ldr	r0, .L31
 277 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 278              	.LVL9:
 279 0014 10BD     		pop	{r4, pc}
 280              	.LVL10:
 281              	.L32:
 282 0016 00BF     		.align	2
 283              	.L31:
 284 0018 00000000 		.word	huart2
 285              		.cfi_endproc
 286              	.LFE138:
 288              		.section	.text.SPI_DELAY,"ax",%progbits
 289              		.align	1
 290              		.global	SPI_DELAY
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	SPI_DELAY:
 297              	.LFB141:
 112:Src/nRF24.c   **** }
 113:Src/nRF24.c   **** 
 114:Src/nRF24.c   **** /**
 115:Src/nRF24.c   ****   * @brief      Clock out (write) 8 bits on MOSI of SPI bus on SCK high.
 116:Src/nRF24.c   ****   * @param[in]  tx_data One byte of data to transmit.
 117:Src/nRF24.c   ****   * @retval     None.
 118:Src/nRF24.c   ****   * @note  
 119:Src/nRF24.c   ****   *   Endianess: Most Significant Bit First. Cn: Command Bits. Sn: Status Register bits. Dn: data b
ARM GAS  /tmp/ccrkxNaW.s 			page 8


 120:Src/nRF24.c   ****   *
 121:Src/nRF24.c   ****   *   Following is a diagram for time sequence:
 122:Src/nRF24.c   ****   *   CSN ````\____________________________________________________________________________________
 123:Src/nRF24.c   ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|D7|__|D6|__|D5|__|D4|__|D3|__|
 124:Src/nRF24.c   ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 125:Src/nRF24.c   ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 126:Src/nRF24.c   ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 127:Src/nRF24.c   ****   *
 128:Src/nRF24.c   ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 129:Src/nRF24.c   ****   */
 130:Src/nRF24.c   **** void gpio_clockout_8_bits(uint8_t tx_data) 
 131:Src/nRF24.c   **** {
 132:Src/nRF24.c   ****   SPI_DELAY();
 133:Src/nRF24.c   ****   for (int i = 0; i < 8; ++i) 
 134:Src/nRF24.c   ****   {
 135:Src/nRF24.c   ****       SPI_SCK_0();
 136:Src/nRF24.c   ****       SPI_DELAY();
 137:Src/nRF24.c   **** 
 138:Src/nRF24.c   ****       if(tx_data & 0x80) // MSBit first
 139:Src/nRF24.c   ****           SPI_MOSI_1();
 140:Src/nRF24.c   ****       else
 141:Src/nRF24.c   ****           SPI_MOSI_0();
 142:Src/nRF24.c   **** 
 143:Src/nRF24.c   ****       /* setup time */  
 144:Src/nRF24.c   ****       SPI_DELAY();
 145:Src/nRF24.c   **** 
 146:Src/nRF24.c   ****       SPI_SCK_1(); // clock data
 147:Src/nRF24.c   ****       tx_data = tx_data << 1; // load next MSB
 148:Src/nRF24.c   **** 
 149:Src/nRF24.c   ****       /* hold time */
 150:Src/nRF24.c   ****       SPI_DELAY();
 151:Src/nRF24.c   ****   }
 152:Src/nRF24.c   ****   SPI_SCK_0();
 153:Src/nRF24.c   **** }
 154:Src/nRF24.c   **** 
 155:Src/nRF24.c   **** /**
 156:Src/nRF24.c   ****   * @brief  Clock in (read) 8 bits from MISO of SPI bus on SCK high.
 157:Src/nRF24.c   ****   * @param  None
 158:Src/nRF24.c   ****   * @retval A byte of read data.
 159:Src/nRF24.c   ****   * @note
 160:Src/nRF24.c   ****   *   Endianess: Most Significant Bit first. Cn: Command bits. Sn: Status register bits. Dn: Data b
 161:Src/nRF24.c   ****   *    
 162:Src/nRF24.c   ****   *   Following is a diagram for time sequence:
 163:Src/nRF24.c   ****   *   CSN ````\____________________________________________________________________________________
 164:Src/nRF24.c   ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|00|__|00|__|00|__|00|__|00|__|
 165:Src/nRF24.c   ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 166:Src/nRF24.c   ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 167:Src/nRF24.c   ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______|D0|__|D1|__|D2|__|D3|__|D4|__|
 168:Src/nRF24.c   ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 169:Src/nRF24.c   ****   */
 170:Src/nRF24.c   **** uint8_t gpio_clockin_8_bits(void)
 171:Src/nRF24.c   **** {
 172:Src/nRF24.c   ****   uint8_t rx_data = 0;
 173:Src/nRF24.c   **** 
 174:Src/nRF24.c   ****   SPI_DELAY();
 175:Src/nRF24.c   ****   for (int i=0; i < 8; ++i) 
 176:Src/nRF24.c   ****   {
ARM GAS  /tmp/ccrkxNaW.s 			page 9


 177:Src/nRF24.c   ****       SPI_SCK_0();
 178:Src/nRF24.c   ****       SPI_DELAY();
 179:Src/nRF24.c   ****       SPI_MOSI_0();
 180:Src/nRF24.c   **** 
 181:Src/nRF24.c   ****       /* setup time */
 182:Src/nRF24.c   ****       SPI_SCK_1();
 183:Src/nRF24.c   ****       SPI_DELAY();
 184:Src/nRF24.c   ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 185:Src/nRF24.c   ****       rx_data |= SPI_READ_MISO();
 186:Src/nRF24.c   **** 
 187:Src/nRF24.c   ****       /* hold time */
 188:Src/nRF24.c   ****       SPI_DELAY();
 189:Src/nRF24.c   ****   }
 190:Src/nRF24.c   **** 
 191:Src/nRF24.c   ****   SPI_SCK_0();
 192:Src/nRF24.c   ****   return rx_data;
 193:Src/nRF24.c   **** }
 194:Src/nRF24.c   ****   
 195:Src/nRF24.c   **** 
 196:Src/nRF24.c   **** 
 197:Src/nRF24.c   **** /* SPI Datalink Layer------------------------------------------------------------------------------
 198:Src/nRF24.c   **** void SPI_DELAY() 
 199:Src/nRF24.c   **** {
 298              		.loc 1 199 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302 0000 08B5     		push	{r3, lr}
 303              	.LCFI8:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 3, -8
 306              		.cfi_offset 14, -4
 200:Src/nRF24.c   ****   HAL_Delay(1);
 307              		.loc 1 200 0
 308 0002 0120     		movs	r0, #1
 309 0004 FFF7FEFF 		bl	HAL_Delay
 310              	.LVL11:
 311 0008 08BD     		pop	{r3, pc}
 312              		.cfi_endproc
 313              	.LFE141:
 315              		.section	.text.gpio_clockout_8_bits,"ax",%progbits
 316              		.align	1
 317              		.global	gpio_clockout_8_bits
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu fpv4-sp-d16
 323              	gpio_clockout_8_bits:
 324              	.LFB139:
 131:Src/nRF24.c   ****   SPI_DELAY();
 325              		.loc 1 131 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              	.LVL12:
 330 0000 38B5     		push	{r3, r4, r5, lr}
 331              	.LCFI9:
ARM GAS  /tmp/ccrkxNaW.s 			page 10


 332              		.cfi_def_cfa_offset 16
 333              		.cfi_offset 3, -16
 334              		.cfi_offset 4, -12
 335              		.cfi_offset 5, -8
 336              		.cfi_offset 14, -4
 337 0002 0446     		mov	r4, r0
 132:Src/nRF24.c   ****   for (int i = 0; i < 8; ++i) 
 338              		.loc 1 132 0
 339 0004 FFF7FEFF 		bl	SPI_DELAY
 340              	.LVL13:
 341              	.LBB35:
 133:Src/nRF24.c   ****   {
 342              		.loc 1 133 0
 343 0008 0025     		movs	r5, #0
 344 000a 12E0     		b	.L36
 345              	.LVL14:
 346              	.L42:
 347              	.LBB36:
 348              	.LBB37:
  54:Src/nRF24.c   **** }
 349              		.loc 1 54 0
 350 000c 0122     		movs	r2, #1
 351 000e 4FF48061 		mov	r1, #1024
 352 0012 1548     		ldr	r0, .L43
 353 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 354              	.LVL15:
 355              	.L38:
 356              	.LBE37:
 357              	.LBE36:
 144:Src/nRF24.c   **** 
 358              		.loc 1 144 0 discriminator 2
 359 0018 FFF7FEFF 		bl	SPI_DELAY
 360              	.LVL16:
 361              	.LBB38:
 362              	.LBB39:
  34:Src/nRF24.c   **** }
 363              		.loc 1 34 0 discriminator 2
 364 001c 0122     		movs	r2, #1
 365 001e 4FF48071 		mov	r1, #256
 366 0022 1248     		ldr	r0, .L43+4
 367 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 368              	.LVL17:
 369              	.LBE39:
 370              	.LBE38:
 147:Src/nRF24.c   **** 
 371              		.loc 1 147 0 discriminator 2
 372 0028 6400     		lsls	r4, r4, #1
 373              	.LVL18:
 374 002a E4B2     		uxtb	r4, r4
 375              	.LVL19:
 150:Src/nRF24.c   ****   }
 376              		.loc 1 150 0 discriminator 2
 377 002c FFF7FEFF 		bl	SPI_DELAY
 378              	.LVL20:
 133:Src/nRF24.c   ****   {
 379              		.loc 1 133 0 discriminator 2
 380 0030 0135     		adds	r5, r5, #1
ARM GAS  /tmp/ccrkxNaW.s 			page 11


 381              	.LVL21:
 382              	.L36:
 133:Src/nRF24.c   ****   {
 383              		.loc 1 133 0 is_stmt 0 discriminator 1
 384 0032 072D     		cmp	r5, #7
 385 0034 11DC     		bgt	.L41
 386              	.LBB40:
 387              	.LBB41:
  44:Src/nRF24.c   **** } 
 388              		.loc 1 44 0 is_stmt 1
 389 0036 0022     		movs	r2, #0
 390 0038 4FF48071 		mov	r1, #256
 391 003c 0B48     		ldr	r0, .L43+4
 392 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 393              	.LVL22:
 394              	.LBE41:
 395              	.LBE40:
 136:Src/nRF24.c   **** 
 396              		.loc 1 136 0
 397 0042 FFF7FEFF 		bl	SPI_DELAY
 398              	.LVL23:
 138:Src/nRF24.c   ****           SPI_MOSI_1();
 399              		.loc 1 138 0
 400 0046 14F0800F 		tst	r4, #128
 401 004a DFD1     		bne	.L42
 402              	.LBB42:
 403              	.LBB43:
  64:Src/nRF24.c   **** }
 404              		.loc 1 64 0
 405 004c 0022     		movs	r2, #0
 406 004e 4FF48061 		mov	r1, #1024
 407 0052 0548     		ldr	r0, .L43
 408 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 409              	.LVL24:
 410 0058 DEE7     		b	.L38
 411              	.L41:
 412              	.LBE43:
 413              	.LBE42:
 414              	.LBE35:
 415              	.LBB44:
 416              	.LBB45:
  44:Src/nRF24.c   **** } 
 417              		.loc 1 44 0
 418 005a 0022     		movs	r2, #0
 419 005c 4FF48071 		mov	r1, #256
 420 0060 0248     		ldr	r0, .L43+4
 421 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 422              	.LVL25:
 423 0066 38BD     		pop	{r3, r4, r5, pc}
 424              	.LVL26:
 425              	.L44:
 426              		.align	2
 427              	.L43:
 428 0068 00040240 		.word	1073873920
 429 006c 00000240 		.word	1073872896
 430              	.LBE45:
 431              	.LBE44:
ARM GAS  /tmp/ccrkxNaW.s 			page 12


 432              		.cfi_endproc
 433              	.LFE139:
 435              		.section	.text.gpio_clockin_8_bits,"ax",%progbits
 436              		.align	1
 437              		.global	gpio_clockin_8_bits
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	gpio_clockin_8_bits:
 444              	.LFB140:
 171:Src/nRF24.c   ****   uint8_t rx_data = 0;
 445              		.loc 1 171 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449 0000 70B5     		push	{r4, r5, r6, lr}
 450              	.LCFI10:
 451              		.cfi_def_cfa_offset 16
 452              		.cfi_offset 4, -16
 453              		.cfi_offset 5, -12
 454              		.cfi_offset 6, -8
 455              		.cfi_offset 14, -4
 456              	.LVL27:
 174:Src/nRF24.c   ****   for (int i=0; i < 8; ++i) 
 457              		.loc 1 174 0
 458 0002 FFF7FEFF 		bl	SPI_DELAY
 459              	.LVL28:
 460              	.LBB46:
 175:Src/nRF24.c   ****   {
 461              		.loc 1 175 0
 462 0006 0026     		movs	r6, #0
 463              	.LBE46:
 172:Src/nRF24.c   **** 
 464              		.loc 1 172 0
 465 0008 3446     		mov	r4, r6
 466              	.LBB55:
 175:Src/nRF24.c   ****   {
 467              		.loc 1 175 0
 468 000a 22E0     		b	.L46
 469              	.LVL29:
 470              	.L47:
 471              	.LBB47:
 472              	.LBB48:
  44:Src/nRF24.c   **** } 
 473              		.loc 1 44 0
 474 000c 164D     		ldr	r5, .L49
 475 000e 0022     		movs	r2, #0
 476 0010 4FF48071 		mov	r1, #256
 477 0014 2846     		mov	r0, r5
 478 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 479              	.LVL30:
 480              	.LBE48:
 481              	.LBE47:
 178:Src/nRF24.c   ****       SPI_MOSI_0();
 482              		.loc 1 178 0
 483 001a FFF7FEFF 		bl	SPI_DELAY
ARM GAS  /tmp/ccrkxNaW.s 			page 13


 484              	.LVL31:
 485              	.LBB49:
 486              	.LBB50:
  64:Src/nRF24.c   **** }
 487              		.loc 1 64 0
 488 001e 0022     		movs	r2, #0
 489 0020 4FF48061 		mov	r1, #1024
 490 0024 1148     		ldr	r0, .L49+4
 491 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 492              	.LVL32:
 493              	.LBE50:
 494              	.LBE49:
 495              	.LBB51:
 496              	.LBB52:
  34:Src/nRF24.c   **** }
 497              		.loc 1 34 0
 498 002a 0122     		movs	r2, #1
 499 002c 4FF48071 		mov	r1, #256
 500 0030 2846     		mov	r0, r5
 501 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 502              	.LVL33:
 503              	.LBE52:
 504              	.LBE51:
 183:Src/nRF24.c   ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 505              		.loc 1 183 0
 506 0036 FFF7FEFF 		bl	SPI_DELAY
 507              	.LVL34:
 184:Src/nRF24.c   ****       rx_data |= SPI_READ_MISO();
 508              		.loc 1 184 0
 509 003a 6400     		lsls	r4, r4, #1
 510              	.LVL35:
 511 003c E4B2     		uxtb	r4, r4
 512              	.LVL36:
 513              	.LBB53:
 514              	.LBB54:
  97:Src/nRF24.c   **** }
 515              		.loc 1 97 0
 516 003e 4FF48061 		mov	r1, #1024
 517 0042 2846     		mov	r0, r5
 518 0044 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 519              	.LVL37:
 520              	.LBE54:
 521              	.LBE53:
 185:Src/nRF24.c   **** 
 522              		.loc 1 185 0
 523 0048 0443     		orrs	r4, r4, r0
 524              	.LVL38:
 525 004a E4B2     		uxtb	r4, r4
 526              	.LVL39:
 188:Src/nRF24.c   ****   }
 527              		.loc 1 188 0
 528 004c FFF7FEFF 		bl	SPI_DELAY
 529              	.LVL40:
 175:Src/nRF24.c   ****   {
 530              		.loc 1 175 0
 531 0050 0136     		adds	r6, r6, #1
 532              	.LVL41:
ARM GAS  /tmp/ccrkxNaW.s 			page 14


 533              	.L46:
 175:Src/nRF24.c   ****   {
 534              		.loc 1 175 0 is_stmt 0 discriminator 1
 535 0052 072E     		cmp	r6, #7
 536 0054 DADD     		ble	.L47
 537              	.LBE55:
 538              	.LBB56:
 539              	.LBB57:
  44:Src/nRF24.c   **** } 
 540              		.loc 1 44 0 is_stmt 1
 541 0056 0022     		movs	r2, #0
 542 0058 4FF48071 		mov	r1, #256
 543 005c 0248     		ldr	r0, .L49
 544 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 545              	.LVL42:
 546              	.LBE57:
 547              	.LBE56:
 193:Src/nRF24.c   ****   
 548              		.loc 1 193 0
 549 0062 2046     		mov	r0, r4
 550 0064 70BD     		pop	{r4, r5, r6, pc}
 551              	.LVL43:
 552              	.L50:
 553 0066 00BF     		.align	2
 554              	.L49:
 555 0068 00000240 		.word	1073872896
 556 006c 00040240 		.word	1073873920
 557              		.cfi_endproc
 558              	.LFE140:
 560              		.section	.text.spi_read_register,"ax",%progbits
 561              		.align	1
 562              		.global	spi_read_register
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	spi_read_register:
 569              	.LFB142:
 201:Src/nRF24.c   **** }
 202:Src/nRF24.c   **** 
 203:Src/nRF24.c   **** 
 204:Src/nRF24.c   **** /**
 205:Src/nRF24.c   ****   * @brief      Read data from the SPI target device register. Endianess: LSByte first.
 206:Src/nRF24.c   ****   * @param[in]  reg SPI target device register to write to.
 207:Src/nRF24.c   ****   * @param[in]  num_bytes Number of bytes needed to write to that address.
 208:Src/nRF24.c   ****   * @param[out] p_read_data A pointer pointing to a memory location that can store the data read fr
 209:Src/nRF24.c   ****   * @retval     none.
 210:Src/nRF24.c   ****   */
 211:Src/nRF24.c   **** void spi_read_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_read_data)
 212:Src/nRF24.c   **** {
 570              		.loc 1 212 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              	.LVL44:
 575 0000 70B5     		push	{r4, r5, r6, lr}
 576              	.LCFI11:
ARM GAS  /tmp/ccrkxNaW.s 			page 15


 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 4, -16
 579              		.cfi_offset 5, -12
 580              		.cfi_offset 6, -8
 581              		.cfi_offset 14, -4
 582 0002 0446     		mov	r4, r0
 583 0004 0D46     		mov	r5, r1
 584 0006 1646     		mov	r6, r2
 585              	.LBB58:
 586              	.LBB59:
  75:Src/nRF24.c   **** }
 587              		.loc 1 75 0
 588 0008 0022     		movs	r2, #0
 589              	.LVL45:
 590 000a 1021     		movs	r1, #16
 591              	.LVL46:
 592 000c 0948     		ldr	r0, .L55
 593              	.LVL47:
 594 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 595              	.LVL48:
 596              	.LBE59:
 597              	.LBE58:
 213:Src/nRF24.c   ****   /* SPI CHIP SELECT */
 214:Src/nRF24.c   ****   SPI_CS_1();
 215:Src/nRF24.c   ****   
 216:Src/nRF24.c   ****   /* Clock out target register. */
 217:Src/nRF24.c   ****   gpio_clockout_8_bits(reg);
 598              		.loc 1 217 0
 599 0012 2046     		mov	r0, r4
 600 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 601              	.LVL49:
 602              	.LBB60:
 218:Src/nRF24.c   **** 
 219:Src/nRF24.c   ****   /* Clock in target register value. */
 220:Src/nRF24.c   ****   for (int i = 0; i < num_bytes; ++i) 
 603              		.loc 1 220 0
 604 0018 0024     		movs	r4, #0
 605 001a 03E0     		b	.L52
 606              	.LVL50:
 607              	.L53:
 221:Src/nRF24.c   ****   {
 222:Src/nRF24.c   ****     p_read_data[i] = gpio_clockin_8_bits();
 608              		.loc 1 222 0 discriminator 3
 609 001c FFF7FEFF 		bl	gpio_clockin_8_bits
 610              	.LVL51:
 611 0020 3055     		strb	r0, [r6, r4]
 220:Src/nRF24.c   ****   {
 612              		.loc 1 220 0 discriminator 3
 613 0022 0134     		adds	r4, r4, #1
 614              	.LVL52:
 615              	.L52:
 220:Src/nRF24.c   ****   {
 616              		.loc 1 220 0 is_stmt 0 discriminator 1
 617 0024 AC42     		cmp	r4, r5
 618 0026 F9DB     		blt	.L53
 619              	.LBE60:
 620              	.LBB61:
ARM GAS  /tmp/ccrkxNaW.s 			page 16


 621              	.LBB62:
  86:Src/nRF24.c   **** }
 622              		.loc 1 86 0 is_stmt 1
 623 0028 0122     		movs	r2, #1
 624 002a 1021     		movs	r1, #16
 625 002c 0148     		ldr	r0, .L55
 626 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 627              	.LVL53:
 628 0032 70BD     		pop	{r4, r5, r6, pc}
 629              	.LVL54:
 630              	.L56:
 631              		.align	2
 632              	.L55:
 633 0034 00040240 		.word	1073873920
 634              	.LBE62:
 635              	.LBE61:
 636              		.cfi_endproc
 637              	.LFE142:
 639              		.section	.text.spi_write_register,"ax",%progbits
 640              		.align	1
 641              		.global	spi_write_register
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	spi_write_register:
 648              	.LFB143:
 223:Src/nRF24.c   ****   }
 224:Src/nRF24.c   ****   
 225:Src/nRF24.c   ****   /* SPI CHIP DESELECT */
 226:Src/nRF24.c   ****   SPI_CS_0();
 227:Src/nRF24.c   **** }
 228:Src/nRF24.c   **** 
 229:Src/nRF24.c   **** 
 230:Src/nRF24.c   **** /**
 231:Src/nRF24.c   ****   * @brief      Write a number of bytes to the spi target device register.
 232:Src/nRF24.c   ****   * @param[in]  reg spi target device register to write to.
 233:Src/nRF24.c   ****   * @param[in]  num_bytes number of bytes needed to write to that address.
 234:Src/nRF24.c   ****   * @param[in]  p_writing_data A pointer pointing to a memory location storing the data to write.
 235:Src/nRF24.c   ****   * @retval     none.
 236:Src/nRF24.c   ****   */
 237:Src/nRF24.c   **** void spi_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 238:Src/nRF24.c   **** {
 649              		.loc 1 238 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 0
 652              		@ frame_needed = 0, uses_anonymous_args = 0
 653              	.LVL55:
 654 0000 70B5     		push	{r4, r5, r6, lr}
 655              	.LCFI12:
 656              		.cfi_def_cfa_offset 16
 657              		.cfi_offset 4, -16
 658              		.cfi_offset 5, -12
 659              		.cfi_offset 6, -8
 660              		.cfi_offset 14, -4
 661 0002 0446     		mov	r4, r0
 662 0004 0D46     		mov	r5, r1
ARM GAS  /tmp/ccrkxNaW.s 			page 17


 663 0006 1646     		mov	r6, r2
 664              	.LBB63:
 665              	.LBB64:
  75:Src/nRF24.c   **** }
 666              		.loc 1 75 0
 667 0008 0022     		movs	r2, #0
 668              	.LVL56:
 669 000a 1021     		movs	r1, #16
 670              	.LVL57:
 671 000c 0948     		ldr	r0, .L61
 672              	.LVL58:
 673 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 674              	.LVL59:
 675              	.LBE64:
 676              	.LBE63:
 239:Src/nRF24.c   ****   /* SPI CHIP SELECT */
 240:Src/nRF24.c   ****   SPI_CS_1();
 241:Src/nRF24.c   **** 
 242:Src/nRF24.c   ****   /* Clock out target register. */
 243:Src/nRF24.c   ****   gpio_clockout_8_bits(reg); 
 677              		.loc 1 243 0
 678 0012 2046     		mov	r0, r4
 679 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 680              	.LVL60:
 681              	.LBB65:
 244:Src/nRF24.c   **** 
 245:Src/nRF24.c   ****   /* Clock out value bytes to the target. */
 246:Src/nRF24.c   ****   for (int i = 0; i < num_bytes; ++i)
 682              		.loc 1 246 0
 683 0018 0024     		movs	r4, #0
 684 001a 03E0     		b	.L58
 685              	.LVL61:
 686              	.L59:
 687              	.LBB66:
 247:Src/nRF24.c   ****   {
 248:Src/nRF24.c   ****     uint8_t writing_byte = p_writing_data[i];
 249:Src/nRF24.c   ****     gpio_clockout_8_bits(writing_byte);
 688              		.loc 1 249 0 discriminator 3
 689 001c 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 690 001e FFF7FEFF 		bl	gpio_clockout_8_bits
 691              	.LVL62:
 692              	.LBE66:
 246:Src/nRF24.c   ****   {
 693              		.loc 1 246 0 discriminator 3
 694 0022 0134     		adds	r4, r4, #1
 695              	.LVL63:
 696              	.L58:
 246:Src/nRF24.c   ****   {
 697              		.loc 1 246 0 is_stmt 0 discriminator 1
 698 0024 AC42     		cmp	r4, r5
 699 0026 F9DB     		blt	.L59
 700              	.LBE65:
 701              	.LBB67:
 702              	.LBB68:
  86:Src/nRF24.c   **** }
 703              		.loc 1 86 0 is_stmt 1
 704 0028 0122     		movs	r2, #1
ARM GAS  /tmp/ccrkxNaW.s 			page 18


 705 002a 1021     		movs	r1, #16
 706 002c 0148     		ldr	r0, .L61
 707 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 708              	.LVL64:
 709 0032 70BD     		pop	{r4, r5, r6, pc}
 710              	.LVL65:
 711              	.L62:
 712              		.align	2
 713              	.L61:
 714 0034 00040240 		.word	1073873920
 715              	.LBE68:
 716              	.LBE67:
 717              		.cfi_endproc
 718              	.LFE143:
 720              		.section	.text.nRF24_CE_1,"ax",%progbits
 721              		.align	1
 722              		.global	nRF24_CE_1
 723              		.syntax unified
 724              		.thumb
 725              		.thumb_func
 726              		.fpu fpv4-sp-d16
 728              	nRF24_CE_1:
 729              	.LFB144:
 250:Src/nRF24.c   ****   }
 251:Src/nRF24.c   **** 
 252:Src/nRF24.c   ****   /* SPI CHIP DESELECT */
 253:Src/nRF24.c   ****   SPI_CS_0();
 254:Src/nRF24.c   **** }
 255:Src/nRF24.c   **** 
 256:Src/nRF24.c   **** 
 257:Src/nRF24.c   **** /* nRF24 Operations -------------------------------------------------------------------------------
 258:Src/nRF24.c   **** 
 259:Src/nRF24.c   **** 
 260:Src/nRF24.c   **** 
 261:Src/nRF24.c   **** /**
 262:Src/nRF24.c   ****   * @brief Set high on Chip-Enable pin of nRF24L01.
 263:Src/nRF24.c   ****   * @param None
 264:Src/nRF24.c   ****   * @retval None
 265:Src/nRF24.c   ****   */
 266:Src/nRF24.c   **** void nRF24_CE_1()
 267:Src/nRF24.c   **** {
 730              		.loc 1 267 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734 0000 08B5     		push	{r3, lr}
 735              	.LCFI13:
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 3, -8
 738              		.cfi_offset 14, -4
 268:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  
 739              		.loc 1 268 0
 740 0002 0122     		movs	r2, #1
 741 0004 2021     		movs	r1, #32
 742 0006 0248     		ldr	r0, .L65
 743 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 744              	.LVL66:
ARM GAS  /tmp/ccrkxNaW.s 			page 19


 745 000c 08BD     		pop	{r3, pc}
 746              	.L66:
 747 000e 00BF     		.align	2
 748              	.L65:
 749 0010 00040240 		.word	1073873920
 750              		.cfi_endproc
 751              	.LFE144:
 753              		.section	.text.nRF24_CE_0,"ax",%progbits
 754              		.align	1
 755              		.global	nRF24_CE_0
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv4-sp-d16
 761              	nRF24_CE_0:
 762              	.LFB145:
 269:Src/nRF24.c   **** }
 270:Src/nRF24.c   **** 
 271:Src/nRF24.c   **** 
 272:Src/nRF24.c   **** /**
 273:Src/nRF24.c   ****   * @brief Set low on Chip-Enable pin of nRF24L01.
 274:Src/nRF24.c   ****   * @param None
 275:Src/nRF24.c   ****   * @retval None
 276:Src/nRF24.c   ****   */
 277:Src/nRF24.c   **** void nRF24_CE_0()
 278:Src/nRF24.c   **** {
 763              		.loc 1 278 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767 0000 08B5     		push	{r3, lr}
 768              	.LCFI14:
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 3, -8
 771              		.cfi_offset 14, -4
 279:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 772              		.loc 1 279 0
 773 0002 0022     		movs	r2, #0
 774 0004 2021     		movs	r1, #32
 775 0006 0248     		ldr	r0, .L69
 776 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 777              	.LVL67:
 778 000c 08BD     		pop	{r3, pc}
 779              	.L70:
 780 000e 00BF     		.align	2
 781              	.L69:
 782 0010 00040240 		.word	1073873920
 783              		.cfi_endproc
 784              	.LFE145:
 786              		.section	.text.nRF24_verified_write_register,"ax",%progbits
 787              		.align	1
 788              		.global	nRF24_verified_write_register
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 792              		.fpu fpv4-sp-d16
 794              	nRF24_verified_write_register:
ARM GAS  /tmp/ccrkxNaW.s 			page 20


 795              	.LFB146:
 280:Src/nRF24.c   **** }
 281:Src/nRF24.c   **** 
 282:Src/nRF24.c   **** /**
 283:Src/nRF24.c   ****   * @brief      Write to a register on nRF24L01+ through SPI. Read the same registers after write t
 284:Src/nRF24.c   ****   * @param[in]  reg The target register to write value to.
 285:Src/nRF24.c   ****   * @param[in]  num_bytes Number of bytes to write.
 286:Src/nRF24.c   ****   * @param[in]  p_writing_data Data to write.
 287:Src/nRF24.c   ****   * @retval     Boolean. 1 for mistakes happen. 0 for success.
 288:Src/nRF24.c   ****   * @note       reg & ~ W_REGISTER_MASK is reverse operation of reg | W_REGISTER_MASK,
 289:Src/nRF24.c   ****   *               essentially get rid of Write Regiter Mask and add a Read Register Mask. 
 290:Src/nRF24.c   ****   */
 291:Src/nRF24.c   **** bool nRF24_verified_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 292:Src/nRF24.c   **** {
 796              		.loc 1 292 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 64
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800              	.LVL68:
 801 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 802              	.LCFI15:
 803              		.cfi_def_cfa_offset 32
 804              		.cfi_offset 4, -32
 805              		.cfi_offset 5, -28
 806              		.cfi_offset 6, -24
 807              		.cfi_offset 7, -20
 808              		.cfi_offset 8, -16
 809              		.cfi_offset 9, -12
 810              		.cfi_offset 10, -8
 811              		.cfi_offset 14, -4
 812 0004 90B0     		sub	sp, sp, #64
 813              	.LCFI16:
 814              		.cfi_def_cfa_offset 96
 815 0006 00AF     		add	r7, sp, #0
 816              	.LCFI17:
 817              		.cfi_def_cfa_register 7
 818 0008 0546     		mov	r5, r0
 819 000a 0C46     		mov	r4, r1
 820 000c 9046     		mov	r8, r2
 293:Src/nRF24.c   **** 
 294:Src/nRF24.c   ****     char message[64] = {'\0'};
 821              		.loc 1 294 0
 822 000e 4022     		movs	r2, #64
 823              	.LVL69:
 824 0010 0021     		movs	r1, #0
 825              	.LVL70:
 826 0012 3846     		mov	r0, r7
 827              	.LVL71:
 828 0014 FFF7FEFF 		bl	memset
 829              	.LVL72:
 295:Src/nRF24.c   ****     uint8_t read_data[num_bytes];
 830              		.loc 1 295 0
 831 0018 A246     		mov	r10, r4
 832              	.LVL73:
 833 001a E31D     		adds	r3, r4, #7
 834 001c 23F00703 		bic	r3, r3, #7
 835 0020 ADEB030D 		sub	sp, sp, r3
ARM GAS  /tmp/ccrkxNaW.s 			page 21


 836 0024 E946     		mov	r9, sp
 837              	.LVL74:
 296:Src/nRF24.c   **** 
 297:Src/nRF24.c   ****     /* Write the data to target register. */
 298:Src/nRF24.c   ****     spi_write_register(reg, num_bytes, p_writing_data); 
 838              		.loc 1 298 0
 839 0026 4246     		mov	r2, r8
 840 0028 2146     		mov	r1, r4
 841 002a 2846     		mov	r0, r5
 842 002c FFF7FEFF 		bl	spi_write_register
 843              	.LVL75:
 299:Src/nRF24.c   **** 
 300:Src/nRF24.c   ****     /* Read from same target register to verify if data has been successfully written. */
 301:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK | (reg & ~W_REGISTER_MASK), num_bytes, read_data);
 844              		.loc 1 301 0
 845 0030 6A46     		mov	r2, sp
 846 0032 2146     		mov	r1, r4
 847 0034 05F0DF00 		and	r0, r5, #223
 848 0038 FFF7FEFF 		bl	spi_read_register
 849              	.LVL76:
 850              	.LBB78:
 302:Src/nRF24.c   **** 
 303:Src/nRF24.c   ****     for (int i = 0; i < num_bytes; ++i) 
 851              		.loc 1 303 0
 852 003c 0026     		movs	r6, #0
 853              	.LVL77:
 854              	.L72:
 855              		.loc 1 303 0 is_stmt 0 discriminator 1
 856 003e 5645     		cmp	r6, r10
 857 0040 59DA     		bge	.L77
 304:Src/nRF24.c   ****     {
 305:Src/nRF24.c   ****       if (read_data[i] != p_writing_data[i])  /* check mismatch between written data and read data 
 858              		.loc 1 305 0 is_stmt 1
 859 0042 19F80620 		ldrb	r2, [r9, r6]	@ zero_extendqisi2
 860 0046 08EB0604 		add	r4, r8, r6
 861 004a 18F80630 		ldrb	r3, [r8, r6]	@ zero_extendqisi2
 862 004e 9A42     		cmp	r2, r3
 863 0050 27D1     		bne	.L78
 306:Src/nRF24.c   ****       {
 307:Src/nRF24.c   ****         #ifdef NRF24_DEBUG
 308:Src/nRF24.c   ****         strcpy(message, "Problem writing to nRF24 register -- ");
 309:Src/nRF24.c   ****         serial_print(message);
 310:Src/nRF24.c   ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 311:Src/nRF24.c   ****         serial_print(message);
 312:Src/nRF24.c   ****         #endif 
 313:Src/nRF24.c   ****         return true;
 314:Src/nRF24.c   ****       } else {
 315:Src/nRF24.c   ****         #ifdef NRF24_DEBUG
 316:Src/nRF24.c   ****         strcpy(message, "Success writing to nRF24 register -- ");
 864              		.loc 1 316 0 discriminator 2
 865 0052 3C46     		mov	r4, r7
 866 0054 2A4D     		ldr	r5, .L79
 867 0056 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 868 0058 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 869 005a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 870 005c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 871 005e 95E80300 		ldm	r5, {r0, r1}
ARM GAS  /tmp/ccrkxNaW.s 			page 22


 872 0062 44F8040B 		str	r0, [r4], #4
 873 0066 2180     		strh	r1, [r4]	@ movhi
 874              	.LVL78:
 875              	.LBB79:
 876              	.LBB80:
 111:Src/nRF24.c   **** }
 877              		.loc 1 111 0 discriminator 2
 878 0068 3846     		mov	r0, r7
 879              	.LVL79:
 880 006a FFF7FEFF 		bl	strlen
 881              	.LVL80:
 882 006e 254C     		ldr	r4, .L79+4
 883              	.LVL81:
 884 0070 6423     		movs	r3, #100
 885 0072 82B2     		uxth	r2, r0
 886 0074 3946     		mov	r1, r7
 887              	.LVL82:
 888 0076 2046     		mov	r0, r4
 889 0078 FFF7FEFF 		bl	HAL_UART_Transmit
 890              	.LVL83:
 891              	.LBE80:
 892              	.LBE79:
 317:Src/nRF24.c   ****         serial_print(message);
 318:Src/nRF24.c   ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 893              		.loc 1 318 0 discriminator 2
 894 007c 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 895 0080 18F80620 		ldrb	r2, [r8, r6]	@ zero_extendqisi2
 896 0084 2049     		ldr	r1, .L79+8
 897 0086 3846     		mov	r0, r7
 898 0088 FFF7FEFF 		bl	sprintf
 899              	.LVL84:
 900              	.LBB81:
 901              	.LBB82:
 111:Src/nRF24.c   **** }
 902              		.loc 1 111 0 discriminator 2
 903 008c 3846     		mov	r0, r7
 904              	.LVL85:
 905 008e FFF7FEFF 		bl	strlen
 906              	.LVL86:
 907 0092 6423     		movs	r3, #100
 908 0094 82B2     		uxth	r2, r0
 909 0096 3946     		mov	r1, r7
 910              	.LVL87:
 911 0098 2046     		mov	r0, r4
 912 009a FFF7FEFF 		bl	HAL_UART_Transmit
 913              	.LVL88:
 914              	.LBE82:
 915              	.LBE81:
 303:Src/nRF24.c   ****     {
 916              		.loc 1 303 0 discriminator 2
 917 009e 0136     		adds	r6, r6, #1
 918              	.LVL89:
 919 00a0 CDE7     		b	.L72
 920              	.L78:
 308:Src/nRF24.c   ****         serial_print(message);
 921              		.loc 1 308 0
 922 00a2 3D46     		mov	r5, r7
ARM GAS  /tmp/ccrkxNaW.s 			page 23


 923 00a4 DFF864E0 		ldr	lr, .L79+12
 924 00a8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 925 00ac 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 926 00ae BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 927 00b2 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 928 00b4 9EE80300 		ldm	lr, {r0, r1}
 929 00b8 45F8040B 		str	r0, [r5], #4
 930 00bc 2980     		strh	r1, [r5]	@ movhi
 931              	.LVL90:
 932              	.LBB83:
 933              	.LBB84:
 111:Src/nRF24.c   **** }
 934              		.loc 1 111 0
 935 00be 3846     		mov	r0, r7
 936              	.LVL91:
 937 00c0 FFF7FEFF 		bl	strlen
 938              	.LVL92:
 939 00c4 0F4D     		ldr	r5, .L79+4
 940              	.LVL93:
 941 00c6 6423     		movs	r3, #100
 942 00c8 82B2     		uxth	r2, r0
 943 00ca 3946     		mov	r1, r7
 944              	.LVL94:
 945 00cc 2846     		mov	r0, r5
 946 00ce FFF7FEFF 		bl	HAL_UART_Transmit
 947              	.LVL95:
 948              	.LBE84:
 949              	.LBE83:
 310:Src/nRF24.c   ****         serial_print(message);
 950              		.loc 1 310 0
 951 00d2 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 952 00d6 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 953 00d8 0B49     		ldr	r1, .L79+8
 954 00da 3846     		mov	r0, r7
 955 00dc FFF7FEFF 		bl	sprintf
 956              	.LVL96:
 957              	.LBB85:
 958              	.LBB86:
 111:Src/nRF24.c   **** }
 959              		.loc 1 111 0
 960 00e0 3846     		mov	r0, r7
 961              	.LVL97:
 962 00e2 FFF7FEFF 		bl	strlen
 963              	.LVL98:
 964 00e6 6423     		movs	r3, #100
 965 00e8 82B2     		uxth	r2, r0
 966 00ea 3946     		mov	r1, r7
 967              	.LVL99:
 968 00ec 2846     		mov	r0, r5
 969 00ee FFF7FEFF 		bl	HAL_UART_Transmit
 970              	.LVL100:
 971              	.LBE86:
 972              	.LBE85:
 313:Src/nRF24.c   ****       } else {
 973              		.loc 1 313 0
 974 00f2 0120     		movs	r0, #1
 975 00f4 00E0     		b	.L74
ARM GAS  /tmp/ccrkxNaW.s 			page 24


 976              	.LVL101:
 977              	.L77:
 978              	.LBE78:
 319:Src/nRF24.c   ****         serial_print(message);
 320:Src/nRF24.c   ****         #endif
 321:Src/nRF24.c   ****       }
 322:Src/nRF24.c   ****   }
 323:Src/nRF24.c   ****   return false;
 979              		.loc 1 323 0
 980 00f6 0020     		movs	r0, #0
 981              	.L74:
 324:Src/nRF24.c   **** }
 982              		.loc 1 324 0
 983 00f8 4037     		adds	r7, r7, #64
 984              	.LCFI18:
 985              		.cfi_def_cfa_offset 32
 986 00fa BD46     		mov	sp, r7
 987              	.LCFI19:
 988              		.cfi_def_cfa_register 13
 989              		@ sp needed
 990 00fc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 991              	.LVL102:
 992              	.L80:
 993              		.align	2
 994              	.L79:
 995 0100 54000000 		.word	.LC4
 996 0104 00000000 		.word	huart2
 997 0108 28000000 		.word	.LC3
 998 010c 00000000 		.word	.LC2
 999              		.cfi_endproc
 1000              	.LFE146:
 1002              		.section	.text.nRF24_tx_self_test,"ax",%progbits
 1003              		.align	1
 1004              		.global	nRF24_tx_self_test
 1005              		.syntax unified
 1006              		.thumb
 1007              		.thumb_func
 1008              		.fpu fpv4-sp-d16
 1010              	nRF24_tx_self_test:
 1011              	.LFB147:
 325:Src/nRF24.c   **** 
 326:Src/nRF24.c   **** 
 327:Src/nRF24.c   **** /**  
 328:Src/nRF24.c   ****  *  @brief  Test nRF24 transmitter function without a receiver. Use this function on a fresh setup 
 329:Src/nRF24.c   ****  *  @param  None.
 330:Src/nRF24.c   ****  *  @retval exit status. 0 success, 1 failure.
 331:Src/nRF24.c   ****  *  @note  
 332:Src/nRF24.c   ****  *      Steps: 1. Disable Auto Acknowledgement, disable Auto Retransmit. 
 333:Src/nRF24.c   ****  *                The reason to disable them is that if they are enabled, ShockBurst mode is on.
 334:Src/nRF24.c   ****  *								Without a usable receiver, it cannot be determined if the transceiver is working properly
 335:Src/nRF24.c   ****  *             2. TX_DS (in STATUS register) is expected to be set when data has been clock into TX
 336:Src/nRF24.c   ****  *             3. Check if STATUS = 0x2E, if so we have a working TX module.
 337:Src/nRF24.c   ****  *            
 338:Src/nRF24.c   ****  *            After writing to W_TX_PAYLOAD, TX_EMPTY (in FIFO_STATUS register) becomes 0.
 339:Src/nRF24.c   ****  *            
 340:Src/nRF24.c   ****  *            What happens if sending is not successful?
 341:Src/nRF24.c   ****  *            TX_FULL (in FIFO_STATUS register) becomes 1.
ARM GAS  /tmp/ccrkxNaW.s 			page 25


 342:Src/nRF24.c   ****  *            TX_FULL (in STATUS register) becomes 1.
 343:Src/nRF24.c   ****  *            TX_DS (in STATUS register) remains 0.  
 344:Src/nRF24.c   ****  *
 345:Src/nRF24.c   ****  *      States: 
 346:Src/nRF24.c   ****  *            The states can be referred in 6.1.1 State diagram.
 347:Src/nRF24.c   ****  *      
 348:Src/nRF24.c   ****  *      STATUS register
 349:Src/nRF24.c   ****  *                7             6           5         4         3:1         0
 350:Src/nRF24.c   ****  *            <reserved>      RX_DR       TX_DS     MAX_RT     RX_P_NO     TX_FULL
 351:Src/nRF24.c   ****  *            -----------------------------------------------------------------------
 352:Src/nRF24.c   ****  *             Always 0       Receive     Transfer  Maximum    000-101 :    1: 
 353:Src/nRF24.c   ****  *                            Data        Data      TX         Data Pipe #  TX_FULL
 354:Src/nRF24.c   ****  *                            Ready       Sent      Transmits  110 :
 355:Src/nRF24.c   ****  *                                                             Not Used.
 356:Src/nRF24.c   ****  *                                                             111:
 357:Src/nRF24.c   ****  *                                                             RX FIFO Empty.
 358:Src/nRF24.c   ****  */
 359:Src/nRF24.c   **** bool nRF24_tx_self_test() 
 360:Src/nRF24.c   **** {
 1012              		.loc 1 360 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 136
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
 1016 0000 30B5     		push	{r4, r5, lr}
 1017              	.LCFI20:
 1018              		.cfi_def_cfa_offset 12
 1019              		.cfi_offset 4, -12
 1020              		.cfi_offset 5, -8
 1021              		.cfi_offset 14, -4
 1022 0002 A3B0     		sub	sp, sp, #140
 1023              	.LCFI21:
 1024              		.cfi_def_cfa_offset 152
 361:Src/nRF24.c   ****   char message[128];
 362:Src/nRF24.c   ****   uint8_t writing_byte;
 363:Src/nRF24.c   **** 
 364:Src/nRF24.c   ****   #ifdef NRF24_DEBUG
 365:Src/nRF24.c   ****   strcpy(message, "---- nrf24 tx self test. ----\n");
 1025              		.loc 1 365 0
 1026 0004 02AC     		add	r4, sp, #8
 1027 0006 424D     		ldr	r5, .L86
 1028 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1029 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1030 000c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 1031 0010 07C4     		stmia	r4!, {r0, r1, r2}
 1032 0012 24F8023B 		strh	r3, [r4], #2	@ movhi
 1033 0016 1B0C     		lsrs	r3, r3, #16
 1034 0018 2370     		strb	r3, [r4]
 1035              	.LVL103:
 1036              	.LBB95:
 1037              	.LBB96:
 111:Src/nRF24.c   **** }
 1038              		.loc 1 111 0
 1039 001a 02A8     		add	r0, sp, #8
 1040              	.LVL104:
 1041 001c FFF7FEFF 		bl	strlen
 1042              	.LVL105:
 1043 0020 3C4C     		ldr	r4, .L86+4
ARM GAS  /tmp/ccrkxNaW.s 			page 26


 1044              	.LVL106:
 1045 0022 6423     		movs	r3, #100
 1046 0024 82B2     		uxth	r2, r0
 1047 0026 02A9     		add	r1, sp, #8
 1048              	.LVL107:
 1049 0028 2046     		mov	r0, r4
 1050 002a FFF7FEFF 		bl	HAL_UART_Transmit
 1051              	.LVL108:
 1052              	.LBE96:
 1053              	.LBE95:
 366:Src/nRF24.c   ****   serial_print(message);
 367:Src/nRF24.c   **** 
 368:Src/nRF24.c   ****   strcpy(message, "---- This test to verifies function of a tranmitter send without a receiver. ---
 1054              		.loc 1 368 0
 1055 002e 5322     		movs	r2, #83
 1056 0030 3949     		ldr	r1, .L86+8
 1057 0032 02A8     		add	r0, sp, #8
 1058 0034 FFF7FEFF 		bl	memcpy
 1059              	.LVL109:
 1060              	.LBB97:
 1061              	.LBB98:
 111:Src/nRF24.c   **** }
 1062              		.loc 1 111 0
 1063 0038 02A8     		add	r0, sp, #8
 1064              	.LVL110:
 1065 003a FFF7FEFF 		bl	strlen
 1066              	.LVL111:
 1067 003e 6423     		movs	r3, #100
 1068 0040 82B2     		uxth	r2, r0
 1069 0042 02A9     		add	r1, sp, #8
 1070              	.LVL112:
 1071 0044 2046     		mov	r0, r4
 1072 0046 FFF7FEFF 		bl	HAL_UART_Transmit
 1073              	.LVL113:
 1074              	.LBE98:
 1075              	.LBE97:
 369:Src/nRF24.c   ****   serial_print(message);
 370:Src/nRF24.c   ****   #endif
 371:Src/nRF24.c   **** 
 372:Src/nRF24.c   ****   uint8_t nRF24_status = 0x00;
 1076              		.loc 1 372 0
 1077 004a 0025     		movs	r5, #0
 1078 004c 8DF80650 		strb	r5, [sp, #6]
 373:Src/nRF24.c   **** 
 374:Src/nRF24.c   ****   // Note that if we reset the nRF connected without re-poweron the chip, initial value of register
 375:Src/nRF24.c   ****   /* Current State: [Power-on reset 100 ms] */
 376:Src/nRF24.c   ****   nRF24_CE_0();
 1079              		.loc 1 376 0
 1080 0050 FFF7FEFF 		bl	nRF24_CE_0
 1081              	.LVL114:
 377:Src/nRF24.c   **** 
 378:Src/nRF24.c   ****   /* Current State: [Power-Down] (RF transmission is Power-Down, but SPI is alive.) */
 379:Src/nRF24.c   ****   writing_byte = 0x00;
 1082              		.loc 1 379 0
 1083 0054 22AC     		add	r4, sp, #136
 1084 0056 04F8815D 		strb	r5, [r4, #-129]!
 380:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
ARM GAS  /tmp/ccrkxNaW.s 			page 27


 1085              		.loc 1 380 0
 1086 005a 2246     		mov	r2, r4
 1087 005c 0121     		movs	r1, #1
 1088 005e 2120     		movs	r0, #33
 1089 0060 FFF7FEFF 		bl	nRF24_verified_write_register
 1090              	.LVL115:
 381:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
 1091              		.loc 1 381 0
 1092 0064 2246     		mov	r2, r4
 1093 0066 0121     		movs	r1, #1
 1094 0068 2220     		movs	r0, #34
 1095 006a FFF7FEFF 		bl	nRF24_verified_write_register
 1096              	.LVL116:
 382:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 1097              		.loc 1 382 0
 1098 006e 2246     		mov	r2, r4
 1099 0070 0121     		movs	r1, #1
 1100 0072 2420     		movs	r0, #36
 1101 0074 FFF7FEFF 		bl	nRF24_verified_write_register
 1102              	.LVL117:
 383:Src/nRF24.c   **** 
 384:Src/nRF24.c   ****   writing_byte = 0x0E;
 1103              		.loc 1 384 0
 1104 0078 0E23     		movs	r3, #14
 1105 007a 8DF80730 		strb	r3, [sp, #7]
 385:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
 1106              		.loc 1 385 0
 1107 007e 2246     		mov	r2, r4
 1108 0080 0121     		movs	r1, #1
 1109 0082 2020     		movs	r0, #32
 1110 0084 FFF7FEFF 		bl	nRF24_verified_write_register
 1111              	.LVL118:
 386:Src/nRF24.c   **** 
 387:Src/nRF24.c   ****   /* PWR_UP=1, state transition to [Standby-I] */
 388:Src/nRF24.c   ****   uint8_t test_payload[4] = {0xC0, 0xC0, 0xCA, 0xFE}; // clock in a payload, now TX FIFO not empty 
 1112              		.loc 1 388 0
 1113 0088 244B     		ldr	r3, .L86+12
 1114 008a 1B68     		ldr	r3, [r3]
 1115 008c 22AA     		add	r2, sp, #136
 1116 008e 42F8883D 		str	r3, [r2, #-136]!
 389:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 1117              		.loc 1 389 0
 1118 0092 0421     		movs	r1, #4
 1119 0094 A020     		movs	r0, #160
 1120 0096 FFF7FEFF 		bl	spi_write_register
 1121              	.LVL119:
 390:Src/nRF24.c   ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 1122              		.loc 1 390 0
 1123 009a FFF7FEFF 		bl	nRF24_CE_1
 1124              	.LVL120:
 391:Src/nRF24.c   ****   
 392:Src/nRF24.c   ****   /* TX FIFO not empty AND CE = 1, state transition to [TX MODE] */
 393:Src/nRF24.c   ****   /* Get nRF24 <STATUS> register value. */
 394:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &nRF24_status);
 1125              		.loc 1 394 0
 1126 009e 0DF10602 		add	r2, sp, #6
 1127 00a2 0121     		movs	r1, #1
ARM GAS  /tmp/ccrkxNaW.s 			page 28


 1128 00a4 0720     		movs	r0, #7
 1129 00a6 FFF7FEFF 		bl	spi_read_register
 1130              	.LVL121:
 395:Src/nRF24.c   **** 
 396:Src/nRF24.c   ****   SPI_DELAY(1);
 1131              		.loc 1 396 0
 1132 00aa 0120     		movs	r0, #1
 1133 00ac FFF7FEFF 		bl	SPI_DELAY
 1134              	.LVL122:
 397:Src/nRF24.c   **** 
 398:Src/nRF24.c   ****   /* CE=0, state transition -> now return to [Standby-I]. */
 399:Src/nRF24.c   ****   nRF24_CE_0();
 1135              		.loc 1 399 0
 1136 00b0 FFF7FEFF 		bl	nRF24_CE_0
 1137              	.LVL123:
 400:Src/nRF24.c   **** 
 401:Src/nRF24.c   ****   /* PWR_UP = 0, state transition to [Power Down] */
 402:Src/nRF24.c   ****   writing_byte = 0x08; // write default value for CONFIG register (writing_byte = 0)
 1138              		.loc 1 402 0
 1139 00b4 0823     		movs	r3, #8
 1140 00b6 8DF80730 		strb	r3, [sp, #7]
 403:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       
 1141              		.loc 1 403 0
 1142 00ba 2246     		mov	r2, r4
 1143 00bc 0121     		movs	r1, #1
 1144 00be 2020     		movs	r0, #32
 1145 00c0 FFF7FEFF 		bl	nRF24_verified_write_register
 1146              	.LVL124:
 404:Src/nRF24.c   **** 
 405:Src/nRF24.c   ****   /* Now the chip is back to power down mode, check test result. */
 406:Src/nRF24.c   ****   if (nRF24_status & 0x2E) 
 1147              		.loc 1 406 0
 1148 00c4 9DF80620 		ldrb	r2, [sp, #6]	@ zero_extendqisi2
 1149 00c8 12F02E0F 		tst	r2, #46
 1150 00cc 0FD1     		bne	.L85
 407:Src/nRF24.c   ****   {
 408:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 409:Src/nRF24.c   ****     strcpy(message, "\n > nRF24 transmission self-test has passed. \
 410:Src/nRF24.c   ****                        <STATUS> has value of 0x2E. \
 411:Src/nRF24.c   ****                        TX_DS (transfer data sent) was set. \
 412:Src/nRF24.c   ****                        RX_P_NO = 111, this means RX FIFO Empty. \n");
 413:Src/nRF24.c   ****     serial_print(message);
 414:Src/nRF24.c   ****     #endif
 415:Src/nRF24.c   ****     return 0;
 416:Src/nRF24.c   ****   } 
 417:Src/nRF24.c   ****   else 
 418:Src/nRF24.c   ****   {
 419:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 420:Src/nRF24.c   ****     sprintf(message, "\n > nRF24 transmission self-test has failed. <STATUS> is expected 0x2E. Curr
 1151              		.loc 1 420 0
 1152 00ce 1449     		ldr	r1, .L86+16
 1153 00d0 02A8     		add	r0, sp, #8
 1154 00d2 FFF7FEFF 		bl	sprintf
 1155              	.LVL125:
 1156              	.LBB99:
 1157              	.LBB100:
 111:Src/nRF24.c   **** }
ARM GAS  /tmp/ccrkxNaW.s 			page 29


 1158              		.loc 1 111 0
 1159 00d6 02A8     		add	r0, sp, #8
 1160              	.LVL126:
 1161 00d8 FFF7FEFF 		bl	strlen
 1162              	.LVL127:
 1163 00dc 6423     		movs	r3, #100
 1164 00de 82B2     		uxth	r2, r0
 1165 00e0 02A9     		add	r1, sp, #8
 1166              	.LVL128:
 1167 00e2 0C48     		ldr	r0, .L86+4
 1168 00e4 FFF7FEFF 		bl	HAL_UART_Transmit
 1169              	.LVL129:
 1170              	.LBE100:
 1171              	.LBE99:
 421:Src/nRF24.c   ****     serial_print(message);
 422:Src/nRF24.c   ****     #endif
 423:Src/nRF24.c   ****     return 1;
 1172              		.loc 1 423 0
 1173 00e8 0120     		movs	r0, #1
 1174              	.LVL130:
 1175              	.L83:
 424:Src/nRF24.c   ****   }
 425:Src/nRF24.c   **** 
 426:Src/nRF24.c   **** 
 427:Src/nRF24.c   ****   uint8_t payload[] = {0xC0, 0xC0, 0xCA, 0xFE}; /* clock out a four-byte payload "C0C0 CAFE" */
 428:Src/nRF24.c   **** 
 429:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, (uint8_t*) payload);
 430:Src/nRF24.c   **** 
 431:Src/nRF24.c   ****   /* Fire out the transmit packet */
 432:Src/nRF24.c   ****   nRF24_CE_1(); 
 433:Src/nRF24.c   **** 
 434:Src/nRF24.c   ****   /* read <STATUS> register*/
 435:Src/nRF24.c   ****   uint8_t status;
 436:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 437:Src/nRF24.c   **** 
 438:Src/nRF24.c   ****   #ifdef NRF24_DEBUG
 439:Src/nRF24.c   ****   sprintf(message, "<STATUS> REGISTER : %#02x\n", status);
 440:Src/nRF24.c   ****   serial_print(message);
 441:Src/nRF24.c   ****   #endif
 442:Src/nRF24.c   **** 
 443:Src/nRF24.c   ****   if (status == 0x2e) /* TX_DS bit is set. */
 444:Src/nRF24.c   ****   {
 445:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 446:Src/nRF24.c   ****     strcpy(message, "nRF24 send status - success -\n");
 447:Src/nRF24.c   ****     serial_print(message);
 448:Src/nRF24.c   ****     #endif
 449:Src/nRF24.c   ****   } 
 450:Src/nRF24.c   ****   else 
 451:Src/nRF24.c   ****   {
 452:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 453:Src/nRF24.c   ****     strcpy(message, "nRF24 send status - failure -\n");
 454:Src/nRF24.c   ****     serial_print(message);
 455:Src/nRF24.c   ****     #endif
 456:Src/nRF24.c   ****   }
 457:Src/nRF24.c   **** 
 458:Src/nRF24.c   ****   /* write 1 to <STATUS> register to clear TX_DS, TX_DS bit is Write-to-Clear. */
 459:Src/nRF24.c   **** 	nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
ARM GAS  /tmp/ccrkxNaW.s 			page 30


 460:Src/nRF24.c   **** 
 461:Src/nRF24.c   ****   nRF24_CE_0(); /* stop transmission. Returns to [Standby-I]. */
 462:Src/nRF24.c   ****   
 463:Src/nRF24.c   **** }
 1176              		.loc 1 463 0 discriminator 1
 1177 00ea 23B0     		add	sp, sp, #140
 1178              	.LCFI22:
 1179              		.cfi_remember_state
 1180              		.cfi_def_cfa_offset 12
 1181              		@ sp needed
 1182 00ec 30BD     		pop	{r4, r5, pc}
 1183              	.L85:
 1184              	.LCFI23:
 1185              		.cfi_restore_state
 409:Src/nRF24.c   ****                        <STATUS> has value of 0x2E. \
 1186              		.loc 1 409 0
 1187 00ee DD22     		movs	r2, #221
 1188 00f0 0C49     		ldr	r1, .L86+20
 1189 00f2 02A8     		add	r0, sp, #8
 1190 00f4 FFF7FEFF 		bl	memcpy
 1191              	.LVL131:
 1192              	.LBB101:
 1193              	.LBB102:
 111:Src/nRF24.c   **** }
 1194              		.loc 1 111 0
 1195 00f8 02A8     		add	r0, sp, #8
 1196              	.LVL132:
 1197 00fa FFF7FEFF 		bl	strlen
 1198              	.LVL133:
 1199 00fe 6423     		movs	r3, #100
 1200 0100 82B2     		uxth	r2, r0
 1201 0102 02A9     		add	r1, sp, #8
 1202              	.LVL134:
 1203 0104 0348     		ldr	r0, .L86+4
 1204 0106 FFF7FEFF 		bl	HAL_UART_Transmit
 1205              	.LVL135:
 1206              	.LBE102:
 1207              	.LBE101:
 415:Src/nRF24.c   ****   } 
 1208              		.loc 1 415 0
 1209 010a 2846     		mov	r0, r5
 1210 010c EDE7     		b	.L83
 1211              	.L87:
 1212 010e 00BF     		.align	2
 1213              	.L86:
 1214 0110 00000000 		.word	.LC5
 1215 0114 00000000 		.word	huart2
 1216 0118 20000000 		.word	.LC6
 1217 011c 00000000 		.word	.LANCHOR0
 1218 0120 54010000 		.word	.LC8
 1219 0124 74000000 		.word	.LC7
 1220              		.cfi_endproc
 1221              	.LFE147:
 1223              		.section	.text.nRF24_config_tx_mode_primitive,"ax",%progbits
 1224              		.align	1
 1225              		.global	nRF24_config_tx_mode_primitive
 1226              		.syntax unified
ARM GAS  /tmp/ccrkxNaW.s 			page 31


 1227              		.thumb
 1228              		.thumb_func
 1229              		.fpu fpv4-sp-d16
 1231              	nRF24_config_tx_mode_primitive:
 1232              	.LFB148:
 464:Src/nRF24.c   **** 
 465:Src/nRF24.c   **** /**
 466:Src/nRF24.c   ****   * @brief  Configure nRF24 to work in TX (transmit) mode, primitive implementation.
 467:Src/nRF24.c   ****   * @param  None.
 468:Src/nRF24.c   ****   * @retval None.
 469:Src/nRF24.c   ****   * @note   After nRF24_configure_tx_mode() is called, use nRF24_keep_sending() to keep sending dat
 470:Src/nRF24.c   ****   */
 471:Src/nRF24.c   **** void nRF24_config_tx_mode_primitive() 
 472:Src/nRF24.c   **** {
 1233              		.loc 1 472 0
 1234              		.cfi_startproc
 1235              		@ args = 0, pretend = 0, frame = 16
 1236              		@ frame_needed = 0, uses_anonymous_args = 0
 1237 0000 30B5     		push	{r4, r5, lr}
 1238              	.LCFI24:
 1239              		.cfi_def_cfa_offset 12
 1240              		.cfi_offset 4, -12
 1241              		.cfi_offset 5, -8
 1242              		.cfi_offset 14, -4
 1243 0002 85B0     		sub	sp, sp, #20
 1244              	.LCFI25:
 1245              		.cfi_def_cfa_offset 32
 473:Src/nRF24.c   ****     nRF24_CE_0();
 1246              		.loc 1 473 0
 1247 0004 FFF7FEFF 		bl	nRF24_CE_0
 1248              	.LVL136:
 474:Src/nRF24.c   **** 
 475:Src/nRF24.c   ****     /* Set TX_ADDR for sender. On the Receiver side, set RX_ADDR_P0 with same value. */
 476:Src/nRF24.c   **** 
 477:Src/nRF24.c   ****     uint8_t TX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  // 5 byte transmit-address
 1249              		.loc 1 477 0
 1250 0008 1F4B     		ldr	r3, .L90
 1251 000a 93E80300 		ldm	r3, {r0, r1}
 1252 000e 0290     		str	r0, [sp, #8]
 1253 0010 8DF80C10 		strb	r1, [sp, #12]
 478:Src/nRF24.c   ****     spi_write_register(W_REGISTER_MASK + TX_ADDR, 5, TX_ADDRESS);     // Write transmit-address to 
 1254              		.loc 1 478 0
 1255 0014 02AA     		add	r2, sp, #8
 1256 0016 0521     		movs	r1, #5
 1257 0018 3020     		movs	r0, #48
 1258 001a FFF7FEFF 		bl	spi_write_register
 1259              	.LVL137:
 479:Src/nRF24.c   **** 
 480:Src/nRF24.c   ****     uint8_t writing_byte;
 481:Src/nRF24.c   **** 
 482:Src/nRF24.c   **** 		/* Turn off auto-acknowledge in all channels, this would also disable Enhanced ShockBurst. */
 483:Src/nRF24.c   ****     writing_byte = 0x00;
 1260              		.loc 1 483 0
 1261 001e 0025     		movs	r5, #0
 1262 0020 04AC     		add	r4, sp, #16
 1263 0022 04F8095D 		strb	r5, [r4, #-9]!
 484:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);
ARM GAS  /tmp/ccrkxNaW.s 			page 32


 1264              		.loc 1 484 0
 1265 0026 2246     		mov	r2, r4
 1266 0028 0121     		movs	r1, #1
 1267 002a 2120     		movs	r0, #33
 1268 002c FFF7FEFF 		bl	nRF24_verified_write_register
 1269              	.LVL138:
 485:Src/nRF24.c   **** 
 486:Src/nRF24.c   **** 		/* Turn off RX pipe in all channels */
 487:Src/nRF24.c   ****     writing_byte = 0x00;
 1270              		.loc 1 487 0
 1271 0030 8DF80750 		strb	r5, [sp, #7]
 488:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);
 1272              		.loc 1 488 0
 1273 0034 2246     		mov	r2, r4
 1274 0036 0121     		movs	r1, #1
 1275 0038 2220     		movs	r0, #34
 1276 003a FFF7FEFF 		bl	nRF24_verified_write_register
 1277              	.LVL139:
 489:Src/nRF24.c   **** 
 490:Src/nRF24.c   **** 		/* Turn off auto-retransmission in all channels */
 491:Src/nRF24.c   ****     writing_byte = 0x00;
 1278              		.loc 1 491 0
 1279 003e 8DF80750 		strb	r5, [sp, #7]
 492:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);
 1280              		.loc 1 492 0
 1281 0042 2246     		mov	r2, r4
 1282 0044 0121     		movs	r1, #1
 1283 0046 2420     		movs	r0, #36
 1284 0048 FFF7FEFF 		bl	nRF24_verified_write_register
 1285              	.LVL140:
 493:Src/nRF24.c   **** 
 494:Src/nRF24.c   **** 		/* Set RF channel = 40. F = 2.4 GHz + 40 MHz = 2440 MHz.*/
 495:Src/nRF24.c   ****     writing_byte = 40;
 1286              		.loc 1 495 0
 1287 004c 2823     		movs	r3, #40
 1288 004e 8DF80730 		strb	r3, [sp, #7]
 496:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_CH, 1, &writing_byte);
 1289              		.loc 1 496 0
 1290 0052 2246     		mov	r2, r4
 1291 0054 0121     		movs	r1, #1
 1292 0056 2520     		movs	r0, #37
 1293 0058 FFF7FEFF 		bl	nRF24_verified_write_register
 1294              	.LVL141:
 497:Src/nRF24.c   **** 
 498:Src/nRF24.c   ****     writing_byte = 0x07;
 1295              		.loc 1 498 0
 1296 005c 0723     		movs	r3, #7
 1297 005e 8DF80730 		strb	r3, [sp, #7]
 499:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 1298              		.loc 1 499 0
 1299 0062 2246     		mov	r2, r4
 1300 0064 0121     		movs	r1, #1
 1301 0066 2620     		movs	r0, #38
 1302 0068 FFF7FEFF 		bl	nRF24_verified_write_register
 1303              	.LVL142:
 500:Src/nRF24.c   **** 
 501:Src/nRF24.c   ****     // PWR_UP, state transition to [Standby-I]
ARM GAS  /tmp/ccrkxNaW.s 			page 33


 502:Src/nRF24.c   ****     writing_byte = 0x0e;
 1304              		.loc 1 502 0
 1305 006c 0E23     		movs	r3, #14
 1306 006e 8DF80730 		strb	r3, [sp, #7]
 503:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);
 1307              		.loc 1 503 0
 1308 0072 2246     		mov	r2, r4
 1309 0074 0121     		movs	r1, #1
 1310 0076 2020     		movs	r0, #32
 1311 0078 FFF7FEFF 		bl	nRF24_verified_write_register
 1312              	.LVL143:
 504:Src/nRF24.c   ****     SPI_DELAY(150);
 1313              		.loc 1 504 0
 1314 007c 9620     		movs	r0, #150
 1315 007e FFF7FEFF 		bl	SPI_DELAY
 1316              	.LVL144:
 505:Src/nRF24.c   **** 
 506:Src/nRF24.c   ****     // CE is not set to 1, nRF24 still stays in [Standby-I] Mode.
 507:Src/nRF24.c   ****     // CE = 1 is not activated until we write to TX FIFO so stays in Standby-I mode.
 508:Src/nRF24.c   **** }
 1317              		.loc 1 508 0
 1318 0082 05B0     		add	sp, sp, #20
 1319              	.LCFI26:
 1320              		.cfi_def_cfa_offset 12
 1321              		@ sp needed
 1322 0084 30BD     		pop	{r4, r5, pc}
 1323              	.L91:
 1324 0086 00BF     		.align	2
 1325              	.L90:
 1326 0088 04000000 		.word	.LANCHOR0+4
 1327              		.cfi_endproc
 1328              	.LFE148:
 1330              		.section	.text.nRF24_print_all_registers,"ax",%progbits
 1331              		.align	1
 1332              		.global	nRF24_print_all_registers
 1333              		.syntax unified
 1334              		.thumb
 1335              		.thumb_func
 1336              		.fpu fpv4-sp-d16
 1338              	nRF24_print_all_registers:
 1339              	.LFB152:
 509:Src/nRF24.c   **** 
 510:Src/nRF24.c   **** 
 511:Src/nRF24.c   **** /**
 512:Src/nRF24.c   ****   * @brief  Make nRF24 send data with primitive methods.
 513:Src/nRF24.c   ****   * @param  tx_payload_width. Length of data packet to send to the receiver. 
 514:Src/nRF24.c   **** 	            (!) tx_payload_width Must be the same value as the receiver's <RX_PW_Px>. x being the 
 515:Src/nRF24.c   ****   * @param  payload Pointer to the actual data packet being sent to the receiver.
 516:Src/nRF24.c   ****   * @retval None.
 517:Src/nRF24.c   ****   * @note   Call nRF24_configure_tx_mode() before this test to initailize TX mode in nRF24L01+.
 518:Src/nRF24.c   ****   */
 519:Src/nRF24.c   **** void nRF24_send_packet(uint8_t tx_payload_width, uint8_t* p_payload) 
 520:Src/nRF24.c   **** {
 521:Src/nRF24.c   ****   // uint8_t pl[] = {0xC0, 0xC0, 0xCA, 0xFE}; /* clock out a four-byte payload "C0C0 CAFE" */
 522:Src/nRF24.c   **** 
 523:Src/nRF24.c   ****   char message[64];
 524:Src/nRF24.c   ****   		
ARM GAS  /tmp/ccrkxNaW.s 			page 34


 525:Src/nRF24.c   **** 
 526:Src/nRF24.c   ****   nRF24_release_payload(tx_payload_width, p_payload);
 527:Src/nRF24.c   **** 
 528:Src/nRF24.c   **** 	// uint8_t payload[4] = {0xC0, 0xC0, 0xCA, 0xFE};
 529:Src/nRF24.c   ****   // spi_write_register(W_TX_PAYLOAD, 4, payload);
 530:Src/nRF24.c   **** 
 531:Src/nRF24.c   **** 
 532:Src/nRF24.c   ****   // uint8_t pl[] = {0xC0, 0xC0, 0xCA, 0xFE}; /* clock out a four-byte payload "C0C0 CAFE" */
 533:Src/nRF24.c   **** 
 534:Src/nRF24.c   ****   // char message[64];
 535:Src/nRF24.c   ****   
 536:Src/nRF24.c   ****   // nRF24_release_payload(tx_payload_width, (uint8_t*) payload);
 537:Src/nRF24.c   **** 
 538:Src/nRF24.c   ****   // nRF24_verified_write_register(W_TX_PAYLOAD, 4, pl);
 539:Src/nRF24.c   **** 
 540:Src/nRF24.c   **** 
 541:Src/nRF24.c   ****   /* Fire out the transmit packet */
 542:Src/nRF24.c   ****   nRF24_CE_1(); 
 543:Src/nRF24.c   **** 
 544:Src/nRF24.c   ****   /* read <STATUS> register*/
 545:Src/nRF24.c   ****   uint8_t status;
 546:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 547:Src/nRF24.c   **** 
 548:Src/nRF24.c   **** 	/* print <STATUS> register*/
 549:Src/nRF24.c   ****   #ifdef NRF24_DEBUG
 550:Src/nRF24.c   ****   sprintf(message, "<STATUS> REGISTER : %#02x\n", status);
 551:Src/nRF24.c   ****   serial_print(message);
 552:Src/nRF24.c   ****   #endif
 553:Src/nRF24.c   **** 
 554:Src/nRF24.c   **** 	/* Verify if TX_DS bit is set in <STATUS> */
 555:Src/nRF24.c   ****   if (status == 0x2e) /* TX_DS_MASK1 = 1 << 5 = 0x20 */
 556:Src/nRF24.c   ****   {
 557:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 558:Src/nRF24.c   ****     strcpy(message, "nRF24 send status - success -\n");
 559:Src/nRF24.c   ****     serial_print(message);
 560:Src/nRF24.c   ****     #endif
 561:Src/nRF24.c   ****   } 
 562:Src/nRF24.c   ****   else 
 563:Src/nRF24.c   ****   {
 564:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 565:Src/nRF24.c   ****     strcpy(message, "nRF24 send status - failure -\n");
 566:Src/nRF24.c   ****     serial_print(message);
 567:Src/nRF24.c   ****     #endif
 568:Src/nRF24.c   ****   }
 569:Src/nRF24.c   **** 
 570:Src/nRF24.c   ****   /* write 1 to <STATUS> register to clear TX_DS, TX_DS bit is Write-to-Clear. */
 571:Src/nRF24.c   **** 	nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 572:Src/nRF24.c   **** 
 573:Src/nRF24.c   **** 	/* stop transmission. Returns to [Standby-I]. */
 574:Src/nRF24.c   ****   nRF24_CE_0(); 
 575:Src/nRF24.c   **** }
 576:Src/nRF24.c   **** 
 577:Src/nRF24.c   **** 
 578:Src/nRF24.c   **** void nRF24_config_tx_mode() 
 579:Src/nRF24.c   **** {
 580:Src/nRF24.c   ****     nRF24_CE_0();
 581:Src/nRF24.c   **** 
ARM GAS  /tmp/ccrkxNaW.s 			page 35


 582:Src/nRF24.c   ****     /* Set TX_ADDR for transmit. On the Receiver side, set RX_ADDR_P0 with same value. */
 583:Src/nRF24.c   **** 		nRF24_set_SETUP_AW(SETUP_AW_MASK5bytes);
 584:Src/nRF24.c   **** 
 585:Src/nRF24.c   ****     uint8_t TX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  // 5 byte transmit-address
 586:Src/nRF24.c   **** 		nRF24_set_TX_ADDR(5, TX_ADDRESS);
 587:Src/nRF24.c   **** 		nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA_P
 588:Src/nRF24.c   **** 		nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P0_
 589:Src/nRF24.c   **** 		nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK0);
 590:Src/nRF24.c   **** 		nRF24_set_RF_CH(40);
 591:Src/nRF24.c   **** 		nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_HIGH
 592:Src/nRF24.c   **** 		nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CRC_
 593:Src/nRF24.c   ****     SPI_DELAY(10);
 594:Src/nRF24.c   ****     // CE is not set to 1, nRF24 still stays in [Standby-I] Mode.
 595:Src/nRF24.c   ****     // CE = 1 is not activated until we write to TX FIFO so stays in Standby-I mode.
 596:Src/nRF24.c   **** }
 597:Src/nRF24.c   **** 
 598:Src/nRF24.c   **** /**
 599:Src/nRF24.c   **** 	* @brief TX (transmit) Mode with Enhanced ShockBurst.
 600:Src/nRF24.c   **** 	* @note  ShockBurst provides hardware auto-acknowledge and auto-retransmit.
 601:Src/nRF24.c   **** 	*/
 602:Src/nRF24.c   **** void nRF24_config_enhanced_shockburst_tx_mode() 
 603:Src/nRF24.c   **** {
 604:Src/nRF24.c   ****     nRF24_CE_0();
 605:Src/nRF24.c   **** 		// nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 606:Src/nRF24.c   **** 
 607:Src/nRF24.c   ****     /* Set TX_ADDR for transmit. On the Receiver side, set RX_ADDR_P0 with same value. */
 608:Src/nRF24.c   **** 		nRF24_set_SETUP_AW(SETUP_AW_MASK5bytes);
 609:Src/nRF24.c   **** 
 610:Src/nRF24.c   ****     uint8_t TX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  
 611:Src/nRF24.c   **** 		nRF24_set_TX_ADDR(5, TX_ADDRESS);
 612:Src/nRF24.c   **** 
 613:Src/nRF24.c   **** 		/* ShockBurst Auto-Acknowledgement: In order to receive hardware-generated ACK from the receiver,
 614:Src/nRF24.c   **** 		nRF24_set_RX_ADDR_P0(5, TX_ADDRESS);
 615:Src/nRF24.c   **** 
 616:Src/nRF24.c   **** 		nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA_P
 617:Src/nRF24.c   **** 		nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P0_
 618:Src/nRF24.c   **** 		nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK10);
 619:Src/nRF24.c   **** 		nRF24_set_RF_CH(40);
 620:Src/nRF24.c   **** 		uint8_t writing_byte = 0x07;
 621:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 622:Src/nRF24.c   **** 		// nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_H
 623:Src/nRF24.c   **** 		nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CRC_
 624:Src/nRF24.c   ****     SPI_DELAY(10);
 625:Src/nRF24.c   **** 
 626:Src/nRF24.c   **** }
 627:Src/nRF24.c   **** 
 628:Src/nRF24.c   **** 
 629:Src/nRF24.c   **** 
 630:Src/nRF24.c   **** 
 631:Src/nRF24.c   **** 
 632:Src/nRF24.c   **** 
 633:Src/nRF24.c   **** 
 634:Src/nRF24.c   **** /**
 635:Src/nRF24.c   ****   * @brief  Print all registers on nRF24. 
 636:Src/nRF24.c   ****   * @param  None.
 637:Src/nRF24.c   ****   * @retval None.
 638:Src/nRF24.c   ****   */
ARM GAS  /tmp/ccrkxNaW.s 			page 36


 639:Src/nRF24.c   **** void nRF24_print_all_registers()
 640:Src/nRF24.c   **** {
 1340              		.loc 1 640 0
 1341              		.cfi_startproc
 1342              		@ args = 0, pretend = 0, frame = 40
 1343              		@ frame_needed = 0, uses_anonymous_args = 0
 1344 0000 30B5     		push	{r4, r5, lr}
 1345              	.LCFI27:
 1346              		.cfi_def_cfa_offset 12
 1347              		.cfi_offset 4, -12
 1348              		.cfi_offset 5, -8
 1349              		.cfi_offset 14, -4
 1350 0002 8FB0     		sub	sp, sp, #60
 1351              	.LCFI28:
 1352              		.cfi_def_cfa_offset 72
 641:Src/nRF24.c   ****     uint8_t read_data;
 642:Src/nRF24.c   ****     uint8_t read_buf[4];
 643:Src/nRF24.c   ****     char message[32];
 644:Src/nRF24.c   ****   
 645:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + CONFIG, 1, &read_data);
 1353              		.loc 1 645 0
 1354 0004 0DF13702 		add	r2, sp, #55
 1355 0008 0121     		movs	r1, #1
 1356 000a 0020     		movs	r0, #0
 1357 000c FFF7FEFF 		bl	spi_read_register
 1358              	.LVL145:
 646:Src/nRF24.c   ****     sprintf(message, "CONFIG: <0x%02x>\n", read_data);
 1359              		.loc 1 646 0
 1360 0010 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1361 0014 BD49     		ldr	r1, .L94
 1362 0016 04A8     		add	r0, sp, #16
 1363 0018 FFF7FEFF 		bl	sprintf
 1364              	.LVL146:
 1365              	.LBB133:
 1366              	.LBB134:
 111:Src/nRF24.c   **** }
 1367              		.loc 1 111 0
 1368 001c 04A8     		add	r0, sp, #16
 1369              	.LVL147:
 1370 001e FFF7FEFF 		bl	strlen
 1371              	.LVL148:
 1372 0022 BB4C     		ldr	r4, .L94+4
 1373 0024 6423     		movs	r3, #100
 1374 0026 82B2     		uxth	r2, r0
 1375 0028 04A9     		add	r1, sp, #16
 1376              	.LVL149:
 1377 002a 2046     		mov	r0, r4
 1378 002c FFF7FEFF 		bl	HAL_UART_Transmit
 1379              	.LVL150:
 1380              	.LBE134:
 1381              	.LBE133:
 647:Src/nRF24.c   ****     serial_print(message);
 648:Src/nRF24.c   **** 
 649:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_data);
 1382              		.loc 1 649 0
 1383 0030 0DF13702 		add	r2, sp, #55
 1384 0034 0121     		movs	r1, #1
ARM GAS  /tmp/ccrkxNaW.s 			page 37


 1385 0036 0846     		mov	r0, r1
 1386 0038 FFF7FEFF 		bl	spi_read_register
 1387              	.LVL151:
 650:Src/nRF24.c   ****     sprintf(message, "EN_AA: <0x%02x>\n", read_data);
 1388              		.loc 1 650 0
 1389 003c 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1390 0040 B449     		ldr	r1, .L94+8
 1391 0042 04A8     		add	r0, sp, #16
 1392 0044 FFF7FEFF 		bl	sprintf
 1393              	.LVL152:
 1394              	.LBB135:
 1395              	.LBB136:
 111:Src/nRF24.c   **** }
 1396              		.loc 1 111 0
 1397 0048 04A8     		add	r0, sp, #16
 1398              	.LVL153:
 1399 004a FFF7FEFF 		bl	strlen
 1400              	.LVL154:
 1401 004e 6423     		movs	r3, #100
 1402 0050 82B2     		uxth	r2, r0
 1403 0052 04A9     		add	r1, sp, #16
 1404              	.LVL155:
 1405 0054 2046     		mov	r0, r4
 1406 0056 FFF7FEFF 		bl	HAL_UART_Transmit
 1407              	.LVL156:
 1408              	.LBE136:
 1409              	.LBE135:
 651:Src/nRF24.c   ****     serial_print(message);
 652:Src/nRF24.c   **** 
 653:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_data);
 1410              		.loc 1 653 0
 1411 005a 0DF13702 		add	r2, sp, #55
 1412 005e 0121     		movs	r1, #1
 1413 0060 0220     		movs	r0, #2
 1414 0062 FFF7FEFF 		bl	spi_read_register
 1415              	.LVL157:
 654:Src/nRF24.c   ****     sprintf(message, "EN_RXADDR: <0x%02x>\n", read_data);
 1416              		.loc 1 654 0
 1417 0066 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1418 006a AB49     		ldr	r1, .L94+12
 1419 006c 04A8     		add	r0, sp, #16
 1420 006e FFF7FEFF 		bl	sprintf
 1421              	.LVL158:
 1422              	.LBB137:
 1423              	.LBB138:
 111:Src/nRF24.c   **** }
 1424              		.loc 1 111 0
 1425 0072 04A8     		add	r0, sp, #16
 1426              	.LVL159:
 1427 0074 FFF7FEFF 		bl	strlen
 1428              	.LVL160:
 1429 0078 6423     		movs	r3, #100
 1430 007a 82B2     		uxth	r2, r0
 1431 007c 04A9     		add	r1, sp, #16
 1432              	.LVL161:
 1433 007e 2046     		mov	r0, r4
 1434 0080 FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccrkxNaW.s 			page 38


 1435              	.LVL162:
 1436              	.LBE138:
 1437              	.LBE137:
 655:Src/nRF24.c   ****     serial_print(message);
 656:Src/nRF24.c   **** 
 657:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_data);
 1438              		.loc 1 657 0
 1439 0084 0DF13702 		add	r2, sp, #55
 1440 0088 0121     		movs	r1, #1
 1441 008a 0320     		movs	r0, #3
 1442 008c FFF7FEFF 		bl	spi_read_register
 1443              	.LVL163:
 658:Src/nRF24.c   ****     sprintf(message, "SETUP_AW: <0x%02x>\n", read_data);
 1444              		.loc 1 658 0
 1445 0090 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1446 0094 A149     		ldr	r1, .L94+16
 1447 0096 04A8     		add	r0, sp, #16
 1448 0098 FFF7FEFF 		bl	sprintf
 1449              	.LVL164:
 1450              	.LBB139:
 1451              	.LBB140:
 111:Src/nRF24.c   **** }
 1452              		.loc 1 111 0
 1453 009c 04A8     		add	r0, sp, #16
 1454              	.LVL165:
 1455 009e FFF7FEFF 		bl	strlen
 1456              	.LVL166:
 1457 00a2 6423     		movs	r3, #100
 1458 00a4 82B2     		uxth	r2, r0
 1459 00a6 04A9     		add	r1, sp, #16
 1460              	.LVL167:
 1461 00a8 2046     		mov	r0, r4
 1462 00aa FFF7FEFF 		bl	HAL_UART_Transmit
 1463              	.LVL168:
 1464              	.LBE140:
 1465              	.LBE139:
 659:Src/nRF24.c   ****     serial_print(message);
 660:Src/nRF24.c   **** 
 661:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_data);
 1466              		.loc 1 661 0
 1467 00ae 0DF13702 		add	r2, sp, #55
 1468 00b2 0121     		movs	r1, #1
 1469 00b4 0420     		movs	r0, #4
 1470 00b6 FFF7FEFF 		bl	spi_read_register
 1471              	.LVL169:
 662:Src/nRF24.c   ****     sprintf(message, "SETUP_RETR: <0x%02x>\n", read_data);
 1472              		.loc 1 662 0
 1473 00ba 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1474 00be 9849     		ldr	r1, .L94+20
 1475 00c0 04A8     		add	r0, sp, #16
 1476 00c2 FFF7FEFF 		bl	sprintf
 1477              	.LVL170:
 1478              	.LBB141:
 1479              	.LBB142:
 111:Src/nRF24.c   **** }
 1480              		.loc 1 111 0
 1481 00c6 04A8     		add	r0, sp, #16
ARM GAS  /tmp/ccrkxNaW.s 			page 39


 1482              	.LVL171:
 1483 00c8 FFF7FEFF 		bl	strlen
 1484              	.LVL172:
 1485 00cc 6423     		movs	r3, #100
 1486 00ce 82B2     		uxth	r2, r0
 1487 00d0 04A9     		add	r1, sp, #16
 1488              	.LVL173:
 1489 00d2 2046     		mov	r0, r4
 1490 00d4 FFF7FEFF 		bl	HAL_UART_Transmit
 1491              	.LVL174:
 1492              	.LBE142:
 1493              	.LBE141:
 663:Src/nRF24.c   ****     serial_print(message);
 664:Src/nRF24.c   **** 
 665:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_data);
 1494              		.loc 1 665 0
 1495 00d8 0DF13702 		add	r2, sp, #55
 1496 00dc 0121     		movs	r1, #1
 1497 00de 0520     		movs	r0, #5
 1498 00e0 FFF7FEFF 		bl	spi_read_register
 1499              	.LVL175:
 666:Src/nRF24.c   ****     sprintf(message, "RF_CH: <0x%02x>\n", read_data);
 1500              		.loc 1 666 0
 1501 00e4 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1502 00e8 8E49     		ldr	r1, .L94+24
 1503 00ea 04A8     		add	r0, sp, #16
 1504 00ec FFF7FEFF 		bl	sprintf
 1505              	.LVL176:
 1506              	.LBB143:
 1507              	.LBB144:
 111:Src/nRF24.c   **** }
 1508              		.loc 1 111 0
 1509 00f0 04A8     		add	r0, sp, #16
 1510              	.LVL177:
 1511 00f2 FFF7FEFF 		bl	strlen
 1512              	.LVL178:
 1513 00f6 6423     		movs	r3, #100
 1514 00f8 82B2     		uxth	r2, r0
 1515 00fa 04A9     		add	r1, sp, #16
 1516              	.LVL179:
 1517 00fc 2046     		mov	r0, r4
 1518 00fe FFF7FEFF 		bl	HAL_UART_Transmit
 1519              	.LVL180:
 1520              	.LBE144:
 1521              	.LBE143:
 667:Src/nRF24.c   ****     serial_print(message);
 668:Src/nRF24.c   **** 
 669:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_data);
 1522              		.loc 1 669 0
 1523 0102 0DF13702 		add	r2, sp, #55
 1524 0106 0121     		movs	r1, #1
 1525 0108 0620     		movs	r0, #6
 1526 010a FFF7FEFF 		bl	spi_read_register
 1527              	.LVL181:
 670:Src/nRF24.c   ****     sprintf(message, "RF_SETUP: <0x%02x>\n", read_data);
 1528              		.loc 1 670 0
 1529 010e 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
ARM GAS  /tmp/ccrkxNaW.s 			page 40


 1530 0112 8549     		ldr	r1, .L94+28
 1531 0114 04A8     		add	r0, sp, #16
 1532 0116 FFF7FEFF 		bl	sprintf
 1533              	.LVL182:
 1534              	.LBB145:
 1535              	.LBB146:
 111:Src/nRF24.c   **** }
 1536              		.loc 1 111 0
 1537 011a 04A8     		add	r0, sp, #16
 1538              	.LVL183:
 1539 011c FFF7FEFF 		bl	strlen
 1540              	.LVL184:
 1541 0120 6423     		movs	r3, #100
 1542 0122 82B2     		uxth	r2, r0
 1543 0124 04A9     		add	r1, sp, #16
 1544              	.LVL185:
 1545 0126 2046     		mov	r0, r4
 1546 0128 FFF7FEFF 		bl	HAL_UART_Transmit
 1547              	.LVL186:
 1548              	.LBE146:
 1549              	.LBE145:
 671:Src/nRF24.c   ****     serial_print(message);
 672:Src/nRF24.c   **** 
 673:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + STATUS, 1, &read_data);
 1550              		.loc 1 673 0
 1551 012c 0DF13702 		add	r2, sp, #55
 1552 0130 0121     		movs	r1, #1
 1553 0132 0720     		movs	r0, #7
 1554 0134 FFF7FEFF 		bl	spi_read_register
 1555              	.LVL187:
 674:Src/nRF24.c   ****     sprintf(message, "STATUS: <0x%02x>\n", read_data);
 1556              		.loc 1 674 0
 1557 0138 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1558 013c 7B49     		ldr	r1, .L94+32
 1559 013e 04A8     		add	r0, sp, #16
 1560 0140 FFF7FEFF 		bl	sprintf
 1561              	.LVL188:
 1562              	.LBB147:
 1563              	.LBB148:
 111:Src/nRF24.c   **** }
 1564              		.loc 1 111 0
 1565 0144 04A8     		add	r0, sp, #16
 1566              	.LVL189:
 1567 0146 FFF7FEFF 		bl	strlen
 1568              	.LVL190:
 1569 014a 6423     		movs	r3, #100
 1570 014c 82B2     		uxth	r2, r0
 1571 014e 04A9     		add	r1, sp, #16
 1572              	.LVL191:
 1573 0150 2046     		mov	r0, r4
 1574 0152 FFF7FEFF 		bl	HAL_UART_Transmit
 1575              	.LVL192:
 1576              	.LBE148:
 1577              	.LBE147:
 675:Src/nRF24.c   ****     serial_print(message);
 676:Src/nRF24.c   **** 
 677:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, 5, read_buf);
ARM GAS  /tmp/ccrkxNaW.s 			page 41


 1578              		.loc 1 677 0
 1579 0156 0CAA     		add	r2, sp, #48
 1580 0158 0521     		movs	r1, #5
 1581 015a 0A20     		movs	r0, #10
 1582 015c FFF7FEFF 		bl	spi_read_register
 1583              	.LVL193:
 678:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P0: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1584              		.loc 1 678 0
 1585 0160 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1586 0164 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1587 0168 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1588 016c 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1589 0170 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1590 0174 0295     		str	r5, [sp, #8]
 1591 0176 0190     		str	r0, [sp, #4]
 1592 0178 0091     		str	r1, [sp]
 1593 017a 6D49     		ldr	r1, .L94+36
 1594 017c 04A8     		add	r0, sp, #16
 1595 017e FFF7FEFF 		bl	sprintf
 1596              	.LVL194:
 1597              	.LBB149:
 1598              	.LBB150:
 111:Src/nRF24.c   **** }
 1599              		.loc 1 111 0
 1600 0182 04A8     		add	r0, sp, #16
 1601              	.LVL195:
 1602 0184 FFF7FEFF 		bl	strlen
 1603              	.LVL196:
 1604 0188 6423     		movs	r3, #100
 1605 018a 82B2     		uxth	r2, r0
 1606 018c 04A9     		add	r1, sp, #16
 1607              	.LVL197:
 1608 018e 2046     		mov	r0, r4
 1609 0190 FFF7FEFF 		bl	HAL_UART_Transmit
 1610              	.LVL198:
 1611              	.LBE150:
 1612              	.LBE149:
 679:Src/nRF24.c   ****     serial_print(message);
 680:Src/nRF24.c   **** 
 681:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, 5, read_buf);
 1613              		.loc 1 681 0
 1614 0194 0CAA     		add	r2, sp, #48
 1615 0196 0521     		movs	r1, #5
 1616 0198 0B20     		movs	r0, #11
 1617 019a FFF7FEFF 		bl	spi_read_register
 1618              	.LVL199:
 682:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P1: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1619              		.loc 1 682 0
 1620 019e 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1621 01a2 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1622 01a6 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1623 01aa 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1624 01ae 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1625 01b2 0295     		str	r5, [sp, #8]
 1626 01b4 0190     		str	r0, [sp, #4]
 1627 01b6 0091     		str	r1, [sp]
 1628 01b8 5E49     		ldr	r1, .L94+40
ARM GAS  /tmp/ccrkxNaW.s 			page 42


 1629 01ba 04A8     		add	r0, sp, #16
 1630 01bc FFF7FEFF 		bl	sprintf
 1631              	.LVL200:
 1632              	.LBB151:
 1633              	.LBB152:
 111:Src/nRF24.c   **** }
 1634              		.loc 1 111 0
 1635 01c0 04A8     		add	r0, sp, #16
 1636              	.LVL201:
 1637 01c2 FFF7FEFF 		bl	strlen
 1638              	.LVL202:
 1639 01c6 6423     		movs	r3, #100
 1640 01c8 82B2     		uxth	r2, r0
 1641 01ca 04A9     		add	r1, sp, #16
 1642              	.LVL203:
 1643 01cc 2046     		mov	r0, r4
 1644 01ce FFF7FEFF 		bl	HAL_UART_Transmit
 1645              	.LVL204:
 1646              	.LBE152:
 1647              	.LBE151:
 683:Src/nRF24.c   ****     serial_print(message);
 684:Src/nRF24.c   **** 
 685:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, 5, read_buf);
 1648              		.loc 1 685 0
 1649 01d2 0CAA     		add	r2, sp, #48
 1650 01d4 0521     		movs	r1, #5
 1651 01d6 0C20     		movs	r0, #12
 1652 01d8 FFF7FEFF 		bl	spi_read_register
 1653              	.LVL205:
 686:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P2: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1654              		.loc 1 686 0
 1655 01dc 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1656 01e0 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1657 01e4 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1658 01e8 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1659 01ec 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1660 01f0 0295     		str	r5, [sp, #8]
 1661 01f2 0190     		str	r0, [sp, #4]
 1662 01f4 0091     		str	r1, [sp]
 1663 01f6 5049     		ldr	r1, .L94+44
 1664 01f8 04A8     		add	r0, sp, #16
 1665 01fa FFF7FEFF 		bl	sprintf
 1666              	.LVL206:
 1667              	.LBB153:
 1668              	.LBB154:
 111:Src/nRF24.c   **** }
 1669              		.loc 1 111 0
 1670 01fe 04A8     		add	r0, sp, #16
 1671              	.LVL207:
 1672 0200 FFF7FEFF 		bl	strlen
 1673              	.LVL208:
 1674 0204 6423     		movs	r3, #100
 1675 0206 82B2     		uxth	r2, r0
 1676 0208 04A9     		add	r1, sp, #16
 1677              	.LVL209:
 1678 020a 2046     		mov	r0, r4
 1679 020c FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccrkxNaW.s 			page 43


 1680              	.LVL210:
 1681              	.LBE154:
 1682              	.LBE153:
 687:Src/nRF24.c   ****     serial_print(message);
 688:Src/nRF24.c   **** 
 689:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, 5, read_buf);
 1683              		.loc 1 689 0
 1684 0210 0CAA     		add	r2, sp, #48
 1685 0212 0521     		movs	r1, #5
 1686 0214 0D20     		movs	r0, #13
 1687 0216 FFF7FEFF 		bl	spi_read_register
 1688              	.LVL211:
 690:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P3: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1689              		.loc 1 690 0
 1690 021a 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1691 021e 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1692 0222 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1693 0226 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1694 022a 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1695 022e 0295     		str	r5, [sp, #8]
 1696 0230 0190     		str	r0, [sp, #4]
 1697 0232 0091     		str	r1, [sp]
 1698 0234 4149     		ldr	r1, .L94+48
 1699 0236 04A8     		add	r0, sp, #16
 1700 0238 FFF7FEFF 		bl	sprintf
 1701              	.LVL212:
 1702              	.LBB155:
 1703              	.LBB156:
 111:Src/nRF24.c   **** }
 1704              		.loc 1 111 0
 1705 023c 04A8     		add	r0, sp, #16
 1706              	.LVL213:
 1707 023e FFF7FEFF 		bl	strlen
 1708              	.LVL214:
 1709 0242 6423     		movs	r3, #100
 1710 0244 82B2     		uxth	r2, r0
 1711 0246 04A9     		add	r1, sp, #16
 1712              	.LVL215:
 1713 0248 2046     		mov	r0, r4
 1714 024a FFF7FEFF 		bl	HAL_UART_Transmit
 1715              	.LVL216:
 1716              	.LBE156:
 1717              	.LBE155:
 691:Src/nRF24.c   ****     serial_print(message);
 692:Src/nRF24.c   **** 
 693:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, 5, read_buf);
 1718              		.loc 1 693 0
 1719 024e 0CAA     		add	r2, sp, #48
 1720 0250 0521     		movs	r1, #5
 1721 0252 0E20     		movs	r0, #14
 1722 0254 FFF7FEFF 		bl	spi_read_register
 1723              	.LVL217:
 694:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P4: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1724              		.loc 1 694 0
 1725 0258 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1726 025c 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1727 0260 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
ARM GAS  /tmp/ccrkxNaW.s 			page 44


 1728 0264 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1729 0268 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1730 026c 0295     		str	r5, [sp, #8]
 1731 026e 0190     		str	r0, [sp, #4]
 1732 0270 0091     		str	r1, [sp]
 1733 0272 3349     		ldr	r1, .L94+52
 1734 0274 04A8     		add	r0, sp, #16
 1735 0276 FFF7FEFF 		bl	sprintf
 1736              	.LVL218:
 1737              	.LBB157:
 1738              	.LBB158:
 111:Src/nRF24.c   **** }
 1739              		.loc 1 111 0
 1740 027a 04A8     		add	r0, sp, #16
 1741              	.LVL219:
 1742 027c FFF7FEFF 		bl	strlen
 1743              	.LVL220:
 1744 0280 6423     		movs	r3, #100
 1745 0282 82B2     		uxth	r2, r0
 1746 0284 04A9     		add	r1, sp, #16
 1747              	.LVL221:
 1748 0286 2046     		mov	r0, r4
 1749 0288 FFF7FEFF 		bl	HAL_UART_Transmit
 1750              	.LVL222:
 1751              	.LBE158:
 1752              	.LBE157:
 695:Src/nRF24.c   ****     serial_print(message);
 696:Src/nRF24.c   **** 
 697:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_PW_P5, 5, read_buf);
 1753              		.loc 1 697 0
 1754 028c 0CAA     		add	r2, sp, #48
 1755 028e 0521     		movs	r1, #5
 1756 0290 1620     		movs	r0, #22
 1757 0292 FFF7FEFF 		bl	spi_read_register
 1758              	.LVL223:
 698:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P5: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1759              		.loc 1 698 0
 1760 0296 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1761 029a 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1762 029e 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1763 02a2 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1764 02a6 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1765 02aa 0295     		str	r5, [sp, #8]
 1766 02ac 0190     		str	r0, [sp, #4]
 1767 02ae 0091     		str	r1, [sp]
 1768 02b0 2449     		ldr	r1, .L94+56
 1769 02b2 04A8     		add	r0, sp, #16
 1770 02b4 FFF7FEFF 		bl	sprintf
 1771              	.LVL224:
 1772              	.LBB159:
 1773              	.LBB160:
 111:Src/nRF24.c   **** }
 1774              		.loc 1 111 0
 1775 02b8 04A8     		add	r0, sp, #16
 1776              	.LVL225:
 1777 02ba FFF7FEFF 		bl	strlen
 1778              	.LVL226:
ARM GAS  /tmp/ccrkxNaW.s 			page 45


 1779 02be 6423     		movs	r3, #100
 1780 02c0 82B2     		uxth	r2, r0
 1781 02c2 04A9     		add	r1, sp, #16
 1782              	.LVL227:
 1783 02c4 2046     		mov	r0, r4
 1784 02c6 FFF7FEFF 		bl	HAL_UART_Transmit
 1785              	.LVL228:
 1786              	.LBE160:
 1787              	.LBE159:
 699:Src/nRF24.c   ****     serial_print(message);
 700:Src/nRF24.c   **** 
 701:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + TX_ADDR, 5, read_buf);
 1788              		.loc 1 701 0
 1789 02ca 0CAA     		add	r2, sp, #48
 1790 02cc 0521     		movs	r1, #5
 1791 02ce 1020     		movs	r0, #16
 1792 02d0 FFF7FEFF 		bl	spi_read_register
 1793              	.LVL229:
 702:Src/nRF24.c   ****     sprintf(message, "TX_ADDR: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_b
 1794              		.loc 1 702 0
 1795 02d4 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1796 02d8 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1797 02dc 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1798 02e0 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1799 02e4 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1800 02e8 0295     		str	r5, [sp, #8]
 1801 02ea 0190     		str	r0, [sp, #4]
 1802 02ec 0091     		str	r1, [sp]
 1803 02ee 1649     		ldr	r1, .L94+60
 1804 02f0 04A8     		add	r0, sp, #16
 1805 02f2 FFF7FEFF 		bl	sprintf
 1806              	.LVL230:
 1807              	.LBB161:
 1808              	.LBB162:
 111:Src/nRF24.c   **** }
 1809              		.loc 1 111 0
 1810 02f6 04A8     		add	r0, sp, #16
 1811              	.LVL231:
 1812 02f8 FFF7FEFF 		bl	strlen
 1813              	.LVL232:
 1814 02fc 6423     		movs	r3, #100
 1815 02fe 82B2     		uxth	r2, r0
 1816 0300 04A9     		add	r1, sp, #16
 1817              	.LVL233:
 1818 0302 2046     		mov	r0, r4
 1819 0304 FFF7FEFF 		bl	HAL_UART_Transmit
 1820              	.LVL234:
 1821              	.LBE162:
 1822              	.LBE161:
 703:Src/nRF24.c   ****     serial_print(message);
 704:Src/nRF24.c   **** 
 705:Src/nRF24.c   **** }
 1823              		.loc 1 705 0
 1824 0308 0FB0     		add	sp, sp, #60
 1825              	.LCFI29:
 1826              		.cfi_def_cfa_offset 12
 1827              		@ sp needed
ARM GAS  /tmp/ccrkxNaW.s 			page 46


 1828 030a 30BD     		pop	{r4, r5, pc}
 1829              	.L95:
 1830              		.align	2
 1831              	.L94:
 1832 030c 00000000 		.word	.LC9
 1833 0310 00000000 		.word	huart2
 1834 0314 14000000 		.word	.LC10
 1835 0318 28000000 		.word	.LC11
 1836 031c 40000000 		.word	.LC12
 1837 0320 54000000 		.word	.LC13
 1838 0324 6C000000 		.word	.LC14
 1839 0328 80000000 		.word	.LC15
 1840 032c 94000000 		.word	.LC16
 1841 0330 A8000000 		.word	.LC17
 1842 0334 D8000000 		.word	.LC18
 1843 0338 08010000 		.word	.LC19
 1844 033c 38010000 		.word	.LC20
 1845 0340 68010000 		.word	.LC21
 1846 0344 98010000 		.word	.LC22
 1847 0348 C8010000 		.word	.LC23
 1848              		.cfi_endproc
 1849              	.LFE152:
 1851              		.section	.text.nRF24_set_CONFIG,"ax",%progbits
 1852              		.align	1
 1853              		.global	nRF24_set_CONFIG
 1854              		.syntax unified
 1855              		.thumb
 1856              		.thumb_func
 1857              		.fpu fpv4-sp-d16
 1859              	nRF24_set_CONFIG:
 1860              	.LFB153:
 706:Src/nRF24.c   **** 
 707:Src/nRF24.c   **** 
 708:Src/nRF24.c   **** /* Following Function Provides High Level Access to nRF24L01+ registers. --------------------------
 709:Src/nRF24.c   **** 
 710:Src/nRF24.c   **** /**
 711:Src/nRF24.c   ****   * @brief  nRF24 set <CONFIG> register
 712:Src/nRF24.c   ****   * @param  mask_rx_dr Mask interrupt caused by RX_IDR. [ MASK_RX_DR_MASK1 | MASK_RX_DR_MASK0 | MAS
 713:Src/nRF24.c   ****   * @param  mask_tx_ds Mask interrupt caused by TX_DS.  [ MASK_TX_DS_MASK1 | MASK_TX_DS_MASK0 | MAS
 714:Src/nRF24.c   ****   * @param  mask_max_rt Mask interrupt cause by MAX_RT. [ MASK_MAX_RT_MASK1 | MASK_MAX_RT_MASK0 | M
 715:Src/nRF24.c   ****   * @param  en_crc Enable CRC. [ EN_CRC_MASK1 | EN_CRC_MASK0 | EN_CRC_MASKDEFAULT ]
 716:Src/nRF24.c   ****   * @param  crco CRC encoding scheme. [ CRCO_MASK1 | CRCO_MASK0 | CRCO_MASKDEFAULT ]
 717:Src/nRF24.c   ****   * @param  pwr_up Power Up / Down. [ PWR_UP_MASK1 | PWR_UP_MASK0 | PWR_UP_MASKDEFAULT ]
 718:Src/nRF24.c   ****   * @param  prim_rx RX/TX control. [ PRIM_RX_MASK1 | PRIM_RX_MASK0 | PRIM_RX_MASKDEFAULT ]
 719:Src/nRF24.c   ****   * @retval None.
 720:Src/nRF24.c   ****   */
 721:Src/nRF24.c   **** void nRF24_set_CONFIG(uint8_t mask_rx_dr, uint8_t mask_tx_ds, uint8_t mask_max_rt, uint8_t en_crc, 
 722:Src/nRF24.c   **** {
 1861              		.loc 1 722 0
 1862              		.cfi_startproc
 1863              		@ args = 12, pretend = 0, frame = 8
 1864              		@ frame_needed = 0, uses_anonymous_args = 0
 1865              	.LVL235:
 1866 0000 00B5     		push	{lr}
 1867              	.LCFI30:
 1868              		.cfi_def_cfa_offset 4
 1869              		.cfi_offset 14, -4
ARM GAS  /tmp/ccrkxNaW.s 			page 47


 1870 0002 83B0     		sub	sp, sp, #12
 1871              	.LCFI31:
 1872              		.cfi_def_cfa_offset 16
 723:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 724:Src/nRF24.c   ****   writing_byte |= mask_rx_dr | mask_tx_ds | mask_max_rt | en_crc | crco | pwr_up | prim_rx; 
 1873              		.loc 1 724 0
 1874 0004 0143     		orrs	r1, r1, r0
 1875              	.LVL236:
 1876 0006 1143     		orrs	r1, r1, r2
 1877 0008 1943     		orrs	r1, r1, r3
 1878 000a 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 1879              	.LVL237:
 1880 000e 1943     		orrs	r1, r1, r3
 1881 0010 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 1882 0014 0B43     		orrs	r3, r3, r1
 1883 0016 9DF81810 		ldrb	r1, [sp, #24]	@ zero_extendqisi2
 1884 001a 1943     		orrs	r1, r1, r3
 1885 001c 02AA     		add	r2, sp, #8
 1886              	.LVL238:
 1887 001e 02F8011D 		strb	r1, [r2, #-1]!
 725:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);
 1888              		.loc 1 725 0
 1889 0022 0121     		movs	r1, #1
 1890 0024 2020     		movs	r0, #32
 1891              	.LVL239:
 1892 0026 FFF7FEFF 		bl	nRF24_verified_write_register
 1893              	.LVL240:
 726:Src/nRF24.c   **** }
 1894              		.loc 1 726 0
 1895 002a 03B0     		add	sp, sp, #12
 1896              	.LCFI32:
 1897              		.cfi_def_cfa_offset 4
 1898              		@ sp needed
 1899 002c 5DF804FB 		ldr	pc, [sp], #4
 1900              		.cfi_endproc
 1901              	.LFE153:
 1903              		.section	.text.nRF24_get_CONFIG,"ax",%progbits
 1904              		.align	1
 1905              		.global	nRF24_get_CONFIG
 1906              		.syntax unified
 1907              		.thumb
 1908              		.thumb_func
 1909              		.fpu fpv4-sp-d16
 1911              	nRF24_get_CONFIG:
 1912              	.LFB154:
 727:Src/nRF24.c   **** 
 728:Src/nRF24.c   **** 
 729:Src/nRF24.c   **** /**
 730:Src/nRF24.c   ****   * @brief      Read <CONFIG> register from nRF24L01+.
 731:Src/nRF24.c   ****   * @param      None.
 732:Src/nRF24.c   ****   * @retval     <CONFIG> register value.
 733:Src/nRF24.c   ****   */
 734:Src/nRF24.c   **** uint8_t nRF24_get_CONFIG() 
 735:Src/nRF24.c   **** {
 1913              		.loc 1 735 0
 1914              		.cfi_startproc
 1915              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccrkxNaW.s 			page 48


 1916              		@ frame_needed = 0, uses_anonymous_args = 0
 1917 0000 00B5     		push	{lr}
 1918              	.LCFI33:
 1919              		.cfi_def_cfa_offset 4
 1920              		.cfi_offset 14, -4
 1921 0002 83B0     		sub	sp, sp, #12
 1922              	.LCFI34:
 1923              		.cfi_def_cfa_offset 16
 736:Src/nRF24.c   ****   uint8_t config_reg;
 737:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + CONFIG, 1, &config_reg);
 1924              		.loc 1 737 0
 1925 0004 0DF10702 		add	r2, sp, #7
 1926 0008 0121     		movs	r1, #1
 1927 000a 0020     		movs	r0, #0
 1928 000c FFF7FEFF 		bl	spi_read_register
 1929              	.LVL241:
 738:Src/nRF24.c   ****   return config_reg;
 739:Src/nRF24.c   **** }
 1930              		.loc 1 739 0
 1931 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1932 0014 03B0     		add	sp, sp, #12
 1933              	.LCFI35:
 1934              		.cfi_def_cfa_offset 4
 1935              		@ sp needed
 1936 0016 5DF804FB 		ldr	pc, [sp], #4
 1937              		.cfi_endproc
 1938              	.LFE154:
 1940              		.section	.text.nRF24_set_EN_AA,"ax",%progbits
 1941              		.align	1
 1942              		.global	nRF24_set_EN_AA
 1943              		.syntax unified
 1944              		.thumb
 1945              		.thumb_func
 1946              		.fpu fpv4-sp-d16
 1948              	nRF24_set_EN_AA:
 1949              	.LFB155:
 740:Src/nRF24.c   **** 
 741:Src/nRF24.c   **** 
 742:Src/nRF24.c   **** /**
 743:Src/nRF24.c   ****   * @brief  nRF24 set <EN_AA> register
 744:Src/nRF24.c   ****   * @param  enaa_p5 Enable auto acknowledgement in data pipe 5. [ ENAA_P5_MASK1 | ENAA_P5_MASK0 | E
 745:Src/nRF24.c   ****   * @param  enaa_p4 Enable auto acknowledgement in data pipe 4. [ ENAA_P4_MASK1 | ENAA_P4_MASK0 | E
 746:Src/nRF24.c   ****   * @param  enaa_p3 Enable auto acknowledgement in data pipe 3. [ ENAA_P3_MASK1 | ENAA_P3_MASK0 | E
 747:Src/nRF24.c   ****   * @param  enaa_p2 Enable auto acknowledgement in data pipe 2. [ ENAA_P2_MASK1 | ENAA_P2_MASK0 | E
 748:Src/nRF24.c   ****   * @param  enaa_p1 Enable auto acknowledgement in data pipe 1. [ ENAA_P1_MASK1 | ENAA_P1_MASK0 | E
 749:Src/nRF24.c   ****   * @param  enaa_p0 Enable auto acknowledgement in data pipe 0. [ ENAA_P0_MASK1 | ENAA_P0_MASK0 | E
 750:Src/nRF24.c   ****   * @retval None.
 751:Src/nRF24.c   ****   */
 752:Src/nRF24.c   **** void nRF24_set_EN_AA(uint8_t enaa_p5, uint8_t enaa_p4, uint8_t enaa_p3, uint8_t enaa_p2, uint8_t en
 753:Src/nRF24.c   **** {
 1950              		.loc 1 753 0
 1951              		.cfi_startproc
 1952              		@ args = 8, pretend = 0, frame = 8
 1953              		@ frame_needed = 0, uses_anonymous_args = 0
 1954              	.LVL242:
 1955 0000 00B5     		push	{lr}
 1956              	.LCFI36:
ARM GAS  /tmp/ccrkxNaW.s 			page 49


 1957              		.cfi_def_cfa_offset 4
 1958              		.cfi_offset 14, -4
 1959 0002 83B0     		sub	sp, sp, #12
 1960              	.LCFI37:
 1961              		.cfi_def_cfa_offset 16
 754:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 755:Src/nRF24.c   ****   writing_byte |= enaa_p5 | enaa_p4 | enaa_p3 | enaa_p2 | enaa_p1 | enaa_p0;
 1962              		.loc 1 755 0
 1963 0004 0143     		orrs	r1, r1, r0
 1964              	.LVL243:
 1965 0006 1143     		orrs	r1, r1, r2
 1966 0008 1943     		orrs	r1, r1, r3
 1967 000a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 1968              	.LVL244:
 1969 000e 0A43     		orrs	r2, r2, r1
 1970 0010 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 1971 0014 1143     		orrs	r1, r1, r2
 1972 0016 02AA     		add	r2, sp, #8
 1973 0018 02F8011D 		strb	r1, [r2, #-1]!
 756:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);
 1974              		.loc 1 756 0
 1975 001c 0121     		movs	r1, #1
 1976 001e 2120     		movs	r0, #33
 1977              	.LVL245:
 1978 0020 FFF7FEFF 		bl	nRF24_verified_write_register
 1979              	.LVL246:
 757:Src/nRF24.c   **** }
 1980              		.loc 1 757 0
 1981 0024 03B0     		add	sp, sp, #12
 1982              	.LCFI38:
 1983              		.cfi_def_cfa_offset 4
 1984              		@ sp needed
 1985 0026 5DF804FB 		ldr	pc, [sp], #4
 1986              		.cfi_endproc
 1987              	.LFE155:
 1989              		.section	.text.nRF24_get_EN_AA,"ax",%progbits
 1990              		.align	1
 1991              		.global	nRF24_get_EN_AA
 1992              		.syntax unified
 1993              		.thumb
 1994              		.thumb_func
 1995              		.fpu fpv4-sp-d16
 1997              	nRF24_get_EN_AA:
 1998              	.LFB156:
 758:Src/nRF24.c   **** 
 759:Src/nRF24.c   **** /**
 760:Src/nRF24.c   ****   * @brief      Read <EN_AA> register from nRF24L01+.
 761:Src/nRF24.c   ****   * @param      None.
 762:Src/nRF24.c   ****   * @retval     <EN_AA> register value.
 763:Src/nRF24.c   ****   */
 764:Src/nRF24.c   **** uint8_t nRF24_get_EN_AA() 
 765:Src/nRF24.c   **** {
 1999              		.loc 1 765 0
 2000              		.cfi_startproc
 2001              		@ args = 0, pretend = 0, frame = 8
 2002              		@ frame_needed = 0, uses_anonymous_args = 0
 2003 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccrkxNaW.s 			page 50


 2004              	.LCFI39:
 2005              		.cfi_def_cfa_offset 4
 2006              		.cfi_offset 14, -4
 2007 0002 83B0     		sub	sp, sp, #12
 2008              	.LCFI40:
 2009              		.cfi_def_cfa_offset 16
 766:Src/nRF24.c   ****   uint8_t read_byte;
 767:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_byte);
 2010              		.loc 1 767 0
 2011 0004 0DF10702 		add	r2, sp, #7
 2012 0008 0121     		movs	r1, #1
 2013 000a 0846     		mov	r0, r1
 2014 000c FFF7FEFF 		bl	spi_read_register
 2015              	.LVL247:
 768:Src/nRF24.c   ****   return read_byte;
 769:Src/nRF24.c   **** }
 2016              		.loc 1 769 0
 2017 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2018 0014 03B0     		add	sp, sp, #12
 2019              	.LCFI41:
 2020              		.cfi_def_cfa_offset 4
 2021              		@ sp needed
 2022 0016 5DF804FB 		ldr	pc, [sp], #4
 2023              		.cfi_endproc
 2024              	.LFE156:
 2026              		.section	.text.nRF24_set_EN_RXADDR,"ax",%progbits
 2027              		.align	1
 2028              		.global	nRF24_set_EN_RXADDR
 2029              		.syntax unified
 2030              		.thumb
 2031              		.thumb_func
 2032              		.fpu fpv4-sp-d16
 2034              	nRF24_set_EN_RXADDR:
 2035              	.LFB157:
 770:Src/nRF24.c   **** 
 771:Src/nRF24.c   **** 
 772:Src/nRF24.c   **** /**
 773:Src/nRF24.c   ****   * @brief  nRF24 set <EN_RXADDR> register
 774:Src/nRF24.c   ****   * @param  erx_p5 enable RX in data pipe 5.   [ ERX_P5_MASK1 | ERX_P5_MASK0 | ERX_P5_MASKDEFAULT ]
 775:Src/nRF24.c   ****   * @param  erx_p4 enable RX in data pipe 4.   [ ERX_P4_MASK1 | ERX_P4_MASK0 | ERX_P4_MASKDEFAULT ]
 776:Src/nRF24.c   ****   * @param  erx_p3 enable RX in data pipe 3.   [ ERX_P3_MASK1 | ERX_P3_MASK0 | ERX_P3_MASKDEFAULT ]
 777:Src/nRF24.c   ****   * @param  erx_p2 enable RX in data pipe 2.   [ ERX_P2_MASK1 | ERX_P2_MASK0 | ERX_P2_MASKDEFAULT ]
 778:Src/nRF24.c   ****   * @param  erx_p1 enable RX in data pipe 1.   [ ERX_P1_MASK1 | ERX_P1_MASK0 | ERX_P1_MASKDEFAULT ]
 779:Src/nRF24.c   ****   * @param  erx_p0 enable RX in data pipe 0.   [ ERX_P0_MASK1 | ERX_P0_MASK0 | ERX_P0_MASKDEFAULT ]
 780:Src/nRF24.c   ****   * @retval None.
 781:Src/nRF24.c   ****   */
 782:Src/nRF24.c   **** void nRF24_set_EN_RXADDR(uint8_t erx_p5, uint8_t erx_p4, uint8_t erx_p3, uint8_t erx_p2, uint8_t er
 783:Src/nRF24.c   **** {
 2036              		.loc 1 783 0
 2037              		.cfi_startproc
 2038              		@ args = 8, pretend = 0, frame = 8
 2039              		@ frame_needed = 0, uses_anonymous_args = 0
 2040              	.LVL248:
 2041 0000 00B5     		push	{lr}
 2042              	.LCFI42:
 2043              		.cfi_def_cfa_offset 4
 2044              		.cfi_offset 14, -4
ARM GAS  /tmp/ccrkxNaW.s 			page 51


 2045 0002 83B0     		sub	sp, sp, #12
 2046              	.LCFI43:
 2047              		.cfi_def_cfa_offset 16
 784:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 785:Src/nRF24.c   ****   writing_byte |= erx_p5 | erx_p4 | erx_p3 | erx_p2 | erx_p1 | erx_p0;
 2048              		.loc 1 785 0
 2049 0004 0143     		orrs	r1, r1, r0
 2050              	.LVL249:
 2051 0006 1143     		orrs	r1, r1, r2
 2052 0008 1943     		orrs	r1, r1, r3
 2053 000a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 2054              	.LVL250:
 2055 000e 0A43     		orrs	r2, r2, r1
 2056 0010 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 2057 0014 1143     		orrs	r1, r1, r2
 2058 0016 02AA     		add	r2, sp, #8
 2059 0018 02F8011D 		strb	r1, [r2, #-1]!
 786:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);
 2060              		.loc 1 786 0
 2061 001c 0121     		movs	r1, #1
 2062 001e 2220     		movs	r0, #34
 2063              	.LVL251:
 2064 0020 FFF7FEFF 		bl	nRF24_verified_write_register
 2065              	.LVL252:
 787:Src/nRF24.c   **** }
 2066              		.loc 1 787 0
 2067 0024 03B0     		add	sp, sp, #12
 2068              	.LCFI44:
 2069              		.cfi_def_cfa_offset 4
 2070              		@ sp needed
 2071 0026 5DF804FB 		ldr	pc, [sp], #4
 2072              		.cfi_endproc
 2073              	.LFE157:
 2075              		.section	.text.nRF24_get_EN_RXADDR,"ax",%progbits
 2076              		.align	1
 2077              		.global	nRF24_get_EN_RXADDR
 2078              		.syntax unified
 2079              		.thumb
 2080              		.thumb_func
 2081              		.fpu fpv4-sp-d16
 2083              	nRF24_get_EN_RXADDR:
 2084              	.LFB158:
 788:Src/nRF24.c   **** 
 789:Src/nRF24.c   **** 
 790:Src/nRF24.c   **** /**
 791:Src/nRF24.c   ****   * @brief      Read <EN_RXADDR> register from nRF24L01+.
 792:Src/nRF24.c   ****   * @param      None.
 793:Src/nRF24.c   ****   * @retval     <EN_RXADDR> register value.
 794:Src/nRF24.c   ****   */
 795:Src/nRF24.c   **** uint8_t nRF24_get_EN_RXADDR() 
 796:Src/nRF24.c   **** {
 2085              		.loc 1 796 0
 2086              		.cfi_startproc
 2087              		@ args = 0, pretend = 0, frame = 8
 2088              		@ frame_needed = 0, uses_anonymous_args = 0
 2089 0000 00B5     		push	{lr}
 2090              	.LCFI45:
ARM GAS  /tmp/ccrkxNaW.s 			page 52


 2091              		.cfi_def_cfa_offset 4
 2092              		.cfi_offset 14, -4
 2093 0002 83B0     		sub	sp, sp, #12
 2094              	.LCFI46:
 2095              		.cfi_def_cfa_offset 16
 797:Src/nRF24.c   ****   uint8_t read_byte;
 798:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_byte);
 2096              		.loc 1 798 0
 2097 0004 0DF10702 		add	r2, sp, #7
 2098 0008 0121     		movs	r1, #1
 2099 000a 0220     		movs	r0, #2
 2100 000c FFF7FEFF 		bl	spi_read_register
 2101              	.LVL253:
 799:Src/nRF24.c   ****   return read_byte;
 800:Src/nRF24.c   **** }
 2102              		.loc 1 800 0
 2103 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2104 0014 03B0     		add	sp, sp, #12
 2105              	.LCFI47:
 2106              		.cfi_def_cfa_offset 4
 2107              		@ sp needed
 2108 0016 5DF804FB 		ldr	pc, [sp], #4
 2109              		.cfi_endproc
 2110              	.LFE158:
 2112              		.section	.text.nRF24_set_SETUP_AW,"ax",%progbits
 2113              		.align	1
 2114              		.global	nRF24_set_SETUP_AW
 2115              		.syntax unified
 2116              		.thumb
 2117              		.thumb_func
 2118              		.fpu fpv4-sp-d16
 2120              	nRF24_set_SETUP_AW:
 2121              	.LFB159:
 801:Src/nRF24.c   **** 
 802:Src/nRF24.c   **** /**
 803:Src/nRF24.c   ****   * @brief  nRF24 set <AW> register
 804:Src/nRF24.c   ****   * @param  aw Setup of Address Widths. [ AW_MASK3bytes | AW_MASK4bytes | AW_MASK5bytes | AW_MASKDE
 805:Src/nRF24.c   ****   * @retval None.
 806:Src/nRF24.c   ****   */
 807:Src/nRF24.c   **** void nRF24_set_SETUP_AW(uint8_t aw) 
 808:Src/nRF24.c   **** {
 2122              		.loc 1 808 0
 2123              		.cfi_startproc
 2124              		@ args = 0, pretend = 0, frame = 8
 2125              		@ frame_needed = 0, uses_anonymous_args = 0
 2126              	.LVL254:
 2127 0000 00B5     		push	{lr}
 2128              	.LCFI48:
 2129              		.cfi_def_cfa_offset 4
 2130              		.cfi_offset 14, -4
 2131 0002 83B0     		sub	sp, sp, #12
 2132              	.LCFI49:
 2133              		.cfi_def_cfa_offset 16
 809:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 810:Src/nRF24.c   ****   writing_byte |= aw;
 2134              		.loc 1 810 0
 2135 0004 02AA     		add	r2, sp, #8
ARM GAS  /tmp/ccrkxNaW.s 			page 53


 2136 0006 02F8010D 		strb	r0, [r2, #-1]!
 811:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_AW, 1, &writing_byte);
 2137              		.loc 1 811 0
 2138 000a 0121     		movs	r1, #1
 2139 000c 2320     		movs	r0, #35
 2140              	.LVL255:
 2141 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2142              	.LVL256:
 812:Src/nRF24.c   **** }
 2143              		.loc 1 812 0
 2144 0012 03B0     		add	sp, sp, #12
 2145              	.LCFI50:
 2146              		.cfi_def_cfa_offset 4
 2147              		@ sp needed
 2148 0014 5DF804FB 		ldr	pc, [sp], #4
 2149              		.cfi_endproc
 2150              	.LFE159:
 2152              		.section	.text.nRF24_get_SETUP_AW,"ax",%progbits
 2153              		.align	1
 2154              		.global	nRF24_get_SETUP_AW
 2155              		.syntax unified
 2156              		.thumb
 2157              		.thumb_func
 2158              		.fpu fpv4-sp-d16
 2160              	nRF24_get_SETUP_AW:
 2161              	.LFB160:
 813:Src/nRF24.c   **** 
 814:Src/nRF24.c   **** /**
 815:Src/nRF24.c   ****   * @brief      Read <SETUP_AW> register from nRF24L01+.
 816:Src/nRF24.c   ****   * @param      None.
 817:Src/nRF24.c   ****   * @retval     <SETUP_AW> register value.
 818:Src/nRF24.c   ****   */
 819:Src/nRF24.c   **** uint8_t nRF24_get_SETUP_AW() 
 820:Src/nRF24.c   **** {
 2162              		.loc 1 820 0
 2163              		.cfi_startproc
 2164              		@ args = 0, pretend = 0, frame = 8
 2165              		@ frame_needed = 0, uses_anonymous_args = 0
 2166 0000 00B5     		push	{lr}
 2167              	.LCFI51:
 2168              		.cfi_def_cfa_offset 4
 2169              		.cfi_offset 14, -4
 2170 0002 83B0     		sub	sp, sp, #12
 2171              	.LCFI52:
 2172              		.cfi_def_cfa_offset 16
 821:Src/nRF24.c   ****   uint8_t read_byte;
 822:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_byte);
 2173              		.loc 1 822 0
 2174 0004 0DF10702 		add	r2, sp, #7
 2175 0008 0121     		movs	r1, #1
 2176 000a 0320     		movs	r0, #3
 2177 000c FFF7FEFF 		bl	spi_read_register
 2178              	.LVL257:
 823:Src/nRF24.c   ****   return read_byte;
 824:Src/nRF24.c   **** }
 2179              		.loc 1 824 0
 2180 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
ARM GAS  /tmp/ccrkxNaW.s 			page 54


 2181 0014 03B0     		add	sp, sp, #12
 2182              	.LCFI53:
 2183              		.cfi_def_cfa_offset 4
 2184              		@ sp needed
 2185 0016 5DF804FB 		ldr	pc, [sp], #4
 2186              		.cfi_endproc
 2187              	.LFE160:
 2189              		.section	.text.nRF24_set_SETUP_RETR,"ax",%progbits
 2190              		.align	1
 2191              		.global	nRF24_set_SETUP_RETR
 2192              		.syntax unified
 2193              		.thumb
 2194              		.thumb_func
 2195              		.fpu fpv4-sp-d16
 2197              	nRF24_set_SETUP_RETR:
 2198              	.LFB161:
 825:Src/nRF24.c   **** 
 826:Src/nRF24.c   **** /**
 827:Src/nRF24.c   ****   * @brief  nRF24 configure auto-retransmit delay and auto retransmit count.
 828:Src/nRF24.c   ****   * @param  ard Auto-Retransmit Delay
 829:Src/nRF24.c   ****   *   [ ARD_MASK250us  | ARD_MASK500us  | ARD_MASK750us  | ARD_MASK1000us | ARD_MASK1250us        
 830:Src/nRF24.c   ****   *   | ARD_MASK1500us | ARD_MASK1750us | ARD_MASK2000us | ARD_MASK2250us | ARD_MASK2500us        
 831:Src/nRF24.c   ****   *   | ARD_MASK2750us | ARD_MASK3000us | ARD_MASK3250us | ARD_MASK3500us | ARD_MASK3750us        
 832:Src/nRF24.c   ****   *   | ARD_MASK4000us | ARD_MASKDEFAULT ]
 833:Src/nRF24.c   ****   * @param  arc Auto-Retransmit Count
 834:Src/nRF24.c   ****   *    [  ARC_MASK0 | ARC_MASK1 | ARC_MASK2  | ARC_MASK3  | ARC_MASK4  | ARC_MASK5   | ARC_MASK6  |
 835:Src/nRF24.c   ****   *   | ARC_MASK8 | ARC_MASK9 | ARC_MASK10 | ARC_MASK11 | ARC_MASK12 |  ARC_MASK13 | ARC_MASK14 | A
 836:Src/nRF24.c   ****   *   | ARC_MASKDEFAULT ]
 837:Src/nRF24.c   ****   * @retval None.
 838:Src/nRF24.c   ****   */
 839:Src/nRF24.c   **** void nRF24_set_SETUP_RETR(uint8_t ard, uint8_t arc)
 840:Src/nRF24.c   **** {
 2199              		.loc 1 840 0
 2200              		.cfi_startproc
 2201              		@ args = 0, pretend = 0, frame = 8
 2202              		@ frame_needed = 0, uses_anonymous_args = 0
 2203              	.LVL258:
 2204 0000 00B5     		push	{lr}
 2205              	.LCFI54:
 2206              		.cfi_def_cfa_offset 4
 2207              		.cfi_offset 14, -4
 2208 0002 83B0     		sub	sp, sp, #12
 2209              	.LCFI55:
 2210              		.cfi_def_cfa_offset 16
 841:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 842:Src/nRF24.c   ****   writing_byte |= ard | arc;
 2211              		.loc 1 842 0
 2212 0004 0143     		orrs	r1, r1, r0
 2213              	.LVL259:
 2214 0006 02AA     		add	r2, sp, #8
 2215 0008 02F8011D 		strb	r1, [r2, #-1]!
 843:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);
 2216              		.loc 1 843 0
 2217 000c 0121     		movs	r1, #1
 2218 000e 2420     		movs	r0, #36
 2219              	.LVL260:
 2220 0010 FFF7FEFF 		bl	nRF24_verified_write_register
ARM GAS  /tmp/ccrkxNaW.s 			page 55


 2221              	.LVL261:
 844:Src/nRF24.c   **** }
 2222              		.loc 1 844 0
 2223 0014 03B0     		add	sp, sp, #12
 2224              	.LCFI56:
 2225              		.cfi_def_cfa_offset 4
 2226              		@ sp needed
 2227 0016 5DF804FB 		ldr	pc, [sp], #4
 2228              		.cfi_endproc
 2229              	.LFE161:
 2231              		.section	.text.nRF24_get_SETUP_RETR,"ax",%progbits
 2232              		.align	1
 2233              		.global	nRF24_get_SETUP_RETR
 2234              		.syntax unified
 2235              		.thumb
 2236              		.thumb_func
 2237              		.fpu fpv4-sp-d16
 2239              	nRF24_get_SETUP_RETR:
 2240              	.LFB162:
 845:Src/nRF24.c   **** 
 846:Src/nRF24.c   **** 
 847:Src/nRF24.c   **** 
 848:Src/nRF24.c   **** /**
 849:Src/nRF24.c   ****   * @brief      Read <SETUP_RETR> register from nRF24L01+.
 850:Src/nRF24.c   ****   * @param      None.
 851:Src/nRF24.c   ****   * @retval     <SETUP_RETR> register value.
 852:Src/nRF24.c   ****   */
 853:Src/nRF24.c   **** uint8_t nRF24_get_SETUP_RETR(uint8_t ARD, uint8_t ARC)
 854:Src/nRF24.c   **** {
 2241              		.loc 1 854 0
 2242              		.cfi_startproc
 2243              		@ args = 0, pretend = 0, frame = 8
 2244              		@ frame_needed = 0, uses_anonymous_args = 0
 2245              	.LVL262:
 2246 0000 00B5     		push	{lr}
 2247              	.LCFI57:
 2248              		.cfi_def_cfa_offset 4
 2249              		.cfi_offset 14, -4
 2250 0002 83B0     		sub	sp, sp, #12
 2251              	.LCFI58:
 2252              		.cfi_def_cfa_offset 16
 855:Src/nRF24.c   ****   uint8_t read_byte;
 856:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_byte);
 2253              		.loc 1 856 0
 2254 0004 0DF10702 		add	r2, sp, #7
 2255 0008 0121     		movs	r1, #1
 2256              	.LVL263:
 2257 000a 0420     		movs	r0, #4
 2258              	.LVL264:
 2259 000c FFF7FEFF 		bl	spi_read_register
 2260              	.LVL265:
 857:Src/nRF24.c   ****   return read_byte;
 858:Src/nRF24.c   **** }
 2261              		.loc 1 858 0
 2262 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2263 0014 03B0     		add	sp, sp, #12
 2264              	.LCFI59:
ARM GAS  /tmp/ccrkxNaW.s 			page 56


 2265              		.cfi_def_cfa_offset 4
 2266              		@ sp needed
 2267 0016 5DF804FB 		ldr	pc, [sp], #4
 2268              		.cfi_endproc
 2269              	.LFE162:
 2271              		.section	.text.nRF24_set_RF_CH,"ax",%progbits
 2272              		.align	1
 2273              		.global	nRF24_set_RF_CH
 2274              		.syntax unified
 2275              		.thumb
 2276              		.thumb_func
 2277              		.fpu fpv4-sp-d16
 2279              	nRF24_set_RF_CH:
 2280              	.LFB163:
 859:Src/nRF24.c   **** 
 860:Src/nRF24.c   **** 
 861:Src/nRF24.c   **** 
 862:Src/nRF24.c   **** /**
 863:Src/nRF24.c   ****   * @brief  nRF24 sets the frequency channel of nRF24L01+ operates on.
 864:Src/nRF24.c   ****   * @param  ch Channel. It is basically frequency in MHz. [ RF_CH_MASKDEFAULT ]
 865:Src/nRF24.c   ****   * @retval None.
 866:Src/nRF24.c   ****   * @note   frequency = (2400 + ch) MHz
 867:Src/nRF24.c   ****   */
 868:Src/nRF24.c   **** void nRF24_set_RF_CH(uint8_t ch)
 869:Src/nRF24.c   **** {
 2281              		.loc 1 869 0
 2282              		.cfi_startproc
 2283              		@ args = 0, pretend = 0, frame = 8
 2284              		@ frame_needed = 0, uses_anonymous_args = 0
 2285              	.LVL266:
 2286 0000 00B5     		push	{lr}
 2287              	.LCFI60:
 2288              		.cfi_def_cfa_offset 4
 2289              		.cfi_offset 14, -4
 2290 0002 83B0     		sub	sp, sp, #12
 2291              	.LCFI61:
 2292              		.cfi_def_cfa_offset 16
 870:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 871:Src/nRF24.c   ****   writing_byte |= ch;
 2293              		.loc 1 871 0
 2294 0004 02AA     		add	r2, sp, #8
 2295 0006 02F8010D 		strb	r0, [r2, #-1]!
 872:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RF_CH, 1, &writing_byte);
 2296              		.loc 1 872 0
 2297 000a 0121     		movs	r1, #1
 2298 000c 2520     		movs	r0, #37
 2299              	.LVL267:
 2300 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2301              	.LVL268:
 873:Src/nRF24.c   **** }
 2302              		.loc 1 873 0
 2303 0012 03B0     		add	sp, sp, #12
 2304              	.LCFI62:
 2305              		.cfi_def_cfa_offset 4
 2306              		@ sp needed
 2307 0014 5DF804FB 		ldr	pc, [sp], #4
 2308              		.cfi_endproc
ARM GAS  /tmp/ccrkxNaW.s 			page 57


 2309              	.LFE163:
 2311              		.section	.text.nRF24_get_RF_CH,"ax",%progbits
 2312              		.align	1
 2313              		.global	nRF24_get_RF_CH
 2314              		.syntax unified
 2315              		.thumb
 2316              		.thumb_func
 2317              		.fpu fpv4-sp-d16
 2319              	nRF24_get_RF_CH:
 2320              	.LFB164:
 874:Src/nRF24.c   **** 
 875:Src/nRF24.c   **** 
 876:Src/nRF24.c   **** 
 877:Src/nRF24.c   **** /**
 878:Src/nRF24.c   ****   * @brief   Read <RF_CH> register from nRF24L01+.
 879:Src/nRF24.c   ****   * @param   None.
 880:Src/nRF24.c   ****   * @retval  <RF_CH> register value.
 881:Src/nRF24.c   ****   */
 882:Src/nRF24.c   **** uint8_t nRF24_get_RF_CH()
 883:Src/nRF24.c   **** {
 2321              		.loc 1 883 0
 2322              		.cfi_startproc
 2323              		@ args = 0, pretend = 0, frame = 8
 2324              		@ frame_needed = 0, uses_anonymous_args = 0
 2325 0000 00B5     		push	{lr}
 2326              	.LCFI63:
 2327              		.cfi_def_cfa_offset 4
 2328              		.cfi_offset 14, -4
 2329 0002 83B0     		sub	sp, sp, #12
 2330              	.LCFI64:
 2331              		.cfi_def_cfa_offset 16
 884:Src/nRF24.c   ****   uint8_t read_byte;
 885:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_byte);
 2332              		.loc 1 885 0
 2333 0004 0DF10702 		add	r2, sp, #7
 2334 0008 0121     		movs	r1, #1
 2335 000a 0520     		movs	r0, #5
 2336 000c FFF7FEFF 		bl	spi_read_register
 2337              	.LVL269:
 886:Src/nRF24.c   ****   return read_byte;
 887:Src/nRF24.c   **** }
 2338              		.loc 1 887 0
 2339 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2340 0014 03B0     		add	sp, sp, #12
 2341              	.LCFI65:
 2342              		.cfi_def_cfa_offset 4
 2343              		@ sp needed
 2344 0016 5DF804FB 		ldr	pc, [sp], #4
 2345              		.cfi_endproc
 2346              	.LFE164:
 2348              		.section	.text.nRF24_set_RF_SETUP,"ax",%progbits
 2349              		.align	1
 2350              		.global	nRF24_set_RF_SETUP
 2351              		.syntax unified
 2352              		.thumb
 2353              		.thumb_func
 2354              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccrkxNaW.s 			page 58


 2356              	nRF24_set_RF_SETUP:
 2357              	.LFB165:
 888:Src/nRF24.c   **** 
 889:Src/nRF24.c   **** /**
 890:Src/nRF24.c   ****   * @brief nRF24 RF SETUP register configuration. 
 891:Src/nRF24.c   ****   * @param cont_wave Enables continuous carrier transmit when high. [ CONT_WAVE_MASK1 | CONT_WAVE_M
 892:Src/nRF24.c   ****   * @param rf_dr_low Sets RF data rate to 250 kbps. [ RF_DR_LOW_MASK1 | RF_DR_LOW_MASK0 | RF_DR_LOW
 893:Src/nRF24.c   ****   * @param pll_lock (!) TEST-ONLY SIGNAL for Nordic's internal testing purpose. Forces PLL lock sig
 894:Src/nRF24.c   ****   * @param rf_dr_high Select between high speed data rates. This bit is don't care if RF_DR_LOW bit
 895:Src/nRF24.c   ****   *  
 896:Src/nRF24.c   ****   *    [ RF_DR_HIGH_MASK1 | RF_DR_HIGH_MASK0 | RF_DR_HIGH_MASKDEFAULT ]
 897:Src/nRF24.c   ****   *
 898:Src/nRF24.c   ****   * @note Use RF_DR_HIGH_MASKx and RF_DR_LOW_MASKx or you can use the following masks that combines
 899:Src/nRF24.c   ****   *
 900:Src/nRF24.c   ****   *     Encoding for RF data rate: 
 901:Src/nRF24.c   ****   *     {RF_DR_LOW, RF_DR_HIGH}   Data-Rate
 902:Src/nRF24.c   ****   *          0    ,     0            1   Mbps
 903:Src/nRF24.c   ****   *          0    ,     1            2   Mbps
 904:Src/nRF24.c   ****   *          1    ,     0            250 kbps
 905:Src/nRF24.c   ****   *          1    ,     1            Reserved
 906:Src/nRF24.c   ****   *  
 907:Src/nRF24.c   ****   *    [ RF_DR_MASK1Mbps | RF_DR_MASK2Mbps | RF_DR_MASK250kbps ]
 908:Src/nRF24.c   ****   *
 909:Src/nRF24.c   ****   * @param rf_pwr RF Output power in TX mode. [ RF_PWR_MASKNEG18dBm | RF_PWR_MASKNEG12dBm | RF_PWR_
 910:Src/nRF24.c   ****   *                Power
 911:Src/nRF24.c   ****   *         11   -18 dBm
 912:Src/nRF24.c   ****   *         01   -12 dBm
 913:Src/nRF24.c   ****   *         10    -6 dBm
 914:Src/nRF24.c   ****   *         11     0 dBm
 915:Src/nRF24.c   ****   * @retval None.
 916:Src/nRF24.c   ****   */
 917:Src/nRF24.c   **** void nRF24_set_RF_SETUP(uint8_t cont_wave, uint8_t rf_dr_low, uint8_t pll_lock, uint8_t rf_dr_high,
 918:Src/nRF24.c   **** {
 2358              		.loc 1 918 0
 2359              		.cfi_startproc
 2360              		@ args = 4, pretend = 0, frame = 8
 2361              		@ frame_needed = 0, uses_anonymous_args = 0
 2362              	.LVL270:
 2363 0000 00B5     		push	{lr}
 2364              	.LCFI66:
 2365              		.cfi_def_cfa_offset 4
 2366              		.cfi_offset 14, -4
 2367 0002 83B0     		sub	sp, sp, #12
 2368              	.LCFI67:
 2369              		.cfi_def_cfa_offset 16
 919:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 920:Src/nRF24.c   ****   writing_byte |= cont_wave | rf_dr_low | pll_lock | rf_dr_high | rf_pwr;
 2370              		.loc 1 920 0
 2371 0004 0143     		orrs	r1, r1, r0
 2372              	.LVL271:
 2373 0006 1143     		orrs	r1, r1, r2
 2374 0008 1943     		orrs	r1, r1, r3
 2375 000a 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2376              	.LVL272:
 2377 000e 1943     		orrs	r1, r1, r3
 2378 0010 02AA     		add	r2, sp, #8
 2379              	.LVL273:
ARM GAS  /tmp/ccrkxNaW.s 			page 59


 2380 0012 02F8011D 		strb	r1, [r2, #-1]!
 921:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 2381              		.loc 1 921 0
 2382 0016 0121     		movs	r1, #1
 2383 0018 2620     		movs	r0, #38
 2384              	.LVL274:
 2385 001a FFF7FEFF 		bl	nRF24_verified_write_register
 2386              	.LVL275:
 922:Src/nRF24.c   **** }
 2387              		.loc 1 922 0
 2388 001e 03B0     		add	sp, sp, #12
 2389              	.LCFI68:
 2390              		.cfi_def_cfa_offset 4
 2391              		@ sp needed
 2392 0020 5DF804FB 		ldr	pc, [sp], #4
 2393              		.cfi_endproc
 2394              	.LFE165:
 2396              		.section	.text.nRF24_get_RF_SETUP,"ax",%progbits
 2397              		.align	1
 2398              		.global	nRF24_get_RF_SETUP
 2399              		.syntax unified
 2400              		.thumb
 2401              		.thumb_func
 2402              		.fpu fpv4-sp-d16
 2404              	nRF24_get_RF_SETUP:
 2405              	.LFB166:
 923:Src/nRF24.c   **** 
 924:Src/nRF24.c   **** uint8_t nRF24_get_RF_SETUP()
 925:Src/nRF24.c   **** {
 2406              		.loc 1 925 0
 2407              		.cfi_startproc
 2408              		@ args = 0, pretend = 0, frame = 8
 2409              		@ frame_needed = 0, uses_anonymous_args = 0
 2410 0000 00B5     		push	{lr}
 2411              	.LCFI69:
 2412              		.cfi_def_cfa_offset 4
 2413              		.cfi_offset 14, -4
 2414 0002 83B0     		sub	sp, sp, #12
 2415              	.LCFI70:
 2416              		.cfi_def_cfa_offset 16
 926:Src/nRF24.c   ****   uint8_t read_byte;
 927:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_byte);
 2417              		.loc 1 927 0
 2418 0004 0DF10702 		add	r2, sp, #7
 2419 0008 0121     		movs	r1, #1
 2420 000a 0620     		movs	r0, #6
 2421 000c FFF7FEFF 		bl	spi_read_register
 2422              	.LVL276:
 928:Src/nRF24.c   ****   return read_byte;
 929:Src/nRF24.c   **** }
 2423              		.loc 1 929 0
 2424 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2425 0014 03B0     		add	sp, sp, #12
 2426              	.LCFI71:
 2427              		.cfi_def_cfa_offset 4
 2428              		@ sp needed
 2429 0016 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccrkxNaW.s 			page 60


 2430              		.cfi_endproc
 2431              	.LFE166:
 2433              		.section	.text.nRF24_clear_STATUS,"ax",%progbits
 2434              		.align	1
 2435              		.global	nRF24_clear_STATUS
 2436              		.syntax unified
 2437              		.thumb
 2438              		.thumb_func
 2439              		.fpu fpv4-sp-d16
 2441              	nRF24_clear_STATUS:
 2442              	.LFB167:
 930:Src/nRF24.c   **** 
 931:Src/nRF24.c   **** /**
 932:Src/nRF24.c   ****   * @brief      Clear flag bits in 'STATUS' register.
 933:Src/nRF24.c   ****   * @param      rx_dr Data Ready RX FIFO interrupt. Asserted when new data arrives RX FIFO.
 934:Src/nRF24.c   ****   *               Write 1 to clear bit [ RX_DR_MASK1 ]
 935:Src/nRF24.c   ****   * @param      tx_ds Data Sent TX FIFO interrupt. Asserted when packet transmitted on TX. 
 936:Src/nRF24.c   ****   *               If AUTO_ACK is activated, this bit is set high only when ACK is received. Write 1
 937:Src/nRF24.c   ****   * @param      max_rt Maximum number of TX retransmits interrupt. Write 1 to clear bit. 
 938:Src/nRF24.c   ****   *               If MAX_RT is asserted it must be cleared to enable further communication. [ MAX_R
 939:Src/nRF24.c   ****   * @retval     None.
 940:Src/nRF24.c   ****   */
 941:Src/nRF24.c   **** void nRF24_clear_STATUS(uint8_t rx_dr, uint8_t tx_ds, uint8_t max_rt) 
 942:Src/nRF24.c   **** {
 2443              		.loc 1 942 0
 2444              		.cfi_startproc
 2445              		@ args = 0, pretend = 0, frame = 8
 2446              		@ frame_needed = 0, uses_anonymous_args = 0
 2447              	.LVL277:
 2448 0000 00B5     		push	{lr}
 2449              	.LCFI72:
 2450              		.cfi_def_cfa_offset 4
 2451              		.cfi_offset 14, -4
 2452 0002 83B0     		sub	sp, sp, #12
 2453              	.LCFI73:
 2454              		.cfi_def_cfa_offset 16
 943:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 944:Src/nRF24.c   ****   writing_byte |= rx_dr | tx_ds | max_rt;
 2455              		.loc 1 944 0
 2456 0004 0143     		orrs	r1, r1, r0
 2457              	.LVL278:
 2458 0006 1143     		orrs	r1, r1, r2
 2459 0008 02AA     		add	r2, sp, #8
 2460              	.LVL279:
 2461 000a 02F8011D 		strb	r1, [r2, #-1]!
 945:Src/nRF24.c   **** 
 946:Src/nRF24.c   **** 	/* Do not use nRF24_verified_write_register() to write to <STATUS> register. Not all bits are writ
 947:Src/nRF24.c   ****   spi_write_register(W_REGISTER_MASK + STATUS, 1, &writing_byte);
 2462              		.loc 1 947 0
 2463 000e 0121     		movs	r1, #1
 2464 0010 2720     		movs	r0, #39
 2465              	.LVL280:
 2466 0012 FFF7FEFF 		bl	spi_write_register
 2467              	.LVL281:
 948:Src/nRF24.c   **** }
 2468              		.loc 1 948 0
 2469 0016 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccrkxNaW.s 			page 61


 2470              	.LCFI74:
 2471              		.cfi_def_cfa_offset 4
 2472              		@ sp needed
 2473 0018 5DF804FB 		ldr	pc, [sp], #4
 2474              		.cfi_endproc
 2475              	.LFE167:
 2477              		.section	.text.nRF24_get_STATUS,"ax",%progbits
 2478              		.align	1
 2479              		.global	nRF24_get_STATUS
 2480              		.syntax unified
 2481              		.thumb
 2482              		.thumb_func
 2483              		.fpu fpv4-sp-d16
 2485              	nRF24_get_STATUS:
 2486              	.LFB168:
 949:Src/nRF24.c   **** 
 950:Src/nRF24.c   **** /**
 951:Src/nRF24.c   ****   * @brief      Read <STATUS> register from nRF24.
 952:Src/nRF24.c   ****   * @param      None.
 953:Src/nRF24.c   ****   * @retval     <STATUS> register value.
 954:Src/nRF24.c   ****   * @note    Following masks can be used:
 955:Src/nRF24.c   ****   *   RX_DR_READMASK   
 956:Src/nRF24.c   ****   *   TX_DS_READMASK   
 957:Src/nRF24.c   ****   *   MAX_RT_READMASK  
 958:Src/nRF24.c   ****   *   RX_P_NO_READMASK    
 959:Src/nRF24.c   ****   *   TX_FULL_READMASK    
 960:Src/nRF24.c   ****   */
 961:Src/nRF24.c   **** uint8_t nRF24_get_STATUS(void) 
 962:Src/nRF24.c   **** {
 2487              		.loc 1 962 0
 2488              		.cfi_startproc
 2489              		@ args = 0, pretend = 0, frame = 8
 2490              		@ frame_needed = 0, uses_anonymous_args = 0
 2491 0000 00B5     		push	{lr}
 2492              	.LCFI75:
 2493              		.cfi_def_cfa_offset 4
 2494              		.cfi_offset 14, -4
 2495 0002 83B0     		sub	sp, sp, #12
 2496              	.LCFI76:
 2497              		.cfi_def_cfa_offset 16
 963:Src/nRF24.c   ****   uint8_t status;
 964:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 2498              		.loc 1 964 0
 2499 0004 0DF10702 		add	r2, sp, #7
 2500 0008 0121     		movs	r1, #1
 2501 000a 0720     		movs	r0, #7
 2502 000c FFF7FEFF 		bl	spi_read_register
 2503              	.LVL282:
 965:Src/nRF24.c   ****   return status;
 966:Src/nRF24.c   **** }
 2504              		.loc 1 966 0
 2505 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2506 0014 03B0     		add	sp, sp, #12
 2507              	.LCFI77:
 2508              		.cfi_def_cfa_offset 4
 2509              		@ sp needed
 2510 0016 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccrkxNaW.s 			page 62


 2511              		.cfi_endproc
 2512              	.LFE168:
 2514              		.section	.text.nRF24_get_OBSERVE_TX,"ax",%progbits
 2515              		.align	1
 2516              		.global	nRF24_get_OBSERVE_TX
 2517              		.syntax unified
 2518              		.thumb
 2519              		.thumb_func
 2520              		.fpu fpv4-sp-d16
 2522              	nRF24_get_OBSERVE_TX:
 2523              	.LFB169:
 967:Src/nRF24.c   **** 
 968:Src/nRF24.c   **** /**
 969:Src/nRF24.c   ****   * @brief      Read <OBSERVE_TX> register from nRF24.
 970:Src/nRF24.c   ****   * @param      None.
 971:Src/nRF24.c   ****   * @retval     <OBSERVE_TX> register value.
 972:Src/nRF24.c   ****   */
 973:Src/nRF24.c   **** uint8_t nRF24_get_OBSERVE_TX()
 974:Src/nRF24.c   **** {
 2524              		.loc 1 974 0
 2525              		.cfi_startproc
 2526              		@ args = 0, pretend = 0, frame = 8
 2527              		@ frame_needed = 0, uses_anonymous_args = 0
 2528 0000 00B5     		push	{lr}
 2529              	.LCFI78:
 2530              		.cfi_def_cfa_offset 4
 2531              		.cfi_offset 14, -4
 2532 0002 83B0     		sub	sp, sp, #12
 2533              	.LCFI79:
 2534              		.cfi_def_cfa_offset 16
 975:Src/nRF24.c   ****   #define PLOS_CNT_READMASK  0b1111 << 4
 976:Src/nRF24.c   ****   #define ARC_CNT_READMASK   0b1111 << 0
 977:Src/nRF24.c   ****   uint8_t read_byte;
 978:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + OBSERVE_TX, 1, &read_byte);
 2535              		.loc 1 978 0
 2536 0004 0DF10702 		add	r2, sp, #7
 2537 0008 0121     		movs	r1, #1
 2538 000a 0820     		movs	r0, #8
 2539 000c FFF7FEFF 		bl	spi_read_register
 2540              	.LVL283:
 979:Src/nRF24.c   ****   return read_byte;
 980:Src/nRF24.c   **** }
 2541              		.loc 1 980 0
 2542 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2543 0014 03B0     		add	sp, sp, #12
 2544              	.LCFI80:
 2545              		.cfi_def_cfa_offset 4
 2546              		@ sp needed
 2547 0016 5DF804FB 		ldr	pc, [sp], #4
 2548              		.cfi_endproc
 2549              	.LFE169:
 2551              		.section	.text.nRF24_get_RPD,"ax",%progbits
 2552              		.align	1
 2553              		.global	nRF24_get_RPD
 2554              		.syntax unified
 2555              		.thumb
 2556              		.thumb_func
ARM GAS  /tmp/ccrkxNaW.s 			page 63


 2557              		.fpu fpv4-sp-d16
 2559              	nRF24_get_RPD:
 2560              	.LFB170:
 981:Src/nRF24.c   **** 
 982:Src/nRF24.c   **** /**
 983:Src/nRF24.c   ****   * @brief      Read <RPD> register from nRF24.
 984:Src/nRF24.c   ****   * @param      None.
 985:Src/nRF24.c   ****   * @retval     <RPD> register value.
 986:Src/nRF24.c   ****   */
 987:Src/nRF24.c   **** uint8_t nRF24_get_RPD() 
 988:Src/nRF24.c   **** {
 2561              		.loc 1 988 0
 2562              		.cfi_startproc
 2563              		@ args = 0, pretend = 0, frame = 8
 2564              		@ frame_needed = 0, uses_anonymous_args = 0
 2565 0000 00B5     		push	{lr}
 2566              	.LCFI81:
 2567              		.cfi_def_cfa_offset 4
 2568              		.cfi_offset 14, -4
 2569 0002 83B0     		sub	sp, sp, #12
 2570              	.LCFI82:
 2571              		.cfi_def_cfa_offset 16
 989:Src/nRF24.c   ****   uint8_t read_byte;
 990:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RPD, 1, &read_byte);
 2572              		.loc 1 990 0
 2573 0004 0DF10702 		add	r2, sp, #7
 2574 0008 0121     		movs	r1, #1
 2575 000a 0920     		movs	r0, #9
 2576 000c FFF7FEFF 		bl	spi_read_register
 2577              	.LVL284:
 991:Src/nRF24.c   ****   return read_byte;
 992:Src/nRF24.c   **** }
 2578              		.loc 1 992 0
 2579 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2580 0014 03B0     		add	sp, sp, #12
 2581              	.LCFI83:
 2582              		.cfi_def_cfa_offset 4
 2583              		@ sp needed
 2584 0016 5DF804FB 		ldr	pc, [sp], #4
 2585              		.cfi_endproc
 2586              	.LFE170:
 2588              		.section	.text.nRF24_set_RX_ADDR_P0,"ax",%progbits
 2589              		.align	1
 2590              		.global	nRF24_set_RX_ADDR_P0
 2591              		.syntax unified
 2592              		.thumb
 2593              		.thumb_func
 2594              		.fpu fpv4-sp-d16
 2596              	nRF24_set_RX_ADDR_P0:
 2597              	.LFB171:
 993:Src/nRF24.c   **** 
 994:Src/nRF24.c   **** 
 995:Src/nRF24.c   **** /**
 996:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 0. Least Significant Byte written first.
 997:Src/nRF24.c   ****   * @param  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
 998:Src/nRF24.c   ****   * @param  p_rx_addr_p0 Pointer to an array storing receive address for data pipe 0. 
 999:Src/nRF24.c   ****   *           The array pointed should have a length of either 3, 4, or 5 bytes. 
ARM GAS  /tmp/ccrkxNaW.s 			page 64


1000:Src/nRF24.c   ****   *           The SET_AW register determines the length of the address array. Default length is 5.
1001:Src/nRF24.c   ****   * @retval None.
1002:Src/nRF24.c   ****   */
1003:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P0(uint8_t rx_addr_width, uint8_t* p_rx_addr_p0) 
1004:Src/nRF24.c   **** {
 2598              		.loc 1 1004 0
 2599              		.cfi_startproc
 2600              		@ args = 0, pretend = 0, frame = 0
 2601              		@ frame_needed = 0, uses_anonymous_args = 0
 2602              	.LVL285:
 2603 0000 08B5     		push	{r3, lr}
 2604              	.LCFI84:
 2605              		.cfi_def_cfa_offset 8
 2606              		.cfi_offset 3, -8
 2607              		.cfi_offset 14, -4
1005:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P0, rx_addr_width, p_rx_addr_p0);
 2608              		.loc 1 1005 0
 2609 0002 0A46     		mov	r2, r1
 2610 0004 0146     		mov	r1, r0
 2611              	.LVL286:
 2612 0006 2A20     		movs	r0, #42
 2613              	.LVL287:
 2614 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 2615              	.LVL288:
 2616 000c 08BD     		pop	{r3, pc}
 2617              		.cfi_endproc
 2618              	.LFE171:
 2620              		.section	.text.nRF24_get_RX_ADDR_P0,"ax",%progbits
 2621              		.align	1
 2622              		.global	nRF24_get_RX_ADDR_P0
 2623              		.syntax unified
 2624              		.thumb
 2625              		.thumb_func
 2626              		.fpu fpv4-sp-d16
 2628              	nRF24_get_RX_ADDR_P0:
 2629              	.LFB172:
1006:Src/nRF24.c   **** }
1007:Src/nRF24.c   **** 
1008:Src/nRF24.c   **** 
1009:Src/nRF24.c   **** /**
1010:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P0> register from nRF24.
1011:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1012:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1013:Src/nRF24.c   ****   * @retval     None.
1014:Src/nRF24.c   ****   */
1015:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P0(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1016:Src/nRF24.c   **** {
 2630              		.loc 1 1016 0
 2631              		.cfi_startproc
 2632              		@ args = 0, pretend = 0, frame = 0
 2633              		@ frame_needed = 0, uses_anonymous_args = 0
 2634              	.LVL289:
 2635 0000 08B5     		push	{r3, lr}
 2636              	.LCFI85:
 2637              		.cfi_def_cfa_offset 8
 2638              		.cfi_offset 3, -8
 2639              		.cfi_offset 14, -4
ARM GAS  /tmp/ccrkxNaW.s 			page 65


1017:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, rx_addr_width, p_read_buffer);
 2640              		.loc 1 1017 0
 2641 0002 0A46     		mov	r2, r1
 2642 0004 0146     		mov	r1, r0
 2643              	.LVL290:
 2644 0006 0A20     		movs	r0, #10
 2645              	.LVL291:
 2646 0008 FFF7FEFF 		bl	spi_read_register
 2647              	.LVL292:
 2648 000c 08BD     		pop	{r3, pc}
 2649              		.cfi_endproc
 2650              	.LFE172:
 2652              		.section	.text.nRF24_set_RX_ADDR_P1,"ax",%progbits
 2653              		.align	1
 2654              		.global	nRF24_set_RX_ADDR_P1
 2655              		.syntax unified
 2656              		.thumb
 2657              		.thumb_func
 2658              		.fpu fpv4-sp-d16
 2660              	nRF24_set_RX_ADDR_P1:
 2661              	.LFB173:
1018:Src/nRF24.c   **** }
1019:Src/nRF24.c   **** 
1020:Src/nRF24.c   **** 
1021:Src/nRF24.c   **** /**
1022:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 1. Least Significant Byte written first.
1023:Src/nRF24.c   ****   * @param  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1024:Src/nRF24.c   ****   * @param  p_rx_addr_p1 Pointer to an array storing receive address for data pipe 1. 
1025:Src/nRF24.c   ****   *           The array pointed should have a length of either 3, 4, or 5 bytes. 
1026:Src/nRF24.c   ****   *           The SET_AW register determines the length of the address array. Default length is 5.
1027:Src/nRF24.c   ****   * @note   The RX data pipe 0 and pipe 1 and have totally different addresses. 
1028:Src/nRF24.c   ****   *           However, for RX pipe 2,3,4,5 the [39:8] addresses byte need to be same as RX pipe 1.
1029:Src/nRF24.c   ****   *           Given an example,
1030:Src/nRF24.c   ****   *           RX_ADDR_P0 = 0xE7E7E7E7E7
1031:Src/nRF24.c   ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1032:Src/nRF24.c   ****   *           RX_ADDR_P2 = 0x--------C3 = 0xC2C2C2C2C3
1033:Src/nRF24.c   ****   *           RX_ADDR_P3 = 0x--------C4 = 0xC2C2C2C2C4
1034:Src/nRF24.c   ****   *           RX_ADDR_P4 = 0x--------C5 = 0xC2C2C2C2C5
1035:Src/nRF24.c   ****   *           RX_ADDR_P5 = 0x--------C6 = 0xC2C2C2C2C6
1036:Src/nRF24.c   ****   * @retval None.
1037:Src/nRF24.c   ****   */
1038:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P1(uint8_t rx_addr_width, uint8_t* p_rx_addr_p1) 
1039:Src/nRF24.c   **** {
 2662              		.loc 1 1039 0
 2663              		.cfi_startproc
 2664              		@ args = 0, pretend = 0, frame = 0
 2665              		@ frame_needed = 0, uses_anonymous_args = 0
 2666              	.LVL293:
 2667 0000 08B5     		push	{r3, lr}
 2668              	.LCFI86:
 2669              		.cfi_def_cfa_offset 8
 2670              		.cfi_offset 3, -8
 2671              		.cfi_offset 14, -4
1040:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P1, rx_addr_width, p_rx_addr_p1);
 2672              		.loc 1 1040 0
 2673 0002 0A46     		mov	r2, r1
 2674 0004 0146     		mov	r1, r0
ARM GAS  /tmp/ccrkxNaW.s 			page 66


 2675              	.LVL294:
 2676 0006 2B20     		movs	r0, #43
 2677              	.LVL295:
 2678 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 2679              	.LVL296:
 2680 000c 08BD     		pop	{r3, pc}
 2681              		.cfi_endproc
 2682              	.LFE173:
 2684              		.section	.text.nRF24_get_RX_ADDR_P1,"ax",%progbits
 2685              		.align	1
 2686              		.global	nRF24_get_RX_ADDR_P1
 2687              		.syntax unified
 2688              		.thumb
 2689              		.thumb_func
 2690              		.fpu fpv4-sp-d16
 2692              	nRF24_get_RX_ADDR_P1:
 2693              	.LFB174:
1041:Src/nRF24.c   **** }
1042:Src/nRF24.c   **** 
1043:Src/nRF24.c   **** 
1044:Src/nRF24.c   **** /**
1045:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P1> register from nRF24.
1046:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1047:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1048:Src/nRF24.c   ****   * @retval     None.
1049:Src/nRF24.c   ****   */
1050:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P1(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1051:Src/nRF24.c   **** {
 2694              		.loc 1 1051 0
 2695              		.cfi_startproc
 2696              		@ args = 0, pretend = 0, frame = 0
 2697              		@ frame_needed = 0, uses_anonymous_args = 0
 2698              	.LVL297:
 2699 0000 08B5     		push	{r3, lr}
 2700              	.LCFI87:
 2701              		.cfi_def_cfa_offset 8
 2702              		.cfi_offset 3, -8
 2703              		.cfi_offset 14, -4
1052:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, rx_addr_width, p_read_buffer);
 2704              		.loc 1 1052 0
 2705 0002 0A46     		mov	r2, r1
 2706 0004 0146     		mov	r1, r0
 2707              	.LVL298:
 2708 0006 0B20     		movs	r0, #11
 2709              	.LVL299:
 2710 0008 FFF7FEFF 		bl	spi_read_register
 2711              	.LVL300:
 2712 000c 08BD     		pop	{r3, pc}
 2713              		.cfi_endproc
 2714              	.LFE174:
 2716              		.section	.text.nRF24_set_RX_ADDR_P2,"ax",%progbits
 2717              		.align	1
 2718              		.global	nRF24_set_RX_ADDR_P2
 2719              		.syntax unified
 2720              		.thumb
 2721              		.thumb_func
 2722              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccrkxNaW.s 			page 67


 2724              	nRF24_set_RX_ADDR_P2:
 2725              	.LFB175:
1053:Src/nRF24.c   **** }
1054:Src/nRF24.c   **** 
1055:Src/nRF24.c   **** /**
1056:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 2. 
1057:Src/nRF24.c   ****   * @param  rx_addr_p2 Byte storing receive address for data pipe 2. 
1058:Src/nRF24.c   ****   *           rx_addr_p2 overwrite the Least Significant Byte on RX_ADDR_P1
1059:Src/nRF24.c   ****   *           Given an example,
1060:Src/nRF24.c   ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1061:Src/nRF24.c   ****   *           RX_ADDR_P2 = 0x--------C3 = 0xC2C2C2C2C3
1062:Src/nRF24.c   ****   * @retval None.
1063:Src/nRF24.c   ****   */
1064:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P2(uint8_t rx_addr_p2) 
1065:Src/nRF24.c   **** {
 2726              		.loc 1 1065 0
 2727              		.cfi_startproc
 2728              		@ args = 0, pretend = 0, frame = 8
 2729              		@ frame_needed = 0, uses_anonymous_args = 0
 2730              	.LVL301:
 2731 0000 00B5     		push	{lr}
 2732              	.LCFI88:
 2733              		.cfi_def_cfa_offset 4
 2734              		.cfi_offset 14, -4
 2735 0002 83B0     		sub	sp, sp, #12
 2736              	.LCFI89:
 2737              		.cfi_def_cfa_offset 16
1066:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1067:Src/nRF24.c   ****   writing_byte |= rx_addr_p2;
 2738              		.loc 1 1067 0
 2739 0004 02AA     		add	r2, sp, #8
 2740 0006 02F8010D 		strb	r0, [r2, #-1]!
1068:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P2, 1, &writing_byte);
 2741              		.loc 1 1068 0
 2742 000a 0121     		movs	r1, #1
 2743 000c 2C20     		movs	r0, #44
 2744              	.LVL302:
 2745 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2746              	.LVL303:
1069:Src/nRF24.c   **** }
 2747              		.loc 1 1069 0
 2748 0012 03B0     		add	sp, sp, #12
 2749              	.LCFI90:
 2750              		.cfi_def_cfa_offset 4
 2751              		@ sp needed
 2752 0014 5DF804FB 		ldr	pc, [sp], #4
 2753              		.cfi_endproc
 2754              	.LFE175:
 2756              		.section	.text.nRF24_get_RX_ADDR_P2,"ax",%progbits
 2757              		.align	1
 2758              		.global	nRF24_get_RX_ADDR_P2
 2759              		.syntax unified
 2760              		.thumb
 2761              		.thumb_func
 2762              		.fpu fpv4-sp-d16
 2764              	nRF24_get_RX_ADDR_P2:
 2765              	.LFB176:
ARM GAS  /tmp/ccrkxNaW.s 			page 68


1070:Src/nRF24.c   **** 
1071:Src/nRF24.c   **** 
1072:Src/nRF24.c   **** 
1073:Src/nRF24.c   **** /**
1074:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P2> register from nRF24.
1075:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1076:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1077:Src/nRF24.c   ****   * @retval     None.
1078:Src/nRF24.c   ****   */
1079:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P2(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1080:Src/nRF24.c   **** {
 2766              		.loc 1 1080 0
 2767              		.cfi_startproc
 2768              		@ args = 0, pretend = 0, frame = 0
 2769              		@ frame_needed = 0, uses_anonymous_args = 0
 2770              	.LVL304:
 2771 0000 08B5     		push	{r3, lr}
 2772              	.LCFI91:
 2773              		.cfi_def_cfa_offset 8
 2774              		.cfi_offset 3, -8
 2775              		.cfi_offset 14, -4
1081:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, rx_addr_width, p_read_buffer);
 2776              		.loc 1 1081 0
 2777 0002 0A46     		mov	r2, r1
 2778 0004 0146     		mov	r1, r0
 2779              	.LVL305:
 2780 0006 0C20     		movs	r0, #12
 2781              	.LVL306:
 2782 0008 FFF7FEFF 		bl	spi_read_register
 2783              	.LVL307:
 2784 000c 08BD     		pop	{r3, pc}
 2785              		.cfi_endproc
 2786              	.LFE176:
 2788              		.section	.text.nRF24_set_RX_ADDR_P3,"ax",%progbits
 2789              		.align	1
 2790              		.global	nRF24_set_RX_ADDR_P3
 2791              		.syntax unified
 2792              		.thumb
 2793              		.thumb_func
 2794              		.fpu fpv4-sp-d16
 2796              	nRF24_set_RX_ADDR_P3:
 2797              	.LFB177:
1082:Src/nRF24.c   **** }
1083:Src/nRF24.c   **** 
1084:Src/nRF24.c   **** 
1085:Src/nRF24.c   **** /**
1086:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 3. 
1087:Src/nRF24.c   ****   * @param  rx_addr_p3 Byte storing receive address for data pipe 3. 
1088:Src/nRF24.c   ****   *           rx_addr_p3 overwrite the Least Significant Byte on RX_ADDR_P1
1089:Src/nRF24.c   ****   *           Given an example,
1090:Src/nRF24.c   ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1091:Src/nRF24.c   ****   *           RX_ADDR_P3 = 0x--------C4 = 0xC2C2C2C2C4
1092:Src/nRF24.c   ****   * @retval None.
1093:Src/nRF24.c   ****   */
1094:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P3(uint8_t rx_addr_p3) 
1095:Src/nRF24.c   **** {
 2798              		.loc 1 1095 0
ARM GAS  /tmp/ccrkxNaW.s 			page 69


 2799              		.cfi_startproc
 2800              		@ args = 0, pretend = 0, frame = 8
 2801              		@ frame_needed = 0, uses_anonymous_args = 0
 2802              	.LVL308:
 2803 0000 00B5     		push	{lr}
 2804              	.LCFI92:
 2805              		.cfi_def_cfa_offset 4
 2806              		.cfi_offset 14, -4
 2807 0002 83B0     		sub	sp, sp, #12
 2808              	.LCFI93:
 2809              		.cfi_def_cfa_offset 16
1096:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1097:Src/nRF24.c   ****   writing_byte |= rx_addr_p3;
 2810              		.loc 1 1097 0
 2811 0004 02AA     		add	r2, sp, #8
 2812 0006 02F8010D 		strb	r0, [r2, #-1]!
1098:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P3, 1, &writing_byte);
 2813              		.loc 1 1098 0
 2814 000a 0121     		movs	r1, #1
 2815 000c 2D20     		movs	r0, #45
 2816              	.LVL309:
 2817 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2818              	.LVL310:
1099:Src/nRF24.c   **** }
 2819              		.loc 1 1099 0
 2820 0012 03B0     		add	sp, sp, #12
 2821              	.LCFI94:
 2822              		.cfi_def_cfa_offset 4
 2823              		@ sp needed
 2824 0014 5DF804FB 		ldr	pc, [sp], #4
 2825              		.cfi_endproc
 2826              	.LFE177:
 2828              		.section	.text.nRF24_get_RX_ADDR_P3,"ax",%progbits
 2829              		.align	1
 2830              		.global	nRF24_get_RX_ADDR_P3
 2831              		.syntax unified
 2832              		.thumb
 2833              		.thumb_func
 2834              		.fpu fpv4-sp-d16
 2836              	nRF24_get_RX_ADDR_P3:
 2837              	.LFB178:
1100:Src/nRF24.c   **** 
1101:Src/nRF24.c   **** /**
1102:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P3> register from nRF24.
1103:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1104:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1105:Src/nRF24.c   ****   * @retval     None.
1106:Src/nRF24.c   ****   */
1107:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P3(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1108:Src/nRF24.c   **** {
 2838              		.loc 1 1108 0
 2839              		.cfi_startproc
 2840              		@ args = 0, pretend = 0, frame = 0
 2841              		@ frame_needed = 0, uses_anonymous_args = 0
 2842              	.LVL311:
 2843 0000 08B5     		push	{r3, lr}
 2844              	.LCFI95:
ARM GAS  /tmp/ccrkxNaW.s 			page 70


 2845              		.cfi_def_cfa_offset 8
 2846              		.cfi_offset 3, -8
 2847              		.cfi_offset 14, -4
1109:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, rx_addr_width, p_read_buffer);
 2848              		.loc 1 1109 0
 2849 0002 0A46     		mov	r2, r1
 2850 0004 0146     		mov	r1, r0
 2851              	.LVL312:
 2852 0006 0D20     		movs	r0, #13
 2853              	.LVL313:
 2854 0008 FFF7FEFF 		bl	spi_read_register
 2855              	.LVL314:
 2856 000c 08BD     		pop	{r3, pc}
 2857              		.cfi_endproc
 2858              	.LFE178:
 2860              		.section	.text.nRF24_set_RX_ADDR_P4,"ax",%progbits
 2861              		.align	1
 2862              		.global	nRF24_set_RX_ADDR_P4
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2866              		.fpu fpv4-sp-d16
 2868              	nRF24_set_RX_ADDR_P4:
 2869              	.LFB179:
1110:Src/nRF24.c   **** }
1111:Src/nRF24.c   **** 
1112:Src/nRF24.c   **** /**
1113:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 4.
1114:Src/nRF24.c   ****   * @param  rx_addr_p4 Byte storing receive address for data pipe 4. 
1115:Src/nRF24.c   ****   *           rx_addr_p4 overwrite the Least Significant Byte on RX_ADDR_P1
1116:Src/nRF24.c   ****   *           Given an example,
1117:Src/nRF24.c   ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1118:Src/nRF24.c   ****   *           RX_ADDR_P4 = 0x--------C5 = 0xC2C2C2C2C5
1119:Src/nRF24.c   ****   * @retval None.
1120:Src/nRF24.c   ****   */
1121:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P4(uint8_t rx_addr_p4) 
1122:Src/nRF24.c   **** {
 2870              		.loc 1 1122 0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 8
 2873              		@ frame_needed = 0, uses_anonymous_args = 0
 2874              	.LVL315:
 2875 0000 00B5     		push	{lr}
 2876              	.LCFI96:
 2877              		.cfi_def_cfa_offset 4
 2878              		.cfi_offset 14, -4
 2879 0002 83B0     		sub	sp, sp, #12
 2880              	.LCFI97:
 2881              		.cfi_def_cfa_offset 16
1123:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1124:Src/nRF24.c   ****   writing_byte |= rx_addr_p4;
 2882              		.loc 1 1124 0
 2883 0004 02AA     		add	r2, sp, #8
 2884 0006 02F8010D 		strb	r0, [r2, #-1]!
1125:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P4, 1, &writing_byte);
 2885              		.loc 1 1125 0
 2886 000a 0121     		movs	r1, #1
ARM GAS  /tmp/ccrkxNaW.s 			page 71


 2887 000c 2E20     		movs	r0, #46
 2888              	.LVL316:
 2889 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2890              	.LVL317:
1126:Src/nRF24.c   **** }
 2891              		.loc 1 1126 0
 2892 0012 03B0     		add	sp, sp, #12
 2893              	.LCFI98:
 2894              		.cfi_def_cfa_offset 4
 2895              		@ sp needed
 2896 0014 5DF804FB 		ldr	pc, [sp], #4
 2897              		.cfi_endproc
 2898              	.LFE179:
 2900              		.section	.text.nRF24_get_RX_ADDR_P4,"ax",%progbits
 2901              		.align	1
 2902              		.global	nRF24_get_RX_ADDR_P4
 2903              		.syntax unified
 2904              		.thumb
 2905              		.thumb_func
 2906              		.fpu fpv4-sp-d16
 2908              	nRF24_get_RX_ADDR_P4:
 2909              	.LFB180:
1127:Src/nRF24.c   **** 
1128:Src/nRF24.c   **** /**
1129:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P4> register from nRF24.
1130:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1131:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1132:Src/nRF24.c   ****   * @retval     None.
1133:Src/nRF24.c   ****   */
1134:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P4(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1135:Src/nRF24.c   **** {
 2910              		.loc 1 1135 0
 2911              		.cfi_startproc
 2912              		@ args = 0, pretend = 0, frame = 0
 2913              		@ frame_needed = 0, uses_anonymous_args = 0
 2914              	.LVL318:
 2915 0000 08B5     		push	{r3, lr}
 2916              	.LCFI99:
 2917              		.cfi_def_cfa_offset 8
 2918              		.cfi_offset 3, -8
 2919              		.cfi_offset 14, -4
1136:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, rx_addr_width, p_read_buffer);
 2920              		.loc 1 1136 0
 2921 0002 0A46     		mov	r2, r1
 2922 0004 0146     		mov	r1, r0
 2923              	.LVL319:
 2924 0006 0E20     		movs	r0, #14
 2925              	.LVL320:
 2926 0008 FFF7FEFF 		bl	spi_read_register
 2927              	.LVL321:
 2928 000c 08BD     		pop	{r3, pc}
 2929              		.cfi_endproc
 2930              	.LFE180:
 2932              		.section	.text.nRF24_set_RX_ADDR_P5,"ax",%progbits
 2933              		.align	1
 2934              		.global	nRF24_set_RX_ADDR_P5
 2935              		.syntax unified
ARM GAS  /tmp/ccrkxNaW.s 			page 72


 2936              		.thumb
 2937              		.thumb_func
 2938              		.fpu fpv4-sp-d16
 2940              	nRF24_set_RX_ADDR_P5:
 2941              	.LFB181:
1137:Src/nRF24.c   **** }
1138:Src/nRF24.c   **** 
1139:Src/nRF24.c   **** /**
1140:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 5.
1141:Src/nRF24.c   ****   * @param  rx_addr_p5 Byte storing receive address for data pipe 5. 
1142:Src/nRF24.c   ****   *           rx_addr_p5 overwrite the Least Significant Byte on RX_ADDR_P1
1143:Src/nRF24.c   ****   *           Given an example,
1144:Src/nRF24.c   ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1145:Src/nRF24.c   ****   *           RX_ADDR_P5 = 0x--------C6 = 0xC2C2C2C2C6
1146:Src/nRF24.c   ****   * @retval None.
1147:Src/nRF24.c   ****   */
1148:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P5(uint8_t rx_addr_p5) 
1149:Src/nRF24.c   **** {
 2942              		.loc 1 1149 0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 8
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 2946              	.LVL322:
 2947 0000 00B5     		push	{lr}
 2948              	.LCFI100:
 2949              		.cfi_def_cfa_offset 4
 2950              		.cfi_offset 14, -4
 2951 0002 83B0     		sub	sp, sp, #12
 2952              	.LCFI101:
 2953              		.cfi_def_cfa_offset 16
1150:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1151:Src/nRF24.c   ****   writing_byte |= rx_addr_p5;
 2954              		.loc 1 1151 0
 2955 0004 02AA     		add	r2, sp, #8
 2956 0006 02F8010D 		strb	r0, [r2, #-1]!
1152:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P5, 1, &writing_byte);
 2957              		.loc 1 1152 0
 2958 000a 0121     		movs	r1, #1
 2959 000c 2F20     		movs	r0, #47
 2960              	.LVL323:
 2961 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2962              	.LVL324:
1153:Src/nRF24.c   **** }
 2963              		.loc 1 1153 0
 2964 0012 03B0     		add	sp, sp, #12
 2965              	.LCFI102:
 2966              		.cfi_def_cfa_offset 4
 2967              		@ sp needed
 2968 0014 5DF804FB 		ldr	pc, [sp], #4
 2969              		.cfi_endproc
 2970              	.LFE181:
 2972              		.section	.text.nRF24_get_RX_ADDR_P5,"ax",%progbits
 2973              		.align	1
 2974              		.global	nRF24_get_RX_ADDR_P5
 2975              		.syntax unified
 2976              		.thumb
 2977              		.thumb_func
ARM GAS  /tmp/ccrkxNaW.s 			page 73


 2978              		.fpu fpv4-sp-d16
 2980              	nRF24_get_RX_ADDR_P5:
 2981              	.LFB182:
1154:Src/nRF24.c   **** 
1155:Src/nRF24.c   **** 
1156:Src/nRF24.c   **** /**
1157:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P5> register from nRF24.
1158:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1159:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1160:Src/nRF24.c   ****   * @retval     None.
1161:Src/nRF24.c   ****   */
1162:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P5(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1163:Src/nRF24.c   **** {
 2982              		.loc 1 1163 0
 2983              		.cfi_startproc
 2984              		@ args = 0, pretend = 0, frame = 0
 2985              		@ frame_needed = 0, uses_anonymous_args = 0
 2986              	.LVL325:
 2987 0000 08B5     		push	{r3, lr}
 2988              	.LCFI103:
 2989              		.cfi_def_cfa_offset 8
 2990              		.cfi_offset 3, -8
 2991              		.cfi_offset 14, -4
1164:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P5, rx_addr_width, p_read_buffer);
 2992              		.loc 1 1164 0
 2993 0002 0A46     		mov	r2, r1
 2994 0004 0146     		mov	r1, r0
 2995              	.LVL326:
 2996 0006 0F20     		movs	r0, #15
 2997              	.LVL327:
 2998 0008 FFF7FEFF 		bl	spi_read_register
 2999              	.LVL328:
 3000 000c 08BD     		pop	{r3, pc}
 3001              		.cfi_endproc
 3002              	.LFE182:
 3004              		.section	.text.nRF24_set_TX_ADDR,"ax",%progbits
 3005              		.align	1
 3006              		.global	nRF24_set_TX_ADDR
 3007              		.syntax unified
 3008              		.thumb
 3009              		.thumb_func
 3010              		.fpu fpv4-sp-d16
 3012              	nRF24_set_TX_ADDR:
 3013              	.LFB183:
1165:Src/nRF24.c   **** }
1166:Src/nRF24.c   **** 
1167:Src/nRF24.c   **** /**
1168:Src/nRF24.c   ****   * @brief  Set TX (transmit) address. Least Significant Byte written first.
1169:Src/nRF24.c   ****   * @param  tx_addr_width The width of TX address. Needs to be consistent with SET_AW.
1170:Src/nRF24.c   ****   * @param  p_tx_addr Pointer to an array storing the transmit address.
1171:Src/nRF24.c   ****   * @retval None.
1172:Src/nRF24.c   ****   */
1173:Src/nRF24.c   **** void nRF24_set_TX_ADDR(uint8_t tx_addr_width, uint8_t* p_tx_addr) 
1174:Src/nRF24.c   **** {
 3014              		.loc 1 1174 0
 3015              		.cfi_startproc
 3016              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccrkxNaW.s 			page 74


 3017              		@ frame_needed = 0, uses_anonymous_args = 0
 3018              	.LVL329:
 3019 0000 08B5     		push	{r3, lr}
 3020              	.LCFI104:
 3021              		.cfi_def_cfa_offset 8
 3022              		.cfi_offset 3, -8
 3023              		.cfi_offset 14, -4
1175:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + TX_ADDR, tx_addr_width, p_tx_addr);
 3024              		.loc 1 1175 0
 3025 0002 0A46     		mov	r2, r1
 3026 0004 0146     		mov	r1, r0
 3027              	.LVL330:
 3028 0006 3020     		movs	r0, #48
 3029              	.LVL331:
 3030 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 3031              	.LVL332:
 3032 000c 08BD     		pop	{r3, pc}
 3033              		.cfi_endproc
 3034              	.LFE183:
 3036              		.section	.text.nRF24_config_tx_mode,"ax",%progbits
 3037              		.align	1
 3038              		.global	nRF24_config_tx_mode
 3039              		.syntax unified
 3040              		.thumb
 3041              		.thumb_func
 3042              		.fpu fpv4-sp-d16
 3044              	nRF24_config_tx_mode:
 3045              	.LFB150:
 579:Src/nRF24.c   ****     nRF24_CE_0();
 3046              		.loc 1 579 0
 3047              		.cfi_startproc
 3048              		@ args = 0, pretend = 0, frame = 8
 3049              		@ frame_needed = 0, uses_anonymous_args = 0
 3050 0000 10B5     		push	{r4, lr}
 3051              	.LCFI105:
 3052              		.cfi_def_cfa_offset 8
 3053              		.cfi_offset 4, -8
 3054              		.cfi_offset 14, -4
 3055 0002 86B0     		sub	sp, sp, #24
 3056              	.LCFI106:
 3057              		.cfi_def_cfa_offset 32
 580:Src/nRF24.c   **** 
 3058              		.loc 1 580 0
 3059 0004 FFF7FEFF 		bl	nRF24_CE_0
 3060              	.LVL333:
 583:Src/nRF24.c   **** 
 3061              		.loc 1 583 0
 3062 0008 0320     		movs	r0, #3
 3063 000a FFF7FEFF 		bl	nRF24_set_SETUP_AW
 3064              	.LVL334:
 585:Src/nRF24.c   **** 		nRF24_set_TX_ADDR(5, TX_ADDRESS);
 3065              		.loc 1 585 0
 3066 000e 1D4B     		ldr	r3, .L160
 3067 0010 93E80300 		ldm	r3, {r0, r1}
 3068 0014 0490     		str	r0, [sp, #16]
 3069 0016 8DF81410 		strb	r1, [sp, #20]
 586:Src/nRF24.c   **** 		nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA_P
ARM GAS  /tmp/ccrkxNaW.s 			page 75


 3070              		.loc 1 586 0
 3071 001a 04A9     		add	r1, sp, #16
 3072 001c 0520     		movs	r0, #5
 3073 001e FFF7FEFF 		bl	nRF24_set_TX_ADDR
 3074              	.LVL335:
 587:Src/nRF24.c   **** 		nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P0_
 3075              		.loc 1 587 0
 3076 0022 0024     		movs	r4, #0
 3077 0024 0194     		str	r4, [sp, #4]
 3078 0026 0094     		str	r4, [sp]
 3079 0028 2346     		mov	r3, r4
 3080 002a 2246     		mov	r2, r4
 3081 002c 2146     		mov	r1, r4
 3082 002e 2046     		mov	r0, r4
 3083 0030 FFF7FEFF 		bl	nRF24_set_EN_AA
 3084              	.LVL336:
 588:Src/nRF24.c   **** 		nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK0);
 3085              		.loc 1 588 0
 3086 0034 0194     		str	r4, [sp, #4]
 3087 0036 0094     		str	r4, [sp]
 3088 0038 2346     		mov	r3, r4
 3089 003a 2246     		mov	r2, r4
 3090 003c 2146     		mov	r1, r4
 3091 003e 2046     		mov	r0, r4
 3092 0040 FFF7FEFF 		bl	nRF24_set_EN_RXADDR
 3093              	.LVL337:
 589:Src/nRF24.c   **** 		nRF24_set_RF_CH(40);
 3094              		.loc 1 589 0
 3095 0044 2146     		mov	r1, r4
 3096 0046 2046     		mov	r0, r4
 3097 0048 FFF7FEFF 		bl	nRF24_set_SETUP_RETR
 3098              	.LVL338:
 590:Src/nRF24.c   **** 		nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_HIGH
 3099              		.loc 1 590 0
 3100 004c 2820     		movs	r0, #40
 3101 004e FFF7FEFF 		bl	nRF24_set_RF_CH
 3102              	.LVL339:
 591:Src/nRF24.c   **** 		nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CRC_
 3103              		.loc 1 591 0
 3104 0052 0623     		movs	r3, #6
 3105 0054 0093     		str	r3, [sp]
 3106 0056 0123     		movs	r3, #1
 3107 0058 2246     		mov	r2, r4
 3108 005a 2146     		mov	r1, r4
 3109 005c 2046     		mov	r0, r4
 3110 005e FFF7FEFF 		bl	nRF24_set_RF_SETUP
 3111              	.LVL340:
 592:Src/nRF24.c   ****     SPI_DELAY(10);
 3112              		.loc 1 592 0
 3113 0062 0294     		str	r4, [sp, #8]
 3114 0064 0223     		movs	r3, #2
 3115 0066 0193     		str	r3, [sp, #4]
 3116 0068 0423     		movs	r3, #4
 3117 006a 0093     		str	r3, [sp]
 3118 006c 0823     		movs	r3, #8
 3119 006e 2246     		mov	r2, r4
 3120 0070 2146     		mov	r1, r4
ARM GAS  /tmp/ccrkxNaW.s 			page 76


 3121 0072 2046     		mov	r0, r4
 3122 0074 FFF7FEFF 		bl	nRF24_set_CONFIG
 3123              	.LVL341:
 593:Src/nRF24.c   ****     // CE is not set to 1, nRF24 still stays in [Standby-I] Mode.
 3124              		.loc 1 593 0
 3125 0078 0A20     		movs	r0, #10
 3126 007a FFF7FEFF 		bl	SPI_DELAY
 3127              	.LVL342:
 596:Src/nRF24.c   **** 
 3128              		.loc 1 596 0
 3129 007e 06B0     		add	sp, sp, #24
 3130              	.LCFI107:
 3131              		.cfi_def_cfa_offset 8
 3132              		@ sp needed
 3133 0080 10BD     		pop	{r4, pc}
 3134              	.L161:
 3135 0082 00BF     		.align	2
 3136              	.L160:
 3137 0084 04000000 		.word	.LANCHOR0+4
 3138              		.cfi_endproc
 3139              	.LFE150:
 3141              		.section	.text.nRF24_config_enhanced_shockburst_tx_mode,"ax",%progbits
 3142              		.align	1
 3143              		.global	nRF24_config_enhanced_shockburst_tx_mode
 3144              		.syntax unified
 3145              		.thumb
 3146              		.thumb_func
 3147              		.fpu fpv4-sp-d16
 3149              	nRF24_config_enhanced_shockburst_tx_mode:
 3150              	.LFB151:
 603:Src/nRF24.c   ****     nRF24_CE_0();
 3151              		.loc 1 603 0
 3152              		.cfi_startproc
 3153              		@ args = 0, pretend = 0, frame = 16
 3154              		@ frame_needed = 0, uses_anonymous_args = 0
 3155 0000 30B5     		push	{r4, r5, lr}
 3156              	.LCFI108:
 3157              		.cfi_def_cfa_offset 12
 3158              		.cfi_offset 4, -12
 3159              		.cfi_offset 5, -8
 3160              		.cfi_offset 14, -4
 3161 0002 89B0     		sub	sp, sp, #36
 3162              	.LCFI109:
 3163              		.cfi_def_cfa_offset 48
 604:Src/nRF24.c   **** 		// nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 3164              		.loc 1 604 0
 3165 0004 FFF7FEFF 		bl	nRF24_CE_0
 3166              	.LVL343:
 608:Src/nRF24.c   **** 
 3167              		.loc 1 608 0
 3168 0008 0320     		movs	r0, #3
 3169 000a FFF7FEFF 		bl	nRF24_set_SETUP_AW
 3170              	.LVL344:
 610:Src/nRF24.c   **** 		nRF24_set_TX_ADDR(5, TX_ADDRESS);
 3171              		.loc 1 610 0
 3172 000e 1F4B     		ldr	r3, .L164
 3173 0010 93E80300 		ldm	r3, {r0, r1}
ARM GAS  /tmp/ccrkxNaW.s 			page 77


 3174 0014 0690     		str	r0, [sp, #24]
 3175 0016 8DF81C10 		strb	r1, [sp, #28]
 611:Src/nRF24.c   **** 
 3176              		.loc 1 611 0
 3177 001a 06A9     		add	r1, sp, #24
 3178 001c 0520     		movs	r0, #5
 3179 001e FFF7FEFF 		bl	nRF24_set_TX_ADDR
 3180              	.LVL345:
 614:Src/nRF24.c   **** 
 3181              		.loc 1 614 0
 3182 0022 06A9     		add	r1, sp, #24
 3183 0024 0520     		movs	r0, #5
 3184 0026 FFF7FEFF 		bl	nRF24_set_RX_ADDR_P0
 3185              	.LVL346:
 616:Src/nRF24.c   **** 		nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P0_
 3186              		.loc 1 616 0
 3187 002a 0125     		movs	r5, #1
 3188 002c 0195     		str	r5, [sp, #4]
 3189 002e 0024     		movs	r4, #0
 3190 0030 0094     		str	r4, [sp]
 3191 0032 2346     		mov	r3, r4
 3192 0034 2246     		mov	r2, r4
 3193 0036 2146     		mov	r1, r4
 3194 0038 2046     		mov	r0, r4
 3195 003a FFF7FEFF 		bl	nRF24_set_EN_AA
 3196              	.LVL347:
 617:Src/nRF24.c   **** 		nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK10);
 3197              		.loc 1 617 0
 3198 003e 0195     		str	r5, [sp, #4]
 3199 0040 0094     		str	r4, [sp]
 3200 0042 2346     		mov	r3, r4
 3201 0044 2246     		mov	r2, r4
 3202 0046 2146     		mov	r1, r4
 3203 0048 2046     		mov	r0, r4
 3204 004a FFF7FEFF 		bl	nRF24_set_EN_RXADDR
 3205              	.LVL348:
 618:Src/nRF24.c   **** 		nRF24_set_RF_CH(40);
 3206              		.loc 1 618 0
 3207 004e 0A21     		movs	r1, #10
 3208 0050 2046     		mov	r0, r4
 3209 0052 FFF7FEFF 		bl	nRF24_set_SETUP_RETR
 3210              	.LVL349:
 619:Src/nRF24.c   **** 		uint8_t writing_byte = 0x07;
 3211              		.loc 1 619 0
 3212 0056 2820     		movs	r0, #40
 3213 0058 FFF7FEFF 		bl	nRF24_set_RF_CH
 3214              	.LVL350:
 620:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 3215              		.loc 1 620 0
 3216 005c 08AA     		add	r2, sp, #32
 3217 005e 0723     		movs	r3, #7
 3218 0060 02F8093D 		strb	r3, [r2, #-9]!
 621:Src/nRF24.c   **** 		// nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_H
 3219              		.loc 1 621 0
 3220 0064 2946     		mov	r1, r5
 3221 0066 2620     		movs	r0, #38
 3222 0068 FFF7FEFF 		bl	nRF24_verified_write_register
ARM GAS  /tmp/ccrkxNaW.s 			page 78


 3223              	.LVL351:
 623:Src/nRF24.c   ****     SPI_DELAY(10);
 3224              		.loc 1 623 0
 3225 006c 0294     		str	r4, [sp, #8]
 3226 006e 0223     		movs	r3, #2
 3227 0070 0193     		str	r3, [sp, #4]
 3228 0072 0423     		movs	r3, #4
 3229 0074 0093     		str	r3, [sp]
 3230 0076 0823     		movs	r3, #8
 3231 0078 2246     		mov	r2, r4
 3232 007a 2146     		mov	r1, r4
 3233 007c 2046     		mov	r0, r4
 3234 007e FFF7FEFF 		bl	nRF24_set_CONFIG
 3235              	.LVL352:
 624:Src/nRF24.c   **** 
 3236              		.loc 1 624 0
 3237 0082 0A20     		movs	r0, #10
 3238 0084 FFF7FEFF 		bl	SPI_DELAY
 3239              	.LVL353:
 626:Src/nRF24.c   **** 
 3240              		.loc 1 626 0
 3241 0088 09B0     		add	sp, sp, #36
 3242              	.LCFI110:
 3243              		.cfi_def_cfa_offset 12
 3244              		@ sp needed
 3245 008a 30BD     		pop	{r4, r5, pc}
 3246              	.L165:
 3247              		.align	2
 3248              	.L164:
 3249 008c 04000000 		.word	.LANCHOR0+4
 3250              		.cfi_endproc
 3251              	.LFE151:
 3253              		.section	.text.nRF24_get_TX_ADDR,"ax",%progbits
 3254              		.align	1
 3255              		.global	nRF24_get_TX_ADDR
 3256              		.syntax unified
 3257              		.thumb
 3258              		.thumb_func
 3259              		.fpu fpv4-sp-d16
 3261              	nRF24_get_TX_ADDR:
 3262              	.LFB184:
1176:Src/nRF24.c   **** }
1177:Src/nRF24.c   **** 
1178:Src/nRF24.c   **** 
1179:Src/nRF24.c   **** /**
1180:Src/nRF24.c   ****   * @brief      Read <TX_ADDR> register from nRF24.
1181:Src/nRF24.c   ****   * @param[in]  tx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1182:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read TX address.
1183:Src/nRF24.c   ****   * @retval     None.
1184:Src/nRF24.c   ****   */
1185:Src/nRF24.c   **** void nRF24_get_TX_ADDR(uint8_t tx_addr_width, uint8_t* p_read_buffer) 
1186:Src/nRF24.c   **** {
 3263              		.loc 1 1186 0
 3264              		.cfi_startproc
 3265              		@ args = 0, pretend = 0, frame = 0
 3266              		@ frame_needed = 0, uses_anonymous_args = 0
 3267              	.LVL354:
ARM GAS  /tmp/ccrkxNaW.s 			page 79


 3268 0000 08B5     		push	{r3, lr}
 3269              	.LCFI111:
 3270              		.cfi_def_cfa_offset 8
 3271              		.cfi_offset 3, -8
 3272              		.cfi_offset 14, -4
1187:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P5, tx_addr_width, p_read_buffer);
 3273              		.loc 1 1187 0
 3274 0002 0A46     		mov	r2, r1
 3275 0004 0146     		mov	r1, r0
 3276              	.LVL355:
 3277 0006 0F20     		movs	r0, #15
 3278              	.LVL356:
 3279 0008 FFF7FEFF 		bl	spi_read_register
 3280              	.LVL357:
 3281 000c 08BD     		pop	{r3, pc}
 3282              		.cfi_endproc
 3283              	.LFE184:
 3285              		.section	.text.nRF24_set_RX_PW_P0,"ax",%progbits
 3286              		.align	1
 3287              		.global	nRF24_set_RX_PW_P0
 3288              		.syntax unified
 3289              		.thumb
 3290              		.thumb_func
 3291              		.fpu fpv4-sp-d16
 3293              	nRF24_set_RX_PW_P0:
 3294              	.LFB185:
1188:Src/nRF24.c   **** }
1189:Src/nRF24.c   **** 
1190:Src/nRF24.c   **** /**
1191:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 0.
1192:Src/nRF24.c   ****   * @param rx_pw_p0 Number of bytes. 
1193:Src/nRF24.c   ****   *          0 = pipe not used.
1194:Src/nRF24.c   ****   *          1 = 1 byte.
1195:Src/nRF24.c   ****   *          2 = 2 bytes.
1196:Src/nRF24.c   ****   *          ...
1197:Src/nRF24.c   ****   *          32 = 32 bytes.
1198:Src/nRF24.c   ****   */
1199:Src/nRF24.c   **** void nRF24_set_RX_PW_P0(uint8_t rx_pw_p0) 
1200:Src/nRF24.c   **** {
 3295              		.loc 1 1200 0
 3296              		.cfi_startproc
 3297              		@ args = 0, pretend = 0, frame = 8
 3298              		@ frame_needed = 0, uses_anonymous_args = 0
 3299              	.LVL358:
 3300 0000 00B5     		push	{lr}
 3301              	.LCFI112:
 3302              		.cfi_def_cfa_offset 4
 3303              		.cfi_offset 14, -4
 3304 0002 83B0     		sub	sp, sp, #12
 3305              	.LCFI113:
 3306              		.cfi_def_cfa_offset 16
1201:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1202:Src/nRF24.c   ****   writing_byte |= rx_pw_p0;
 3307              		.loc 1 1202 0
 3308 0004 02AA     		add	r2, sp, #8
 3309 0006 02F8010D 		strb	r0, [r2, #-1]!
1203:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P0, 1, &writing_byte);
ARM GAS  /tmp/ccrkxNaW.s 			page 80


 3310              		.loc 1 1203 0
 3311 000a 0121     		movs	r1, #1
 3312 000c 3120     		movs	r0, #49
 3313              	.LVL359:
 3314 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3315              	.LVL360:
1204:Src/nRF24.c   **** }
 3316              		.loc 1 1204 0
 3317 0012 03B0     		add	sp, sp, #12
 3318              	.LCFI114:
 3319              		.cfi_def_cfa_offset 4
 3320              		@ sp needed
 3321 0014 5DF804FB 		ldr	pc, [sp], #4
 3322              		.cfi_endproc
 3323              	.LFE185:
 3325              		.section	.text.nRF24_get_RX_PW_P0,"ax",%progbits
 3326              		.align	1
 3327              		.global	nRF24_get_RX_PW_P0
 3328              		.syntax unified
 3329              		.thumb
 3330              		.thumb_func
 3331              		.fpu fpv4-sp-d16
 3333              	nRF24_get_RX_PW_P0:
 3334              	.LFB186:
1205:Src/nRF24.c   **** 
1206:Src/nRF24.c   **** 
1207:Src/nRF24.c   **** /**
1208:Src/nRF24.c   ****   * @brief      Read <RX_PW_P0> register from nRF24.
1209:Src/nRF24.c   ****   * @param      None.
1210:Src/nRF24.c   ****   * @retval     <RX_PW_P0> register value.
1211:Src/nRF24.c   ****   */
1212:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P0() 
1213:Src/nRF24.c   **** {
 3335              		.loc 1 1213 0
 3336              		.cfi_startproc
 3337              		@ args = 0, pretend = 0, frame = 8
 3338              		@ frame_needed = 0, uses_anonymous_args = 0
 3339 0000 00B5     		push	{lr}
 3340              	.LCFI115:
 3341              		.cfi_def_cfa_offset 4
 3342              		.cfi_offset 14, -4
 3343 0002 83B0     		sub	sp, sp, #12
 3344              	.LCFI116:
 3345              		.cfi_def_cfa_offset 16
1214:Src/nRF24.c   ****   uint8_t read_byte;
1215:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P0, 1, &read_byte);
 3346              		.loc 1 1215 0
 3347 0004 0DF10702 		add	r2, sp, #7
 3348 0008 0121     		movs	r1, #1
 3349 000a 1120     		movs	r0, #17
 3350 000c FFF7FEFF 		bl	spi_read_register
 3351              	.LVL361:
1216:Src/nRF24.c   ****   return read_byte;
1217:Src/nRF24.c   **** }
 3352              		.loc 1 1217 0
 3353 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3354 0014 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccrkxNaW.s 			page 81


 3355              	.LCFI117:
 3356              		.cfi_def_cfa_offset 4
 3357              		@ sp needed
 3358 0016 5DF804FB 		ldr	pc, [sp], #4
 3359              		.cfi_endproc
 3360              	.LFE186:
 3362              		.section	.text.nRF24_set_RX_PW_P1,"ax",%progbits
 3363              		.align	1
 3364              		.global	nRF24_set_RX_PW_P1
 3365              		.syntax unified
 3366              		.thumb
 3367              		.thumb_func
 3368              		.fpu fpv4-sp-d16
 3370              	nRF24_set_RX_PW_P1:
 3371              	.LFB187:
1218:Src/nRF24.c   **** 
1219:Src/nRF24.c   **** 
1220:Src/nRF24.c   **** /**
1221:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 1.
1222:Src/nRF24.c   ****   * @param rx_pw_p1 Number of bytes. 
1223:Src/nRF24.c   ****   *          0 = pipe not used.
1224:Src/nRF24.c   ****   *          1 = 1 byte.
1225:Src/nRF24.c   ****   *          2 = 2 bytes.
1226:Src/nRF24.c   ****   *          ...
1227:Src/nRF24.c   ****   *          32 = 32 bytes.
1228:Src/nRF24.c   ****   * @retval None.
1229:Src/nRF24.c   ****   */
1230:Src/nRF24.c   **** void nRF24_set_RX_PW_P1(uint8_t rx_pw_p1) 
1231:Src/nRF24.c   **** {
 3372              		.loc 1 1231 0
 3373              		.cfi_startproc
 3374              		@ args = 0, pretend = 0, frame = 8
 3375              		@ frame_needed = 0, uses_anonymous_args = 0
 3376              	.LVL362:
 3377 0000 00B5     		push	{lr}
 3378              	.LCFI118:
 3379              		.cfi_def_cfa_offset 4
 3380              		.cfi_offset 14, -4
 3381 0002 83B0     		sub	sp, sp, #12
 3382              	.LCFI119:
 3383              		.cfi_def_cfa_offset 16
1232:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1233:Src/nRF24.c   ****   writing_byte |= rx_pw_p1;
 3384              		.loc 1 1233 0
 3385 0004 02AA     		add	r2, sp, #8
 3386 0006 02F8010D 		strb	r0, [r2, #-1]!
1234:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P1, 1, &writing_byte);
 3387              		.loc 1 1234 0
 3388 000a 0121     		movs	r1, #1
 3389 000c 3220     		movs	r0, #50
 3390              	.LVL363:
 3391 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3392              	.LVL364:
1235:Src/nRF24.c   **** }
 3393              		.loc 1 1235 0
 3394 0012 03B0     		add	sp, sp, #12
 3395              	.LCFI120:
ARM GAS  /tmp/ccrkxNaW.s 			page 82


 3396              		.cfi_def_cfa_offset 4
 3397              		@ sp needed
 3398 0014 5DF804FB 		ldr	pc, [sp], #4
 3399              		.cfi_endproc
 3400              	.LFE187:
 3402              		.section	.text.nRF24_get_RX_PW_P1,"ax",%progbits
 3403              		.align	1
 3404              		.global	nRF24_get_RX_PW_P1
 3405              		.syntax unified
 3406              		.thumb
 3407              		.thumb_func
 3408              		.fpu fpv4-sp-d16
 3410              	nRF24_get_RX_PW_P1:
 3411              	.LFB188:
1236:Src/nRF24.c   **** 
1237:Src/nRF24.c   **** 
1238:Src/nRF24.c   **** /**
1239:Src/nRF24.c   ****   * @brief      Read <RX_PW_P1> register from nRF24.
1240:Src/nRF24.c   ****   * @param      None.
1241:Src/nRF24.c   ****   * @retval     <RX_PW_P1> register value.
1242:Src/nRF24.c   ****   */
1243:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P1() 
1244:Src/nRF24.c   **** {
 3412              		.loc 1 1244 0
 3413              		.cfi_startproc
 3414              		@ args = 0, pretend = 0, frame = 8
 3415              		@ frame_needed = 0, uses_anonymous_args = 0
 3416 0000 00B5     		push	{lr}
 3417              	.LCFI121:
 3418              		.cfi_def_cfa_offset 4
 3419              		.cfi_offset 14, -4
 3420 0002 83B0     		sub	sp, sp, #12
 3421              	.LCFI122:
 3422              		.cfi_def_cfa_offset 16
1245:Src/nRF24.c   ****   uint8_t read_byte;
1246:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P1, 1, &read_byte);
 3423              		.loc 1 1246 0
 3424 0004 0DF10702 		add	r2, sp, #7
 3425 0008 0121     		movs	r1, #1
 3426 000a 1220     		movs	r0, #18
 3427 000c FFF7FEFF 		bl	spi_read_register
 3428              	.LVL365:
1247:Src/nRF24.c   ****   return read_byte;
1248:Src/nRF24.c   **** }
 3429              		.loc 1 1248 0
 3430 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3431 0014 03B0     		add	sp, sp, #12
 3432              	.LCFI123:
 3433              		.cfi_def_cfa_offset 4
 3434              		@ sp needed
 3435 0016 5DF804FB 		ldr	pc, [sp], #4
 3436              		.cfi_endproc
 3437              	.LFE188:
 3439              		.section	.text.nRF24_set_RX_PW_P2,"ax",%progbits
 3440              		.align	1
 3441              		.global	nRF24_set_RX_PW_P2
 3442              		.syntax unified
ARM GAS  /tmp/ccrkxNaW.s 			page 83


 3443              		.thumb
 3444              		.thumb_func
 3445              		.fpu fpv4-sp-d16
 3447              	nRF24_set_RX_PW_P2:
 3448              	.LFB189:
1249:Src/nRF24.c   **** 
1250:Src/nRF24.c   **** 
1251:Src/nRF24.c   **** /**
1252:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 2.
1253:Src/nRF24.c   ****   * @param rx_pw_p2 Number of bytes. 
1254:Src/nRF24.c   ****   *          0 = pipe not used.
1255:Src/nRF24.c   ****   *          1 = 1 byte.
1256:Src/nRF24.c   ****   *          2 = 2 bytes.
1257:Src/nRF24.c   ****   *          ...
1258:Src/nRF24.c   ****   *          32 = 32 bytes.
1259:Src/nRF24.c   ****   * @retval None.
1260:Src/nRF24.c   ****   */
1261:Src/nRF24.c   **** void nRF24_set_RX_PW_P2(uint8_t rx_pw_p2) 
1262:Src/nRF24.c   **** {
 3449              		.loc 1 1262 0
 3450              		.cfi_startproc
 3451              		@ args = 0, pretend = 0, frame = 8
 3452              		@ frame_needed = 0, uses_anonymous_args = 0
 3453              	.LVL366:
 3454 0000 00B5     		push	{lr}
 3455              	.LCFI124:
 3456              		.cfi_def_cfa_offset 4
 3457              		.cfi_offset 14, -4
 3458 0002 83B0     		sub	sp, sp, #12
 3459              	.LCFI125:
 3460              		.cfi_def_cfa_offset 16
1263:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1264:Src/nRF24.c   ****   writing_byte |= rx_pw_p2;
 3461              		.loc 1 1264 0
 3462 0004 02AA     		add	r2, sp, #8
 3463 0006 02F8010D 		strb	r0, [r2, #-1]!
1265:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P2, 1, &writing_byte);
 3464              		.loc 1 1265 0
 3465 000a 0121     		movs	r1, #1
 3466 000c 3320     		movs	r0, #51
 3467              	.LVL367:
 3468 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3469              	.LVL368:
1266:Src/nRF24.c   **** }
 3470              		.loc 1 1266 0
 3471 0012 03B0     		add	sp, sp, #12
 3472              	.LCFI126:
 3473              		.cfi_def_cfa_offset 4
 3474              		@ sp needed
 3475 0014 5DF804FB 		ldr	pc, [sp], #4
 3476              		.cfi_endproc
 3477              	.LFE189:
 3479              		.section	.text.nRF24_get_RX_PW_P2,"ax",%progbits
 3480              		.align	1
 3481              		.global	nRF24_get_RX_PW_P2
 3482              		.syntax unified
 3483              		.thumb
ARM GAS  /tmp/ccrkxNaW.s 			page 84


 3484              		.thumb_func
 3485              		.fpu fpv4-sp-d16
 3487              	nRF24_get_RX_PW_P2:
 3488              	.LFB190:
1267:Src/nRF24.c   **** 
1268:Src/nRF24.c   **** 
1269:Src/nRF24.c   **** /**
1270:Src/nRF24.c   ****   * @brief      Read <RX_PW_P2> register from nRF24.
1271:Src/nRF24.c   ****   * @param      None.
1272:Src/nRF24.c   ****   * @retval     <RX_PW_P2> register value.
1273:Src/nRF24.c   ****   */
1274:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P2() 
1275:Src/nRF24.c   **** {
 3489              		.loc 1 1275 0
 3490              		.cfi_startproc
 3491              		@ args = 0, pretend = 0, frame = 8
 3492              		@ frame_needed = 0, uses_anonymous_args = 0
 3493 0000 00B5     		push	{lr}
 3494              	.LCFI127:
 3495              		.cfi_def_cfa_offset 4
 3496              		.cfi_offset 14, -4
 3497 0002 83B0     		sub	sp, sp, #12
 3498              	.LCFI128:
 3499              		.cfi_def_cfa_offset 16
1276:Src/nRF24.c   ****   uint8_t read_byte;
1277:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P2, 1, &read_byte);
 3500              		.loc 1 1277 0
 3501 0004 0DF10702 		add	r2, sp, #7
 3502 0008 0121     		movs	r1, #1
 3503 000a 1320     		movs	r0, #19
 3504 000c FFF7FEFF 		bl	spi_read_register
 3505              	.LVL369:
1278:Src/nRF24.c   ****   return read_byte;
1279:Src/nRF24.c   **** }
 3506              		.loc 1 1279 0
 3507 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3508 0014 03B0     		add	sp, sp, #12
 3509              	.LCFI129:
 3510              		.cfi_def_cfa_offset 4
 3511              		@ sp needed
 3512 0016 5DF804FB 		ldr	pc, [sp], #4
 3513              		.cfi_endproc
 3514              	.LFE190:
 3516              		.section	.text.nRF24_set_RX_PW_P3,"ax",%progbits
 3517              		.align	1
 3518              		.global	nRF24_set_RX_PW_P3
 3519              		.syntax unified
 3520              		.thumb
 3521              		.thumb_func
 3522              		.fpu fpv4-sp-d16
 3524              	nRF24_set_RX_PW_P3:
 3525              	.LFB191:
1280:Src/nRF24.c   **** 
1281:Src/nRF24.c   **** 
1282:Src/nRF24.c   **** /**
1283:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 3.
1284:Src/nRF24.c   ****   * @param rx_pw_p3 Number of bytes. 
ARM GAS  /tmp/ccrkxNaW.s 			page 85


1285:Src/nRF24.c   ****   *          0 = pipe not used.
1286:Src/nRF24.c   ****   *          1 = 1 byte.
1287:Src/nRF24.c   ****   *          2 = 2 bytes.
1288:Src/nRF24.c   ****   *          ...
1289:Src/nRF24.c   ****   *          32 = 32 bytes.
1290:Src/nRF24.c   ****   * @retval None.
1291:Src/nRF24.c   ****   */
1292:Src/nRF24.c   **** void nRF24_set_RX_PW_P3(uint8_t rx_pw_p3) 
1293:Src/nRF24.c   **** {
 3526              		.loc 1 1293 0
 3527              		.cfi_startproc
 3528              		@ args = 0, pretend = 0, frame = 8
 3529              		@ frame_needed = 0, uses_anonymous_args = 0
 3530              	.LVL370:
 3531 0000 00B5     		push	{lr}
 3532              	.LCFI130:
 3533              		.cfi_def_cfa_offset 4
 3534              		.cfi_offset 14, -4
 3535 0002 83B0     		sub	sp, sp, #12
 3536              	.LCFI131:
 3537              		.cfi_def_cfa_offset 16
1294:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1295:Src/nRF24.c   ****   writing_byte |= rx_pw_p3;
 3538              		.loc 1 1295 0
 3539 0004 02AA     		add	r2, sp, #8
 3540 0006 02F8010D 		strb	r0, [r2, #-1]!
1296:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P3, 1, &writing_byte);
 3541              		.loc 1 1296 0
 3542 000a 0121     		movs	r1, #1
 3543 000c 3420     		movs	r0, #52
 3544              	.LVL371:
 3545 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3546              	.LVL372:
1297:Src/nRF24.c   **** }
 3547              		.loc 1 1297 0
 3548 0012 03B0     		add	sp, sp, #12
 3549              	.LCFI132:
 3550              		.cfi_def_cfa_offset 4
 3551              		@ sp needed
 3552 0014 5DF804FB 		ldr	pc, [sp], #4
 3553              		.cfi_endproc
 3554              	.LFE191:
 3556              		.section	.text.nRF24_get_RX_PW_P3,"ax",%progbits
 3557              		.align	1
 3558              		.global	nRF24_get_RX_PW_P3
 3559              		.syntax unified
 3560              		.thumb
 3561              		.thumb_func
 3562              		.fpu fpv4-sp-d16
 3564              	nRF24_get_RX_PW_P3:
 3565              	.LFB192:
1298:Src/nRF24.c   **** 
1299:Src/nRF24.c   **** /**
1300:Src/nRF24.c   ****   * @brief      Read <RX_PW_P3> register from nRF24.
1301:Src/nRF24.c   ****   * @param      None.
1302:Src/nRF24.c   ****   * @retval     <RX_PW_P3> register value.
1303:Src/nRF24.c   ****   */
ARM GAS  /tmp/ccrkxNaW.s 			page 86


1304:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P3() 
1305:Src/nRF24.c   **** {
 3566              		.loc 1 1305 0
 3567              		.cfi_startproc
 3568              		@ args = 0, pretend = 0, frame = 8
 3569              		@ frame_needed = 0, uses_anonymous_args = 0
 3570 0000 00B5     		push	{lr}
 3571              	.LCFI133:
 3572              		.cfi_def_cfa_offset 4
 3573              		.cfi_offset 14, -4
 3574 0002 83B0     		sub	sp, sp, #12
 3575              	.LCFI134:
 3576              		.cfi_def_cfa_offset 16
1306:Src/nRF24.c   ****   uint8_t read_byte;
1307:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P3, 1, &read_byte);
 3577              		.loc 1 1307 0
 3578 0004 0DF10702 		add	r2, sp, #7
 3579 0008 0121     		movs	r1, #1
 3580 000a 1420     		movs	r0, #20
 3581 000c FFF7FEFF 		bl	spi_read_register
 3582              	.LVL373:
1308:Src/nRF24.c   ****   return read_byte;
1309:Src/nRF24.c   **** }
 3583              		.loc 1 1309 0
 3584 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3585 0014 03B0     		add	sp, sp, #12
 3586              	.LCFI135:
 3587              		.cfi_def_cfa_offset 4
 3588              		@ sp needed
 3589 0016 5DF804FB 		ldr	pc, [sp], #4
 3590              		.cfi_endproc
 3591              	.LFE192:
 3593              		.section	.text.nRF24_set_RX_PW_P4,"ax",%progbits
 3594              		.align	1
 3595              		.global	nRF24_set_RX_PW_P4
 3596              		.syntax unified
 3597              		.thumb
 3598              		.thumb_func
 3599              		.fpu fpv4-sp-d16
 3601              	nRF24_set_RX_PW_P4:
 3602              	.LFB193:
1310:Src/nRF24.c   **** 
1311:Src/nRF24.c   **** 
1312:Src/nRF24.c   **** /**
1313:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 4.
1314:Src/nRF24.c   ****   * @param rx_pw_p4 Number of bytes. 
1315:Src/nRF24.c   ****   *          0 = pipe not used.
1316:Src/nRF24.c   ****   *          1 = 1 byte.
1317:Src/nRF24.c   ****   *          2 = 2 bytes.
1318:Src/nRF24.c   ****   *          ...
1319:Src/nRF24.c   ****   *          32 = 32 bytes.
1320:Src/nRF24.c   ****   * @retval None.
1321:Src/nRF24.c   ****   */
1322:Src/nRF24.c   **** void nRF24_set_RX_PW_P4(uint8_t rx_pw_p4) 
1323:Src/nRF24.c   **** {
 3603              		.loc 1 1323 0
 3604              		.cfi_startproc
ARM GAS  /tmp/ccrkxNaW.s 			page 87


 3605              		@ args = 0, pretend = 0, frame = 8
 3606              		@ frame_needed = 0, uses_anonymous_args = 0
 3607              	.LVL374:
 3608 0000 00B5     		push	{lr}
 3609              	.LCFI136:
 3610              		.cfi_def_cfa_offset 4
 3611              		.cfi_offset 14, -4
 3612 0002 83B0     		sub	sp, sp, #12
 3613              	.LCFI137:
 3614              		.cfi_def_cfa_offset 16
1324:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1325:Src/nRF24.c   ****   writing_byte |= rx_pw_p4;
 3615              		.loc 1 1325 0
 3616 0004 02AA     		add	r2, sp, #8
 3617 0006 02F8010D 		strb	r0, [r2, #-1]!
1326:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P4, 1, &writing_byte);
 3618              		.loc 1 1326 0
 3619 000a 0121     		movs	r1, #1
 3620 000c 3520     		movs	r0, #53
 3621              	.LVL375:
 3622 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3623              	.LVL376:
1327:Src/nRF24.c   **** }
 3624              		.loc 1 1327 0
 3625 0012 03B0     		add	sp, sp, #12
 3626              	.LCFI138:
 3627              		.cfi_def_cfa_offset 4
 3628              		@ sp needed
 3629 0014 5DF804FB 		ldr	pc, [sp], #4
 3630              		.cfi_endproc
 3631              	.LFE193:
 3633              		.section	.text.nRF24_get_RX_PW_P4,"ax",%progbits
 3634              		.align	1
 3635              		.global	nRF24_get_RX_PW_P4
 3636              		.syntax unified
 3637              		.thumb
 3638              		.thumb_func
 3639              		.fpu fpv4-sp-d16
 3641              	nRF24_get_RX_PW_P4:
 3642              	.LFB194:
1328:Src/nRF24.c   **** 
1329:Src/nRF24.c   **** /**
1330:Src/nRF24.c   ****   * @brief      Read <RX_PW_P4> register from nRF24.
1331:Src/nRF24.c   ****   * @param      None.
1332:Src/nRF24.c   ****   * @retval     <RX_PW_P4> register value.
1333:Src/nRF24.c   ****   */
1334:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P4() 
1335:Src/nRF24.c   **** {
 3643              		.loc 1 1335 0
 3644              		.cfi_startproc
 3645              		@ args = 0, pretend = 0, frame = 8
 3646              		@ frame_needed = 0, uses_anonymous_args = 0
 3647 0000 00B5     		push	{lr}
 3648              	.LCFI139:
 3649              		.cfi_def_cfa_offset 4
 3650              		.cfi_offset 14, -4
 3651 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccrkxNaW.s 			page 88


 3652              	.LCFI140:
 3653              		.cfi_def_cfa_offset 16
1336:Src/nRF24.c   ****   uint8_t read_byte;
1337:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P4, 1, &read_byte);
 3654              		.loc 1 1337 0
 3655 0004 0DF10702 		add	r2, sp, #7
 3656 0008 0121     		movs	r1, #1
 3657 000a 1520     		movs	r0, #21
 3658 000c FFF7FEFF 		bl	spi_read_register
 3659              	.LVL377:
1338:Src/nRF24.c   ****   return read_byte;
1339:Src/nRF24.c   **** }
 3660              		.loc 1 1339 0
 3661 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3662 0014 03B0     		add	sp, sp, #12
 3663              	.LCFI141:
 3664              		.cfi_def_cfa_offset 4
 3665              		@ sp needed
 3666 0016 5DF804FB 		ldr	pc, [sp], #4
 3667              		.cfi_endproc
 3668              	.LFE194:
 3670              		.section	.text.nRF24_set_RX_PW_P5,"ax",%progbits
 3671              		.align	1
 3672              		.global	nRF24_set_RX_PW_P5
 3673              		.syntax unified
 3674              		.thumb
 3675              		.thumb_func
 3676              		.fpu fpv4-sp-d16
 3678              	nRF24_set_RX_PW_P5:
 3679              	.LFB195:
1340:Src/nRF24.c   **** 
1341:Src/nRF24.c   **** /**
1342:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 5.
1343:Src/nRF24.c   ****   * @param rx_pw_p5 Number of bytes. 
1344:Src/nRF24.c   ****   *          0 = pipe not used.
1345:Src/nRF24.c   ****   *          1 = 1 byte.
1346:Src/nRF24.c   ****   *          2 = 2 bytes.
1347:Src/nRF24.c   ****   *          ...
1348:Src/nRF24.c   ****   *          32 = 32 bytes.
1349:Src/nRF24.c   ****   * @retval None.
1350:Src/nRF24.c   ****   */
1351:Src/nRF24.c   **** void nRF24_set_RX_PW_P5(uint8_t rx_pw_p5) 
1352:Src/nRF24.c   **** {
 3680              		.loc 1 1352 0
 3681              		.cfi_startproc
 3682              		@ args = 0, pretend = 0, frame = 8
 3683              		@ frame_needed = 0, uses_anonymous_args = 0
 3684              	.LVL378:
 3685 0000 00B5     		push	{lr}
 3686              	.LCFI142:
 3687              		.cfi_def_cfa_offset 4
 3688              		.cfi_offset 14, -4
 3689 0002 83B0     		sub	sp, sp, #12
 3690              	.LCFI143:
 3691              		.cfi_def_cfa_offset 16
1353:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1354:Src/nRF24.c   ****   writing_byte |= rx_pw_p5;
ARM GAS  /tmp/ccrkxNaW.s 			page 89


 3692              		.loc 1 1354 0
 3693 0004 02AA     		add	r2, sp, #8
 3694 0006 02F8010D 		strb	r0, [r2, #-1]!
1355:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P5, 1, &writing_byte);
 3695              		.loc 1 1355 0
 3696 000a 0121     		movs	r1, #1
 3697 000c 3620     		movs	r0, #54
 3698              	.LVL379:
 3699 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3700              	.LVL380:
1356:Src/nRF24.c   **** }
 3701              		.loc 1 1356 0
 3702 0012 03B0     		add	sp, sp, #12
 3703              	.LCFI144:
 3704              		.cfi_def_cfa_offset 4
 3705              		@ sp needed
 3706 0014 5DF804FB 		ldr	pc, [sp], #4
 3707              		.cfi_endproc
 3708              	.LFE195:
 3710              		.section	.text.nRF24_get_RX_PW_P5,"ax",%progbits
 3711              		.align	1
 3712              		.global	nRF24_get_RX_PW_P5
 3713              		.syntax unified
 3714              		.thumb
 3715              		.thumb_func
 3716              		.fpu fpv4-sp-d16
 3718              	nRF24_get_RX_PW_P5:
 3719              	.LFB196:
1357:Src/nRF24.c   **** 
1358:Src/nRF24.c   **** /**
1359:Src/nRF24.c   ****   * @brief      Read <RX_PW_P5> register from nRF24.
1360:Src/nRF24.c   ****   * @param      None.
1361:Src/nRF24.c   ****   * @retval     <RX_PW_P5> register value.
1362:Src/nRF24.c   ****   */
1363:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P5() 
1364:Src/nRF24.c   **** {
 3720              		.loc 1 1364 0
 3721              		.cfi_startproc
 3722              		@ args = 0, pretend = 0, frame = 8
 3723              		@ frame_needed = 0, uses_anonymous_args = 0
 3724 0000 00B5     		push	{lr}
 3725              	.LCFI145:
 3726              		.cfi_def_cfa_offset 4
 3727              		.cfi_offset 14, -4
 3728 0002 83B0     		sub	sp, sp, #12
 3729              	.LCFI146:
 3730              		.cfi_def_cfa_offset 16
1365:Src/nRF24.c   ****   uint8_t read_byte;
1366:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P5, 1, &read_byte);
 3731              		.loc 1 1366 0
 3732 0004 0DF10702 		add	r2, sp, #7
 3733 0008 0121     		movs	r1, #1
 3734 000a 1620     		movs	r0, #22
 3735 000c FFF7FEFF 		bl	spi_read_register
 3736              	.LVL381:
1367:Src/nRF24.c   ****   return read_byte;
1368:Src/nRF24.c   **** }
ARM GAS  /tmp/ccrkxNaW.s 			page 90


 3737              		.loc 1 1368 0
 3738 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3739 0014 03B0     		add	sp, sp, #12
 3740              	.LCFI147:
 3741              		.cfi_def_cfa_offset 4
 3742              		@ sp needed
 3743 0016 5DF804FB 		ldr	pc, [sp], #4
 3744              		.cfi_endproc
 3745              	.LFE196:
 3747              		.section	.text.nRF24_get_FIFO_STATUS,"ax",%progbits
 3748              		.align	1
 3749              		.global	nRF24_get_FIFO_STATUS
 3750              		.syntax unified
 3751              		.thumb
 3752              		.thumb_func
 3753              		.fpu fpv4-sp-d16
 3755              	nRF24_get_FIFO_STATUS:
 3756              	.LFB197:
1369:Src/nRF24.c   **** 
1370:Src/nRF24.c   **** 
1371:Src/nRF24.c   **** /**
1372:Src/nRF24.c   ****   * @brief      Read 'FIFO_STATUS' register from nRF24.
1373:Src/nRF24.c   ****   * @param      None.
1374:Src/nRF24.c   ****   * @retval     FIFO_STATUS register value.
1375:Src/nRF24.c   ****   * @note  Following masks can be used:
1376:Src/nRF24.c   ****   *  TX_REUSE_READMASK  
1377:Src/nRF24.c   ****   *  TX_EMPTY_READMASK  
1378:Src/nRF24.c   ****   *  RX_FULL_READMASK 
1379:Src/nRF24.c   ****   *  RX_EMPTY_READMASK 
1380:Src/nRF24.c   ****   */
1381:Src/nRF24.c   **** uint8_t nRF24_get_FIFO_STATUS() 
1382:Src/nRF24.c   **** {
 3757              		.loc 1 1382 0
 3758              		.cfi_startproc
 3759              		@ args = 0, pretend = 0, frame = 8
 3760              		@ frame_needed = 0, uses_anonymous_args = 0
 3761 0000 00B5     		push	{lr}
 3762              	.LCFI148:
 3763              		.cfi_def_cfa_offset 4
 3764              		.cfi_offset 14, -4
 3765 0002 83B0     		sub	sp, sp, #12
 3766              	.LCFI149:
 3767              		.cfi_def_cfa_offset 16
1383:Src/nRF24.c   ****   uint8_t fifo_status;
1384:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + FIFO_STATUS, 1, &fifo_status);
 3768              		.loc 1 1384 0
 3769 0004 0DF10702 		add	r2, sp, #7
 3770 0008 0121     		movs	r1, #1
 3771 000a 1720     		movs	r0, #23
 3772 000c FFF7FEFF 		bl	spi_read_register
 3773              	.LVL382:
1385:Src/nRF24.c   ****   return fifo_status;
1386:Src/nRF24.c   **** }
 3774              		.loc 1 1386 0
 3775 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3776 0014 03B0     		add	sp, sp, #12
 3777              	.LCFI150:
ARM GAS  /tmp/ccrkxNaW.s 			page 91


 3778              		.cfi_def_cfa_offset 4
 3779              		@ sp needed
 3780 0016 5DF804FB 		ldr	pc, [sp], #4
 3781              		.cfi_endproc
 3782              	.LFE197:
 3784              		.section	.text.nRF24_release_payload,"ax",%progbits
 3785              		.align	1
 3786              		.global	nRF24_release_payload
 3787              		.syntax unified
 3788              		.thumb
 3789              		.thumb_func
 3790              		.fpu fpv4-sp-d16
 3792              	nRF24_release_payload:
 3793              	.LFB198:
1387:Src/nRF24.c   **** 
1388:Src/nRF24.c   **** /**
1389:Src/nRF24.c   **** 	* @brief Write the payload (data to transfer) to the TX FIFO.
1390:Src/nRF24.c   **** 	* @param tx_payload_width Length of the payload in number of bytes.
1391:Src/nRF24.c   **** 	            (!) tx_payload_width MUST be the same value as the receiver's <RX_PW_Px> to receive. x
1392:Src/nRF24.c   **** 	* @param payload  Actual data to transfer.
1393:Src/nRF24.c   **** 	* @retval None.
1394:Src/nRF24.c   **** 	*/
1395:Src/nRF24.c   **** void nRF24_release_payload(uint8_t tx_payload_width, uint8_t* payload)
1396:Src/nRF24.c   **** {
 3794              		.loc 1 1396 0
 3795              		.cfi_startproc
 3796              		@ args = 0, pretend = 0, frame = 0
 3797              		@ frame_needed = 0, uses_anonymous_args = 0
 3798              	.LVL383:
 3799 0000 08B5     		push	{r3, lr}
 3800              	.LCFI151:
 3801              		.cfi_def_cfa_offset 8
 3802              		.cfi_offset 3, -8
 3803              		.cfi_offset 14, -4
1397:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, tx_payload_width, payload);
 3804              		.loc 1 1397 0
 3805 0002 0A46     		mov	r2, r1
 3806 0004 0146     		mov	r1, r0
 3807              	.LVL384:
 3808 0006 A020     		movs	r0, #160
 3809              	.LVL385:
 3810 0008 FFF7FEFF 		bl	spi_write_register
 3811              	.LVL386:
 3812 000c 08BD     		pop	{r3, pc}
 3813              		.cfi_endproc
 3814              	.LFE198:
 3816              		.section	.text.nRF24_send_packet,"ax",%progbits
 3817              		.align	1
 3818              		.global	nRF24_send_packet
 3819              		.syntax unified
 3820              		.thumb
 3821              		.thumb_func
 3822              		.fpu fpv4-sp-d16
 3824              	nRF24_send_packet:
 3825              	.LFB149:
 520:Src/nRF24.c   ****   // uint8_t pl[] = {0xC0, 0xC0, 0xCA, 0xFE}; /* clock out a four-byte payload "C0C0 CAFE" */
 3826              		.loc 1 520 0
ARM GAS  /tmp/ccrkxNaW.s 			page 92


 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 72
 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 3830              	.LVL387:
 3831 0000 30B5     		push	{r4, r5, lr}
 3832              	.LCFI152:
 3833              		.cfi_def_cfa_offset 12
 3834              		.cfi_offset 4, -12
 3835              		.cfi_offset 5, -8
 3836              		.cfi_offset 14, -4
 3837 0002 93B0     		sub	sp, sp, #76
 3838              	.LCFI153:
 3839              		.cfi_def_cfa_offset 88
 526:Src/nRF24.c   **** 
 3840              		.loc 1 526 0
 3841 0004 FFF7FEFF 		bl	nRF24_release_payload
 3842              	.LVL388:
 542:Src/nRF24.c   **** 
 3843              		.loc 1 542 0
 3844 0008 FFF7FEFF 		bl	nRF24_CE_1
 3845              	.LVL389:
 546:Src/nRF24.c   **** 
 3846              		.loc 1 546 0
 3847 000c 0DF10702 		add	r2, sp, #7
 3848 0010 0121     		movs	r1, #1
 3849 0012 0720     		movs	r0, #7
 3850 0014 FFF7FEFF 		bl	spi_read_register
 3851              	.LVL390:
 550:Src/nRF24.c   ****   serial_print(message);
 3852              		.loc 1 550 0
 3853 0018 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 3854 001c 2149     		ldr	r1, .L201
 3855 001e 02A8     		add	r0, sp, #8
 3856 0020 FFF7FEFF 		bl	sprintf
 3857              	.LVL391:
 3858              	.LBB169:
 3859              	.LBB170:
 111:Src/nRF24.c   **** }
 3860              		.loc 1 111 0
 3861 0024 02A8     		add	r0, sp, #8
 3862              	.LVL392:
 3863 0026 FFF7FEFF 		bl	strlen
 3864              	.LVL393:
 3865 002a 6423     		movs	r3, #100
 3866 002c 82B2     		uxth	r2, r0
 3867 002e 02A9     		add	r1, sp, #8
 3868              	.LVL394:
 3869 0030 1D48     		ldr	r0, .L201+4
 3870 0032 FFF7FEFF 		bl	HAL_UART_Transmit
 3871              	.LVL395:
 3872              	.LBE170:
 3873              	.LBE169:
 555:Src/nRF24.c   ****   {
 3874              		.loc 1 555 0
 3875 0036 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 3876 003a 2E2B     		cmp	r3, #46
 3877 003c 1CD0     		beq	.L200
ARM GAS  /tmp/ccrkxNaW.s 			page 93


 565:Src/nRF24.c   ****     serial_print(message);
 3878              		.loc 1 565 0
 3879 003e 02AC     		add	r4, sp, #8
 3880 0040 1A4D     		ldr	r5, .L201+8
 3881 0042 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3882 0044 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 3883 0046 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 3884 004a 07C4     		stmia	r4!, {r0, r1, r2}
 3885 004c 24F8023B 		strh	r3, [r4], #2	@ movhi
 3886 0050 1B0C     		lsrs	r3, r3, #16
 3887 0052 2370     		strb	r3, [r4]
 3888              	.LVL396:
 3889              	.LBB171:
 3890              	.LBB172:
 111:Src/nRF24.c   **** }
 3891              		.loc 1 111 0
 3892 0054 02A8     		add	r0, sp, #8
 3893              	.LVL397:
 3894 0056 FFF7FEFF 		bl	strlen
 3895              	.LVL398:
 3896 005a 6423     		movs	r3, #100
 3897 005c 82B2     		uxth	r2, r0
 3898 005e 02A9     		add	r1, sp, #8
 3899              	.LVL399:
 3900 0060 1148     		ldr	r0, .L201+4
 3901 0062 FFF7FEFF 		bl	HAL_UART_Transmit
 3902              	.LVL400:
 3903              	.L198:
 3904              	.LBE172:
 3905              	.LBE171:
 571:Src/nRF24.c   **** 
 3906              		.loc 1 571 0
 3907 0066 1022     		movs	r2, #16
 3908 0068 2021     		movs	r1, #32
 3909 006a 4020     		movs	r0, #64
 3910 006c FFF7FEFF 		bl	nRF24_clear_STATUS
 3911              	.LVL401:
 574:Src/nRF24.c   **** }
 3912              		.loc 1 574 0
 3913 0070 FFF7FEFF 		bl	nRF24_CE_0
 3914              	.LVL402:
 575:Src/nRF24.c   **** 
 3915              		.loc 1 575 0
 3916 0074 13B0     		add	sp, sp, #76
 3917              	.LCFI154:
 3918              		.cfi_remember_state
 3919              		.cfi_def_cfa_offset 12
 3920              		@ sp needed
 3921 0076 30BD     		pop	{r4, r5, pc}
 3922              	.L200:
 3923              	.LCFI155:
 3924              		.cfi_restore_state
 558:Src/nRF24.c   ****     serial_print(message);
 3925              		.loc 1 558 0
 3926 0078 02AC     		add	r4, sp, #8
 3927 007a 0D4D     		ldr	r5, .L201+12
 3928 007c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccrkxNaW.s 			page 94


 3929 007e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 3930 0080 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 3931 0084 07C4     		stmia	r4!, {r0, r1, r2}
 3932 0086 24F8023B 		strh	r3, [r4], #2	@ movhi
 3933 008a 1B0C     		lsrs	r3, r3, #16
 3934 008c 2370     		strb	r3, [r4]
 3935              	.LVL403:
 3936              	.LBB173:
 3937              	.LBB174:
 111:Src/nRF24.c   **** }
 3938              		.loc 1 111 0
 3939 008e 02A8     		add	r0, sp, #8
 3940              	.LVL404:
 3941 0090 FFF7FEFF 		bl	strlen
 3942              	.LVL405:
 3943 0094 6423     		movs	r3, #100
 3944 0096 82B2     		uxth	r2, r0
 3945 0098 02A9     		add	r1, sp, #8
 3946              	.LVL406:
 3947 009a 0348     		ldr	r0, .L201+4
 3948 009c FFF7FEFF 		bl	HAL_UART_Transmit
 3949              	.LVL407:
 3950 00a0 E1E7     		b	.L198
 3951              	.L202:
 3952 00a2 00BF     		.align	2
 3953              	.L201:
 3954 00a4 00000000 		.word	.LC24
 3955 00a8 00000000 		.word	huart2
 3956 00ac 3C000000 		.word	.LC26
 3957 00b0 1C000000 		.word	.LC25
 3958              	.LBE174:
 3959              	.LBE173:
 3960              		.cfi_endproc
 3961              	.LFE149:
 3963              		.section	.rodata
 3964              		.align	2
 3965              		.set	.LANCHOR0,. + 0
 3966              	.LC0:
 3967 0000 C0       		.byte	-64
 3968 0001 C0       		.byte	-64
 3969 0002 CA       		.byte	-54
 3970 0003 FE       		.byte	-2
 3971              	.LC1:
 3972 0004 99       		.byte	-103
 3973 0005 AA       		.byte	-86
 3974 0006 BB       		.byte	-69
 3975 0007 CC       		.byte	-52
 3976 0008 DD       		.byte	-35
 3977              		.section	.rodata.nRF24_print_all_registers.str1.4,"aMS",%progbits,1
 3978              		.align	2
 3979              	.LC9:
 3980 0000 434F4E46 		.ascii	"CONFIG: <0x%02x>\012\000"
 3980      49473A20 
 3980      3C307825 
 3980      3032783E 
 3980      0A00
 3981 0012 0000     		.space	2
ARM GAS  /tmp/ccrkxNaW.s 			page 95


 3982              	.LC10:
 3983 0014 454E5F41 		.ascii	"EN_AA: <0x%02x>\012\000"
 3983      413A203C 
 3983      30782530 
 3983      32783E0A 
 3983      00
 3984 0025 000000   		.space	3
 3985              	.LC11:
 3986 0028 454E5F52 		.ascii	"EN_RXADDR: <0x%02x>\012\000"
 3986      58414444 
 3986      523A203C 
 3986      30782530 
 3986      32783E0A 
 3987 003d 000000   		.space	3
 3988              	.LC12:
 3989 0040 53455455 		.ascii	"SETUP_AW: <0x%02x>\012\000"
 3989      505F4157 
 3989      3A203C30 
 3989      78253032 
 3989      783E0A00 
 3990              	.LC13:
 3991 0054 53455455 		.ascii	"SETUP_RETR: <0x%02x>\012\000"
 3991      505F5245 
 3991      54523A20 
 3991      3C307825 
 3991      3032783E 
 3992 006a 0000     		.space	2
 3993              	.LC14:
 3994 006c 52465F43 		.ascii	"RF_CH: <0x%02x>\012\000"
 3994      483A203C 
 3994      30782530 
 3994      32783E0A 
 3994      00
 3995 007d 000000   		.space	3
 3996              	.LC15:
 3997 0080 52465F53 		.ascii	"RF_SETUP: <0x%02x>\012\000"
 3997      45545550 
 3997      3A203C30 
 3997      78253032 
 3997      783E0A00 
 3998              	.LC16:
 3999 0094 53544154 		.ascii	"STATUS: <0x%02x>\012\000"
 3999      55533A20 
 3999      3C307825 
 3999      3032783E 
 3999      0A00
 4000 00a6 0000     		.space	2
 4001              	.LC17:
 4002 00a8 52585F41 		.ascii	"RX_ADDR_P0: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4002      4444525F 
 4002      50303A20 
 4002      3C252330 
 4002      32782025 
 4003 00d5 000000   		.space	3
 4004              	.LC18:
 4005 00d8 52585F41 		.ascii	"RX_ADDR_P1: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4005      4444525F 
ARM GAS  /tmp/ccrkxNaW.s 			page 96


 4005      50313A20 
 4005      3C252330 
 4005      32782025 
 4006 0105 000000   		.space	3
 4007              	.LC19:
 4008 0108 52585F41 		.ascii	"RX_ADDR_P2: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4008      4444525F 
 4008      50323A20 
 4008      3C252330 
 4008      32782025 
 4009 0135 000000   		.space	3
 4010              	.LC20:
 4011 0138 52585F41 		.ascii	"RX_ADDR_P3: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4011      4444525F 
 4011      50333A20 
 4011      3C252330 
 4011      32782025 
 4012 0165 000000   		.space	3
 4013              	.LC21:
 4014 0168 52585F41 		.ascii	"RX_ADDR_P4: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4014      4444525F 
 4014      50343A20 
 4014      3C252330 
 4014      32782025 
 4015 0195 000000   		.space	3
 4016              	.LC22:
 4017 0198 52585F41 		.ascii	"RX_ADDR_P5: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4017      4444525F 
 4017      50353A20 
 4017      3C252330 
 4017      32782025 
 4018 01c5 000000   		.space	3
 4019              	.LC23:
 4020 01c8 54585F41 		.ascii	"TX_ADDR: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4020      4444523A 
 4020      203C2523 
 4020      30327820 
 4020      25233032 
 4021              		.section	.rodata.nRF24_send_packet.str1.4,"aMS",%progbits,1
 4022              		.align	2
 4023              	.LC24:
 4024 0000 3C535441 		.ascii	"<STATUS> REGISTER : %#02x\012\000"
 4024      5455533E 
 4024      20524547 
 4024      49535445 
 4024      52203A20 
 4025 001b 00       		.space	1
 4026              	.LC25:
 4027 001c 6E524632 		.ascii	"nRF24 send status - success -\012\000"
 4027      34207365 
 4027      6E642073 
 4027      74617475 
 4027      73202D20 
 4028 003b 00       		.space	1
 4029              	.LC26:
 4030 003c 6E524632 		.ascii	"nRF24 send status - failure -\012\000"
 4030      34207365 
ARM GAS  /tmp/ccrkxNaW.s 			page 97


 4030      6E642073 
 4030      74617475 
 4030      73202D20 
 4031              		.section	.rodata.nRF24_tx_self_test.str1.4,"aMS",%progbits,1
 4032              		.align	2
 4033              	.LC5:
 4034 0000 2D2D2D2D 		.ascii	"---- nrf24 tx self test. ----\012\000"
 4034      206E7266 
 4034      32342074 
 4034      78207365 
 4034      6C662074 
 4035 001f 00       		.space	1
 4036              	.LC6:
 4037 0020 2D2D2D2D 		.ascii	"---- This test to verifies function of a tranmitter"
 4037      20546869 
 4037      73207465 
 4037      73742074 
 4037      6F207665 
 4038 0053 2073656E 		.ascii	" send without a receiver. ----\012\000"
 4038      64207769 
 4038      74686F75 
 4038      74206120 
 4038      72656365 
 4039 0073 00       		.space	1
 4040              	.LC7:
 4041 0074 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has passed.    "
 4041      6E524632 
 4041      34207472 
 4041      616E736D 
 4041      69737369 
 4042 00a4 20202020 		.ascii	"                    <STATUS> has value of 0x2E.    "
 4042      20202020 
 4042      20202020 
 4042      20202020 
 4042      20202020 
 4043 00d7 20202020 		.ascii	"                    TX_DS (transfer data sent) was "
 4043      20202020 
 4043      20202020 
 4043      20202020 
 4043      20202020 
 4044 010a 7365742E 		.ascii	"set.                        RX_P_NO = 111, this mea"
 4044      20202020 
 4044      20202020 
 4044      20202020 
 4044      20202020 
 4045 013d 6E732052 		.ascii	"ns RX FIFO Empty. \012\000"
 4045      58204649 
 4045      464F2045 
 4045      6D707479 
 4045      2E200A00 
 4046 0151 000000   		.space	3
 4047              	.LC8:
 4048 0154 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has failed. <ST"
 4048      6E524632 
 4048      34207472 
 4048      616E736D 
 4048      69737369 
ARM GAS  /tmp/ccrkxNaW.s 			page 98


 4049 0184 41545553 		.ascii	"ATUS> is expected 0x2E. Current value: %#02x\012\000"
 4049      3E206973 
 4049      20657870 
 4049      65637465 
 4049      64203078 
 4050              		.section	.rodata.nRF24_verified_write_register.str1.4,"aMS",%progbits,1
 4051              		.align	2
 4052              	.LC2:
 4053 0000 50726F62 		.ascii	"Problem writing to nRF24 register -- \000"
 4053      6C656D20 
 4053      77726974 
 4053      696E6720 
 4053      746F206E 
 4054 0026 0000     		.space	2
 4055              	.LC3:
 4056 0028 77726974 		.ascii	"writing data: <%#02x> read_data: <%#02x>\012\000"
 4056      696E6720 
 4056      64617461 
 4056      3A203C25 
 4056      23303278 
 4057 0052 0000     		.space	2
 4058              	.LC4:
 4059 0054 53756363 		.ascii	"Success writing to nRF24 register -- \000"
 4059      65737320 
 4059      77726974 
 4059      696E6720 
 4059      746F206E 
 4060              		.text
 4061              	.Letext0:
 4062              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4063              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4064              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 4065              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 4066              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 4067              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 4068              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 4069              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 4070              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 4071              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 4072              		.file 12 "/usr/include/newlib/sys/lock.h"
 4073              		.file 13 "/usr/include/newlib/sys/_types.h"
 4074              		.file 14 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4075              		.file 15 "/usr/include/newlib/sys/reent.h"
 4076              		.file 16 "Inc/nRF24.h"
 4077              		.file 17 "/usr/include/newlib/string.h"
 4078              		.file 18 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccrkxNaW.s 			page 99


DEFINED SYMBOLS
                            *ABS*:0000000000000000 nRF24.c
     /tmp/ccrkxNaW.s:18     .text.SPI_SCK_1:0000000000000000 $t
     /tmp/ccrkxNaW.s:25     .text.SPI_SCK_1:0000000000000000 SPI_SCK_1
     /tmp/ccrkxNaW.s:47     .text.SPI_SCK_1:0000000000000010 $d
     /tmp/ccrkxNaW.s:52     .text.SPI_SCK_0:0000000000000000 $t
     /tmp/ccrkxNaW.s:59     .text.SPI_SCK_0:0000000000000000 SPI_SCK_0
     /tmp/ccrkxNaW.s:80     .text.SPI_SCK_0:0000000000000010 $d
     /tmp/ccrkxNaW.s:85     .text.SPI_MOSI_1:0000000000000000 $t
     /tmp/ccrkxNaW.s:92     .text.SPI_MOSI_1:0000000000000000 SPI_MOSI_1
     /tmp/ccrkxNaW.s:113    .text.SPI_MOSI_1:0000000000000010 $d
     /tmp/ccrkxNaW.s:118    .text.SPI_MOSI_0:0000000000000000 $t
     /tmp/ccrkxNaW.s:125    .text.SPI_MOSI_0:0000000000000000 SPI_MOSI_0
     /tmp/ccrkxNaW.s:146    .text.SPI_MOSI_0:0000000000000010 $d
     /tmp/ccrkxNaW.s:151    .text.SPI_CS_1:0000000000000000 $t
     /tmp/ccrkxNaW.s:158    .text.SPI_CS_1:0000000000000000 SPI_CS_1
     /tmp/ccrkxNaW.s:179    .text.SPI_CS_1:0000000000000010 $d
     /tmp/ccrkxNaW.s:184    .text.SPI_CS_0:0000000000000000 $t
     /tmp/ccrkxNaW.s:191    .text.SPI_CS_0:0000000000000000 SPI_CS_0
     /tmp/ccrkxNaW.s:212    .text.SPI_CS_0:0000000000000010 $d
     /tmp/ccrkxNaW.s:217    .text.SPI_READ_MISO:0000000000000000 $t
     /tmp/ccrkxNaW.s:224    .text.SPI_READ_MISO:0000000000000000 SPI_READ_MISO
     /tmp/ccrkxNaW.s:245    .text.SPI_READ_MISO:0000000000000010 $d
     /tmp/ccrkxNaW.s:250    .text.serial_print:0000000000000000 $t
     /tmp/ccrkxNaW.s:257    .text.serial_print:0000000000000000 serial_print
     /tmp/ccrkxNaW.s:284    .text.serial_print:0000000000000018 $d
     /tmp/ccrkxNaW.s:289    .text.SPI_DELAY:0000000000000000 $t
     /tmp/ccrkxNaW.s:296    .text.SPI_DELAY:0000000000000000 SPI_DELAY
     /tmp/ccrkxNaW.s:316    .text.gpio_clockout_8_bits:0000000000000000 $t
     /tmp/ccrkxNaW.s:323    .text.gpio_clockout_8_bits:0000000000000000 gpio_clockout_8_bits
     /tmp/ccrkxNaW.s:428    .text.gpio_clockout_8_bits:0000000000000068 $d
     /tmp/ccrkxNaW.s:436    .text.gpio_clockin_8_bits:0000000000000000 $t
     /tmp/ccrkxNaW.s:443    .text.gpio_clockin_8_bits:0000000000000000 gpio_clockin_8_bits
     /tmp/ccrkxNaW.s:555    .text.gpio_clockin_8_bits:0000000000000068 $d
     /tmp/ccrkxNaW.s:561    .text.spi_read_register:0000000000000000 $t
     /tmp/ccrkxNaW.s:568    .text.spi_read_register:0000000000000000 spi_read_register
     /tmp/ccrkxNaW.s:633    .text.spi_read_register:0000000000000034 $d
     /tmp/ccrkxNaW.s:640    .text.spi_write_register:0000000000000000 $t
     /tmp/ccrkxNaW.s:647    .text.spi_write_register:0000000000000000 spi_write_register
     /tmp/ccrkxNaW.s:714    .text.spi_write_register:0000000000000034 $d
     /tmp/ccrkxNaW.s:721    .text.nRF24_CE_1:0000000000000000 $t
     /tmp/ccrkxNaW.s:728    .text.nRF24_CE_1:0000000000000000 nRF24_CE_1
     /tmp/ccrkxNaW.s:749    .text.nRF24_CE_1:0000000000000010 $d
     /tmp/ccrkxNaW.s:754    .text.nRF24_CE_0:0000000000000000 $t
     /tmp/ccrkxNaW.s:761    .text.nRF24_CE_0:0000000000000000 nRF24_CE_0
     /tmp/ccrkxNaW.s:782    .text.nRF24_CE_0:0000000000000010 $d
     /tmp/ccrkxNaW.s:787    .text.nRF24_verified_write_register:0000000000000000 $t
     /tmp/ccrkxNaW.s:794    .text.nRF24_verified_write_register:0000000000000000 nRF24_verified_write_register
     /tmp/ccrkxNaW.s:995    .text.nRF24_verified_write_register:0000000000000100 $d
     /tmp/ccrkxNaW.s:1003   .text.nRF24_tx_self_test:0000000000000000 $t
     /tmp/ccrkxNaW.s:1010   .text.nRF24_tx_self_test:0000000000000000 nRF24_tx_self_test
     /tmp/ccrkxNaW.s:1214   .text.nRF24_tx_self_test:0000000000000110 $d
     /tmp/ccrkxNaW.s:1224   .text.nRF24_config_tx_mode_primitive:0000000000000000 $t
     /tmp/ccrkxNaW.s:1231   .text.nRF24_config_tx_mode_primitive:0000000000000000 nRF24_config_tx_mode_primitive
     /tmp/ccrkxNaW.s:1326   .text.nRF24_config_tx_mode_primitive:0000000000000088 $d
     /tmp/ccrkxNaW.s:1331   .text.nRF24_print_all_registers:0000000000000000 $t
     /tmp/ccrkxNaW.s:1338   .text.nRF24_print_all_registers:0000000000000000 nRF24_print_all_registers
ARM GAS  /tmp/ccrkxNaW.s 			page 100


     /tmp/ccrkxNaW.s:1832   .text.nRF24_print_all_registers:000000000000030c $d
     /tmp/ccrkxNaW.s:1852   .text.nRF24_set_CONFIG:0000000000000000 $t
     /tmp/ccrkxNaW.s:1859   .text.nRF24_set_CONFIG:0000000000000000 nRF24_set_CONFIG
     /tmp/ccrkxNaW.s:1904   .text.nRF24_get_CONFIG:0000000000000000 $t
     /tmp/ccrkxNaW.s:1911   .text.nRF24_get_CONFIG:0000000000000000 nRF24_get_CONFIG
     /tmp/ccrkxNaW.s:1941   .text.nRF24_set_EN_AA:0000000000000000 $t
     /tmp/ccrkxNaW.s:1948   .text.nRF24_set_EN_AA:0000000000000000 nRF24_set_EN_AA
     /tmp/ccrkxNaW.s:1990   .text.nRF24_get_EN_AA:0000000000000000 $t
     /tmp/ccrkxNaW.s:1997   .text.nRF24_get_EN_AA:0000000000000000 nRF24_get_EN_AA
     /tmp/ccrkxNaW.s:2027   .text.nRF24_set_EN_RXADDR:0000000000000000 $t
     /tmp/ccrkxNaW.s:2034   .text.nRF24_set_EN_RXADDR:0000000000000000 nRF24_set_EN_RXADDR
     /tmp/ccrkxNaW.s:2076   .text.nRF24_get_EN_RXADDR:0000000000000000 $t
     /tmp/ccrkxNaW.s:2083   .text.nRF24_get_EN_RXADDR:0000000000000000 nRF24_get_EN_RXADDR
     /tmp/ccrkxNaW.s:2113   .text.nRF24_set_SETUP_AW:0000000000000000 $t
     /tmp/ccrkxNaW.s:2120   .text.nRF24_set_SETUP_AW:0000000000000000 nRF24_set_SETUP_AW
     /tmp/ccrkxNaW.s:2153   .text.nRF24_get_SETUP_AW:0000000000000000 $t
     /tmp/ccrkxNaW.s:2160   .text.nRF24_get_SETUP_AW:0000000000000000 nRF24_get_SETUP_AW
     /tmp/ccrkxNaW.s:2190   .text.nRF24_set_SETUP_RETR:0000000000000000 $t
     /tmp/ccrkxNaW.s:2197   .text.nRF24_set_SETUP_RETR:0000000000000000 nRF24_set_SETUP_RETR
     /tmp/ccrkxNaW.s:2232   .text.nRF24_get_SETUP_RETR:0000000000000000 $t
     /tmp/ccrkxNaW.s:2239   .text.nRF24_get_SETUP_RETR:0000000000000000 nRF24_get_SETUP_RETR
     /tmp/ccrkxNaW.s:2272   .text.nRF24_set_RF_CH:0000000000000000 $t
     /tmp/ccrkxNaW.s:2279   .text.nRF24_set_RF_CH:0000000000000000 nRF24_set_RF_CH
     /tmp/ccrkxNaW.s:2312   .text.nRF24_get_RF_CH:0000000000000000 $t
     /tmp/ccrkxNaW.s:2319   .text.nRF24_get_RF_CH:0000000000000000 nRF24_get_RF_CH
     /tmp/ccrkxNaW.s:2349   .text.nRF24_set_RF_SETUP:0000000000000000 $t
     /tmp/ccrkxNaW.s:2356   .text.nRF24_set_RF_SETUP:0000000000000000 nRF24_set_RF_SETUP
     /tmp/ccrkxNaW.s:2397   .text.nRF24_get_RF_SETUP:0000000000000000 $t
     /tmp/ccrkxNaW.s:2404   .text.nRF24_get_RF_SETUP:0000000000000000 nRF24_get_RF_SETUP
     /tmp/ccrkxNaW.s:2434   .text.nRF24_clear_STATUS:0000000000000000 $t
     /tmp/ccrkxNaW.s:2441   .text.nRF24_clear_STATUS:0000000000000000 nRF24_clear_STATUS
     /tmp/ccrkxNaW.s:2478   .text.nRF24_get_STATUS:0000000000000000 $t
     /tmp/ccrkxNaW.s:2485   .text.nRF24_get_STATUS:0000000000000000 nRF24_get_STATUS
     /tmp/ccrkxNaW.s:2515   .text.nRF24_get_OBSERVE_TX:0000000000000000 $t
     /tmp/ccrkxNaW.s:2522   .text.nRF24_get_OBSERVE_TX:0000000000000000 nRF24_get_OBSERVE_TX
     /tmp/ccrkxNaW.s:2552   .text.nRF24_get_RPD:0000000000000000 $t
     /tmp/ccrkxNaW.s:2559   .text.nRF24_get_RPD:0000000000000000 nRF24_get_RPD
     /tmp/ccrkxNaW.s:2589   .text.nRF24_set_RX_ADDR_P0:0000000000000000 $t
     /tmp/ccrkxNaW.s:2596   .text.nRF24_set_RX_ADDR_P0:0000000000000000 nRF24_set_RX_ADDR_P0
     /tmp/ccrkxNaW.s:2621   .text.nRF24_get_RX_ADDR_P0:0000000000000000 $t
     /tmp/ccrkxNaW.s:2628   .text.nRF24_get_RX_ADDR_P0:0000000000000000 nRF24_get_RX_ADDR_P0
     /tmp/ccrkxNaW.s:2653   .text.nRF24_set_RX_ADDR_P1:0000000000000000 $t
     /tmp/ccrkxNaW.s:2660   .text.nRF24_set_RX_ADDR_P1:0000000000000000 nRF24_set_RX_ADDR_P1
     /tmp/ccrkxNaW.s:2685   .text.nRF24_get_RX_ADDR_P1:0000000000000000 $t
     /tmp/ccrkxNaW.s:2692   .text.nRF24_get_RX_ADDR_P1:0000000000000000 nRF24_get_RX_ADDR_P1
     /tmp/ccrkxNaW.s:2717   .text.nRF24_set_RX_ADDR_P2:0000000000000000 $t
     /tmp/ccrkxNaW.s:2724   .text.nRF24_set_RX_ADDR_P2:0000000000000000 nRF24_set_RX_ADDR_P2
     /tmp/ccrkxNaW.s:2757   .text.nRF24_get_RX_ADDR_P2:0000000000000000 $t
     /tmp/ccrkxNaW.s:2764   .text.nRF24_get_RX_ADDR_P2:0000000000000000 nRF24_get_RX_ADDR_P2
     /tmp/ccrkxNaW.s:2789   .text.nRF24_set_RX_ADDR_P3:0000000000000000 $t
     /tmp/ccrkxNaW.s:2796   .text.nRF24_set_RX_ADDR_P3:0000000000000000 nRF24_set_RX_ADDR_P3
     /tmp/ccrkxNaW.s:2829   .text.nRF24_get_RX_ADDR_P3:0000000000000000 $t
     /tmp/ccrkxNaW.s:2836   .text.nRF24_get_RX_ADDR_P3:0000000000000000 nRF24_get_RX_ADDR_P3
     /tmp/ccrkxNaW.s:2861   .text.nRF24_set_RX_ADDR_P4:0000000000000000 $t
     /tmp/ccrkxNaW.s:2868   .text.nRF24_set_RX_ADDR_P4:0000000000000000 nRF24_set_RX_ADDR_P4
     /tmp/ccrkxNaW.s:2901   .text.nRF24_get_RX_ADDR_P4:0000000000000000 $t
     /tmp/ccrkxNaW.s:2908   .text.nRF24_get_RX_ADDR_P4:0000000000000000 nRF24_get_RX_ADDR_P4
ARM GAS  /tmp/ccrkxNaW.s 			page 101


     /tmp/ccrkxNaW.s:2933   .text.nRF24_set_RX_ADDR_P5:0000000000000000 $t
     /tmp/ccrkxNaW.s:2940   .text.nRF24_set_RX_ADDR_P5:0000000000000000 nRF24_set_RX_ADDR_P5
     /tmp/ccrkxNaW.s:2973   .text.nRF24_get_RX_ADDR_P5:0000000000000000 $t
     /tmp/ccrkxNaW.s:2980   .text.nRF24_get_RX_ADDR_P5:0000000000000000 nRF24_get_RX_ADDR_P5
     /tmp/ccrkxNaW.s:3005   .text.nRF24_set_TX_ADDR:0000000000000000 $t
     /tmp/ccrkxNaW.s:3012   .text.nRF24_set_TX_ADDR:0000000000000000 nRF24_set_TX_ADDR
     /tmp/ccrkxNaW.s:3037   .text.nRF24_config_tx_mode:0000000000000000 $t
     /tmp/ccrkxNaW.s:3044   .text.nRF24_config_tx_mode:0000000000000000 nRF24_config_tx_mode
     /tmp/ccrkxNaW.s:3137   .text.nRF24_config_tx_mode:0000000000000084 $d
     /tmp/ccrkxNaW.s:3142   .text.nRF24_config_enhanced_shockburst_tx_mode:0000000000000000 $t
     /tmp/ccrkxNaW.s:3149   .text.nRF24_config_enhanced_shockburst_tx_mode:0000000000000000 nRF24_config_enhanced_shockburst_tx_mode
     /tmp/ccrkxNaW.s:3249   .text.nRF24_config_enhanced_shockburst_tx_mode:000000000000008c $d
     /tmp/ccrkxNaW.s:3254   .text.nRF24_get_TX_ADDR:0000000000000000 $t
     /tmp/ccrkxNaW.s:3261   .text.nRF24_get_TX_ADDR:0000000000000000 nRF24_get_TX_ADDR
     /tmp/ccrkxNaW.s:3286   .text.nRF24_set_RX_PW_P0:0000000000000000 $t
     /tmp/ccrkxNaW.s:3293   .text.nRF24_set_RX_PW_P0:0000000000000000 nRF24_set_RX_PW_P0
     /tmp/ccrkxNaW.s:3326   .text.nRF24_get_RX_PW_P0:0000000000000000 $t
     /tmp/ccrkxNaW.s:3333   .text.nRF24_get_RX_PW_P0:0000000000000000 nRF24_get_RX_PW_P0
     /tmp/ccrkxNaW.s:3363   .text.nRF24_set_RX_PW_P1:0000000000000000 $t
     /tmp/ccrkxNaW.s:3370   .text.nRF24_set_RX_PW_P1:0000000000000000 nRF24_set_RX_PW_P1
     /tmp/ccrkxNaW.s:3403   .text.nRF24_get_RX_PW_P1:0000000000000000 $t
     /tmp/ccrkxNaW.s:3410   .text.nRF24_get_RX_PW_P1:0000000000000000 nRF24_get_RX_PW_P1
     /tmp/ccrkxNaW.s:3440   .text.nRF24_set_RX_PW_P2:0000000000000000 $t
     /tmp/ccrkxNaW.s:3447   .text.nRF24_set_RX_PW_P2:0000000000000000 nRF24_set_RX_PW_P2
     /tmp/ccrkxNaW.s:3480   .text.nRF24_get_RX_PW_P2:0000000000000000 $t
     /tmp/ccrkxNaW.s:3487   .text.nRF24_get_RX_PW_P2:0000000000000000 nRF24_get_RX_PW_P2
     /tmp/ccrkxNaW.s:3517   .text.nRF24_set_RX_PW_P3:0000000000000000 $t
     /tmp/ccrkxNaW.s:3524   .text.nRF24_set_RX_PW_P3:0000000000000000 nRF24_set_RX_PW_P3
     /tmp/ccrkxNaW.s:3557   .text.nRF24_get_RX_PW_P3:0000000000000000 $t
     /tmp/ccrkxNaW.s:3564   .text.nRF24_get_RX_PW_P3:0000000000000000 nRF24_get_RX_PW_P3
     /tmp/ccrkxNaW.s:3594   .text.nRF24_set_RX_PW_P4:0000000000000000 $t
     /tmp/ccrkxNaW.s:3601   .text.nRF24_set_RX_PW_P4:0000000000000000 nRF24_set_RX_PW_P4
     /tmp/ccrkxNaW.s:3634   .text.nRF24_get_RX_PW_P4:0000000000000000 $t
     /tmp/ccrkxNaW.s:3641   .text.nRF24_get_RX_PW_P4:0000000000000000 nRF24_get_RX_PW_P4
     /tmp/ccrkxNaW.s:3671   .text.nRF24_set_RX_PW_P5:0000000000000000 $t
     /tmp/ccrkxNaW.s:3678   .text.nRF24_set_RX_PW_P5:0000000000000000 nRF24_set_RX_PW_P5
     /tmp/ccrkxNaW.s:3711   .text.nRF24_get_RX_PW_P5:0000000000000000 $t
     /tmp/ccrkxNaW.s:3718   .text.nRF24_get_RX_PW_P5:0000000000000000 nRF24_get_RX_PW_P5
     /tmp/ccrkxNaW.s:3748   .text.nRF24_get_FIFO_STATUS:0000000000000000 $t
     /tmp/ccrkxNaW.s:3755   .text.nRF24_get_FIFO_STATUS:0000000000000000 nRF24_get_FIFO_STATUS
     /tmp/ccrkxNaW.s:3785   .text.nRF24_release_payload:0000000000000000 $t
     /tmp/ccrkxNaW.s:3792   .text.nRF24_release_payload:0000000000000000 nRF24_release_payload
     /tmp/ccrkxNaW.s:3817   .text.nRF24_send_packet:0000000000000000 $t
     /tmp/ccrkxNaW.s:3824   .text.nRF24_send_packet:0000000000000000 nRF24_send_packet
     /tmp/ccrkxNaW.s:3954   .text.nRF24_send_packet:00000000000000a4 $d
     /tmp/ccrkxNaW.s:3964   .rodata:0000000000000000 $d
     /tmp/ccrkxNaW.s:3978   .rodata.nRF24_print_all_registers.str1.4:0000000000000000 $d
     /tmp/ccrkxNaW.s:4022   .rodata.nRF24_send_packet.str1.4:0000000000000000 $d
     /tmp/ccrkxNaW.s:4032   .rodata.nRF24_tx_self_test.str1.4:0000000000000000 $d
     /tmp/ccrkxNaW.s:4051   .rodata.nRF24_verified_write_register.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_ReadPin
strlen
HAL_UART_Transmit
ARM GAS  /tmp/ccrkxNaW.s 			page 102


huart2
HAL_Delay
memset
sprintf
memcpy
