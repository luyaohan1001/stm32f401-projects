ARM GAS  /tmp/ccI3eitI.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"nRF24.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SPI_SCK_1,"ax",%progbits
  18              		.align	1
  19              		.global	SPI_SCK_1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SPI_SCK_1:
  26              	.LFB131:
  27              		.file 1 "Src/nRF24.c"
   1:Src/nRF24.c   **** /**
   2:Src/nRF24.c   ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
   3:Src/nRF24.c   ****   * @file      :     nRF24.c
   4:Src/nRF24.c   ****   * @author    :     Luyao Han
   5:Src/nRF24.c   ****   * @email     :     luyaohan1001@gmail.com
   6:Src/nRF24.c   ****   * @brief     :     C library for Nordic nRF24L01+ (or nRF24L01p) 2.4GHz wireless transceiver.
   7:Src/nRF24.c   ****   * @date      :     04-21-2022
   8:Src/nRF24.c   ****   * @note      :     The library strictly follows "nRF24L01+ Single Chip 2.4GHz Transceiver Product
   9:Src/nRF24.c   ****   * Copyright (C) 2022-2122 Luyao Han. The following code may be shared or modified for personal us
  10:Src/nRF24.c   ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
  11:Src/nRF24.c   **** 
  12:Src/nRF24.c   **** /* Includes ---------------------------------------------------------------------------------------
  13:Src/nRF24.c   **** #include "nRF24.h"
  14:Src/nRF24.c   **** 
  15:Src/nRF24.c   **** /* Macro Define -----------------------------------------------------------------------------------
  16:Src/nRF24.c   **** #define NRF24_DEBUG /* When defined, debug messages are logged through UART. */
  17:Src/nRF24.c   **** 
  18:Src/nRF24.c   **** /* GPIO Physical Layer ----------------------------------------------------------------------------
  19:Src/nRF24.c   **** 
  20:Src/nRF24.c   **** /* GPIO Defined on STM32F401 */
  21:Src/nRF24.c   **** /* SCK    PA8  */
  22:Src/nRF24.c   **** /* MOSI   PB10 */
  23:Src/nRF24.c   **** /* CSN    PB4  */
  24:Src/nRF24.c   **** /* CE     PB5  */
  25:Src/nRF24.c   **** /* MISO   PA10 */
  26:Src/nRF24.c   **** 
  27:Src/nRF24.c   **** /**
  28:Src/nRF24.c   ****   * @brief  Set high on SCK pin of SPI bus.
  29:Src/nRF24.c   ****   * @param  None.
  30:Src/nRF24.c   ****   * @retval None.
  31:Src/nRF24.c   **** 	* @note   This GPIO pin must be initialized. 
ARM GAS  /tmp/ccI3eitI.s 			page 2


  32:Src/nRF24.c   **** 	*           Initialization code is not included in this library.
  33:Src/nRF24.c   ****   */
  34:Src/nRF24.c   **** __inline__ void SPI_SCK_1()
  35:Src/nRF24.c   **** {
  28              		.loc 1 35 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  36:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  
  37              		.loc 1 36 0
  38 0002 0122     		movs	r2, #1
  39 0004 4FF48071 		mov	r1, #256
  40 0008 0148     		ldr	r0, .L3
  41 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  42              	.LVL0:
  43 000e 08BD     		pop	{r3, pc}
  44              	.L4:
  45              		.align	2
  46              	.L3:
  47 0010 00000240 		.word	1073872896
  48              		.cfi_endproc
  49              	.LFE131:
  51              		.section	.text.SPI_SCK_0,"ax",%progbits
  52              		.align	1
  53              		.global	SPI_SCK_0
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	SPI_SCK_0:
  60              	.LFB132:
  37:Src/nRF24.c   **** }
  38:Src/nRF24.c   **** 
  39:Src/nRF24.c   **** /**
  40:Src/nRF24.c   ****   * @brief  Set low on SCK pin of SPI bus.
  41:Src/nRF24.c   ****   * @param  None.
  42:Src/nRF24.c   ****   * @retval None.
  43:Src/nRF24.c   **** 	* @note   This GPIO pin must be initialized. 
  44:Src/nRF24.c   **** 	*           Initialization code is not part of this library.
  45:Src/nRF24.c   ****   */
  46:Src/nRF24.c   **** __inline__ void SPI_SCK_0()
  47:Src/nRF24.c   **** {
  61              		.loc 1 47 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
  48:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  
ARM GAS  /tmp/ccI3eitI.s 			page 3


  70              		.loc 1 48 0
  71 0002 0022     		movs	r2, #0
  72 0004 4FF48071 		mov	r1, #256
  73 0008 0148     		ldr	r0, .L7
  74 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  75              	.LVL1:
  76 000e 08BD     		pop	{r3, pc}
  77              	.L8:
  78              		.align	2
  79              	.L7:
  80 0010 00000240 		.word	1073872896
  81              		.cfi_endproc
  82              	.LFE132:
  84              		.section	.text.SPI_MOSI_1,"ax",%progbits
  85              		.align	1
  86              		.global	SPI_MOSI_1
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	SPI_MOSI_1:
  93              	.LFB133:
  49:Src/nRF24.c   **** } 
  50:Src/nRF24.c   **** 
  51:Src/nRF24.c   **** /**
  52:Src/nRF24.c   ****   * @brief  Set high on MOSI pin of SPI bus.
  53:Src/nRF24.c   ****   * @param  None.
  54:Src/nRF24.c   ****   * @retval None.
  55:Src/nRF24.c   **** 	* @note   This GPIO pin must be initialized. 
  56:Src/nRF24.c   **** 	*           Initialization code is not part of this library.
  57:Src/nRF24.c   ****   */
  58:Src/nRF24.c   **** __inline__ void SPI_MOSI_1()
  59:Src/nRF24.c   **** {
  94              		.loc 1 59 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 08B5     		push	{r3, lr}
  99              	.LCFI2:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
  60:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  
 103              		.loc 1 60 0
 104 0002 0122     		movs	r2, #1
 105 0004 4FF48061 		mov	r1, #1024
 106 0008 0148     		ldr	r0, .L11
 107 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL2:
 109 000e 08BD     		pop	{r3, pc}
 110              	.L12:
 111              		.align	2
 112              	.L11:
 113 0010 00040240 		.word	1073873920
 114              		.cfi_endproc
 115              	.LFE133:
 117              		.section	.text.SPI_MOSI_0,"ax",%progbits
ARM GAS  /tmp/ccI3eitI.s 			page 4


 118              		.align	1
 119              		.global	SPI_MOSI_0
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu fpv4-sp-d16
 125              	SPI_MOSI_0:
 126              	.LFB134:
  61:Src/nRF24.c   **** }
  62:Src/nRF24.c   **** 
  63:Src/nRF24.c   **** /**
  64:Src/nRF24.c   ****   * @brief  Set low on MOSI pin of SPI bus.
  65:Src/nRF24.c   ****   * @param  None.
  66:Src/nRF24.c   ****   * @retval None.
  67:Src/nRF24.c   **** 	* @note   This GPIO pin must be initialized. 
  68:Src/nRF24.c   **** 	*           Initialization code is not part of this library.
  69:Src/nRF24.c   ****   */
  70:Src/nRF24.c   **** __inline__ void SPI_MOSI_0()
  71:Src/nRF24.c   **** {
 127              		.loc 1 71 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131 0000 08B5     		push	{r3, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 3, -8
 135              		.cfi_offset 14, -4
  72:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);  
 136              		.loc 1 72 0
 137 0002 0022     		movs	r2, #0
 138 0004 4FF48061 		mov	r1, #1024
 139 0008 0148     		ldr	r0, .L15
 140 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 141              	.LVL3:
 142 000e 08BD     		pop	{r3, pc}
 143              	.L16:
 144              		.align	2
 145              	.L15:
 146 0010 00040240 		.word	1073873920
 147              		.cfi_endproc
 148              	.LFE134:
 150              		.section	.text.SPI_CS_1,"ax",%progbits
 151              		.align	1
 152              		.global	SPI_CS_1
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu fpv4-sp-d16
 158              	SPI_CS_1:
 159              	.LFB135:
  73:Src/nRF24.c   **** }
  74:Src/nRF24.c   **** 
  75:Src/nRF24.c   **** /**
  76:Src/nRF24.c   ****   * @brief  Set high on CS pin of SPI bus.
  77:Src/nRF24.c   ****   * @param  None.
  78:Src/nRF24.c   ****   * @retval None.
ARM GAS  /tmp/ccI3eitI.s 			page 5


  79:Src/nRF24.c   **** 	* @note   This GPIO pin must be initialized. 
  80:Src/nRF24.c   **** 	*           Initialization code is not part of this library.
  81:Src/nRF24.c   ****   */
  82:Src/nRF24.c   **** __inline__ void SPI_CS_1() 
  83:Src/nRF24.c   **** {
 160              		.loc 1 83 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 08B5     		push	{r3, lr}
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 3, -8
 168              		.cfi_offset 14, -4
  84:Src/nRF24.c   ****     /* CS High == CSN Low */
  85:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  
 169              		.loc 1 85 0
 170 0002 0022     		movs	r2, #0
 171 0004 1021     		movs	r1, #16
 172 0006 0248     		ldr	r0, .L19
 173 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 174              	.LVL4:
 175 000c 08BD     		pop	{r3, pc}
 176              	.L20:
 177 000e 00BF     		.align	2
 178              	.L19:
 179 0010 00040240 		.word	1073873920
 180              		.cfi_endproc
 181              	.LFE135:
 183              		.section	.text.SPI_CS_0,"ax",%progbits
 184              		.align	1
 185              		.global	SPI_CS_0
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	SPI_CS_0:
 192              	.LFB136:
  86:Src/nRF24.c   **** }
  87:Src/nRF24.c   **** 
  88:Src/nRF24.c   **** /**
  89:Src/nRF24.c   ****   * @brief  Set low on CS pin of SPI bus.
  90:Src/nRF24.c   ****   * @param  None.
  91:Src/nRF24.c   ****   * @retval None.
  92:Src/nRF24.c   **** 	* @note   This GPIO pin must be initialized. 
  93:Src/nRF24.c   **** 	*           Initialization code is not part of this library.
  94:Src/nRF24.c   ****   */
  95:Src/nRF24.c   **** __inline__ void SPI_CS_0()
  96:Src/nRF24.c   **** {
 193              		.loc 1 96 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 08B5     		push	{r3, lr}
 198              	.LCFI5:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 3, -8
ARM GAS  /tmp/ccI3eitI.s 			page 6


 201              		.cfi_offset 14, -4
  97:Src/nRF24.c   ****     /* CS Low == CSN High */
  98:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 202              		.loc 1 98 0
 203 0002 0122     		movs	r2, #1
 204 0004 1021     		movs	r1, #16
 205 0006 0248     		ldr	r0, .L23
 206 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 207              	.LVL5:
 208 000c 08BD     		pop	{r3, pc}
 209              	.L24:
 210 000e 00BF     		.align	2
 211              	.L23:
 212 0010 00040240 		.word	1073873920
 213              		.cfi_endproc
 214              	.LFE136:
 216              		.section	.text.SPI_READ_MISO,"ax",%progbits
 217              		.align	1
 218              		.global	SPI_READ_MISO
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	SPI_READ_MISO:
 225              	.LFB137:
  99:Src/nRF24.c   **** }
 100:Src/nRF24.c   **** 
 101:Src/nRF24.c   **** 
 102:Src/nRF24.c   **** /**
 103:Src/nRF24.c   ****   * @brief  Get pin-level on MISO pin of SPI bus.
 104:Src/nRF24.c   ****   * @param  None
 105:Src/nRF24.c   ****   * @retval None
 106:Src/nRF24.c   ****   */
 107:Src/nRF24.c   **** __inline__ GPIO_PinState SPI_READ_MISO()
 108:Src/nRF24.c   **** {
 226              		.loc 1 108 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI6:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
 109:Src/nRF24.c   ****   return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 235              		.loc 1 109 0
 236 0002 4FF48061 		mov	r1, #1024
 237 0006 0248     		ldr	r0, .L27
 238 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 239              	.LVL6:
 110:Src/nRF24.c   **** }
 240              		.loc 1 110 0
 241 000c 08BD     		pop	{r3, pc}
 242              	.L28:
 243 000e 00BF     		.align	2
 244              	.L27:
 245 0010 00000240 		.word	1073872896
ARM GAS  /tmp/ccI3eitI.s 			page 7


 246              		.cfi_endproc
 247              	.LFE137:
 249              		.section	.text.serial_print,"ax",%progbits
 250              		.align	1
 251              		.global	serial_print
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv4-sp-d16
 257              	serial_print:
 258              	.LFB138:
 111:Src/nRF24.c   **** 
 112:Src/nRF24.c   **** /**
 113:Src/nRF24.c   ****   * @brief   Print debug string through USART.
 114:Src/nRF24.c   ****   * @param   p_message Pointer to a message string.
 115:Src/nRF24.c   ****   * @retval  None.
 116:Src/nRF24.c   ****   * @note    When testing on STM32F401RE Nucleo Board, the board supports virtual COM (serial) port
 117:Src/nRF24.c   ****   *            Connecting a USB-TTL adapter such as CH340 to the 'TX/D1' on morpho connector will n
 118:Src/nRF24.c   ****   *             In the datasheet it has been confirmed that the USART2 pins have been to multiplexe
 119:Src/nRF24.c   ****   *             On the PC, look for port /dev/ttyACM0 as the virtual serial port in CuteCom / MiniC
 120:Src/nRF24.c   ****   */
 121:Src/nRF24.c   **** __inline__ void serial_print(char* p_message)
 122:Src/nRF24.c   **** {
 259              		.loc 1 122 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL7:
 264 0000 10B5     		push	{r4, lr}
 265              	.LCFI7:
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 4, -8
 268              		.cfi_offset 14, -4
 269 0002 0446     		mov	r4, r0
 123:Src/nRF24.c   **** 	/* Call STM32 HAL library function to UART, pass uart hander, string, length to UART. */
 124:Src/nRF24.c   ****   HAL_UART_Transmit(&huart2, (uint8_t*)p_message, strlen(p_message), 100);
 270              		.loc 1 124 0
 271 0004 FFF7FEFF 		bl	strlen
 272              	.LVL8:
 273 0008 6423     		movs	r3, #100
 274 000a 82B2     		uxth	r2, r0
 275 000c 2146     		mov	r1, r4
 276 000e 0248     		ldr	r0, .L31
 277 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 278              	.LVL9:
 279 0014 10BD     		pop	{r4, pc}
 280              	.LVL10:
 281              	.L32:
 282 0016 00BF     		.align	2
 283              	.L31:
 284 0018 00000000 		.word	huart2
 285              		.cfi_endproc
 286              	.LFE138:
 288              		.section	.text.SPI_DELAY,"ax",%progbits
 289              		.align	1
 290              		.global	SPI_DELAY
 291              		.syntax unified
ARM GAS  /tmp/ccI3eitI.s 			page 8


 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	SPI_DELAY:
 297              	.LFB141:
 125:Src/nRF24.c   **** }
 126:Src/nRF24.c   **** 
 127:Src/nRF24.c   **** /**
 128:Src/nRF24.c   ****   * @brief      Clock out (write) 8 bits on MOSI of SPI bus on SCK high. 
 129:Src/nRF24.c   **** 	*               SPI Mode = [CPOL = 0, CPHA = 0]. (Non-inverted clock and sample data on rising edg
 130:Src/nRF24.c   ****   * @param[in]  tx_data One byte of data to transmit.
 131:Src/nRF24.c   ****   * @retval     None.
 132:Src/nRF24.c   ****   * @note  
 133:Src/nRF24.c   **** 	*   SPI Timing Requirement specified in section 8.3.2 SPI Timing of nRF24L01+ Product Specificatio
 134:Src/nRF24.c   ****   *   Endianess: Most Significant Bit First. Cn: Command Bits. Sn: Status Register bits. Dn: data b
 135:Src/nRF24.c   ****   *
 136:Src/nRF24.c   ****   *   Following is a diagram for time sequence:
 137:Src/nRF24.c   ****   *   CSN ````\____________________________________________________________________________________
 138:Src/nRF24.c   ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|D7|__|D6|__|D5|__|D4|__|D3|__|
 139:Src/nRF24.c   ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 140:Src/nRF24.c   ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 141:Src/nRF24.c   ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 142:Src/nRF24.c   ****   *
 143:Src/nRF24.c   ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 144:Src/nRF24.c   **** 	* 
 145:Src/nRF24.c   **** 	*   '^' indicates the clock rising pulse sampling MOSI data line. 
 146:Src/nRF24.c   **** 	*   MOSI data establish '|' arrives slightly before SCK clock rising edge '/' to satisfy setup-tim
 147:Src/nRF24.c   **** 	*     It is required Data to SCK setup-time > 2 ns.
 148:Src/nRF24.c   **** 	*   SCK falling edge '\' settles slightly after MOSI change back to 0 to satisfy hold-time.
 149:Src/nRF24.c   **** 	*     It is required SCK to Data hold > 2 ns.
 150:Src/nRF24.c   ****   */
 151:Src/nRF24.c   **** void gpio_clockout_8_bits(uint8_t tx_data) 
 152:Src/nRF24.c   **** {
 153:Src/nRF24.c   ****   SPI_DELAY();
 154:Src/nRF24.c   ****   /* Repeat for each bit in the tx_data. */
 155:Src/nRF24.c   ****   for (int i = 0; i < 8; ++i) 
 156:Src/nRF24.c   ****   {
 157:Src/nRF24.c   **** 		  /* Clock Falling Edge */
 158:Src/nRF24.c   ****       SPI_SCK_0();
 159:Src/nRF24.c   ****       SPI_DELAY();
 160:Src/nRF24.c   **** 
 161:Src/nRF24.c   **** 			/* Fetch the Most Significant Bit. */
 162:Src/nRF24.c   ****       if(tx_data & 0x80) 
 163:Src/nRF24.c   ****           SPI_MOSI_1();
 164:Src/nRF24.c   ****       else
 165:Src/nRF24.c   ****           SPI_MOSI_0();
 166:Src/nRF24.c   **** 
 167:Src/nRF24.c   ****       /* Setup Time */  
 168:Src/nRF24.c   ****       SPI_DELAY();
 169:Src/nRF24.c   **** 
 170:Src/nRF24.c   **** 			/* Clock Rising Edge - '^' Sampling in the diagram.*/
 171:Src/nRF24.c   ****       SPI_SCK_1(); 
 172:Src/nRF24.c   **** 
 173:Src/nRF24.c   **** 			/* Loads next bit. e.g. 10110011 << 1 = 01100110 */
 174:Src/nRF24.c   ****       tx_data = tx_data << 1; 
 175:Src/nRF24.c   **** 
 176:Src/nRF24.c   ****       /* hold time */
ARM GAS  /tmp/ccI3eitI.s 			page 9


 177:Src/nRF24.c   ****       SPI_DELAY();
 178:Src/nRF24.c   ****   }
 179:Src/nRF24.c   **** 
 180:Src/nRF24.c   **** 	/* Make sure SPI clock set to 0 after the last bit has been clocked out. */
 181:Src/nRF24.c   ****   SPI_SCK_0();
 182:Src/nRF24.c   **** }
 183:Src/nRF24.c   **** 
 184:Src/nRF24.c   **** /**
 185:Src/nRF24.c   ****   * @brief  Clock in (read) 8 bits from MISO of SPI bus on SCK high.
 186:Src/nRF24.c   **** 	*               SPI Mode = [CPOL = 0, CPHA = 0]. (Non-inverted clock and sample data on rising edg
 187:Src/nRF24.c   ****   * @param  None
 188:Src/nRF24.c   ****   * @retval A byte of read data.
 189:Src/nRF24.c   ****   * @note
 190:Src/nRF24.c   **** 	*   SPI Timing Requirement specified in section 8.3.2 SPI Timing of nRF24L01+ Product Specificatio
 191:Src/nRF24.c   **** 	*
 192:Src/nRF24.c   ****   *   Endianess: Most Significant Bit first. Cn: Command bits. Sn: Status register bits. Dn: Data b
 193:Src/nRF24.c   ****   *    
 194:Src/nRF24.c   ****   *   Following is a diagram for time sequence:
 195:Src/nRF24.c   ****   *   CSN ````\____________________________________________________________________________________
 196:Src/nRF24.c   ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|XX|__|XX|__|XX|__|XX|__|XX|__|
 197:Src/nRF24.c   ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 198:Src/nRF24.c   ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 199:Src/nRF24.c   ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______|D0|__|D1|__|D2|__|D3|__|D4|__|
 200:Src/nRF24.c   ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 201:Src/nRF24.c   ****   *
 202:Src/nRF24.c   **** 	*   '^' indicates the clock rising pulse sampling MISO data line. 
 203:Src/nRF24.c   **** 	*   MISO data establish '|' arrives slightly before SCK clock rising edge '/' to satisfy setup-tim
 204:Src/nRF24.c   **** 	*     It is required Data to SCK setup-time > 2 ns.
 205:Src/nRF24.c   **** 	*   SCK falling edge '\' settles slightly after MISO change back to 0 to satisfy hold-time.
 206:Src/nRF24.c   **** 	*     It is required SCK to Data hold > 2 ns.
 207:Src/nRF24.c   ****   */
 208:Src/nRF24.c   **** uint8_t gpio_clockin_8_bits(void)
 209:Src/nRF24.c   **** {
 210:Src/nRF24.c   ****   uint8_t rx_data = 0;
 211:Src/nRF24.c   **** 
 212:Src/nRF24.c   ****   SPI_DELAY();
 213:Src/nRF24.c   **** 
 214:Src/nRF24.c   ****   /* Repeat for each bit read from MISO. */
 215:Src/nRF24.c   ****   for (int i=0; i < 8; ++i) 
 216:Src/nRF24.c   ****   {
 217:Src/nRF24.c   **** 
 218:Src/nRF24.c   **** 		  /* Clock Falling Edge */
 219:Src/nRF24.c   ****       SPI_SCK_0();
 220:Src/nRF24.c   **** 
 221:Src/nRF24.c   ****       /* Setup Time for MISO. MISO finished changnig before SCK rising edge. */  
 222:Src/nRF24.c   ****       SPI_DELAY();
 223:Src/nRF24.c   **** 
 224:Src/nRF24.c   **** 			/* Clock Rising Edge - '^' Sampling in the diagram.*/
 225:Src/nRF24.c   ****       SPI_SCK_1();
 226:Src/nRF24.c   **** 
 227:Src/nRF24.c   ****       /* Setup Time for MISO. MISO starts change level on SCK rising edge. */  
 228:Src/nRF24.c   ****       SPI_DELAY();
 229:Src/nRF24.c   **** 			
 230:Src/nRF24.c   **** 			/* Store the bit read from MISO. */
 231:Src/nRF24.c   ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 232:Src/nRF24.c   ****       rx_data |= SPI_READ_MISO();
 233:Src/nRF24.c   **** 
ARM GAS  /tmp/ccI3eitI.s 			page 10


 234:Src/nRF24.c   ****       /* hold time */
 235:Src/nRF24.c   ****       SPI_DELAY();
 236:Src/nRF24.c   ****   }
 237:Src/nRF24.c   **** 
 238:Src/nRF24.c   **** 	/* Make sure SPI clock set to 0 after the last bit has been clocked in. */
 239:Src/nRF24.c   ****   SPI_SCK_0();
 240:Src/nRF24.c   ****   return rx_data;
 241:Src/nRF24.c   **** }
 242:Src/nRF24.c   ****   
 243:Src/nRF24.c   **** 
 244:Src/nRF24.c   **** 
 245:Src/nRF24.c   **** /* SPI Datalink Layer------------------------------------------------------------------------------
 246:Src/nRF24.c   **** 
 247:Src/nRF24.c   **** /**
 248:Src/nRF24.c   **** 	* @brief  Provide on milisecond delay for SPI bus to satisfy timing requirement.
 249:Src/nRF24.c   **** 	* @param  None.
 250:Src/nRF24.c   **** 	* @retval None.
 251:Src/nRF24.c   **** 	*/
 252:Src/nRF24.c   **** void SPI_DELAY() 
 253:Src/nRF24.c   **** {
 298              		.loc 1 253 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302 0000 08B5     		push	{r3, lr}
 303              	.LCFI8:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 3, -8
 306              		.cfi_offset 14, -4
 254:Src/nRF24.c   ****   HAL_Delay(1);
 307              		.loc 1 254 0
 308 0002 0120     		movs	r0, #1
 309 0004 FFF7FEFF 		bl	HAL_Delay
 310              	.LVL11:
 311 0008 08BD     		pop	{r3, pc}
 312              		.cfi_endproc
 313              	.LFE141:
 315              		.section	.text.gpio_clockout_8_bits,"ax",%progbits
 316              		.align	1
 317              		.global	gpio_clockout_8_bits
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu fpv4-sp-d16
 323              	gpio_clockout_8_bits:
 324              	.LFB139:
 152:Src/nRF24.c   ****   SPI_DELAY();
 325              		.loc 1 152 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              	.LVL12:
 330 0000 38B5     		push	{r3, r4, r5, lr}
 331              	.LCFI9:
 332              		.cfi_def_cfa_offset 16
 333              		.cfi_offset 3, -16
 334              		.cfi_offset 4, -12
ARM GAS  /tmp/ccI3eitI.s 			page 11


 335              		.cfi_offset 5, -8
 336              		.cfi_offset 14, -4
 337 0002 0446     		mov	r4, r0
 153:Src/nRF24.c   ****   /* Repeat for each bit in the tx_data. */
 338              		.loc 1 153 0
 339 0004 FFF7FEFF 		bl	SPI_DELAY
 340              	.LVL13:
 341              	.LBB33:
 155:Src/nRF24.c   ****   {
 342              		.loc 1 155 0
 343 0008 0025     		movs	r5, #0
 344 000a 12E0     		b	.L36
 345              	.LVL14:
 346              	.L42:
 347              	.LBB34:
 348              	.LBB35:
  60:Src/nRF24.c   **** }
 349              		.loc 1 60 0
 350 000c 0122     		movs	r2, #1
 351 000e 4FF48061 		mov	r1, #1024
 352 0012 1548     		ldr	r0, .L43
 353 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 354              	.LVL15:
 355              	.L38:
 356              	.LBE35:
 357              	.LBE34:
 168:Src/nRF24.c   **** 
 358              		.loc 1 168 0 discriminator 2
 359 0018 FFF7FEFF 		bl	SPI_DELAY
 360              	.LVL16:
 361              	.LBB36:
 362              	.LBB37:
  36:Src/nRF24.c   **** }
 363              		.loc 1 36 0 discriminator 2
 364 001c 0122     		movs	r2, #1
 365 001e 4FF48071 		mov	r1, #256
 366 0022 1248     		ldr	r0, .L43+4
 367 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 368              	.LVL17:
 369              	.LBE37:
 370              	.LBE36:
 174:Src/nRF24.c   **** 
 371              		.loc 1 174 0 discriminator 2
 372 0028 6400     		lsls	r4, r4, #1
 373              	.LVL18:
 374 002a E4B2     		uxtb	r4, r4
 375              	.LVL19:
 177:Src/nRF24.c   ****   }
 376              		.loc 1 177 0 discriminator 2
 377 002c FFF7FEFF 		bl	SPI_DELAY
 378              	.LVL20:
 155:Src/nRF24.c   ****   {
 379              		.loc 1 155 0 discriminator 2
 380 0030 0135     		adds	r5, r5, #1
 381              	.LVL21:
 382              	.L36:
 155:Src/nRF24.c   ****   {
ARM GAS  /tmp/ccI3eitI.s 			page 12


 383              		.loc 1 155 0 is_stmt 0 discriminator 1
 384 0032 072D     		cmp	r5, #7
 385 0034 11DC     		bgt	.L41
 386              	.LBB38:
 387              	.LBB39:
  48:Src/nRF24.c   **** } 
 388              		.loc 1 48 0 is_stmt 1
 389 0036 0022     		movs	r2, #0
 390 0038 4FF48071 		mov	r1, #256
 391 003c 0B48     		ldr	r0, .L43+4
 392 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 393              	.LVL22:
 394              	.LBE39:
 395              	.LBE38:
 159:Src/nRF24.c   **** 
 396              		.loc 1 159 0
 397 0042 FFF7FEFF 		bl	SPI_DELAY
 398              	.LVL23:
 162:Src/nRF24.c   ****           SPI_MOSI_1();
 399              		.loc 1 162 0
 400 0046 14F0800F 		tst	r4, #128
 401 004a DFD1     		bne	.L42
 402              	.LBB40:
 403              	.LBB41:
  72:Src/nRF24.c   **** }
 404              		.loc 1 72 0
 405 004c 0022     		movs	r2, #0
 406 004e 4FF48061 		mov	r1, #1024
 407 0052 0548     		ldr	r0, .L43
 408 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 409              	.LVL24:
 410 0058 DEE7     		b	.L38
 411              	.L41:
 412              	.LBE41:
 413              	.LBE40:
 414              	.LBE33:
 415              	.LBB42:
 416              	.LBB43:
  48:Src/nRF24.c   **** } 
 417              		.loc 1 48 0
 418 005a 0022     		movs	r2, #0
 419 005c 4FF48071 		mov	r1, #256
 420 0060 0248     		ldr	r0, .L43+4
 421 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 422              	.LVL25:
 423 0066 38BD     		pop	{r3, r4, r5, pc}
 424              	.LVL26:
 425              	.L44:
 426              		.align	2
 427              	.L43:
 428 0068 00040240 		.word	1073873920
 429 006c 00000240 		.word	1073872896
 430              	.LBE43:
 431              	.LBE42:
 432              		.cfi_endproc
 433              	.LFE139:
 435              		.section	.text.gpio_clockin_8_bits,"ax",%progbits
ARM GAS  /tmp/ccI3eitI.s 			page 13


 436              		.align	1
 437              		.global	gpio_clockin_8_bits
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	gpio_clockin_8_bits:
 444              	.LFB140:
 209:Src/nRF24.c   ****   uint8_t rx_data = 0;
 445              		.loc 1 209 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449 0000 70B5     		push	{r4, r5, r6, lr}
 450              	.LCFI10:
 451              		.cfi_def_cfa_offset 16
 452              		.cfi_offset 4, -16
 453              		.cfi_offset 5, -12
 454              		.cfi_offset 6, -8
 455              		.cfi_offset 14, -4
 456              	.LVL27:
 212:Src/nRF24.c   **** 
 457              		.loc 1 212 0
 458 0002 FFF7FEFF 		bl	SPI_DELAY
 459              	.LVL28:
 460              	.LBB44:
 215:Src/nRF24.c   ****   {
 461              		.loc 1 215 0
 462 0006 0026     		movs	r6, #0
 463              	.LBE44:
 210:Src/nRF24.c   **** 
 464              		.loc 1 210 0
 465 0008 3446     		mov	r4, r6
 466              	.LBB51:
 215:Src/nRF24.c   ****   {
 467              		.loc 1 215 0
 468 000a 1CE0     		b	.L46
 469              	.LVL29:
 470              	.L47:
 471              	.LBB45:
 472              	.LBB46:
  48:Src/nRF24.c   **** } 
 473              		.loc 1 48 0
 474 000c 134D     		ldr	r5, .L49
 475 000e 0022     		movs	r2, #0
 476 0010 4FF48071 		mov	r1, #256
 477 0014 2846     		mov	r0, r5
 478 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 479              	.LVL30:
 480              	.LBE46:
 481              	.LBE45:
 222:Src/nRF24.c   **** 
 482              		.loc 1 222 0
 483 001a FFF7FEFF 		bl	SPI_DELAY
 484              	.LVL31:
 485              	.LBB47:
 486              	.LBB48:
ARM GAS  /tmp/ccI3eitI.s 			page 14


  36:Src/nRF24.c   **** }
 487              		.loc 1 36 0
 488 001e 0122     		movs	r2, #1
 489 0020 4FF48071 		mov	r1, #256
 490 0024 2846     		mov	r0, r5
 491 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 492              	.LVL32:
 493              	.LBE48:
 494              	.LBE47:
 228:Src/nRF24.c   **** 			
 495              		.loc 1 228 0
 496 002a FFF7FEFF 		bl	SPI_DELAY
 497              	.LVL33:
 231:Src/nRF24.c   ****       rx_data |= SPI_READ_MISO();
 498              		.loc 1 231 0
 499 002e 6400     		lsls	r4, r4, #1
 500              	.LVL34:
 501 0030 E4B2     		uxtb	r4, r4
 502              	.LVL35:
 503              	.LBB49:
 504              	.LBB50:
 109:Src/nRF24.c   **** }
 505              		.loc 1 109 0
 506 0032 4FF48061 		mov	r1, #1024
 507 0036 2846     		mov	r0, r5
 508 0038 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 509              	.LVL36:
 510              	.LBE50:
 511              	.LBE49:
 232:Src/nRF24.c   **** 
 512              		.loc 1 232 0
 513 003c 0443     		orrs	r4, r4, r0
 514              	.LVL37:
 515 003e E4B2     		uxtb	r4, r4
 516              	.LVL38:
 235:Src/nRF24.c   ****   }
 517              		.loc 1 235 0
 518 0040 FFF7FEFF 		bl	SPI_DELAY
 519              	.LVL39:
 215:Src/nRF24.c   ****   {
 520              		.loc 1 215 0
 521 0044 0136     		adds	r6, r6, #1
 522              	.LVL40:
 523              	.L46:
 215:Src/nRF24.c   ****   {
 524              		.loc 1 215 0 is_stmt 0 discriminator 1
 525 0046 072E     		cmp	r6, #7
 526 0048 E0DD     		ble	.L47
 527              	.LBE51:
 528              	.LBB52:
 529              	.LBB53:
  48:Src/nRF24.c   **** } 
 530              		.loc 1 48 0 is_stmt 1
 531 004a 0022     		movs	r2, #0
 532 004c 4FF48071 		mov	r1, #256
 533 0050 0248     		ldr	r0, .L49
 534 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccI3eitI.s 			page 15


 535              	.LVL41:
 536              	.LBE53:
 537              	.LBE52:
 241:Src/nRF24.c   ****   
 538              		.loc 1 241 0
 539 0056 2046     		mov	r0, r4
 540 0058 70BD     		pop	{r4, r5, r6, pc}
 541              	.LVL42:
 542              	.L50:
 543 005a 00BF     		.align	2
 544              	.L49:
 545 005c 00000240 		.word	1073872896
 546              		.cfi_endproc
 547              	.LFE140:
 549              		.section	.text.spi_read_register,"ax",%progbits
 550              		.align	1
 551              		.global	spi_read_register
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu fpv4-sp-d16
 557              	spi_read_register:
 558              	.LFB142:
 255:Src/nRF24.c   **** }
 256:Src/nRF24.c   **** 
 257:Src/nRF24.c   **** 
 258:Src/nRF24.c   **** /**
 259:Src/nRF24.c   ****   * @brief      Read data from the SPI target device register. Endianess: LSByte first.
 260:Src/nRF24.c   ****   * @param[in]  reg SPI target device register to write to.
 261:Src/nRF24.c   ****   * @param[in]  num_bytes Number of bytes needed to write to that address.
 262:Src/nRF24.c   ****   * @param[out] p_read_data A pointer pointing to a memory location that can store the data read fr
 263:Src/nRF24.c   ****   * @retval     none.
 264:Src/nRF24.c   ****   */
 265:Src/nRF24.c   **** void spi_read_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_read_data)
 266:Src/nRF24.c   **** {
 559              		.loc 1 266 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              	.LVL43:
 564 0000 70B5     		push	{r4, r5, r6, lr}
 565              	.LCFI11:
 566              		.cfi_def_cfa_offset 16
 567              		.cfi_offset 4, -16
 568              		.cfi_offset 5, -12
 569              		.cfi_offset 6, -8
 570              		.cfi_offset 14, -4
 571 0002 0446     		mov	r4, r0
 572 0004 0D46     		mov	r5, r1
 573 0006 1646     		mov	r6, r2
 574              	.LBB54:
 575              	.LBB55:
  85:Src/nRF24.c   **** }
 576              		.loc 1 85 0
 577 0008 0022     		movs	r2, #0
 578              	.LVL44:
 579 000a 1021     		movs	r1, #16
ARM GAS  /tmp/ccI3eitI.s 			page 16


 580              	.LVL45:
 581 000c 0948     		ldr	r0, .L55
 582              	.LVL46:
 583 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 584              	.LVL47:
 585              	.LBE55:
 586              	.LBE54:
 267:Src/nRF24.c   ****   /* SPI CHIP SELECT */
 268:Src/nRF24.c   ****   SPI_CS_1();
 269:Src/nRF24.c   ****   
 270:Src/nRF24.c   ****   /* Clock out first byte: target register to read. */
 271:Src/nRF24.c   ****   gpio_clockout_8_bits(reg);
 587              		.loc 1 271 0
 588 0012 2046     		mov	r0, r4
 589 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 590              	.LVL48:
 591              	.LBB56:
 272:Src/nRF24.c   **** 
 273:Src/nRF24.c   **** 	/* Repeat for number of bytes. */
 274:Src/nRF24.c   ****   for (int i = 0; i < num_bytes; ++i) 
 592              		.loc 1 274 0
 593 0018 0024     		movs	r4, #0
 594 001a 03E0     		b	.L52
 595              	.LVL49:
 596              	.L53:
 275:Src/nRF24.c   ****   {
 276:Src/nRF24.c   ****   	/* Clock in byte data from target register. */
 277:Src/nRF24.c   ****     p_read_data[i] = gpio_clockin_8_bits();
 597              		.loc 1 277 0 discriminator 3
 598 001c FFF7FEFF 		bl	gpio_clockin_8_bits
 599              	.LVL50:
 600 0020 3055     		strb	r0, [r6, r4]
 274:Src/nRF24.c   ****   {
 601              		.loc 1 274 0 discriminator 3
 602 0022 0134     		adds	r4, r4, #1
 603              	.LVL51:
 604              	.L52:
 274:Src/nRF24.c   ****   {
 605              		.loc 1 274 0 is_stmt 0 discriminator 1
 606 0024 AC42     		cmp	r4, r5
 607 0026 F9DB     		blt	.L53
 608              	.LBE56:
 609              	.LBB57:
 610              	.LBB58:
  98:Src/nRF24.c   **** }
 611              		.loc 1 98 0 is_stmt 1
 612 0028 0122     		movs	r2, #1
 613 002a 1021     		movs	r1, #16
 614 002c 0148     		ldr	r0, .L55
 615 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 616              	.LVL52:
 617 0032 70BD     		pop	{r4, r5, r6, pc}
 618              	.LVL53:
 619              	.L56:
 620              		.align	2
 621              	.L55:
 622 0034 00040240 		.word	1073873920
ARM GAS  /tmp/ccI3eitI.s 			page 17


 623              	.LBE58:
 624              	.LBE57:
 625              		.cfi_endproc
 626              	.LFE142:
 628              		.section	.text.spi_write_register,"ax",%progbits
 629              		.align	1
 630              		.global	spi_write_register
 631              		.syntax unified
 632              		.thumb
 633              		.thumb_func
 634              		.fpu fpv4-sp-d16
 636              	spi_write_register:
 637              	.LFB143:
 278:Src/nRF24.c   ****   }
 279:Src/nRF24.c   ****   
 280:Src/nRF24.c   ****   /* SPI CHIP DESELECT */
 281:Src/nRF24.c   ****   SPI_CS_0();
 282:Src/nRF24.c   **** }
 283:Src/nRF24.c   **** 
 284:Src/nRF24.c   **** 
 285:Src/nRF24.c   **** /**
 286:Src/nRF24.c   ****   * @brief      Write a number of bytes to the spi target device register.
 287:Src/nRF24.c   ****   * @param[in]  reg            SPI target device register to write to.
 288:Src/nRF24.c   ****   * @param[in]  num_bytes      Number of bytes needed to write to that address.
 289:Src/nRF24.c   ****   * @param[in]  p_writing_data A pointer pointing to a memory location storing the data to write.
 290:Src/nRF24.c   ****   * @retval     None.
 291:Src/nRF24.c   ****   */
 292:Src/nRF24.c   **** void spi_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 293:Src/nRF24.c   **** {
 638              		.loc 1 293 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642              	.LVL54:
 643 0000 70B5     		push	{r4, r5, r6, lr}
 644              	.LCFI12:
 645              		.cfi_def_cfa_offset 16
 646              		.cfi_offset 4, -16
 647              		.cfi_offset 5, -12
 648              		.cfi_offset 6, -8
 649              		.cfi_offset 14, -4
 650 0002 0446     		mov	r4, r0
 651 0004 0D46     		mov	r5, r1
 652 0006 1646     		mov	r6, r2
 653              	.LBB59:
 654              	.LBB60:
  85:Src/nRF24.c   **** }
 655              		.loc 1 85 0
 656 0008 0022     		movs	r2, #0
 657              	.LVL55:
 658 000a 1021     		movs	r1, #16
 659              	.LVL56:
 660 000c 0948     		ldr	r0, .L61
 661              	.LVL57:
 662 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 663              	.LVL58:
 664              	.LBE60:
ARM GAS  /tmp/ccI3eitI.s 			page 18


 665              	.LBE59:
 294:Src/nRF24.c   ****   /* SPI CHIP SELECT */
 295:Src/nRF24.c   ****   SPI_CS_1();
 296:Src/nRF24.c   **** 
 297:Src/nRF24.c   ****   /* Clock out first byte: target register to write. */
 298:Src/nRF24.c   ****   gpio_clockout_8_bits(reg); 
 666              		.loc 1 298 0
 667 0012 2046     		mov	r0, r4
 668 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 669              	.LVL59:
 670              	.LBB61:
 299:Src/nRF24.c   **** 
 300:Src/nRF24.c   **** 	/* Repeat for total number of bytes to write. */
 301:Src/nRF24.c   ****   for (int i = 0; i < num_bytes; ++i)
 671              		.loc 1 301 0
 672 0018 0024     		movs	r4, #0
 673 001a 03E0     		b	.L58
 674              	.LVL60:
 675              	.L59:
 676              	.LBB62:
 302:Src/nRF24.c   ****   {
 303:Src/nRF24.c   ****     uint8_t writing_byte = p_writing_data[i];
 304:Src/nRF24.c   ****   	/* Clock out data to the target register. */
 305:Src/nRF24.c   ****     gpio_clockout_8_bits(writing_byte);
 677              		.loc 1 305 0 discriminator 3
 678 001c 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 679 001e FFF7FEFF 		bl	gpio_clockout_8_bits
 680              	.LVL61:
 681              	.LBE62:
 301:Src/nRF24.c   ****   {
 682              		.loc 1 301 0 discriminator 3
 683 0022 0134     		adds	r4, r4, #1
 684              	.LVL62:
 685              	.L58:
 301:Src/nRF24.c   ****   {
 686              		.loc 1 301 0 is_stmt 0 discriminator 1
 687 0024 AC42     		cmp	r4, r5
 688 0026 F9DB     		blt	.L59
 689              	.LBE61:
 690              	.LBB63:
 691              	.LBB64:
  98:Src/nRF24.c   **** }
 692              		.loc 1 98 0 is_stmt 1
 693 0028 0122     		movs	r2, #1
 694 002a 1021     		movs	r1, #16
 695 002c 0148     		ldr	r0, .L61
 696 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 697              	.LVL63:
 698 0032 70BD     		pop	{r4, r5, r6, pc}
 699              	.LVL64:
 700              	.L62:
 701              		.align	2
 702              	.L61:
 703 0034 00040240 		.word	1073873920
 704              	.LBE64:
 705              	.LBE63:
 706              		.cfi_endproc
ARM GAS  /tmp/ccI3eitI.s 			page 19


 707              	.LFE143:
 709              		.section	.text.nRF24_CE_1,"ax",%progbits
 710              		.align	1
 711              		.global	nRF24_CE_1
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu fpv4-sp-d16
 717              	nRF24_CE_1:
 718              	.LFB144:
 306:Src/nRF24.c   ****   }
 307:Src/nRF24.c   **** 
 308:Src/nRF24.c   ****   /* SPI CHIP DESELECT */
 309:Src/nRF24.c   ****   SPI_CS_0();
 310:Src/nRF24.c   **** }
 311:Src/nRF24.c   **** 
 312:Src/nRF24.c   **** 
 313:Src/nRF24.c   **** /* nRF24 Data-Link Layer Operations ---------------------------------------------------------------
 314:Src/nRF24.c   **** 
 315:Src/nRF24.c   **** /**
 316:Src/nRF24.c   ****   * @brief  Set high on Chip-Enable pin of nRF24L01.
 317:Src/nRF24.c   ****   * @param  None.
 318:Src/nRF24.c   ****   * @retval None.
 319:Src/nRF24.c   ****   */
 320:Src/nRF24.c   **** void nRF24_CE_1()
 321:Src/nRF24.c   **** {
 719              		.loc 1 321 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723 0000 08B5     		push	{r3, lr}
 724              	.LCFI13:
 725              		.cfi_def_cfa_offset 8
 726              		.cfi_offset 3, -8
 727              		.cfi_offset 14, -4
 322:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  
 728              		.loc 1 322 0
 729 0002 0122     		movs	r2, #1
 730 0004 2021     		movs	r1, #32
 731 0006 0248     		ldr	r0, .L65
 732 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 733              	.LVL65:
 734 000c 08BD     		pop	{r3, pc}
 735              	.L66:
 736 000e 00BF     		.align	2
 737              	.L65:
 738 0010 00040240 		.word	1073873920
 739              		.cfi_endproc
 740              	.LFE144:
 742              		.section	.text.nRF24_CE_0,"ax",%progbits
 743              		.align	1
 744              		.global	nRF24_CE_0
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 748              		.fpu fpv4-sp-d16
 750              	nRF24_CE_0:
ARM GAS  /tmp/ccI3eitI.s 			page 20


 751              	.LFB145:
 323:Src/nRF24.c   **** }
 324:Src/nRF24.c   **** 
 325:Src/nRF24.c   **** 
 326:Src/nRF24.c   **** /**
 327:Src/nRF24.c   ****   * @brief  Set low on Chip-Enable pin of nRF24L01.
 328:Src/nRF24.c   ****   * @param  None.
 329:Src/nRF24.c   ****   * @retval None.
 330:Src/nRF24.c   ****   */
 331:Src/nRF24.c   **** void nRF24_CE_0()
 332:Src/nRF24.c   **** {
 752              		.loc 1 332 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756 0000 08B5     		push	{r3, lr}
 757              	.LCFI14:
 758              		.cfi_def_cfa_offset 8
 759              		.cfi_offset 3, -8
 760              		.cfi_offset 14, -4
 333:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 761              		.loc 1 333 0
 762 0002 0022     		movs	r2, #0
 763 0004 2021     		movs	r1, #32
 764 0006 0248     		ldr	r0, .L69
 765 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 766              	.LVL66:
 767 000c 08BD     		pop	{r3, pc}
 768              	.L70:
 769 000e 00BF     		.align	2
 770              	.L69:
 771 0010 00040240 		.word	1073873920
 772              		.cfi_endproc
 773              	.LFE145:
 775              		.section	.text.bytearray_to_string,"ax",%progbits
 776              		.align	1
 777              		.global	bytearray_to_string
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	bytearray_to_string:
 784              	.LFB146:
 334:Src/nRF24.c   **** }
 335:Src/nRF24.c   **** 
 336:Src/nRF24.c   **** 
 337:Src/nRF24.c   **** /**
 338:Src/nRF24.c   **** 	* @TODO Convert an array of hex bytes to string.
 339:Src/nRF24.c   **** 	*/
 340:Src/nRF24.c   **** char* bytearray_to_string(uint8_t num_bytes, uint8_t* byte_array, char* result_string)
 341:Src/nRF24.c   **** {
 785              		.loc 1 341 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 8
 788              		@ frame_needed = 0, uses_anonymous_args = 0
 789              	.LVL67:
 790 0000 F0B5     		push	{r4, r5, r6, r7, lr}
ARM GAS  /tmp/ccI3eitI.s 			page 21


 791              	.LCFI15:
 792              		.cfi_def_cfa_offset 20
 793              		.cfi_offset 4, -20
 794              		.cfi_offset 5, -16
 795              		.cfi_offset 6, -12
 796              		.cfi_offset 7, -8
 797              		.cfi_offset 14, -4
 798 0002 83B0     		sub	sp, sp, #12
 799              	.LCFI16:
 800              		.cfi_def_cfa_offset 32
 801 0004 0646     		mov	r6, r0
 802 0006 0F46     		mov	r7, r1
 803 0008 1546     		mov	r5, r2
 804              	.LVL68:
 805              	.LBB65:
 342:Src/nRF24.c   **** 	char buf;
 343:Src/nRF24.c   **** 	for (int i = 0; i < num_bytes; ++i)
 806              		.loc 1 343 0
 807 000a 0024     		movs	r4, #0
 808 000c 0BE0     		b	.L72
 809              	.LVL69:
 810              	.L73:
 344:Src/nRF24.c   **** 	{
 345:Src/nRF24.c   **** 		sprintf(&buf, "%#02x", byte_array[i]);
 811              		.loc 1 345 0 discriminator 3
 812 000e 3A5D     		ldrb	r2, [r7, r4]	@ zero_extendqisi2
 813 0010 0749     		ldr	r1, .L75
 814 0012 0DF10700 		add	r0, sp, #7
 815 0016 FFF7FEFF 		bl	sprintf
 816              	.LVL70:
 346:Src/nRF24.c   **** 		strcat(result_string, &buf);
 817              		.loc 1 346 0 discriminator 3
 818 001a 0DF10701 		add	r1, sp, #7
 819 001e 2846     		mov	r0, r5
 820 0020 FFF7FEFF 		bl	strcat
 821              	.LVL71:
 343:Src/nRF24.c   **** 	{
 822              		.loc 1 343 0 discriminator 3
 823 0024 0134     		adds	r4, r4, #1
 824              	.LVL72:
 825              	.L72:
 343:Src/nRF24.c   **** 	{
 826              		.loc 1 343 0 is_stmt 0 discriminator 1
 827 0026 B442     		cmp	r4, r6
 828 0028 F1DB     		blt	.L73
 829              	.LBE65:
 347:Src/nRF24.c   **** 	}
 348:Src/nRF24.c   **** 	return result_string;
 349:Src/nRF24.c   **** }
 830              		.loc 1 349 0 is_stmt 1
 831 002a 2846     		mov	r0, r5
 832 002c 03B0     		add	sp, sp, #12
 833              	.LCFI17:
 834              		.cfi_def_cfa_offset 20
 835              		@ sp needed
 836 002e F0BD     		pop	{r4, r5, r6, r7, pc}
 837              	.LVL73:
ARM GAS  /tmp/ccI3eitI.s 			page 22


 838              	.L76:
 839              		.align	2
 840              	.L75:
 841 0030 00000000 		.word	.LC2
 842              		.cfi_endproc
 843              	.LFE146:
 845              		.section	.text.nRF24_verified_write_register,"ax",%progbits
 846              		.align	1
 847              		.global	nRF24_verified_write_register
 848              		.syntax unified
 849              		.thumb
 850              		.thumb_func
 851              		.fpu fpv4-sp-d16
 853              	nRF24_verified_write_register:
 854              	.LFB147:
 350:Src/nRF24.c   **** 
 351:Src/nRF24.c   **** /**
 352:Src/nRF24.c   ****   * @brief      Write to a register on nRF24L01+ through SPI. Read the same registers after write t
 353:Src/nRF24.c   **** 	*               This function seems to waste cycles but SPI communication issues expose immediatel
 354:Src/nRF24.c   ****   * @param[in]  reg            The target register to write value to.
 355:Src/nRF24.c   ****   * @param[in]  num_bytes      Number of bytes to write.
 356:Src/nRF24.c   ****   * @param[in]  p_writing_data Pointer to the data to write.
 357:Src/nRF24.c   ****   * @retval     Boolean. 1 for mistakes happen. 0 for success.
 358:Src/nRF24.c   ****   * @note       reg & ~ W_REGISTER_MASK is the reverse operation of reg | W_REGISTER_MASK,
 359:Src/nRF24.c   ****   *               essentially get rid of Write Regiter Mask and add a Read Register Mask. 
 360:Src/nRF24.c   **** 	*             See section 8.3.1 SPI commands in nRF24L01+ Product Specification for details.
 361:Src/nRF24.c   ****   */
 362:Src/nRF24.c   **** bool nRF24_verified_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 363:Src/nRF24.c   **** {
 855              		.loc 1 363 0
 856              		.cfi_startproc
 857              		@ args = 0, pretend = 0, frame = 256
 858              		@ frame_needed = 1, uses_anonymous_args = 0
 859              	.LVL74:
 860 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 861              	.LCFI18:
 862              		.cfi_def_cfa_offset 32
 863              		.cfi_offset 4, -32
 864              		.cfi_offset 5, -28
 865              		.cfi_offset 6, -24
 866              		.cfi_offset 7, -20
 867              		.cfi_offset 8, -16
 868              		.cfi_offset 9, -12
 869              		.cfi_offset 10, -8
 870              		.cfi_offset 14, -4
 871 0004 C0B0     		sub	sp, sp, #256
 872              	.LCFI19:
 873              		.cfi_def_cfa_offset 288
 874 0006 00AF     		add	r7, sp, #0
 875              	.LCFI20:
 876              		.cfi_def_cfa_register 7
 877 0008 0546     		mov	r5, r0
 878 000a 0C46     		mov	r4, r1
 879 000c 9046     		mov	r8, r2
 364:Src/nRF24.c   **** 
 365:Src/nRF24.c   ****     char message[256];
 366:Src/nRF24.c   ****     uint8_t read_data[num_bytes];
ARM GAS  /tmp/ccI3eitI.s 			page 23


 880              		.loc 1 366 0
 881 000e 8A46     		mov	r10, r1
 882              	.LVL75:
 883 0010 CB1D     		adds	r3, r1, #7
 884 0012 23F00703 		bic	r3, r3, #7
 885 0016 ADEB030D 		sub	sp, sp, r3
 886 001a E946     		mov	r9, sp
 887              	.LVL76:
 367:Src/nRF24.c   **** 
 368:Src/nRF24.c   ****     /* Write the data to target register. */
 369:Src/nRF24.c   ****     spi_write_register(reg, num_bytes, p_writing_data); 
 888              		.loc 1 369 0
 889 001c FFF7FEFF 		bl	spi_write_register
 890              	.LVL77:
 370:Src/nRF24.c   **** 
 371:Src/nRF24.c   ****     /* Read from same target register to verify if data has been successfully written. */
 372:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK | (reg & ~W_REGISTER_MASK), num_bytes, read_data);
 891              		.loc 1 372 0
 892 0020 6A46     		mov	r2, sp
 893 0022 2146     		mov	r1, r4
 894 0024 05F0DF00 		and	r0, r5, #223
 895 0028 FFF7FEFF 		bl	spi_read_register
 896              	.LVL78:
 897              	.LBB75:
 373:Src/nRF24.c   **** 		
 374:Src/nRF24.c   **** 		/* For each byte, check mismatch between written data and read data from target register. */
 375:Src/nRF24.c   ****     for (int i = 0; i < num_bytes; ++i) 
 898              		.loc 1 375 0
 899 002c 0026     		movs	r6, #0
 900              	.LVL79:
 901              	.L78:
 902              		.loc 1 375 0 is_stmt 0 discriminator 1
 903 002e 5645     		cmp	r6, r10
 904 0030 59DA     		bge	.L83
 376:Src/nRF24.c   ****     {
 377:Src/nRF24.c   ****       if (read_data[i] != p_writing_data[i])  
 905              		.loc 1 377 0 is_stmt 1
 906 0032 19F80620 		ldrb	r2, [r9, r6]	@ zero_extendqisi2
 907 0036 08EB0604 		add	r4, r8, r6
 908 003a 18F80630 		ldrb	r3, [r8, r6]	@ zero_extendqisi2
 909 003e 9A42     		cmp	r2, r3
 910 0040 27D1     		bne	.L84
 378:Src/nRF24.c   ****       {
 379:Src/nRF24.c   ****         #ifdef NRF24_DEBUG
 380:Src/nRF24.c   ****         strcpy(message, "Problem writing to nRF24 register -- ");
 381:Src/nRF24.c   ****         serial_print(message);
 382:Src/nRF24.c   ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 383:Src/nRF24.c   ****         serial_print(message);
 384:Src/nRF24.c   ****         #endif 
 385:Src/nRF24.c   ****         return true;
 386:Src/nRF24.c   ****       } else {
 387:Src/nRF24.c   ****         #ifdef NRF24_DEBUG
 388:Src/nRF24.c   ****         strcpy(message, "Success writing to nRF24 register -- ");
 911              		.loc 1 388 0 discriminator 2
 912 0042 3C46     		mov	r4, r7
 913 0044 2B4D     		ldr	r5, .L85
 914 0046 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccI3eitI.s 			page 24


 915 0048 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 916 004a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 917 004c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 918 004e 95E80300 		ldm	r5, {r0, r1}
 919 0052 44F8040B 		str	r0, [r4], #4
 920 0056 2180     		strh	r1, [r4]	@ movhi
 921              	.LVL80:
 922              	.LBB76:
 923              	.LBB77:
 124:Src/nRF24.c   **** }
 924              		.loc 1 124 0 discriminator 2
 925 0058 3846     		mov	r0, r7
 926              	.LVL81:
 927 005a FFF7FEFF 		bl	strlen
 928              	.LVL82:
 929 005e 264C     		ldr	r4, .L85+4
 930              	.LVL83:
 931 0060 6423     		movs	r3, #100
 932 0062 82B2     		uxth	r2, r0
 933 0064 3946     		mov	r1, r7
 934              	.LVL84:
 935 0066 2046     		mov	r0, r4
 936 0068 FFF7FEFF 		bl	HAL_UART_Transmit
 937              	.LVL85:
 938              	.LBE77:
 939              	.LBE76:
 389:Src/nRF24.c   ****         serial_print(message);
 390:Src/nRF24.c   ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 940              		.loc 1 390 0 discriminator 2
 941 006c 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 942 0070 18F80620 		ldrb	r2, [r8, r6]	@ zero_extendqisi2
 943 0074 2149     		ldr	r1, .L85+8
 944 0076 3846     		mov	r0, r7
 945 0078 FFF7FEFF 		bl	sprintf
 946              	.LVL86:
 947              	.LBB78:
 948              	.LBB79:
 124:Src/nRF24.c   **** }
 949              		.loc 1 124 0 discriminator 2
 950 007c 3846     		mov	r0, r7
 951              	.LVL87:
 952 007e FFF7FEFF 		bl	strlen
 953              	.LVL88:
 954 0082 6423     		movs	r3, #100
 955 0084 82B2     		uxth	r2, r0
 956 0086 3946     		mov	r1, r7
 957              	.LVL89:
 958 0088 2046     		mov	r0, r4
 959 008a FFF7FEFF 		bl	HAL_UART_Transmit
 960              	.LVL90:
 961              	.LBE79:
 962              	.LBE78:
 375:Src/nRF24.c   ****     {
 963              		.loc 1 375 0 discriminator 2
 964 008e 0136     		adds	r6, r6, #1
 965              	.LVL91:
 966 0090 CDE7     		b	.L78
ARM GAS  /tmp/ccI3eitI.s 			page 25


 967              	.L84:
 380:Src/nRF24.c   ****         serial_print(message);
 968              		.loc 1 380 0
 969 0092 3D46     		mov	r5, r7
 970 0094 DFF868E0 		ldr	lr, .L85+12
 971 0098 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 972 009c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 973 009e BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 974 00a2 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 975 00a4 9EE80300 		ldm	lr, {r0, r1}
 976 00a8 45F8040B 		str	r0, [r5], #4
 977 00ac 2980     		strh	r1, [r5]	@ movhi
 978              	.LVL92:
 979              	.LBB80:
 980              	.LBB81:
 124:Src/nRF24.c   **** }
 981              		.loc 1 124 0
 982 00ae 3846     		mov	r0, r7
 983              	.LVL93:
 984 00b0 FFF7FEFF 		bl	strlen
 985              	.LVL94:
 986 00b4 104D     		ldr	r5, .L85+4
 987              	.LVL95:
 988 00b6 6423     		movs	r3, #100
 989 00b8 82B2     		uxth	r2, r0
 990 00ba 3946     		mov	r1, r7
 991              	.LVL96:
 992 00bc 2846     		mov	r0, r5
 993 00be FFF7FEFF 		bl	HAL_UART_Transmit
 994              	.LVL97:
 995              	.LBE81:
 996              	.LBE80:
 382:Src/nRF24.c   ****         serial_print(message);
 997              		.loc 1 382 0
 998 00c2 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 999 00c6 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 1000 00c8 0C49     		ldr	r1, .L85+8
 1001 00ca 3846     		mov	r0, r7
 1002 00cc FFF7FEFF 		bl	sprintf
 1003              	.LVL98:
 1004              	.LBB82:
 1005              	.LBB83:
 124:Src/nRF24.c   **** }
 1006              		.loc 1 124 0
 1007 00d0 3846     		mov	r0, r7
 1008              	.LVL99:
 1009 00d2 FFF7FEFF 		bl	strlen
 1010              	.LVL100:
 1011 00d6 6423     		movs	r3, #100
 1012 00d8 82B2     		uxth	r2, r0
 1013 00da 3946     		mov	r1, r7
 1014              	.LVL101:
 1015 00dc 2846     		mov	r0, r5
 1016 00de FFF7FEFF 		bl	HAL_UART_Transmit
 1017              	.LVL102:
 1018              	.LBE83:
 1019              	.LBE82:
ARM GAS  /tmp/ccI3eitI.s 			page 26


 385:Src/nRF24.c   ****       } else {
 1020              		.loc 1 385 0
 1021 00e2 0120     		movs	r0, #1
 1022 00e4 00E0     		b	.L80
 1023              	.LVL103:
 1024              	.L83:
 1025              	.LBE75:
 391:Src/nRF24.c   ****         serial_print(message);
 392:Src/nRF24.c   ****         #endif
 393:Src/nRF24.c   ****       }
 394:Src/nRF24.c   ****   }
 395:Src/nRF24.c   ****   return false;
 1026              		.loc 1 395 0
 1027 00e6 0020     		movs	r0, #0
 1028              	.L80:
 396:Src/nRF24.c   **** }
 1029              		.loc 1 396 0
 1030 00e8 07F58077 		add	r7, r7, #256
 1031              	.LCFI21:
 1032              		.cfi_def_cfa_offset 32
 1033 00ec BD46     		mov	sp, r7
 1034              	.LCFI22:
 1035              		.cfi_def_cfa_register 13
 1036              		@ sp needed
 1037 00ee BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1038              	.LVL104:
 1039              	.L86:
 1040 00f2 00BF     		.align	2
 1041              	.L85:
 1042 00f4 54000000 		.word	.LC5
 1043 00f8 00000000 		.word	huart2
 1044 00fc 28000000 		.word	.LC4
 1045 0100 00000000 		.word	.LC3
 1046              		.cfi_endproc
 1047              	.LFE147:
 1049              		.section	.text.nRF24_print_all_registers,"ax",%progbits
 1050              		.align	1
 1051              		.global	nRF24_print_all_registers
 1052              		.syntax unified
 1053              		.thumb
 1054              		.thumb_func
 1055              		.fpu fpv4-sp-d16
 1057              	nRF24_print_all_registers:
 1058              	.LFB152:
 397:Src/nRF24.c   **** 
 398:Src/nRF24.c   **** 
 399:Src/nRF24.c   **** /**  
 400:Src/nRF24.c   ****  *  @brief  Test nRF24 transmitter function without a receiver. 
 401:Src/nRF24.c   ****  *          In the project, we always make sure that TX is working before RX.
 402:Src/nRF24.c   ****  *          Thus use this function on a fresh setup of the nRF24 modules.
 403:Src/nRF24.c   ****  *  @param  None.
 404:Src/nRF24.c   ****  *  @retval None.
 405:Src/nRF24.c   ****  *  @note  
 406:Src/nRF24.c   ****  *      Steps: 1. Disable Auto Acknowledgement, disable Auto Retransmit. 
 407:Src/nRF24.c   ****  *                The reason to disable them is that if they are enabled, ShockBurst mode is on.
 408:Src/nRF24.c   ****  *								Without a usable receiver, it cannot be determined if the transceiver is working properly
 409:Src/nRF24.c   ****  *             2. TX_DS (in STATUS register) is expected to be set when data has been clock into TX
ARM GAS  /tmp/ccI3eitI.s 			page 27


 410:Src/nRF24.c   ****  *             3. Check if STATUS = 0x2E, if so we have a working TX module.
 411:Src/nRF24.c   ****  *            
 412:Src/nRF24.c   ****  *            After writing to W_TX_PAYLOAD, TX_EMPTY (in FIFO_STATUS register) becomes 0.
 413:Src/nRF24.c   ****  *            
 414:Src/nRF24.c   ****  *            What happens if sending is not successful?
 415:Src/nRF24.c   ****  *            TX_FULL (in FIFO_STATUS register) becomes 1.
 416:Src/nRF24.c   ****  *            TX_FULL (in STATUS register) becomes 1.
 417:Src/nRF24.c   ****  *            TX_DS (in STATUS register) remains 0.  
 418:Src/nRF24.c   ****  *
 419:Src/nRF24.c   ****  *      States: 
 420:Src/nRF24.c   ****  *            The states can be referred in 6.1.1 State diagram.
 421:Src/nRF24.c   ****  *      
 422:Src/nRF24.c   ****  *      STATUS register
 423:Src/nRF24.c   ****  *                7             6           5         4         3:1         0
 424:Src/nRF24.c   ****  *            <reserved>      RX_DR       TX_DS     MAX_RT     RX_P_NO     TX_FULL
 425:Src/nRF24.c   ****  *            -----------------------------------------------------------------------
 426:Src/nRF24.c   ****  *             Always 0       Receive     Transfer  Maximum    000-101 :    1: 
 427:Src/nRF24.c   ****  *                            Data        Data      TX         Data Pipe #  TX_FULL
 428:Src/nRF24.c   ****  *                            Ready       Sent      Transmits  110 :
 429:Src/nRF24.c   ****  *                                                             Not Used.
 430:Src/nRF24.c   ****  *                                                             111:
 431:Src/nRF24.c   ****  *                                                             RX FIFO Empty.
 432:Src/nRF24.c   ****  */
 433:Src/nRF24.c   **** void nRF24_tx_self_test() 
 434:Src/nRF24.c   **** {
 435:Src/nRF24.c   ****   char message[256];
 436:Src/nRF24.c   ****   uint8_t writing_byte;
 437:Src/nRF24.c   **** 
 438:Src/nRF24.c   ****   #ifdef NRF24_DEBUG
 439:Src/nRF24.c   ****   strcpy(message, "---- nrf24 tx self test. ----\n");
 440:Src/nRF24.c   ****   serial_print(message);
 441:Src/nRF24.c   **** 
 442:Src/nRF24.c   ****   strcpy(message, "---- This test to verifies function of a tranmitter send without a receiver. ---
 443:Src/nRF24.c   ****   serial_print(message);
 444:Src/nRF24.c   ****   #endif
 445:Src/nRF24.c   **** 
 446:Src/nRF24.c   ****   uint8_t nRF24_status = 0x00;
 447:Src/nRF24.c   **** 
 448:Src/nRF24.c   ****   // Note that if we reset the nRF connected without re-poweron the chip, initial value of register
 449:Src/nRF24.c   ****   /* Current State: [Power-on reset 100 ms] */
 450:Src/nRF24.c   ****   nRF24_CE_0();
 451:Src/nRF24.c   **** 
 452:Src/nRF24.c   ****   /* Current State: [Power-Down] (RF transmission is Power-Down, but SPI is alive.) */
 453:Src/nRF24.c   ****   writing_byte = 0x00;
 454:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
 455:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
 456:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 457:Src/nRF24.c   **** 
 458:Src/nRF24.c   ****   writing_byte = 0x0E;
 459:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
 460:Src/nRF24.c   **** 
 461:Src/nRF24.c   ****   /* PWR_UP=1, state transition to [Standby-I] */
 462:Src/nRF24.c   ****   uint8_t test_payload[4] = {0xC0, 0xC0, 0xCA, 0xFE}; // clock out a payload, now TX FIFO not empty
 463:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 464:Src/nRF24.c   ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 465:Src/nRF24.c   ****   
 466:Src/nRF24.c   ****   /* TX FIFO not empty AND CE = 1, state transition to [TX MODE] */
ARM GAS  /tmp/ccI3eitI.s 			page 28


 467:Src/nRF24.c   ****   /* Get nRF24 <STATUS> register value. */
 468:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &nRF24_status);
 469:Src/nRF24.c   **** 
 470:Src/nRF24.c   ****   SPI_DELAY(1);
 471:Src/nRF24.c   **** 
 472:Src/nRF24.c   ****   /* CE=0, state transition -> now return to [Standby-I]. */
 473:Src/nRF24.c   ****   nRF24_CE_0();
 474:Src/nRF24.c   **** 
 475:Src/nRF24.c   ****   /* Now check test result. */
 476:Src/nRF24.c   ****   if (nRF24_status & 0x2E) 
 477:Src/nRF24.c   ****   {
 478:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 479:Src/nRF24.c   ****     strcpy(message, "\n > nRF24 transmission self-test has passed. \
 480:Src/nRF24.c   ****                        <STATUS> has value of 0x2E. \
 481:Src/nRF24.c   ****                        TX_DS (transfer data sent) was set. \
 482:Src/nRF24.c   ****                        RX_P_NO = 111, this means RX FIFO Empty. \n");
 483:Src/nRF24.c   ****     serial_print(message);
 484:Src/nRF24.c   ****     #endif
 485:Src/nRF24.c   ****   } 
 486:Src/nRF24.c   ****   else 
 487:Src/nRF24.c   ****   {
 488:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 489:Src/nRF24.c   ****     sprintf(message, "\n > nRF24 transmission self-test has failed. <STATUS> is expected 0x2E. Curr
 490:Src/nRF24.c   ****     serial_print(message);
 491:Src/nRF24.c   ****     #endif
 492:Src/nRF24.c   ****   }
 493:Src/nRF24.c   **** 
 494:Src/nRF24.c   **** 	/* (!) The above code already determined if the chip works in TX mode.*/
 495:Src/nRF24.c   **** 	/* The following code keeps sending the payload in a while loop. Comment below out if we don't nee
 496:Src/nRF24.c   **** 	/* The following code will be useful when we are testing a receiver board. */
 497:Src/nRF24.c   **** 	/* clock out a four-byte payload "C0C0 CAFE" */
 498:Src/nRF24.c   **** 	while(1) 
 499:Src/nRF24.c   **** 	{
 500:Src/nRF24.c   **** 		uint8_t payload[] = {0xC0, 0xC0, 0xCA, 0xFE}; 
 501:Src/nRF24.c   **** 
 502:Src/nRF24.c   **** 		spi_write_register(W_TX_PAYLOAD, 4, (uint8_t*) payload);
 503:Src/nRF24.c   **** 
 504:Src/nRF24.c   **** 		/* Fire out the transmit packet */
 505:Src/nRF24.c   **** 		nRF24_CE_1(); 
 506:Src/nRF24.c   **** 
 507:Src/nRF24.c   **** 		/* read <STATUS> register*/
 508:Src/nRF24.c   **** 		uint8_t status;
 509:Src/nRF24.c   **** 		spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 510:Src/nRF24.c   **** 
 511:Src/nRF24.c   **** 		#ifdef NRF24_DEBUG
 512:Src/nRF24.c   **** 		sprintf(message, "<STATUS> REGISTER : %#02x\n", status);
 513:Src/nRF24.c   **** 		serial_print(message);
 514:Src/nRF24.c   **** 		#endif
 515:Src/nRF24.c   **** 
 516:Src/nRF24.c   **** 		if (status == 0x2e) /* TX_DS bit is set. */
 517:Src/nRF24.c   **** 		{
 518:Src/nRF24.c   **** 			#ifdef NRF24_DEBUG
 519:Src/nRF24.c   **** 			strcpy(message, "nRF24 send status - success -\n");
 520:Src/nRF24.c   **** 			serial_print(message);
 521:Src/nRF24.c   **** 			#endif
 522:Src/nRF24.c   **** 		} 
 523:Src/nRF24.c   **** 		else 
ARM GAS  /tmp/ccI3eitI.s 			page 29


 524:Src/nRF24.c   **** 		{
 525:Src/nRF24.c   **** 			#ifdef NRF24_DEBUG
 526:Src/nRF24.c   **** 			strcpy(message, "nRF24 send status - failure -\n");
 527:Src/nRF24.c   **** 			serial_print(message);
 528:Src/nRF24.c   **** 			#endif
 529:Src/nRF24.c   **** 		}
 530:Src/nRF24.c   **** 
 531:Src/nRF24.c   **** 		/* write 1 to <STATUS> register to clear TX_DS, TX_DS bit is Write-to-Clear. */
 532:Src/nRF24.c   **** 		nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 533:Src/nRF24.c   **** 
 534:Src/nRF24.c   **** 		nRF24_CE_0(); /* stop transmission. Returns to [Standby-I]. */
 535:Src/nRF24.c   **** 	}
 536:Src/nRF24.c   ****   
 537:Src/nRF24.c   **** }
 538:Src/nRF24.c   **** 
 539:Src/nRF24.c   **** 
 540:Src/nRF24.c   **** /**
 541:Src/nRF24.c   ****   * @brief  Make nRF24 send data with primitive methods.
 542:Src/nRF24.c   ****   * @param  tx_payload_width. Length of data packet to send to the receiver. 
 543:Src/nRF24.c   **** 	            (!) tx_payload_width Must be the same value as the receiver's <RX_PW_Px>. x being the 
 544:Src/nRF24.c   ****   * @param  payload Pointer to the actual data packet being sent to the receiver.
 545:Src/nRF24.c   ****   * @retval None.
 546:Src/nRF24.c   ****   * @note   Call nRF24_configure_tx_mode() before this test to initailize TX mode in nRF24L01+.
 547:Src/nRF24.c   ****   */
 548:Src/nRF24.c   **** void nRF24_send_packet(uint8_t tx_payload_width, uint8_t* p_payload) 
 549:Src/nRF24.c   **** {
 550:Src/nRF24.c   **** 
 551:Src/nRF24.c   ****   char message[64];
 552:Src/nRF24.c   ****   		
 553:Src/nRF24.c   **** 	/* clock out the packet to TX FIFO*/
 554:Src/nRF24.c   ****   nRF24_release_payload(tx_payload_width, p_payload);
 555:Src/nRF24.c   **** 
 556:Src/nRF24.c   ****   /* Fire out the transmit packet */
 557:Src/nRF24.c   ****   nRF24_CE_1(); 
 558:Src/nRF24.c   **** 
 559:Src/nRF24.c   ****   /* read <STATUS> register*/
 560:Src/nRF24.c   ****   uint8_t status;
 561:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 562:Src/nRF24.c   **** 
 563:Src/nRF24.c   **** 	/* print <STATUS> register*/
 564:Src/nRF24.c   ****   #ifdef NRF24_DEBUG
 565:Src/nRF24.c   ****   sprintf(message, "<STATUS> REGISTER : %#02x\n", status);
 566:Src/nRF24.c   ****   serial_print(message);
 567:Src/nRF24.c   ****   #endif
 568:Src/nRF24.c   **** 
 569:Src/nRF24.c   **** 	/* Verify if TX_DS bit is set in <STATUS> */
 570:Src/nRF24.c   ****   if (status == 0x2e) /* TX_DS_MASK1 = 1 << 5 = 0x20 */
 571:Src/nRF24.c   ****   {
 572:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 573:Src/nRF24.c   ****     strcpy(message, "nRF24 send status - success -\n");
 574:Src/nRF24.c   ****     serial_print(message);
 575:Src/nRF24.c   ****     #endif
 576:Src/nRF24.c   ****   } 
 577:Src/nRF24.c   ****   else 
 578:Src/nRF24.c   ****   {
 579:Src/nRF24.c   ****     #ifdef NRF24_DEBUG
 580:Src/nRF24.c   ****     strcpy(message, "nRF24 send status - failure -\n");
ARM GAS  /tmp/ccI3eitI.s 			page 30


 581:Src/nRF24.c   ****     serial_print(message);
 582:Src/nRF24.c   ****     #endif
 583:Src/nRF24.c   ****   }
 584:Src/nRF24.c   **** 
 585:Src/nRF24.c   ****   /* write 1 to <STATUS> register to clear TX_DS, TX_DS bit is Write-to-Clear. */
 586:Src/nRF24.c   **** 	nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 587:Src/nRF24.c   **** 
 588:Src/nRF24.c   **** 	/* Stop transmission. Returns to [Standby-I]. */
 589:Src/nRF24.c   ****   nRF24_CE_0(); 
 590:Src/nRF24.c   **** }
 591:Src/nRF24.c   **** 
 592:Src/nRF24.c   **** /**
 593:Src/nRF24.c   **** 	* @brief  Configure nRF24L01+ in TX mode without Enhanced ShockBurst.
 594:Src/nRF24.c   **** 	*           Without Enhanced ShockBurst, Auto Acknowledgement and Auto-Retransmission is masked of
 595:Src/nRF24.c   **** 	*           The TX nRF transmit is successful by detecting 1 on TX_DS field in <STATUS> register.
 596:Src/nRF24.c   **** 	*           TX is successful even if there's no presense or acknowledge from an RX nRF.
 597:Src/nRF24.c   **** 	* @param  None.
 598:Src/nRF24.c   **** 	* @retval None.
 599:Src/nRF24.c   **** 	*/
 600:Src/nRF24.c   **** void nRF24_config_normal_tx_mode() 
 601:Src/nRF24.c   **** {
 602:Src/nRF24.c   ****     nRF24_CE_0();
 603:Src/nRF24.c   **** 
 604:Src/nRF24.c   ****     /* Set Address Width as 5 bytes. On the Receiver side, set RX_ADDR_P0 with same value. */
 605:Src/nRF24.c   **** 		nRF24_set_SETUP_AW(SETUP_AW_MASK5bytes);
 606:Src/nRF24.c   ****  
 607:Src/nRF24.c   **** 		/* Set TX address to nRF24. */
 608:Src/nRF24.c   ****     uint8_t TX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  /* 5 byte TX address */
 609:Src/nRF24.c   **** 		nRF24_set_TX_ADDR(5, TX_ADDRESS); 
 610:Src/nRF24.c   **** 
 611:Src/nRF24.c   **** 		/* Disable Auto-Acknowledgement on Pipe 5 - Pipe 0, this also disables Enhanced ShockBurst. */
 612:Src/nRF24.c   **** 		nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA_P
 613:Src/nRF24.c   **** 
 614:Src/nRF24.c   **** 		/* Disable RX on Pipe 5 - Pipe 0. */
 615:Src/nRF24.c   **** 		nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P0_
 616:Src/nRF24.c   **** 
 617:Src/nRF24.c   **** 		/* Disable Auto-Retransmission, this also disables Enhanced ShockBurst. */
 618:Src/nRF24.c   **** 		nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK0);
 619:Src/nRF24.c   **** 
 620:Src/nRF24.c   **** 		/* Set Frquency Channel. Carrier Frequency = 2.4GHz + RF_CH = (2400 + RF_CH) = 2440 MHz. */
 621:Src/nRF24.c   **** 		nRF24_set_RF_CH(40);
 622:Src/nRF24.c   **** 
 623:Src/nRF24.c   **** 		/* Set 'Continuous Carrier Transmit', RF Data Rate, and RF TX Power */
 624:Src/nRF24.c   **** 		nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_HIGH
 625:Src/nRF24.c   **** 	
 626:Src/nRF24.c   **** 		/* Set IRQ Masks, CRC, Power-Up and select RX/TX mode. */
 627:Src/nRF24.c   **** 		nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CRC_
 628:Src/nRF24.c   **** 
 629:Src/nRF24.c   ****     /* CE is not set to 1, nRF24 still stays in [Standby-I] Mode. */
 630:Src/nRF24.c   ****     /* CE = 1 is not activated until we write to TX FIFO so stays in Standby-I mode. */
 631:Src/nRF24.c   **** }
 632:Src/nRF24.c   **** 
 633:Src/nRF24.c   **** /**
 634:Src/nRF24.c   **** 	* @brief  TX (transmit) Mode with Enhanced ShockBurst.
 635:Src/nRF24.c   **** 	* @param  None.
 636:Src/nRF24.c   **** 	* @retval None.
 637:Src/nRF24.c   **** 	* @note   In Enhanced ShockBurst, Auto Acknowledgement and Auto-Retransmission are used to guarant
ARM GAS  /tmp/ccI3eitI.s 			page 31


 638:Src/nRF24.c   **** 	*         Thus used pipe's EN_AA and SETUP_RETR is masked 1.
 639:Src/nRF24.c   **** 	*         The TX nRF transmit is successful by detecting 1 on TX_DS field in <STATUS> register.
 640:Src/nRF24.c   **** 	*         However, trasmit is successful only when an RX nRF, also with Enhanced ShockBurst turned
 641:Src/nRF24.c   **** 	*           send Acknowledgement to the TX nRF.
 642:Src/nRF24.c   **** 	*         The TX nRF, in order to receive that Acknowledgement signal, needs to turn on receive on
 643:Src/nRF24.c   **** 	*/
 644:Src/nRF24.c   **** void nRF24_config_enhanced_shockburst_tx_mode() 
 645:Src/nRF24.c   **** {
 646:Src/nRF24.c   ****     nRF24_CE_0();
 647:Src/nRF24.c   **** 		// nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 648:Src/nRF24.c   **** 
 649:Src/nRF24.c   ****     /* Set TX_ADDR for transmit. On the Receiver side, set RX_ADDR_P0 with same value. */
 650:Src/nRF24.c   **** 		nRF24_set_SETUP_AW(SETUP_AW_MASK5bytes);
 651:Src/nRF24.c   **** 
 652:Src/nRF24.c   ****     uint8_t TX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  
 653:Src/nRF24.c   **** 		nRF24_set_TX_ADDR(5, TX_ADDRESS);
 654:Src/nRF24.c   **** 
 655:Src/nRF24.c   **** 		/* ShockBurst Auto-Acknowledgement: In order to receive hardware-generated ACK from the receiver,
 656:Src/nRF24.c   **** 		nRF24_set_RX_ADDR_P0(5, TX_ADDRESS);
 657:Src/nRF24.c   **** 
 658:Src/nRF24.c   **** 		nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA_P
 659:Src/nRF24.c   **** 		nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P0_
 660:Src/nRF24.c   **** 		nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK10);
 661:Src/nRF24.c   **** 		nRF24_set_RF_CH(40);
 662:Src/nRF24.c   **** 		uint8_t writing_byte = 0x07;
 663:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 664:Src/nRF24.c   **** 		// nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_H
 665:Src/nRF24.c   **** 		nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CRC_
 666:Src/nRF24.c   ****     SPI_DELAY(10);
 667:Src/nRF24.c   **** 
 668:Src/nRF24.c   **** }
 669:Src/nRF24.c   **** 
 670:Src/nRF24.c   **** 
 671:Src/nRF24.c   **** 
 672:Src/nRF24.c   **** 
 673:Src/nRF24.c   **** 
 674:Src/nRF24.c   **** 
 675:Src/nRF24.c   **** 
 676:Src/nRF24.c   **** /**
 677:Src/nRF24.c   ****   * @brief  Print all registers on nRF24. 
 678:Src/nRF24.c   ****   * @param  None.
 679:Src/nRF24.c   ****   * @retval None.
 680:Src/nRF24.c   ****   */
 681:Src/nRF24.c   **** void nRF24_print_all_registers()
 682:Src/nRF24.c   **** {
 1059              		.loc 1 682 0
 1060              		.cfi_startproc
 1061              		@ args = 0, pretend = 0, frame = 40
 1062              		@ frame_needed = 0, uses_anonymous_args = 0
 1063 0000 30B5     		push	{r4, r5, lr}
 1064              	.LCFI23:
 1065              		.cfi_def_cfa_offset 12
 1066              		.cfi_offset 4, -12
 1067              		.cfi_offset 5, -8
 1068              		.cfi_offset 14, -4
 1069 0002 8FB0     		sub	sp, sp, #60
 1070              	.LCFI24:
ARM GAS  /tmp/ccI3eitI.s 			page 32


 1071              		.cfi_def_cfa_offset 72
 683:Src/nRF24.c   ****     uint8_t read_data;
 684:Src/nRF24.c   ****     uint8_t read_buf[4];
 685:Src/nRF24.c   ****     char message[32];
 686:Src/nRF24.c   ****   
 687:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + CONFIG, 1, &read_data);
 1072              		.loc 1 687 0
 1073 0004 0DF13702 		add	r2, sp, #55
 1074 0008 0121     		movs	r1, #1
 1075 000a 0020     		movs	r0, #0
 1076 000c FFF7FEFF 		bl	spi_read_register
 1077              	.LVL105:
 688:Src/nRF24.c   ****     sprintf(message, "CONFIG: <0x%02x>\n", read_data);
 1078              		.loc 1 688 0
 1079 0010 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1080 0014 BD49     		ldr	r1, .L89
 1081 0016 04A8     		add	r0, sp, #16
 1082 0018 FFF7FEFF 		bl	sprintf
 1083              	.LVL106:
 1084              	.LBB114:
 1085              	.LBB115:
 124:Src/nRF24.c   **** }
 1086              		.loc 1 124 0
 1087 001c 04A8     		add	r0, sp, #16
 1088              	.LVL107:
 1089 001e FFF7FEFF 		bl	strlen
 1090              	.LVL108:
 1091 0022 BB4C     		ldr	r4, .L89+4
 1092 0024 6423     		movs	r3, #100
 1093 0026 82B2     		uxth	r2, r0
 1094 0028 04A9     		add	r1, sp, #16
 1095              	.LVL109:
 1096 002a 2046     		mov	r0, r4
 1097 002c FFF7FEFF 		bl	HAL_UART_Transmit
 1098              	.LVL110:
 1099              	.LBE115:
 1100              	.LBE114:
 689:Src/nRF24.c   ****     serial_print(message);
 690:Src/nRF24.c   **** 
 691:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_data);
 1101              		.loc 1 691 0
 1102 0030 0DF13702 		add	r2, sp, #55
 1103 0034 0121     		movs	r1, #1
 1104 0036 0846     		mov	r0, r1
 1105 0038 FFF7FEFF 		bl	spi_read_register
 1106              	.LVL111:
 692:Src/nRF24.c   ****     sprintf(message, "EN_AA: <0x%02x>\n", read_data);
 1107              		.loc 1 692 0
 1108 003c 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1109 0040 B449     		ldr	r1, .L89+8
 1110 0042 04A8     		add	r0, sp, #16
 1111 0044 FFF7FEFF 		bl	sprintf
 1112              	.LVL112:
 1113              	.LBB116:
 1114              	.LBB117:
 124:Src/nRF24.c   **** }
 1115              		.loc 1 124 0
ARM GAS  /tmp/ccI3eitI.s 			page 33


 1116 0048 04A8     		add	r0, sp, #16
 1117              	.LVL113:
 1118 004a FFF7FEFF 		bl	strlen
 1119              	.LVL114:
 1120 004e 6423     		movs	r3, #100
 1121 0050 82B2     		uxth	r2, r0
 1122 0052 04A9     		add	r1, sp, #16
 1123              	.LVL115:
 1124 0054 2046     		mov	r0, r4
 1125 0056 FFF7FEFF 		bl	HAL_UART_Transmit
 1126              	.LVL116:
 1127              	.LBE117:
 1128              	.LBE116:
 693:Src/nRF24.c   ****     serial_print(message);
 694:Src/nRF24.c   **** 
 695:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_data);
 1129              		.loc 1 695 0
 1130 005a 0DF13702 		add	r2, sp, #55
 1131 005e 0121     		movs	r1, #1
 1132 0060 0220     		movs	r0, #2
 1133 0062 FFF7FEFF 		bl	spi_read_register
 1134              	.LVL117:
 696:Src/nRF24.c   ****     sprintf(message, "EN_RXADDR: <0x%02x>\n", read_data);
 1135              		.loc 1 696 0
 1136 0066 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1137 006a AB49     		ldr	r1, .L89+12
 1138 006c 04A8     		add	r0, sp, #16
 1139 006e FFF7FEFF 		bl	sprintf
 1140              	.LVL118:
 1141              	.LBB118:
 1142              	.LBB119:
 124:Src/nRF24.c   **** }
 1143              		.loc 1 124 0
 1144 0072 04A8     		add	r0, sp, #16
 1145              	.LVL119:
 1146 0074 FFF7FEFF 		bl	strlen
 1147              	.LVL120:
 1148 0078 6423     		movs	r3, #100
 1149 007a 82B2     		uxth	r2, r0
 1150 007c 04A9     		add	r1, sp, #16
 1151              	.LVL121:
 1152 007e 2046     		mov	r0, r4
 1153 0080 FFF7FEFF 		bl	HAL_UART_Transmit
 1154              	.LVL122:
 1155              	.LBE119:
 1156              	.LBE118:
 697:Src/nRF24.c   ****     serial_print(message);
 698:Src/nRF24.c   **** 
 699:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_data);
 1157              		.loc 1 699 0
 1158 0084 0DF13702 		add	r2, sp, #55
 1159 0088 0121     		movs	r1, #1
 1160 008a 0320     		movs	r0, #3
 1161 008c FFF7FEFF 		bl	spi_read_register
 1162              	.LVL123:
 700:Src/nRF24.c   ****     sprintf(message, "SETUP_AW: <0x%02x>\n", read_data);
 1163              		.loc 1 700 0
ARM GAS  /tmp/ccI3eitI.s 			page 34


 1164 0090 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1165 0094 A149     		ldr	r1, .L89+16
 1166 0096 04A8     		add	r0, sp, #16
 1167 0098 FFF7FEFF 		bl	sprintf
 1168              	.LVL124:
 1169              	.LBB120:
 1170              	.LBB121:
 124:Src/nRF24.c   **** }
 1171              		.loc 1 124 0
 1172 009c 04A8     		add	r0, sp, #16
 1173              	.LVL125:
 1174 009e FFF7FEFF 		bl	strlen
 1175              	.LVL126:
 1176 00a2 6423     		movs	r3, #100
 1177 00a4 82B2     		uxth	r2, r0
 1178 00a6 04A9     		add	r1, sp, #16
 1179              	.LVL127:
 1180 00a8 2046     		mov	r0, r4
 1181 00aa FFF7FEFF 		bl	HAL_UART_Transmit
 1182              	.LVL128:
 1183              	.LBE121:
 1184              	.LBE120:
 701:Src/nRF24.c   ****     serial_print(message);
 702:Src/nRF24.c   **** 
 703:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_data);
 1185              		.loc 1 703 0
 1186 00ae 0DF13702 		add	r2, sp, #55
 1187 00b2 0121     		movs	r1, #1
 1188 00b4 0420     		movs	r0, #4
 1189 00b6 FFF7FEFF 		bl	spi_read_register
 1190              	.LVL129:
 704:Src/nRF24.c   ****     sprintf(message, "SETUP_RETR: <0x%02x>\n", read_data);
 1191              		.loc 1 704 0
 1192 00ba 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1193 00be 9849     		ldr	r1, .L89+20
 1194 00c0 04A8     		add	r0, sp, #16
 1195 00c2 FFF7FEFF 		bl	sprintf
 1196              	.LVL130:
 1197              	.LBB122:
 1198              	.LBB123:
 124:Src/nRF24.c   **** }
 1199              		.loc 1 124 0
 1200 00c6 04A8     		add	r0, sp, #16
 1201              	.LVL131:
 1202 00c8 FFF7FEFF 		bl	strlen
 1203              	.LVL132:
 1204 00cc 6423     		movs	r3, #100
 1205 00ce 82B2     		uxth	r2, r0
 1206 00d0 04A9     		add	r1, sp, #16
 1207              	.LVL133:
 1208 00d2 2046     		mov	r0, r4
 1209 00d4 FFF7FEFF 		bl	HAL_UART_Transmit
 1210              	.LVL134:
 1211              	.LBE123:
 1212              	.LBE122:
 705:Src/nRF24.c   ****     serial_print(message);
 706:Src/nRF24.c   **** 
ARM GAS  /tmp/ccI3eitI.s 			page 35


 707:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_data);
 1213              		.loc 1 707 0
 1214 00d8 0DF13702 		add	r2, sp, #55
 1215 00dc 0121     		movs	r1, #1
 1216 00de 0520     		movs	r0, #5
 1217 00e0 FFF7FEFF 		bl	spi_read_register
 1218              	.LVL135:
 708:Src/nRF24.c   ****     sprintf(message, "RF_CH: <0x%02x>\n", read_data);
 1219              		.loc 1 708 0
 1220 00e4 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1221 00e8 8E49     		ldr	r1, .L89+24
 1222 00ea 04A8     		add	r0, sp, #16
 1223 00ec FFF7FEFF 		bl	sprintf
 1224              	.LVL136:
 1225              	.LBB124:
 1226              	.LBB125:
 124:Src/nRF24.c   **** }
 1227              		.loc 1 124 0
 1228 00f0 04A8     		add	r0, sp, #16
 1229              	.LVL137:
 1230 00f2 FFF7FEFF 		bl	strlen
 1231              	.LVL138:
 1232 00f6 6423     		movs	r3, #100
 1233 00f8 82B2     		uxth	r2, r0
 1234 00fa 04A9     		add	r1, sp, #16
 1235              	.LVL139:
 1236 00fc 2046     		mov	r0, r4
 1237 00fe FFF7FEFF 		bl	HAL_UART_Transmit
 1238              	.LVL140:
 1239              	.LBE125:
 1240              	.LBE124:
 709:Src/nRF24.c   ****     serial_print(message);
 710:Src/nRF24.c   **** 
 711:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_data);
 1241              		.loc 1 711 0
 1242 0102 0DF13702 		add	r2, sp, #55
 1243 0106 0121     		movs	r1, #1
 1244 0108 0620     		movs	r0, #6
 1245 010a FFF7FEFF 		bl	spi_read_register
 1246              	.LVL141:
 712:Src/nRF24.c   ****     sprintf(message, "RF_SETUP: <0x%02x>\n", read_data);
 1247              		.loc 1 712 0
 1248 010e 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1249 0112 8549     		ldr	r1, .L89+28
 1250 0114 04A8     		add	r0, sp, #16
 1251 0116 FFF7FEFF 		bl	sprintf
 1252              	.LVL142:
 1253              	.LBB126:
 1254              	.LBB127:
 124:Src/nRF24.c   **** }
 1255              		.loc 1 124 0
 1256 011a 04A8     		add	r0, sp, #16
 1257              	.LVL143:
 1258 011c FFF7FEFF 		bl	strlen
 1259              	.LVL144:
 1260 0120 6423     		movs	r3, #100
 1261 0122 82B2     		uxth	r2, r0
ARM GAS  /tmp/ccI3eitI.s 			page 36


 1262 0124 04A9     		add	r1, sp, #16
 1263              	.LVL145:
 1264 0126 2046     		mov	r0, r4
 1265 0128 FFF7FEFF 		bl	HAL_UART_Transmit
 1266              	.LVL146:
 1267              	.LBE127:
 1268              	.LBE126:
 713:Src/nRF24.c   ****     serial_print(message);
 714:Src/nRF24.c   **** 
 715:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + STATUS, 1, &read_data);
 1269              		.loc 1 715 0
 1270 012c 0DF13702 		add	r2, sp, #55
 1271 0130 0121     		movs	r1, #1
 1272 0132 0720     		movs	r0, #7
 1273 0134 FFF7FEFF 		bl	spi_read_register
 1274              	.LVL147:
 716:Src/nRF24.c   ****     sprintf(message, "STATUS: <0x%02x>\n", read_data);
 1275              		.loc 1 716 0
 1276 0138 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1277 013c 7B49     		ldr	r1, .L89+32
 1278 013e 04A8     		add	r0, sp, #16
 1279 0140 FFF7FEFF 		bl	sprintf
 1280              	.LVL148:
 1281              	.LBB128:
 1282              	.LBB129:
 124:Src/nRF24.c   **** }
 1283              		.loc 1 124 0
 1284 0144 04A8     		add	r0, sp, #16
 1285              	.LVL149:
 1286 0146 FFF7FEFF 		bl	strlen
 1287              	.LVL150:
 1288 014a 6423     		movs	r3, #100
 1289 014c 82B2     		uxth	r2, r0
 1290 014e 04A9     		add	r1, sp, #16
 1291              	.LVL151:
 1292 0150 2046     		mov	r0, r4
 1293 0152 FFF7FEFF 		bl	HAL_UART_Transmit
 1294              	.LVL152:
 1295              	.LBE129:
 1296              	.LBE128:
 717:Src/nRF24.c   ****     serial_print(message);
 718:Src/nRF24.c   **** 
 719:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, 5, read_buf);
 1297              		.loc 1 719 0
 1298 0156 0CAA     		add	r2, sp, #48
 1299 0158 0521     		movs	r1, #5
 1300 015a 0A20     		movs	r0, #10
 1301 015c FFF7FEFF 		bl	spi_read_register
 1302              	.LVL153:
 720:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P0: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1303              		.loc 1 720 0
 1304 0160 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1305 0164 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1306 0168 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1307 016c 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1308 0170 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1309 0174 0295     		str	r5, [sp, #8]
ARM GAS  /tmp/ccI3eitI.s 			page 37


 1310 0176 0190     		str	r0, [sp, #4]
 1311 0178 0091     		str	r1, [sp]
 1312 017a 6D49     		ldr	r1, .L89+36
 1313 017c 04A8     		add	r0, sp, #16
 1314 017e FFF7FEFF 		bl	sprintf
 1315              	.LVL154:
 1316              	.LBB130:
 1317              	.LBB131:
 124:Src/nRF24.c   **** }
 1318              		.loc 1 124 0
 1319 0182 04A8     		add	r0, sp, #16
 1320              	.LVL155:
 1321 0184 FFF7FEFF 		bl	strlen
 1322              	.LVL156:
 1323 0188 6423     		movs	r3, #100
 1324 018a 82B2     		uxth	r2, r0
 1325 018c 04A9     		add	r1, sp, #16
 1326              	.LVL157:
 1327 018e 2046     		mov	r0, r4
 1328 0190 FFF7FEFF 		bl	HAL_UART_Transmit
 1329              	.LVL158:
 1330              	.LBE131:
 1331              	.LBE130:
 721:Src/nRF24.c   ****     serial_print(message);
 722:Src/nRF24.c   **** 
 723:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, 5, read_buf);
 1332              		.loc 1 723 0
 1333 0194 0CAA     		add	r2, sp, #48
 1334 0196 0521     		movs	r1, #5
 1335 0198 0B20     		movs	r0, #11
 1336 019a FFF7FEFF 		bl	spi_read_register
 1337              	.LVL159:
 724:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P1: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1338              		.loc 1 724 0
 1339 019e 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1340 01a2 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1341 01a6 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1342 01aa 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1343 01ae 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1344 01b2 0295     		str	r5, [sp, #8]
 1345 01b4 0190     		str	r0, [sp, #4]
 1346 01b6 0091     		str	r1, [sp]
 1347 01b8 5E49     		ldr	r1, .L89+40
 1348 01ba 04A8     		add	r0, sp, #16
 1349 01bc FFF7FEFF 		bl	sprintf
 1350              	.LVL160:
 1351              	.LBB132:
 1352              	.LBB133:
 124:Src/nRF24.c   **** }
 1353              		.loc 1 124 0
 1354 01c0 04A8     		add	r0, sp, #16
 1355              	.LVL161:
 1356 01c2 FFF7FEFF 		bl	strlen
 1357              	.LVL162:
 1358 01c6 6423     		movs	r3, #100
 1359 01c8 82B2     		uxth	r2, r0
 1360 01ca 04A9     		add	r1, sp, #16
ARM GAS  /tmp/ccI3eitI.s 			page 38


 1361              	.LVL163:
 1362 01cc 2046     		mov	r0, r4
 1363 01ce FFF7FEFF 		bl	HAL_UART_Transmit
 1364              	.LVL164:
 1365              	.LBE133:
 1366              	.LBE132:
 725:Src/nRF24.c   ****     serial_print(message);
 726:Src/nRF24.c   **** 
 727:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, 5, read_buf);
 1367              		.loc 1 727 0
 1368 01d2 0CAA     		add	r2, sp, #48
 1369 01d4 0521     		movs	r1, #5
 1370 01d6 0C20     		movs	r0, #12
 1371 01d8 FFF7FEFF 		bl	spi_read_register
 1372              	.LVL165:
 728:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P2: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1373              		.loc 1 728 0
 1374 01dc 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1375 01e0 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1376 01e4 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1377 01e8 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1378 01ec 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1379 01f0 0295     		str	r5, [sp, #8]
 1380 01f2 0190     		str	r0, [sp, #4]
 1381 01f4 0091     		str	r1, [sp]
 1382 01f6 5049     		ldr	r1, .L89+44
 1383 01f8 04A8     		add	r0, sp, #16
 1384 01fa FFF7FEFF 		bl	sprintf
 1385              	.LVL166:
 1386              	.LBB134:
 1387              	.LBB135:
 124:Src/nRF24.c   **** }
 1388              		.loc 1 124 0
 1389 01fe 04A8     		add	r0, sp, #16
 1390              	.LVL167:
 1391 0200 FFF7FEFF 		bl	strlen
 1392              	.LVL168:
 1393 0204 6423     		movs	r3, #100
 1394 0206 82B2     		uxth	r2, r0
 1395 0208 04A9     		add	r1, sp, #16
 1396              	.LVL169:
 1397 020a 2046     		mov	r0, r4
 1398 020c FFF7FEFF 		bl	HAL_UART_Transmit
 1399              	.LVL170:
 1400              	.LBE135:
 1401              	.LBE134:
 729:Src/nRF24.c   ****     serial_print(message);
 730:Src/nRF24.c   **** 
 731:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, 5, read_buf);
 1402              		.loc 1 731 0
 1403 0210 0CAA     		add	r2, sp, #48
 1404 0212 0521     		movs	r1, #5
 1405 0214 0D20     		movs	r0, #13
 1406 0216 FFF7FEFF 		bl	spi_read_register
 1407              	.LVL171:
 732:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P3: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1408              		.loc 1 732 0
ARM GAS  /tmp/ccI3eitI.s 			page 39


 1409 021a 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1410 021e 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1411 0222 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1412 0226 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1413 022a 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1414 022e 0295     		str	r5, [sp, #8]
 1415 0230 0190     		str	r0, [sp, #4]
 1416 0232 0091     		str	r1, [sp]
 1417 0234 4149     		ldr	r1, .L89+48
 1418 0236 04A8     		add	r0, sp, #16
 1419 0238 FFF7FEFF 		bl	sprintf
 1420              	.LVL172:
 1421              	.LBB136:
 1422              	.LBB137:
 124:Src/nRF24.c   **** }
 1423              		.loc 1 124 0
 1424 023c 04A8     		add	r0, sp, #16
 1425              	.LVL173:
 1426 023e FFF7FEFF 		bl	strlen
 1427              	.LVL174:
 1428 0242 6423     		movs	r3, #100
 1429 0244 82B2     		uxth	r2, r0
 1430 0246 04A9     		add	r1, sp, #16
 1431              	.LVL175:
 1432 0248 2046     		mov	r0, r4
 1433 024a FFF7FEFF 		bl	HAL_UART_Transmit
 1434              	.LVL176:
 1435              	.LBE137:
 1436              	.LBE136:
 733:Src/nRF24.c   ****     serial_print(message);
 734:Src/nRF24.c   **** 
 735:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, 5, read_buf);
 1437              		.loc 1 735 0
 1438 024e 0CAA     		add	r2, sp, #48
 1439 0250 0521     		movs	r1, #5
 1440 0252 0E20     		movs	r0, #14
 1441 0254 FFF7FEFF 		bl	spi_read_register
 1442              	.LVL177:
 736:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P4: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1443              		.loc 1 736 0
 1444 0258 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1445 025c 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1446 0260 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1447 0264 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1448 0268 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1449 026c 0295     		str	r5, [sp, #8]
 1450 026e 0190     		str	r0, [sp, #4]
 1451 0270 0091     		str	r1, [sp]
 1452 0272 3349     		ldr	r1, .L89+52
 1453 0274 04A8     		add	r0, sp, #16
 1454 0276 FFF7FEFF 		bl	sprintf
 1455              	.LVL178:
 1456              	.LBB138:
 1457              	.LBB139:
 124:Src/nRF24.c   **** }
 1458              		.loc 1 124 0
 1459 027a 04A8     		add	r0, sp, #16
ARM GAS  /tmp/ccI3eitI.s 			page 40


 1460              	.LVL179:
 1461 027c FFF7FEFF 		bl	strlen
 1462              	.LVL180:
 1463 0280 6423     		movs	r3, #100
 1464 0282 82B2     		uxth	r2, r0
 1465 0284 04A9     		add	r1, sp, #16
 1466              	.LVL181:
 1467 0286 2046     		mov	r0, r4
 1468 0288 FFF7FEFF 		bl	HAL_UART_Transmit
 1469              	.LVL182:
 1470              	.LBE139:
 1471              	.LBE138:
 737:Src/nRF24.c   ****     serial_print(message);
 738:Src/nRF24.c   **** 
 739:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + RX_PW_P5, 5, read_buf);
 1472              		.loc 1 739 0
 1473 028c 0CAA     		add	r2, sp, #48
 1474 028e 0521     		movs	r1, #5
 1475 0290 1620     		movs	r0, #22
 1476 0292 FFF7FEFF 		bl	spi_read_register
 1477              	.LVL183:
 740:Src/nRF24.c   ****     sprintf(message, "RX_ADDR_P5: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1478              		.loc 1 740 0
 1479 0296 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1480 029a 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1481 029e 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1482 02a2 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1483 02a6 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1484 02aa 0295     		str	r5, [sp, #8]
 1485 02ac 0190     		str	r0, [sp, #4]
 1486 02ae 0091     		str	r1, [sp]
 1487 02b0 2449     		ldr	r1, .L89+56
 1488 02b2 04A8     		add	r0, sp, #16
 1489 02b4 FFF7FEFF 		bl	sprintf
 1490              	.LVL184:
 1491              	.LBB140:
 1492              	.LBB141:
 124:Src/nRF24.c   **** }
 1493              		.loc 1 124 0
 1494 02b8 04A8     		add	r0, sp, #16
 1495              	.LVL185:
 1496 02ba FFF7FEFF 		bl	strlen
 1497              	.LVL186:
 1498 02be 6423     		movs	r3, #100
 1499 02c0 82B2     		uxth	r2, r0
 1500 02c2 04A9     		add	r1, sp, #16
 1501              	.LVL187:
 1502 02c4 2046     		mov	r0, r4
 1503 02c6 FFF7FEFF 		bl	HAL_UART_Transmit
 1504              	.LVL188:
 1505              	.LBE141:
 1506              	.LBE140:
 741:Src/nRF24.c   ****     serial_print(message);
 742:Src/nRF24.c   **** 
 743:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + TX_ADDR, 5, read_buf);
 1507              		.loc 1 743 0
 1508 02ca 0CAA     		add	r2, sp, #48
ARM GAS  /tmp/ccI3eitI.s 			page 41


 1509 02cc 0521     		movs	r1, #5
 1510 02ce 1020     		movs	r0, #16
 1511 02d0 FFF7FEFF 		bl	spi_read_register
 1512              	.LVL189:
 744:Src/nRF24.c   ****     sprintf(message, "TX_ADDR: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_b
 1513              		.loc 1 744 0
 1514 02d4 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1515 02d8 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1516 02dc 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1517 02e0 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1518 02e4 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1519 02e8 0295     		str	r5, [sp, #8]
 1520 02ea 0190     		str	r0, [sp, #4]
 1521 02ec 0091     		str	r1, [sp]
 1522 02ee 1649     		ldr	r1, .L89+60
 1523 02f0 04A8     		add	r0, sp, #16
 1524 02f2 FFF7FEFF 		bl	sprintf
 1525              	.LVL190:
 1526              	.LBB142:
 1527              	.LBB143:
 124:Src/nRF24.c   **** }
 1528              		.loc 1 124 0
 1529 02f6 04A8     		add	r0, sp, #16
 1530              	.LVL191:
 1531 02f8 FFF7FEFF 		bl	strlen
 1532              	.LVL192:
 1533 02fc 6423     		movs	r3, #100
 1534 02fe 82B2     		uxth	r2, r0
 1535 0300 04A9     		add	r1, sp, #16
 1536              	.LVL193:
 1537 0302 2046     		mov	r0, r4
 1538 0304 FFF7FEFF 		bl	HAL_UART_Transmit
 1539              	.LVL194:
 1540              	.LBE143:
 1541              	.LBE142:
 745:Src/nRF24.c   ****     serial_print(message);
 746:Src/nRF24.c   **** 
 747:Src/nRF24.c   **** }
 1542              		.loc 1 747 0
 1543 0308 0FB0     		add	sp, sp, #60
 1544              	.LCFI25:
 1545              		.cfi_def_cfa_offset 12
 1546              		@ sp needed
 1547 030a 30BD     		pop	{r4, r5, pc}
 1548              	.L90:
 1549              		.align	2
 1550              	.L89:
 1551 030c 00000000 		.word	.LC6
 1552 0310 00000000 		.word	huart2
 1553 0314 14000000 		.word	.LC7
 1554 0318 28000000 		.word	.LC8
 1555 031c 40000000 		.word	.LC9
 1556 0320 54000000 		.word	.LC10
 1557 0324 6C000000 		.word	.LC11
 1558 0328 80000000 		.word	.LC12
 1559 032c 94000000 		.word	.LC13
 1560 0330 A8000000 		.word	.LC14
ARM GAS  /tmp/ccI3eitI.s 			page 42


 1561 0334 D8000000 		.word	.LC15
 1562 0338 08010000 		.word	.LC16
 1563 033c 38010000 		.word	.LC17
 1564 0340 68010000 		.word	.LC18
 1565 0344 98010000 		.word	.LC19
 1566 0348 C8010000 		.word	.LC20
 1567              		.cfi_endproc
 1568              	.LFE152:
 1570              		.section	.text.nRF24_set_CONFIG,"ax",%progbits
 1571              		.align	1
 1572              		.global	nRF24_set_CONFIG
 1573              		.syntax unified
 1574              		.thumb
 1575              		.thumb_func
 1576              		.fpu fpv4-sp-d16
 1578              	nRF24_set_CONFIG:
 1579              	.LFB153:
 748:Src/nRF24.c   **** 
 749:Src/nRF24.c   **** 
 750:Src/nRF24.c   **** /* Following Function Provides High Level Access to nRF24L01+ registers. --------------------------
 751:Src/nRF24.c   **** 
 752:Src/nRF24.c   **** /**
 753:Src/nRF24.c   ****   * @brief  nRF24 set <CONFIG> register
 754:Src/nRF24.c   ****   * @param  mask_rx_dr Mask interrupt caused by RX_IDR. [ MASK_RX_DR_MASK1 | MASK_RX_DR_MASK0 | MAS
 755:Src/nRF24.c   ****   * @param  mask_tx_ds Mask interrupt caused by TX_DS.  [ MASK_TX_DS_MASK1 | MASK_TX_DS_MASK0 | MAS
 756:Src/nRF24.c   ****   * @param  mask_max_rt Mask interrupt cause by MAX_RT. [ MASK_MAX_RT_MASK1 | MASK_MAX_RT_MASK0 | M
 757:Src/nRF24.c   ****   * @param  en_crc Enable CRC. [ EN_CRC_MASK1 | EN_CRC_MASK0 | EN_CRC_MASKDEFAULT ]
 758:Src/nRF24.c   ****   * @param  crco CRC encoding scheme. [ CRCO_MASK1 | CRCO_MASK0 | CRCO_MASKDEFAULT ]
 759:Src/nRF24.c   ****   * @param  pwr_up Power Up / Down. [ PWR_UP_MASK1 | PWR_UP_MASK0 | PWR_UP_MASKDEFAULT ]
 760:Src/nRF24.c   ****   * @param  prim_rx RX/TX control. [ PRIM_RX_MASK1 | PRIM_RX_MASK0 | PRIM_RX_MASKDEFAULT ]
 761:Src/nRF24.c   ****   * @retval None.
 762:Src/nRF24.c   ****   */
 763:Src/nRF24.c   **** void nRF24_set_CONFIG(uint8_t mask_rx_dr, uint8_t mask_tx_ds, uint8_t mask_max_rt, uint8_t en_crc, 
 764:Src/nRF24.c   **** {
 1580              		.loc 1 764 0
 1581              		.cfi_startproc
 1582              		@ args = 12, pretend = 0, frame = 8
 1583              		@ frame_needed = 0, uses_anonymous_args = 0
 1584              	.LVL195:
 1585 0000 00B5     		push	{lr}
 1586              	.LCFI26:
 1587              		.cfi_def_cfa_offset 4
 1588              		.cfi_offset 14, -4
 1589 0002 83B0     		sub	sp, sp, #12
 1590              	.LCFI27:
 1591              		.cfi_def_cfa_offset 16
 765:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 766:Src/nRF24.c   ****   writing_byte |= mask_rx_dr | mask_tx_ds | mask_max_rt | en_crc | crco | pwr_up | prim_rx; 
 1592              		.loc 1 766 0
 1593 0004 0143     		orrs	r1, r1, r0
 1594              	.LVL196:
 1595 0006 1143     		orrs	r1, r1, r2
 1596 0008 1943     		orrs	r1, r1, r3
 1597 000a 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 1598              	.LVL197:
 1599 000e 1943     		orrs	r1, r1, r3
 1600 0010 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccI3eitI.s 			page 43


 1601 0014 0B43     		orrs	r3, r3, r1
 1602 0016 9DF81810 		ldrb	r1, [sp, #24]	@ zero_extendqisi2
 1603 001a 1943     		orrs	r1, r1, r3
 1604 001c 02AA     		add	r2, sp, #8
 1605              	.LVL198:
 1606 001e 02F8011D 		strb	r1, [r2, #-1]!
 767:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);
 1607              		.loc 1 767 0
 1608 0022 0121     		movs	r1, #1
 1609 0024 2020     		movs	r0, #32
 1610              	.LVL199:
 1611 0026 FFF7FEFF 		bl	nRF24_verified_write_register
 1612              	.LVL200:
 768:Src/nRF24.c   **** }
 1613              		.loc 1 768 0
 1614 002a 03B0     		add	sp, sp, #12
 1615              	.LCFI28:
 1616              		.cfi_def_cfa_offset 4
 1617              		@ sp needed
 1618 002c 5DF804FB 		ldr	pc, [sp], #4
 1619              		.cfi_endproc
 1620              	.LFE153:
 1622              		.section	.text.nRF24_get_CONFIG,"ax",%progbits
 1623              		.align	1
 1624              		.global	nRF24_get_CONFIG
 1625              		.syntax unified
 1626              		.thumb
 1627              		.thumb_func
 1628              		.fpu fpv4-sp-d16
 1630              	nRF24_get_CONFIG:
 1631              	.LFB154:
 769:Src/nRF24.c   **** 
 770:Src/nRF24.c   **** 
 771:Src/nRF24.c   **** /**
 772:Src/nRF24.c   ****   * @brief      Read <CONFIG> register from nRF24L01+.
 773:Src/nRF24.c   ****   * @param      None.
 774:Src/nRF24.c   ****   * @retval     <CONFIG> register value.
 775:Src/nRF24.c   ****   */
 776:Src/nRF24.c   **** uint8_t nRF24_get_CONFIG() 
 777:Src/nRF24.c   **** {
 1632              		.loc 1 777 0
 1633              		.cfi_startproc
 1634              		@ args = 0, pretend = 0, frame = 8
 1635              		@ frame_needed = 0, uses_anonymous_args = 0
 1636 0000 00B5     		push	{lr}
 1637              	.LCFI29:
 1638              		.cfi_def_cfa_offset 4
 1639              		.cfi_offset 14, -4
 1640 0002 83B0     		sub	sp, sp, #12
 1641              	.LCFI30:
 1642              		.cfi_def_cfa_offset 16
 778:Src/nRF24.c   ****   uint8_t config_reg;
 779:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + CONFIG, 1, &config_reg);
 1643              		.loc 1 779 0
 1644 0004 0DF10702 		add	r2, sp, #7
 1645 0008 0121     		movs	r1, #1
 1646 000a 0020     		movs	r0, #0
ARM GAS  /tmp/ccI3eitI.s 			page 44


 1647 000c FFF7FEFF 		bl	spi_read_register
 1648              	.LVL201:
 780:Src/nRF24.c   ****   return config_reg;
 781:Src/nRF24.c   **** }
 1649              		.loc 1 781 0
 1650 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1651 0014 03B0     		add	sp, sp, #12
 1652              	.LCFI31:
 1653              		.cfi_def_cfa_offset 4
 1654              		@ sp needed
 1655 0016 5DF804FB 		ldr	pc, [sp], #4
 1656              		.cfi_endproc
 1657              	.LFE154:
 1659              		.section	.text.nRF24_set_EN_AA,"ax",%progbits
 1660              		.align	1
 1661              		.global	nRF24_set_EN_AA
 1662              		.syntax unified
 1663              		.thumb
 1664              		.thumb_func
 1665              		.fpu fpv4-sp-d16
 1667              	nRF24_set_EN_AA:
 1668              	.LFB155:
 782:Src/nRF24.c   **** 
 783:Src/nRF24.c   **** 
 784:Src/nRF24.c   **** /**
 785:Src/nRF24.c   ****   * @brief  nRF24 set <EN_AA> register
 786:Src/nRF24.c   ****   * @param  enaa_p5 Enable auto acknowledgement in data pipe 5. [ ENAA_P5_MASK1 | ENAA_P5_MASK0 | E
 787:Src/nRF24.c   ****   * @param  enaa_p4 Enable auto acknowledgement in data pipe 4. [ ENAA_P4_MASK1 | ENAA_P4_MASK0 | E
 788:Src/nRF24.c   ****   * @param  enaa_p3 Enable auto acknowledgement in data pipe 3. [ ENAA_P3_MASK1 | ENAA_P3_MASK0 | E
 789:Src/nRF24.c   ****   * @param  enaa_p2 Enable auto acknowledgement in data pipe 2. [ ENAA_P2_MASK1 | ENAA_P2_MASK0 | E
 790:Src/nRF24.c   ****   * @param  enaa_p1 Enable auto acknowledgement in data pipe 1. [ ENAA_P1_MASK1 | ENAA_P1_MASK0 | E
 791:Src/nRF24.c   ****   * @param  enaa_p0 Enable auto acknowledgement in data pipe 0. [ ENAA_P0_MASK1 | ENAA_P0_MASK0 | E
 792:Src/nRF24.c   ****   * @retval None.
 793:Src/nRF24.c   ****   */
 794:Src/nRF24.c   **** void nRF24_set_EN_AA(uint8_t enaa_p5, uint8_t enaa_p4, uint8_t enaa_p3, uint8_t enaa_p2, uint8_t en
 795:Src/nRF24.c   **** {
 1669              		.loc 1 795 0
 1670              		.cfi_startproc
 1671              		@ args = 8, pretend = 0, frame = 8
 1672              		@ frame_needed = 0, uses_anonymous_args = 0
 1673              	.LVL202:
 1674 0000 00B5     		push	{lr}
 1675              	.LCFI32:
 1676              		.cfi_def_cfa_offset 4
 1677              		.cfi_offset 14, -4
 1678 0002 83B0     		sub	sp, sp, #12
 1679              	.LCFI33:
 1680              		.cfi_def_cfa_offset 16
 796:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 797:Src/nRF24.c   ****   writing_byte |= enaa_p5 | enaa_p4 | enaa_p3 | enaa_p2 | enaa_p1 | enaa_p0;
 1681              		.loc 1 797 0
 1682 0004 0143     		orrs	r1, r1, r0
 1683              	.LVL203:
 1684 0006 1143     		orrs	r1, r1, r2
 1685 0008 1943     		orrs	r1, r1, r3
 1686 000a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 1687              	.LVL204:
ARM GAS  /tmp/ccI3eitI.s 			page 45


 1688 000e 0A43     		orrs	r2, r2, r1
 1689 0010 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 1690 0014 1143     		orrs	r1, r1, r2
 1691 0016 02AA     		add	r2, sp, #8
 1692 0018 02F8011D 		strb	r1, [r2, #-1]!
 798:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);
 1693              		.loc 1 798 0
 1694 001c 0121     		movs	r1, #1
 1695 001e 2120     		movs	r0, #33
 1696              	.LVL205:
 1697 0020 FFF7FEFF 		bl	nRF24_verified_write_register
 1698              	.LVL206:
 799:Src/nRF24.c   **** }
 1699              		.loc 1 799 0
 1700 0024 03B0     		add	sp, sp, #12
 1701              	.LCFI34:
 1702              		.cfi_def_cfa_offset 4
 1703              		@ sp needed
 1704 0026 5DF804FB 		ldr	pc, [sp], #4
 1705              		.cfi_endproc
 1706              	.LFE155:
 1708              		.section	.text.nRF24_get_EN_AA,"ax",%progbits
 1709              		.align	1
 1710              		.global	nRF24_get_EN_AA
 1711              		.syntax unified
 1712              		.thumb
 1713              		.thumb_func
 1714              		.fpu fpv4-sp-d16
 1716              	nRF24_get_EN_AA:
 1717              	.LFB156:
 800:Src/nRF24.c   **** 
 801:Src/nRF24.c   **** /**
 802:Src/nRF24.c   ****   * @brief      Read <EN_AA> register from nRF24L01+.
 803:Src/nRF24.c   ****   * @param      None.
 804:Src/nRF24.c   ****   * @retval     <EN_AA> register value.
 805:Src/nRF24.c   ****   */
 806:Src/nRF24.c   **** uint8_t nRF24_get_EN_AA() 
 807:Src/nRF24.c   **** {
 1718              		.loc 1 807 0
 1719              		.cfi_startproc
 1720              		@ args = 0, pretend = 0, frame = 8
 1721              		@ frame_needed = 0, uses_anonymous_args = 0
 1722 0000 00B5     		push	{lr}
 1723              	.LCFI35:
 1724              		.cfi_def_cfa_offset 4
 1725              		.cfi_offset 14, -4
 1726 0002 83B0     		sub	sp, sp, #12
 1727              	.LCFI36:
 1728              		.cfi_def_cfa_offset 16
 808:Src/nRF24.c   ****   uint8_t read_byte;
 809:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_byte);
 1729              		.loc 1 809 0
 1730 0004 0DF10702 		add	r2, sp, #7
 1731 0008 0121     		movs	r1, #1
 1732 000a 0846     		mov	r0, r1
 1733 000c FFF7FEFF 		bl	spi_read_register
 1734              	.LVL207:
ARM GAS  /tmp/ccI3eitI.s 			page 46


 810:Src/nRF24.c   ****   return read_byte;
 811:Src/nRF24.c   **** }
 1735              		.loc 1 811 0
 1736 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1737 0014 03B0     		add	sp, sp, #12
 1738              	.LCFI37:
 1739              		.cfi_def_cfa_offset 4
 1740              		@ sp needed
 1741 0016 5DF804FB 		ldr	pc, [sp], #4
 1742              		.cfi_endproc
 1743              	.LFE156:
 1745              		.section	.text.nRF24_set_EN_RXADDR,"ax",%progbits
 1746              		.align	1
 1747              		.global	nRF24_set_EN_RXADDR
 1748              		.syntax unified
 1749              		.thumb
 1750              		.thumb_func
 1751              		.fpu fpv4-sp-d16
 1753              	nRF24_set_EN_RXADDR:
 1754              	.LFB157:
 812:Src/nRF24.c   **** 
 813:Src/nRF24.c   **** 
 814:Src/nRF24.c   **** /**
 815:Src/nRF24.c   ****   * @brief  nRF24 set <EN_RXADDR> register
 816:Src/nRF24.c   ****   * @param  erx_p5 enable RX in data pipe 5.   [ ERX_P5_MASK1 | ERX_P5_MASK0 | ERX_P5_MASKDEFAULT ]
 817:Src/nRF24.c   ****   * @param  erx_p4 enable RX in data pipe 4.   [ ERX_P4_MASK1 | ERX_P4_MASK0 | ERX_P4_MASKDEFAULT ]
 818:Src/nRF24.c   ****   * @param  erx_p3 enable RX in data pipe 3.   [ ERX_P3_MASK1 | ERX_P3_MASK0 | ERX_P3_MASKDEFAULT ]
 819:Src/nRF24.c   ****   * @param  erx_p2 enable RX in data pipe 2.   [ ERX_P2_MASK1 | ERX_P2_MASK0 | ERX_P2_MASKDEFAULT ]
 820:Src/nRF24.c   ****   * @param  erx_p1 enable RX in data pipe 1.   [ ERX_P1_MASK1 | ERX_P1_MASK0 | ERX_P1_MASKDEFAULT ]
 821:Src/nRF24.c   ****   * @param  erx_p0 enable RX in data pipe 0.   [ ERX_P0_MASK1 | ERX_P0_MASK0 | ERX_P0_MASKDEFAULT ]
 822:Src/nRF24.c   ****   * @retval None.
 823:Src/nRF24.c   ****   */
 824:Src/nRF24.c   **** void nRF24_set_EN_RXADDR(uint8_t erx_p5, uint8_t erx_p4, uint8_t erx_p3, uint8_t erx_p2, uint8_t er
 825:Src/nRF24.c   **** {
 1755              		.loc 1 825 0
 1756              		.cfi_startproc
 1757              		@ args = 8, pretend = 0, frame = 8
 1758              		@ frame_needed = 0, uses_anonymous_args = 0
 1759              	.LVL208:
 1760 0000 00B5     		push	{lr}
 1761              	.LCFI38:
 1762              		.cfi_def_cfa_offset 4
 1763              		.cfi_offset 14, -4
 1764 0002 83B0     		sub	sp, sp, #12
 1765              	.LCFI39:
 1766              		.cfi_def_cfa_offset 16
 826:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 827:Src/nRF24.c   ****   writing_byte |= erx_p5 | erx_p4 | erx_p3 | erx_p2 | erx_p1 | erx_p0;
 1767              		.loc 1 827 0
 1768 0004 0143     		orrs	r1, r1, r0
 1769              	.LVL209:
 1770 0006 1143     		orrs	r1, r1, r2
 1771 0008 1943     		orrs	r1, r1, r3
 1772 000a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 1773              	.LVL210:
 1774 000e 0A43     		orrs	r2, r2, r1
 1775 0010 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
ARM GAS  /tmp/ccI3eitI.s 			page 47


 1776 0014 1143     		orrs	r1, r1, r2
 1777 0016 02AA     		add	r2, sp, #8
 1778 0018 02F8011D 		strb	r1, [r2, #-1]!
 828:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);
 1779              		.loc 1 828 0
 1780 001c 0121     		movs	r1, #1
 1781 001e 2220     		movs	r0, #34
 1782              	.LVL211:
 1783 0020 FFF7FEFF 		bl	nRF24_verified_write_register
 1784              	.LVL212:
 829:Src/nRF24.c   **** }
 1785              		.loc 1 829 0
 1786 0024 03B0     		add	sp, sp, #12
 1787              	.LCFI40:
 1788              		.cfi_def_cfa_offset 4
 1789              		@ sp needed
 1790 0026 5DF804FB 		ldr	pc, [sp], #4
 1791              		.cfi_endproc
 1792              	.LFE157:
 1794              		.section	.text.nRF24_get_EN_RXADDR,"ax",%progbits
 1795              		.align	1
 1796              		.global	nRF24_get_EN_RXADDR
 1797              		.syntax unified
 1798              		.thumb
 1799              		.thumb_func
 1800              		.fpu fpv4-sp-d16
 1802              	nRF24_get_EN_RXADDR:
 1803              	.LFB158:
 830:Src/nRF24.c   **** 
 831:Src/nRF24.c   **** 
 832:Src/nRF24.c   **** /**
 833:Src/nRF24.c   ****   * @brief      Read <EN_RXADDR> register from nRF24L01+.
 834:Src/nRF24.c   ****   * @param      None.
 835:Src/nRF24.c   ****   * @retval     <EN_RXADDR> register value.
 836:Src/nRF24.c   ****   */
 837:Src/nRF24.c   **** uint8_t nRF24_get_EN_RXADDR() 
 838:Src/nRF24.c   **** {
 1804              		.loc 1 838 0
 1805              		.cfi_startproc
 1806              		@ args = 0, pretend = 0, frame = 8
 1807              		@ frame_needed = 0, uses_anonymous_args = 0
 1808 0000 00B5     		push	{lr}
 1809              	.LCFI41:
 1810              		.cfi_def_cfa_offset 4
 1811              		.cfi_offset 14, -4
 1812 0002 83B0     		sub	sp, sp, #12
 1813              	.LCFI42:
 1814              		.cfi_def_cfa_offset 16
 839:Src/nRF24.c   ****   uint8_t read_byte;
 840:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_byte);
 1815              		.loc 1 840 0
 1816 0004 0DF10702 		add	r2, sp, #7
 1817 0008 0121     		movs	r1, #1
 1818 000a 0220     		movs	r0, #2
 1819 000c FFF7FEFF 		bl	spi_read_register
 1820              	.LVL213:
 841:Src/nRF24.c   ****   return read_byte;
ARM GAS  /tmp/ccI3eitI.s 			page 48


 842:Src/nRF24.c   **** }
 1821              		.loc 1 842 0
 1822 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1823 0014 03B0     		add	sp, sp, #12
 1824              	.LCFI43:
 1825              		.cfi_def_cfa_offset 4
 1826              		@ sp needed
 1827 0016 5DF804FB 		ldr	pc, [sp], #4
 1828              		.cfi_endproc
 1829              	.LFE158:
 1831              		.section	.text.nRF24_set_SETUP_AW,"ax",%progbits
 1832              		.align	1
 1833              		.global	nRF24_set_SETUP_AW
 1834              		.syntax unified
 1835              		.thumb
 1836              		.thumb_func
 1837              		.fpu fpv4-sp-d16
 1839              	nRF24_set_SETUP_AW:
 1840              	.LFB159:
 843:Src/nRF24.c   **** 
 844:Src/nRF24.c   **** /**
 845:Src/nRF24.c   ****   * @brief  nRF24 set <AW> register
 846:Src/nRF24.c   ****   * @param  aw Setup of Address Widths. [ AW_MASK3bytes | AW_MASK4bytes | AW_MASK5bytes | AW_MASKDE
 847:Src/nRF24.c   ****   * @retval None.
 848:Src/nRF24.c   ****   */
 849:Src/nRF24.c   **** void nRF24_set_SETUP_AW(uint8_t aw) 
 850:Src/nRF24.c   **** {
 1841              		.loc 1 850 0
 1842              		.cfi_startproc
 1843              		@ args = 0, pretend = 0, frame = 8
 1844              		@ frame_needed = 0, uses_anonymous_args = 0
 1845              	.LVL214:
 1846 0000 00B5     		push	{lr}
 1847              	.LCFI44:
 1848              		.cfi_def_cfa_offset 4
 1849              		.cfi_offset 14, -4
 1850 0002 83B0     		sub	sp, sp, #12
 1851              	.LCFI45:
 1852              		.cfi_def_cfa_offset 16
 851:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 852:Src/nRF24.c   ****   writing_byte |= aw;
 1853              		.loc 1 852 0
 1854 0004 02AA     		add	r2, sp, #8
 1855 0006 02F8010D 		strb	r0, [r2, #-1]!
 853:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_AW, 1, &writing_byte);
 1856              		.loc 1 853 0
 1857 000a 0121     		movs	r1, #1
 1858 000c 2320     		movs	r0, #35
 1859              	.LVL215:
 1860 000e FFF7FEFF 		bl	nRF24_verified_write_register
 1861              	.LVL216:
 854:Src/nRF24.c   **** }
 1862              		.loc 1 854 0
 1863 0012 03B0     		add	sp, sp, #12
 1864              	.LCFI46:
 1865              		.cfi_def_cfa_offset 4
 1866              		@ sp needed
ARM GAS  /tmp/ccI3eitI.s 			page 49


 1867 0014 5DF804FB 		ldr	pc, [sp], #4
 1868              		.cfi_endproc
 1869              	.LFE159:
 1871              		.section	.text.nRF24_get_SETUP_AW,"ax",%progbits
 1872              		.align	1
 1873              		.global	nRF24_get_SETUP_AW
 1874              		.syntax unified
 1875              		.thumb
 1876              		.thumb_func
 1877              		.fpu fpv4-sp-d16
 1879              	nRF24_get_SETUP_AW:
 1880              	.LFB160:
 855:Src/nRF24.c   **** 
 856:Src/nRF24.c   **** /**
 857:Src/nRF24.c   ****   * @brief      Read <SETUP_AW> register from nRF24L01+.
 858:Src/nRF24.c   ****   * @param      None.
 859:Src/nRF24.c   ****   * @retval     <SETUP_AW> register value.
 860:Src/nRF24.c   ****   */
 861:Src/nRF24.c   **** uint8_t nRF24_get_SETUP_AW() 
 862:Src/nRF24.c   **** {
 1881              		.loc 1 862 0
 1882              		.cfi_startproc
 1883              		@ args = 0, pretend = 0, frame = 8
 1884              		@ frame_needed = 0, uses_anonymous_args = 0
 1885 0000 00B5     		push	{lr}
 1886              	.LCFI47:
 1887              		.cfi_def_cfa_offset 4
 1888              		.cfi_offset 14, -4
 1889 0002 83B0     		sub	sp, sp, #12
 1890              	.LCFI48:
 1891              		.cfi_def_cfa_offset 16
 863:Src/nRF24.c   ****   uint8_t read_byte;
 864:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_byte);
 1892              		.loc 1 864 0
 1893 0004 0DF10702 		add	r2, sp, #7
 1894 0008 0121     		movs	r1, #1
 1895 000a 0320     		movs	r0, #3
 1896 000c FFF7FEFF 		bl	spi_read_register
 1897              	.LVL217:
 865:Src/nRF24.c   ****   return read_byte;
 866:Src/nRF24.c   **** }
 1898              		.loc 1 866 0
 1899 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1900 0014 03B0     		add	sp, sp, #12
 1901              	.LCFI49:
 1902              		.cfi_def_cfa_offset 4
 1903              		@ sp needed
 1904 0016 5DF804FB 		ldr	pc, [sp], #4
 1905              		.cfi_endproc
 1906              	.LFE160:
 1908              		.section	.text.nRF24_set_SETUP_RETR,"ax",%progbits
 1909              		.align	1
 1910              		.global	nRF24_set_SETUP_RETR
 1911              		.syntax unified
 1912              		.thumb
 1913              		.thumb_func
 1914              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccI3eitI.s 			page 50


 1916              	nRF24_set_SETUP_RETR:
 1917              	.LFB161:
 867:Src/nRF24.c   **** 
 868:Src/nRF24.c   **** /**
 869:Src/nRF24.c   ****   * @brief  nRF24 configure auto-retransmit delay and auto retransmit count.
 870:Src/nRF24.c   ****   * @param  ard Auto-Retransmit Delay
 871:Src/nRF24.c   ****   *   [ ARD_MASK250us  | ARD_MASK500us  | ARD_MASK750us  | ARD_MASK1000us | ARD_MASK1250us        
 872:Src/nRF24.c   ****   *   | ARD_MASK1500us | ARD_MASK1750us | ARD_MASK2000us | ARD_MASK2250us | ARD_MASK2500us        
 873:Src/nRF24.c   ****   *   | ARD_MASK2750us | ARD_MASK3000us | ARD_MASK3250us | ARD_MASK3500us | ARD_MASK3750us        
 874:Src/nRF24.c   ****   *   | ARD_MASK4000us | ARD_MASKDEFAULT ]
 875:Src/nRF24.c   ****   * @param  arc Auto-Retransmit Count
 876:Src/nRF24.c   ****   *    [  ARC_MASK0 | ARC_MASK1 | ARC_MASK2  | ARC_MASK3  | ARC_MASK4  | ARC_MASK5   | ARC_MASK6  |
 877:Src/nRF24.c   ****   *   | ARC_MASK8 | ARC_MASK9 | ARC_MASK10 | ARC_MASK11 | ARC_MASK12 |  ARC_MASK13 | ARC_MASK14 | A
 878:Src/nRF24.c   ****   *   | ARC_MASKDEFAULT ]
 879:Src/nRF24.c   ****   * @retval None.
 880:Src/nRF24.c   ****   */
 881:Src/nRF24.c   **** void nRF24_set_SETUP_RETR(uint8_t ard, uint8_t arc)
 882:Src/nRF24.c   **** {
 1918              		.loc 1 882 0
 1919              		.cfi_startproc
 1920              		@ args = 0, pretend = 0, frame = 8
 1921              		@ frame_needed = 0, uses_anonymous_args = 0
 1922              	.LVL218:
 1923 0000 00B5     		push	{lr}
 1924              	.LCFI50:
 1925              		.cfi_def_cfa_offset 4
 1926              		.cfi_offset 14, -4
 1927 0002 83B0     		sub	sp, sp, #12
 1928              	.LCFI51:
 1929              		.cfi_def_cfa_offset 16
 883:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 884:Src/nRF24.c   ****   writing_byte |= ard | arc;
 1930              		.loc 1 884 0
 1931 0004 0143     		orrs	r1, r1, r0
 1932              	.LVL219:
 1933 0006 02AA     		add	r2, sp, #8
 1934 0008 02F8011D 		strb	r1, [r2, #-1]!
 885:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);
 1935              		.loc 1 885 0
 1936 000c 0121     		movs	r1, #1
 1937 000e 2420     		movs	r0, #36
 1938              	.LVL220:
 1939 0010 FFF7FEFF 		bl	nRF24_verified_write_register
 1940              	.LVL221:
 886:Src/nRF24.c   **** }
 1941              		.loc 1 886 0
 1942 0014 03B0     		add	sp, sp, #12
 1943              	.LCFI52:
 1944              		.cfi_def_cfa_offset 4
 1945              		@ sp needed
 1946 0016 5DF804FB 		ldr	pc, [sp], #4
 1947              		.cfi_endproc
 1948              	.LFE161:
 1950              		.section	.text.nRF24_get_SETUP_RETR,"ax",%progbits
 1951              		.align	1
 1952              		.global	nRF24_get_SETUP_RETR
 1953              		.syntax unified
ARM GAS  /tmp/ccI3eitI.s 			page 51


 1954              		.thumb
 1955              		.thumb_func
 1956              		.fpu fpv4-sp-d16
 1958              	nRF24_get_SETUP_RETR:
 1959              	.LFB162:
 887:Src/nRF24.c   **** 
 888:Src/nRF24.c   **** 
 889:Src/nRF24.c   **** 
 890:Src/nRF24.c   **** /**
 891:Src/nRF24.c   ****   * @brief      Read <SETUP_RETR> register from nRF24L01+.
 892:Src/nRF24.c   ****   * @param      None.
 893:Src/nRF24.c   ****   * @retval     <SETUP_RETR> register value.
 894:Src/nRF24.c   ****   */
 895:Src/nRF24.c   **** uint8_t nRF24_get_SETUP_RETR(uint8_t ARD, uint8_t ARC)
 896:Src/nRF24.c   **** {
 1960              		.loc 1 896 0
 1961              		.cfi_startproc
 1962              		@ args = 0, pretend = 0, frame = 8
 1963              		@ frame_needed = 0, uses_anonymous_args = 0
 1964              	.LVL222:
 1965 0000 00B5     		push	{lr}
 1966              	.LCFI53:
 1967              		.cfi_def_cfa_offset 4
 1968              		.cfi_offset 14, -4
 1969 0002 83B0     		sub	sp, sp, #12
 1970              	.LCFI54:
 1971              		.cfi_def_cfa_offset 16
 897:Src/nRF24.c   ****   uint8_t read_byte;
 898:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_byte);
 1972              		.loc 1 898 0
 1973 0004 0DF10702 		add	r2, sp, #7
 1974 0008 0121     		movs	r1, #1
 1975              	.LVL223:
 1976 000a 0420     		movs	r0, #4
 1977              	.LVL224:
 1978 000c FFF7FEFF 		bl	spi_read_register
 1979              	.LVL225:
 899:Src/nRF24.c   ****   return read_byte;
 900:Src/nRF24.c   **** }
 1980              		.loc 1 900 0
 1981 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1982 0014 03B0     		add	sp, sp, #12
 1983              	.LCFI55:
 1984              		.cfi_def_cfa_offset 4
 1985              		@ sp needed
 1986 0016 5DF804FB 		ldr	pc, [sp], #4
 1987              		.cfi_endproc
 1988              	.LFE162:
 1990              		.section	.text.nRF24_set_RF_CH,"ax",%progbits
 1991              		.align	1
 1992              		.global	nRF24_set_RF_CH
 1993              		.syntax unified
 1994              		.thumb
 1995              		.thumb_func
 1996              		.fpu fpv4-sp-d16
 1998              	nRF24_set_RF_CH:
 1999              	.LFB163:
ARM GAS  /tmp/ccI3eitI.s 			page 52


 901:Src/nRF24.c   **** 
 902:Src/nRF24.c   **** 
 903:Src/nRF24.c   **** 
 904:Src/nRF24.c   **** /**
 905:Src/nRF24.c   ****   * @brief  nRF24 sets the frequency channel of nRF24L01+ operates on.
 906:Src/nRF24.c   ****   * @param  ch Channel. It is basically frequency in MHz. [ RF_CH_MASKDEFAULT ]
 907:Src/nRF24.c   ****   * @retval None.
 908:Src/nRF24.c   ****   * @note   frequency = (2400 + ch) MHz
 909:Src/nRF24.c   ****   */
 910:Src/nRF24.c   **** void nRF24_set_RF_CH(uint8_t ch)
 911:Src/nRF24.c   **** {
 2000              		.loc 1 911 0
 2001              		.cfi_startproc
 2002              		@ args = 0, pretend = 0, frame = 8
 2003              		@ frame_needed = 0, uses_anonymous_args = 0
 2004              	.LVL226:
 2005 0000 00B5     		push	{lr}
 2006              	.LCFI56:
 2007              		.cfi_def_cfa_offset 4
 2008              		.cfi_offset 14, -4
 2009 0002 83B0     		sub	sp, sp, #12
 2010              	.LCFI57:
 2011              		.cfi_def_cfa_offset 16
 912:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 913:Src/nRF24.c   ****   writing_byte |= ch;
 2012              		.loc 1 913 0
 2013 0004 02AA     		add	r2, sp, #8
 2014 0006 02F8010D 		strb	r0, [r2, #-1]!
 914:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RF_CH, 1, &writing_byte);
 2015              		.loc 1 914 0
 2016 000a 0121     		movs	r1, #1
 2017 000c 2520     		movs	r0, #37
 2018              	.LVL227:
 2019 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2020              	.LVL228:
 915:Src/nRF24.c   **** }
 2021              		.loc 1 915 0
 2022 0012 03B0     		add	sp, sp, #12
 2023              	.LCFI58:
 2024              		.cfi_def_cfa_offset 4
 2025              		@ sp needed
 2026 0014 5DF804FB 		ldr	pc, [sp], #4
 2027              		.cfi_endproc
 2028              	.LFE163:
 2030              		.section	.text.nRF24_get_RF_CH,"ax",%progbits
 2031              		.align	1
 2032              		.global	nRF24_get_RF_CH
 2033              		.syntax unified
 2034              		.thumb
 2035              		.thumb_func
 2036              		.fpu fpv4-sp-d16
 2038              	nRF24_get_RF_CH:
 2039              	.LFB164:
 916:Src/nRF24.c   **** 
 917:Src/nRF24.c   **** 
 918:Src/nRF24.c   **** 
 919:Src/nRF24.c   **** /**
ARM GAS  /tmp/ccI3eitI.s 			page 53


 920:Src/nRF24.c   ****   * @brief   Read <RF_CH> register from nRF24L01+.
 921:Src/nRF24.c   ****   * @param   None.
 922:Src/nRF24.c   ****   * @retval  <RF_CH> register value.
 923:Src/nRF24.c   ****   */
 924:Src/nRF24.c   **** uint8_t nRF24_get_RF_CH()
 925:Src/nRF24.c   **** {
 2040              		.loc 1 925 0
 2041              		.cfi_startproc
 2042              		@ args = 0, pretend = 0, frame = 8
 2043              		@ frame_needed = 0, uses_anonymous_args = 0
 2044 0000 00B5     		push	{lr}
 2045              	.LCFI59:
 2046              		.cfi_def_cfa_offset 4
 2047              		.cfi_offset 14, -4
 2048 0002 83B0     		sub	sp, sp, #12
 2049              	.LCFI60:
 2050              		.cfi_def_cfa_offset 16
 926:Src/nRF24.c   ****   uint8_t read_byte;
 927:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_byte);
 2051              		.loc 1 927 0
 2052 0004 0DF10702 		add	r2, sp, #7
 2053 0008 0121     		movs	r1, #1
 2054 000a 0520     		movs	r0, #5
 2055 000c FFF7FEFF 		bl	spi_read_register
 2056              	.LVL229:
 928:Src/nRF24.c   ****   return read_byte;
 929:Src/nRF24.c   **** }
 2057              		.loc 1 929 0
 2058 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2059 0014 03B0     		add	sp, sp, #12
 2060              	.LCFI61:
 2061              		.cfi_def_cfa_offset 4
 2062              		@ sp needed
 2063 0016 5DF804FB 		ldr	pc, [sp], #4
 2064              		.cfi_endproc
 2065              	.LFE164:
 2067              		.section	.text.nRF24_set_RF_SETUP,"ax",%progbits
 2068              		.align	1
 2069              		.global	nRF24_set_RF_SETUP
 2070              		.syntax unified
 2071              		.thumb
 2072              		.thumb_func
 2073              		.fpu fpv4-sp-d16
 2075              	nRF24_set_RF_SETUP:
 2076              	.LFB165:
 930:Src/nRF24.c   **** 
 931:Src/nRF24.c   **** /**
 932:Src/nRF24.c   ****   * @brief nRF24 RF SETUP register configuration. 
 933:Src/nRF24.c   ****   * @param cont_wave Enables continuous carrier transmit when high. [ CONT_WAVE_MASK1 | CONT_WAVE_M
 934:Src/nRF24.c   ****   * @param rf_dr_low Sets RF data rate to 250 kbps. [ RF_DR_LOW_MASK1 | RF_DR_LOW_MASK0 | RF_DR_LOW
 935:Src/nRF24.c   ****   * @param pll_lock (!) TEST-ONLY SIGNAL for Nordic's internal testing purpose. Forces PLL lock sig
 936:Src/nRF24.c   ****   * @param rf_dr_high Select between high speed data rates. This bit is don't care if RF_DR_LOW bit
 937:Src/nRF24.c   ****   *  
 938:Src/nRF24.c   ****   *    [ RF_DR_HIGH_MASK1 | RF_DR_HIGH_MASK0 | RF_DR_HIGH_MASKDEFAULT ]
 939:Src/nRF24.c   ****   *
 940:Src/nRF24.c   ****   * @note Use RF_DR_HIGH_MASKx and RF_DR_LOW_MASKx or you can use the following masks that combines
 941:Src/nRF24.c   ****   *
ARM GAS  /tmp/ccI3eitI.s 			page 54


 942:Src/nRF24.c   ****   *     Encoding for RF data rate: 
 943:Src/nRF24.c   ****   *     {RF_DR_LOW, RF_DR_HIGH}   Data-Rate
 944:Src/nRF24.c   ****   *          0    ,     0            1   Mbps
 945:Src/nRF24.c   ****   *          0    ,     1            2   Mbps
 946:Src/nRF24.c   ****   *          1    ,     0            250 kbps
 947:Src/nRF24.c   ****   *          1    ,     1            Reserved
 948:Src/nRF24.c   ****   *  
 949:Src/nRF24.c   ****   *    [ RF_DR_MASK1Mbps | RF_DR_MASK2Mbps | RF_DR_MASK250kbps ]
 950:Src/nRF24.c   ****   *
 951:Src/nRF24.c   ****   * @param rf_pwr RF Output power in TX mode. [ RF_PWR_MASKNEG18dBm | RF_PWR_MASKNEG12dBm | RF_PWR_
 952:Src/nRF24.c   ****   *                Power
 953:Src/nRF24.c   ****   *         11   -18 dBm
 954:Src/nRF24.c   ****   *         01   -12 dBm
 955:Src/nRF24.c   ****   *         10    -6 dBm
 956:Src/nRF24.c   ****   *         11     0 dBm
 957:Src/nRF24.c   ****   * @retval None.
 958:Src/nRF24.c   ****   */
 959:Src/nRF24.c   **** void nRF24_set_RF_SETUP(uint8_t cont_wave, uint8_t rf_dr_low, uint8_t pll_lock, uint8_t rf_dr_high,
 960:Src/nRF24.c   **** {
 2077              		.loc 1 960 0
 2078              		.cfi_startproc
 2079              		@ args = 4, pretend = 0, frame = 8
 2080              		@ frame_needed = 0, uses_anonymous_args = 0
 2081              	.LVL230:
 2082 0000 00B5     		push	{lr}
 2083              	.LCFI62:
 2084              		.cfi_def_cfa_offset 4
 2085              		.cfi_offset 14, -4
 2086 0002 83B0     		sub	sp, sp, #12
 2087              	.LCFI63:
 2088              		.cfi_def_cfa_offset 16
 961:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 962:Src/nRF24.c   ****   writing_byte |= cont_wave | rf_dr_low | pll_lock | rf_dr_high | rf_pwr;
 2089              		.loc 1 962 0
 2090 0004 0143     		orrs	r1, r1, r0
 2091              	.LVL231:
 2092 0006 1143     		orrs	r1, r1, r2
 2093 0008 1943     		orrs	r1, r1, r3
 2094 000a 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2095              	.LVL232:
 2096 000e 1943     		orrs	r1, r1, r3
 2097 0010 02AA     		add	r2, sp, #8
 2098              	.LVL233:
 2099 0012 02F8011D 		strb	r1, [r2, #-1]!
 963:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 2100              		.loc 1 963 0
 2101 0016 0121     		movs	r1, #1
 2102 0018 2620     		movs	r0, #38
 2103              	.LVL234:
 2104 001a FFF7FEFF 		bl	nRF24_verified_write_register
 2105              	.LVL235:
 964:Src/nRF24.c   **** }
 2106              		.loc 1 964 0
 2107 001e 03B0     		add	sp, sp, #12
 2108              	.LCFI64:
 2109              		.cfi_def_cfa_offset 4
 2110              		@ sp needed
ARM GAS  /tmp/ccI3eitI.s 			page 55


 2111 0020 5DF804FB 		ldr	pc, [sp], #4
 2112              		.cfi_endproc
 2113              	.LFE165:
 2115              		.section	.text.nRF24_get_RF_SETUP,"ax",%progbits
 2116              		.align	1
 2117              		.global	nRF24_get_RF_SETUP
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2121              		.fpu fpv4-sp-d16
 2123              	nRF24_get_RF_SETUP:
 2124              	.LFB166:
 965:Src/nRF24.c   **** 
 966:Src/nRF24.c   **** uint8_t nRF24_get_RF_SETUP()
 967:Src/nRF24.c   **** {
 2125              		.loc 1 967 0
 2126              		.cfi_startproc
 2127              		@ args = 0, pretend = 0, frame = 8
 2128              		@ frame_needed = 0, uses_anonymous_args = 0
 2129 0000 00B5     		push	{lr}
 2130              	.LCFI65:
 2131              		.cfi_def_cfa_offset 4
 2132              		.cfi_offset 14, -4
 2133 0002 83B0     		sub	sp, sp, #12
 2134              	.LCFI66:
 2135              		.cfi_def_cfa_offset 16
 968:Src/nRF24.c   ****   uint8_t read_byte;
 969:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_byte);
 2136              		.loc 1 969 0
 2137 0004 0DF10702 		add	r2, sp, #7
 2138 0008 0121     		movs	r1, #1
 2139 000a 0620     		movs	r0, #6
 2140 000c FFF7FEFF 		bl	spi_read_register
 2141              	.LVL236:
 970:Src/nRF24.c   ****   return read_byte;
 971:Src/nRF24.c   **** }
 2142              		.loc 1 971 0
 2143 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2144 0014 03B0     		add	sp, sp, #12
 2145              	.LCFI67:
 2146              		.cfi_def_cfa_offset 4
 2147              		@ sp needed
 2148 0016 5DF804FB 		ldr	pc, [sp], #4
 2149              		.cfi_endproc
 2150              	.LFE166:
 2152              		.section	.text.nRF24_clear_STATUS,"ax",%progbits
 2153              		.align	1
 2154              		.global	nRF24_clear_STATUS
 2155              		.syntax unified
 2156              		.thumb
 2157              		.thumb_func
 2158              		.fpu fpv4-sp-d16
 2160              	nRF24_clear_STATUS:
 2161              	.LFB167:
 972:Src/nRF24.c   **** 
 973:Src/nRF24.c   **** /**
 974:Src/nRF24.c   ****   * @brief      Clear flag bits in 'STATUS' register.
ARM GAS  /tmp/ccI3eitI.s 			page 56


 975:Src/nRF24.c   ****   * @param      rx_dr Data Ready RX FIFO interrupt. Asserted when new data arrives RX FIFO.
 976:Src/nRF24.c   ****   *               Write 1 to clear bit [ RX_DR_MASK1 ]
 977:Src/nRF24.c   ****   * @param      tx_ds Data Sent TX FIFO interrupt. Asserted when packet transmitted on TX. 
 978:Src/nRF24.c   ****   *               If AUTO_ACK is activated, this bit is set high only when ACK is received. Write 1
 979:Src/nRF24.c   ****   * @param      max_rt Maximum number of TX retransmits interrupt. Write 1 to clear bit. 
 980:Src/nRF24.c   ****   *               If MAX_RT is asserted it must be cleared to enable further communication. [ MAX_R
 981:Src/nRF24.c   ****   * @retval     None.
 982:Src/nRF24.c   ****   */
 983:Src/nRF24.c   **** void nRF24_clear_STATUS(uint8_t rx_dr, uint8_t tx_ds, uint8_t max_rt) 
 984:Src/nRF24.c   **** {
 2162              		.loc 1 984 0
 2163              		.cfi_startproc
 2164              		@ args = 0, pretend = 0, frame = 8
 2165              		@ frame_needed = 0, uses_anonymous_args = 0
 2166              	.LVL237:
 2167 0000 00B5     		push	{lr}
 2168              	.LCFI68:
 2169              		.cfi_def_cfa_offset 4
 2170              		.cfi_offset 14, -4
 2171 0002 83B0     		sub	sp, sp, #12
 2172              	.LCFI69:
 2173              		.cfi_def_cfa_offset 16
 985:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
 986:Src/nRF24.c   ****   writing_byte |= rx_dr | tx_ds | max_rt;
 2174              		.loc 1 986 0
 2175 0004 0143     		orrs	r1, r1, r0
 2176              	.LVL238:
 2177 0006 1143     		orrs	r1, r1, r2
 2178 0008 02AA     		add	r2, sp, #8
 2179              	.LVL239:
 2180 000a 02F8011D 		strb	r1, [r2, #-1]!
 987:Src/nRF24.c   **** 
 988:Src/nRF24.c   **** 	/* Do not use nRF24_verified_write_register() to write to <STATUS> register. Not all bits are writ
 989:Src/nRF24.c   ****   spi_write_register(W_REGISTER_MASK + STATUS, 1, &writing_byte);
 2181              		.loc 1 989 0
 2182 000e 0121     		movs	r1, #1
 2183 0010 2720     		movs	r0, #39
 2184              	.LVL240:
 2185 0012 FFF7FEFF 		bl	spi_write_register
 2186              	.LVL241:
 990:Src/nRF24.c   **** }
 2187              		.loc 1 990 0
 2188 0016 03B0     		add	sp, sp, #12
 2189              	.LCFI70:
 2190              		.cfi_def_cfa_offset 4
 2191              		@ sp needed
 2192 0018 5DF804FB 		ldr	pc, [sp], #4
 2193              		.cfi_endproc
 2194              	.LFE167:
 2196              		.section	.text.nRF24_tx_self_test,"ax",%progbits
 2197              		.align	1
 2198              		.global	nRF24_tx_self_test
 2199              		.syntax unified
 2200              		.thumb
 2201              		.thumb_func
 2202              		.fpu fpv4-sp-d16
 2204              	nRF24_tx_self_test:
ARM GAS  /tmp/ccI3eitI.s 			page 57


 2205              	.LFB148:
 434:Src/nRF24.c   ****   char message[256];
 2206              		.loc 1 434 0
 2207              		.cfi_startproc
 2208              		@ Volatile: function does not return.
 2209              		@ args = 0, pretend = 0, frame = 272
 2210              		@ frame_needed = 0, uses_anonymous_args = 0
 2211 0000 00B5     		push	{lr}
 2212              	.LCFI71:
 2213              		.cfi_def_cfa_offset 4
 2214              		.cfi_offset 14, -4
 2215 0002 C5B0     		sub	sp, sp, #276
 2216              	.LCFI72:
 2217              		.cfi_def_cfa_offset 280
 439:Src/nRF24.c   ****   serial_print(message);
 2218              		.loc 1 439 0
 2219 0004 04AC     		add	r4, sp, #16
 2220 0006 5A4D     		ldr	r5, .L129
 2221 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2222 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2223 000c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2224 0010 07C4     		stmia	r4!, {r0, r1, r2}
 2225 0012 24F8023B 		strh	r3, [r4], #2	@ movhi
 2226 0016 1B0C     		lsrs	r3, r3, #16
 2227 0018 2370     		strb	r3, [r4]
 440:Src/nRF24.c   **** 
 2228              		.loc 1 440 0
 2229 001a 04A8     		add	r0, sp, #16
 2230 001c FFF7FEFF 		bl	serial_print
 2231              	.LVL242:
 442:Src/nRF24.c   ****   serial_print(message);
 2232              		.loc 1 442 0
 2233 0020 5322     		movs	r2, #83
 2234 0022 5449     		ldr	r1, .L129+4
 2235 0024 04A8     		add	r0, sp, #16
 2236 0026 FFF7FEFF 		bl	memcpy
 2237              	.LVL243:
 443:Src/nRF24.c   ****   #endif
 2238              		.loc 1 443 0
 2239 002a 04A8     		add	r0, sp, #16
 2240 002c FFF7FEFF 		bl	serial_print
 2241              	.LVL244:
 446:Src/nRF24.c   **** 
 2242              		.loc 1 446 0
 2243 0030 0024     		movs	r4, #0
 2244 0032 8DF80E40 		strb	r4, [sp, #14]
 450:Src/nRF24.c   **** 
 2245              		.loc 1 450 0
 2246 0036 FFF7FEFF 		bl	nRF24_CE_0
 2247              	.LVL245:
 453:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
 2248              		.loc 1 453 0
 2249 003a 8DF80F40 		strb	r4, [sp, #15]
 454:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
 2250              		.loc 1 454 0
 2251 003e 0DF10F02 		add	r2, sp, #15
 2252 0042 0121     		movs	r1, #1
ARM GAS  /tmp/ccI3eitI.s 			page 58


 2253 0044 2120     		movs	r0, #33
 2254 0046 FFF7FEFF 		bl	nRF24_verified_write_register
 2255              	.LVL246:
 455:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 2256              		.loc 1 455 0
 2257 004a 0DF10F02 		add	r2, sp, #15
 2258 004e 0121     		movs	r1, #1
 2259 0050 2220     		movs	r0, #34
 2260 0052 FFF7FEFF 		bl	nRF24_verified_write_register
 2261              	.LVL247:
 456:Src/nRF24.c   **** 
 2262              		.loc 1 456 0
 2263 0056 0DF10F02 		add	r2, sp, #15
 2264 005a 0121     		movs	r1, #1
 2265 005c 2420     		movs	r0, #36
 2266 005e FFF7FEFF 		bl	nRF24_verified_write_register
 2267              	.LVL248:
 458:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
 2268              		.loc 1 458 0
 2269 0062 0E23     		movs	r3, #14
 2270 0064 8DF80F30 		strb	r3, [sp, #15]
 459:Src/nRF24.c   **** 
 2271              		.loc 1 459 0
 2272 0068 0DF10F02 		add	r2, sp, #15
 2273 006c 0121     		movs	r1, #1
 2274 006e 2020     		movs	r0, #32
 2275 0070 FFF7FEFF 		bl	nRF24_verified_write_register
 2276              	.LVL249:
 462:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 2277              		.loc 1 462 0
 2278 0074 404B     		ldr	r3, .L129+8
 2279 0076 1B68     		ldr	r3, [r3]
 2280 0078 0293     		str	r3, [sp, #8]
 463:Src/nRF24.c   ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 2281              		.loc 1 463 0
 2282 007a 02AA     		add	r2, sp, #8
 2283 007c 0421     		movs	r1, #4
 2284 007e A020     		movs	r0, #160
 2285 0080 FFF7FEFF 		bl	spi_write_register
 2286              	.LVL250:
 464:Src/nRF24.c   ****   
 2287              		.loc 1 464 0
 2288 0084 FFF7FEFF 		bl	nRF24_CE_1
 2289              	.LVL251:
 468:Src/nRF24.c   **** 
 2290              		.loc 1 468 0
 2291 0088 0DF10E02 		add	r2, sp, #14
 2292 008c 0121     		movs	r1, #1
 2293 008e 0720     		movs	r0, #7
 2294 0090 FFF7FEFF 		bl	spi_read_register
 2295              	.LVL252:
 470:Src/nRF24.c   **** 
 2296              		.loc 1 470 0
 2297 0094 0120     		movs	r0, #1
 2298 0096 FFF7FEFF 		bl	SPI_DELAY
 2299              	.LVL253:
 473:Src/nRF24.c   **** 
ARM GAS  /tmp/ccI3eitI.s 			page 59


 2300              		.loc 1 473 0
 2301 009a FFF7FEFF 		bl	nRF24_CE_0
 2302              	.LVL254:
 476:Src/nRF24.c   ****   {
 2303              		.loc 1 476 0
 2304 009e 9DF80E20 		ldrb	r2, [sp, #14]	@ zero_extendqisi2
 2305 00a2 12F02E0F 		tst	r2, #46
 2306 00a6 08D0     		beq	.L122
 479:Src/nRF24.c   ****                        <STATUS> has value of 0x2E. \
 2307              		.loc 1 479 0
 2308 00a8 DD22     		movs	r2, #221
 2309 00aa 3449     		ldr	r1, .L129+12
 2310 00ac 04A8     		add	r0, sp, #16
 2311 00ae FFF7FEFF 		bl	memcpy
 2312              	.LVL255:
 483:Src/nRF24.c   ****     #endif
 2313              		.loc 1 483 0
 2314 00b2 04A8     		add	r0, sp, #16
 2315 00b4 FFF7FEFF 		bl	serial_print
 2316              	.LVL256:
 2317 00b8 22E0     		b	.L126
 2318              	.L122:
 489:Src/nRF24.c   ****     serial_print(message);
 2319              		.loc 1 489 0
 2320 00ba 3149     		ldr	r1, .L129+16
 2321 00bc 04A8     		add	r0, sp, #16
 2322 00be FFF7FEFF 		bl	sprintf
 2323              	.LVL257:
 490:Src/nRF24.c   ****     #endif
 2324              		.loc 1 490 0
 2325 00c2 04A8     		add	r0, sp, #16
 2326 00c4 FFF7FEFF 		bl	serial_print
 2327              	.LVL258:
 2328 00c8 1AE0     		b	.L126
 2329              	.L128:
 2330              	.LBB151:
 519:Src/nRF24.c   **** 			serial_print(message);
 2331              		.loc 1 519 0
 2332 00ca 04AC     		add	r4, sp, #16
 2333 00cc 2D4D     		ldr	r5, .L129+20
 2334 00ce 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2335 00d0 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2336 00d2 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2337 00d6 07C4     		stmia	r4!, {r0, r1, r2}
 2338 00d8 24F8023B 		strh	r3, [r4], #2	@ movhi
 2339 00dc 1B0C     		lsrs	r3, r3, #16
 2340 00de 2370     		strb	r3, [r4]
 2341              	.LVL259:
 2342              	.LBB152:
 2343              	.LBB153:
 124:Src/nRF24.c   **** }
 2344              		.loc 1 124 0
 2345 00e0 04A8     		add	r0, sp, #16
 2346              	.LVL260:
 2347 00e2 FFF7FEFF 		bl	strlen
 2348              	.LVL261:
 2349 00e6 6423     		movs	r3, #100
ARM GAS  /tmp/ccI3eitI.s 			page 60


 2350 00e8 82B2     		uxth	r2, r0
 2351 00ea 04A9     		add	r1, sp, #16
 2352              	.LVL262:
 2353 00ec 2648     		ldr	r0, .L129+24
 2354 00ee FFF7FEFF 		bl	HAL_UART_Transmit
 2355              	.LVL263:
 2356              	.L125:
 2357              	.LBE153:
 2358              	.LBE152:
 532:Src/nRF24.c   **** 
 2359              		.loc 1 532 0
 2360 00f2 1022     		movs	r2, #16
 2361 00f4 2021     		movs	r1, #32
 2362 00f6 4020     		movs	r0, #64
 2363 00f8 FFF7FEFF 		bl	nRF24_clear_STATUS
 2364              	.LVL264:
 534:Src/nRF24.c   **** 	}
 2365              		.loc 1 534 0
 2366 00fc FFF7FEFF 		bl	nRF24_CE_0
 2367              	.LVL265:
 2368              	.L126:
 500:Src/nRF24.c   **** 
 2369              		.loc 1 500 0
 2370 0100 1D4B     		ldr	r3, .L129+8
 2371 0102 1B68     		ldr	r3, [r3]
 2372 0104 0193     		str	r3, [sp, #4]
 502:Src/nRF24.c   **** 
 2373              		.loc 1 502 0
 2374 0106 01AA     		add	r2, sp, #4
 2375 0108 0421     		movs	r1, #4
 2376 010a A020     		movs	r0, #160
 2377 010c FFF7FEFF 		bl	spi_write_register
 2378              	.LVL266:
 505:Src/nRF24.c   **** 
 2379              		.loc 1 505 0
 2380 0110 FFF7FEFF 		bl	nRF24_CE_1
 2381              	.LVL267:
 509:Src/nRF24.c   **** 
 2382              		.loc 1 509 0
 2383 0114 0DF10302 		add	r2, sp, #3
 2384 0118 0121     		movs	r1, #1
 2385 011a 0720     		movs	r0, #7
 2386 011c FFF7FEFF 		bl	spi_read_register
 2387              	.LVL268:
 512:Src/nRF24.c   **** 		serial_print(message);
 2388              		.loc 1 512 0
 2389 0120 9DF80320 		ldrb	r2, [sp, #3]	@ zero_extendqisi2
 2390 0124 1949     		ldr	r1, .L129+28
 2391 0126 04A8     		add	r0, sp, #16
 2392 0128 FFF7FEFF 		bl	sprintf
 2393              	.LVL269:
 2394              	.LBB154:
 2395              	.LBB155:
 124:Src/nRF24.c   **** }
 2396              		.loc 1 124 0
 2397 012c 04A8     		add	r0, sp, #16
 2398              	.LVL270:
ARM GAS  /tmp/ccI3eitI.s 			page 61


 2399 012e FFF7FEFF 		bl	strlen
 2400              	.LVL271:
 2401 0132 6423     		movs	r3, #100
 2402 0134 82B2     		uxth	r2, r0
 2403 0136 04A9     		add	r1, sp, #16
 2404              	.LVL272:
 2405 0138 1348     		ldr	r0, .L129+24
 2406 013a FFF7FEFF 		bl	HAL_UART_Transmit
 2407              	.LVL273:
 2408              	.LBE155:
 2409              	.LBE154:
 516:Src/nRF24.c   **** 		{
 2410              		.loc 1 516 0
 2411 013e 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 2412 0142 2E2B     		cmp	r3, #46
 2413 0144 C1D0     		beq	.L128
 526:Src/nRF24.c   **** 			serial_print(message);
 2414              		.loc 1 526 0
 2415 0146 04AC     		add	r4, sp, #16
 2416 0148 114D     		ldr	r5, .L129+32
 2417 014a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2418 014c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2419 014e 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2420 0152 07C4     		stmia	r4!, {r0, r1, r2}
 2421 0154 24F8023B 		strh	r3, [r4], #2	@ movhi
 2422 0158 1B0C     		lsrs	r3, r3, #16
 2423 015a 2370     		strb	r3, [r4]
 2424              	.LVL274:
 2425              	.LBB156:
 2426              	.LBB157:
 124:Src/nRF24.c   **** }
 2427              		.loc 1 124 0
 2428 015c 04A8     		add	r0, sp, #16
 2429              	.LVL275:
 2430 015e FFF7FEFF 		bl	strlen
 2431              	.LVL276:
 2432 0162 6423     		movs	r3, #100
 2433 0164 82B2     		uxth	r2, r0
 2434 0166 04A9     		add	r1, sp, #16
 2435              	.LVL277:
 2436 0168 0748     		ldr	r0, .L129+24
 2437 016a FFF7FEFF 		bl	HAL_UART_Transmit
 2438              	.LVL278:
 2439 016e C0E7     		b	.L125
 2440              	.L130:
 2441              		.align	2
 2442              	.L129:
 2443 0170 00000000 		.word	.LC21
 2444 0174 20000000 		.word	.LC22
 2445 0178 00000000 		.word	.LANCHOR0
 2446 017c 74000000 		.word	.LC23
 2447 0180 54010000 		.word	.LC24
 2448 0184 D0010000 		.word	.LC26
 2449 0188 00000000 		.word	huart2
 2450 018c B4010000 		.word	.LC25
 2451 0190 F0010000 		.word	.LC27
 2452              	.LBE157:
ARM GAS  /tmp/ccI3eitI.s 			page 62


 2453              	.LBE156:
 2454              	.LBE151:
 2455              		.cfi_endproc
 2456              	.LFE148:
 2458              		.section	.text.nRF24_get_STATUS,"ax",%progbits
 2459              		.align	1
 2460              		.global	nRF24_get_STATUS
 2461              		.syntax unified
 2462              		.thumb
 2463              		.thumb_func
 2464              		.fpu fpv4-sp-d16
 2466              	nRF24_get_STATUS:
 2467              	.LFB168:
 991:Src/nRF24.c   **** 
 992:Src/nRF24.c   **** /**
 993:Src/nRF24.c   ****   * @brief      Read <STATUS> register from nRF24.
 994:Src/nRF24.c   ****   * @param      None.
 995:Src/nRF24.c   ****   * @retval     <STATUS> register value.
 996:Src/nRF24.c   ****   * @note    Following masks can be used:
 997:Src/nRF24.c   ****   *   RX_DR_READMASK   
 998:Src/nRF24.c   ****   *   TX_DS_READMASK   
 999:Src/nRF24.c   ****   *   MAX_RT_READMASK  
1000:Src/nRF24.c   ****   *   RX_P_NO_READMASK    
1001:Src/nRF24.c   ****   *   TX_FULL_READMASK    
1002:Src/nRF24.c   ****   */
1003:Src/nRF24.c   **** uint8_t nRF24_get_STATUS(void) 
1004:Src/nRF24.c   **** {
 2468              		.loc 1 1004 0
 2469              		.cfi_startproc
 2470              		@ args = 0, pretend = 0, frame = 8
 2471              		@ frame_needed = 0, uses_anonymous_args = 0
 2472 0000 00B5     		push	{lr}
 2473              	.LCFI73:
 2474              		.cfi_def_cfa_offset 4
 2475              		.cfi_offset 14, -4
 2476 0002 83B0     		sub	sp, sp, #12
 2477              	.LCFI74:
 2478              		.cfi_def_cfa_offset 16
1005:Src/nRF24.c   ****   uint8_t status;
1006:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 2479              		.loc 1 1006 0
 2480 0004 0DF10702 		add	r2, sp, #7
 2481 0008 0121     		movs	r1, #1
 2482 000a 0720     		movs	r0, #7
 2483 000c FFF7FEFF 		bl	spi_read_register
 2484              	.LVL279:
1007:Src/nRF24.c   ****   return status;
1008:Src/nRF24.c   **** }
 2485              		.loc 1 1008 0
 2486 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2487 0014 03B0     		add	sp, sp, #12
 2488              	.LCFI75:
 2489              		.cfi_def_cfa_offset 4
 2490              		@ sp needed
 2491 0016 5DF804FB 		ldr	pc, [sp], #4
 2492              		.cfi_endproc
 2493              	.LFE168:
ARM GAS  /tmp/ccI3eitI.s 			page 63


 2495              		.section	.text.nRF24_get_OBSERVE_TX,"ax",%progbits
 2496              		.align	1
 2497              		.global	nRF24_get_OBSERVE_TX
 2498              		.syntax unified
 2499              		.thumb
 2500              		.thumb_func
 2501              		.fpu fpv4-sp-d16
 2503              	nRF24_get_OBSERVE_TX:
 2504              	.LFB169:
1009:Src/nRF24.c   **** 
1010:Src/nRF24.c   **** /**
1011:Src/nRF24.c   ****   * @brief      Read <OBSERVE_TX> register from nRF24.
1012:Src/nRF24.c   ****   * @param      None.
1013:Src/nRF24.c   ****   * @retval     <OBSERVE_TX> register value.
1014:Src/nRF24.c   ****   */
1015:Src/nRF24.c   **** uint8_t nRF24_get_OBSERVE_TX()
1016:Src/nRF24.c   **** {
 2505              		.loc 1 1016 0
 2506              		.cfi_startproc
 2507              		@ args = 0, pretend = 0, frame = 8
 2508              		@ frame_needed = 0, uses_anonymous_args = 0
 2509 0000 00B5     		push	{lr}
 2510              	.LCFI76:
 2511              		.cfi_def_cfa_offset 4
 2512              		.cfi_offset 14, -4
 2513 0002 83B0     		sub	sp, sp, #12
 2514              	.LCFI77:
 2515              		.cfi_def_cfa_offset 16
1017:Src/nRF24.c   ****   #define PLOS_CNT_READMASK  0b1111 << 4
1018:Src/nRF24.c   ****   #define ARC_CNT_READMASK   0b1111 << 0
1019:Src/nRF24.c   ****   uint8_t read_byte;
1020:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + OBSERVE_TX, 1, &read_byte);
 2516              		.loc 1 1020 0
 2517 0004 0DF10702 		add	r2, sp, #7
 2518 0008 0121     		movs	r1, #1
 2519 000a 0820     		movs	r0, #8
 2520 000c FFF7FEFF 		bl	spi_read_register
 2521              	.LVL280:
1021:Src/nRF24.c   ****   return read_byte;
1022:Src/nRF24.c   **** }
 2522              		.loc 1 1022 0
 2523 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2524 0014 03B0     		add	sp, sp, #12
 2525              	.LCFI78:
 2526              		.cfi_def_cfa_offset 4
 2527              		@ sp needed
 2528 0016 5DF804FB 		ldr	pc, [sp], #4
 2529              		.cfi_endproc
 2530              	.LFE169:
 2532              		.section	.text.nRF24_get_RPD,"ax",%progbits
 2533              		.align	1
 2534              		.global	nRF24_get_RPD
 2535              		.syntax unified
 2536              		.thumb
 2537              		.thumb_func
 2538              		.fpu fpv4-sp-d16
 2540              	nRF24_get_RPD:
ARM GAS  /tmp/ccI3eitI.s 			page 64


 2541              	.LFB170:
1023:Src/nRF24.c   **** 
1024:Src/nRF24.c   **** /**
1025:Src/nRF24.c   ****   * @brief      Read <RPD> register from nRF24.
1026:Src/nRF24.c   ****   * @param      None.
1027:Src/nRF24.c   ****   * @retval     <RPD> register value.
1028:Src/nRF24.c   ****   */
1029:Src/nRF24.c   **** uint8_t nRF24_get_RPD() 
1030:Src/nRF24.c   **** {
 2542              		.loc 1 1030 0
 2543              		.cfi_startproc
 2544              		@ args = 0, pretend = 0, frame = 8
 2545              		@ frame_needed = 0, uses_anonymous_args = 0
 2546 0000 00B5     		push	{lr}
 2547              	.LCFI79:
 2548              		.cfi_def_cfa_offset 4
 2549              		.cfi_offset 14, -4
 2550 0002 83B0     		sub	sp, sp, #12
 2551              	.LCFI80:
 2552              		.cfi_def_cfa_offset 16
1031:Src/nRF24.c   ****   uint8_t read_byte;
1032:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RPD, 1, &read_byte);
 2553              		.loc 1 1032 0
 2554 0004 0DF10702 		add	r2, sp, #7
 2555 0008 0121     		movs	r1, #1
 2556 000a 0920     		movs	r0, #9
 2557 000c FFF7FEFF 		bl	spi_read_register
 2558              	.LVL281:
1033:Src/nRF24.c   ****   return read_byte;
1034:Src/nRF24.c   **** }
 2559              		.loc 1 1034 0
 2560 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2561 0014 03B0     		add	sp, sp, #12
 2562              	.LCFI81:
 2563              		.cfi_def_cfa_offset 4
 2564              		@ sp needed
 2565 0016 5DF804FB 		ldr	pc, [sp], #4
 2566              		.cfi_endproc
 2567              	.LFE170:
 2569              		.section	.text.nRF24_set_RX_ADDR_P0,"ax",%progbits
 2570              		.align	1
 2571              		.global	nRF24_set_RX_ADDR_P0
 2572              		.syntax unified
 2573              		.thumb
 2574              		.thumb_func
 2575              		.fpu fpv4-sp-d16
 2577              	nRF24_set_RX_ADDR_P0:
 2578              	.LFB171:
1035:Src/nRF24.c   **** 
1036:Src/nRF24.c   **** 
1037:Src/nRF24.c   **** /**
1038:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 0. Least Significant Byte written first.
1039:Src/nRF24.c   ****   * @param  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1040:Src/nRF24.c   ****   * @param  p_rx_addr_p0 Pointer to an array storing receive address for data pipe 0. 
1041:Src/nRF24.c   ****   *           The array pointed should have a length of either 3, 4, or 5 bytes. 
1042:Src/nRF24.c   ****   *           The SET_AW register determines the length of the address array. Default length is 5.
1043:Src/nRF24.c   ****   * @retval None.
ARM GAS  /tmp/ccI3eitI.s 			page 65


1044:Src/nRF24.c   ****   */
1045:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P0(uint8_t rx_addr_width, uint8_t* p_rx_addr_p0) 
1046:Src/nRF24.c   **** {
 2579              		.loc 1 1046 0
 2580              		.cfi_startproc
 2581              		@ args = 0, pretend = 0, frame = 0
 2582              		@ frame_needed = 0, uses_anonymous_args = 0
 2583              	.LVL282:
 2584 0000 08B5     		push	{r3, lr}
 2585              	.LCFI82:
 2586              		.cfi_def_cfa_offset 8
 2587              		.cfi_offset 3, -8
 2588              		.cfi_offset 14, -4
1047:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P0, rx_addr_width, p_rx_addr_p0);
 2589              		.loc 1 1047 0
 2590 0002 0A46     		mov	r2, r1
 2591 0004 0146     		mov	r1, r0
 2592              	.LVL283:
 2593 0006 2A20     		movs	r0, #42
 2594              	.LVL284:
 2595 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 2596              	.LVL285:
 2597 000c 08BD     		pop	{r3, pc}
 2598              		.cfi_endproc
 2599              	.LFE171:
 2601              		.section	.text.nRF24_get_RX_ADDR_P0,"ax",%progbits
 2602              		.align	1
 2603              		.global	nRF24_get_RX_ADDR_P0
 2604              		.syntax unified
 2605              		.thumb
 2606              		.thumb_func
 2607              		.fpu fpv4-sp-d16
 2609              	nRF24_get_RX_ADDR_P0:
 2610              	.LFB172:
1048:Src/nRF24.c   **** }
1049:Src/nRF24.c   **** 
1050:Src/nRF24.c   **** 
1051:Src/nRF24.c   **** /**
1052:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P0> register from nRF24.
1053:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1054:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1055:Src/nRF24.c   ****   * @retval     None.
1056:Src/nRF24.c   ****   */
1057:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P0(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1058:Src/nRF24.c   **** {
 2611              		.loc 1 1058 0
 2612              		.cfi_startproc
 2613              		@ args = 0, pretend = 0, frame = 0
 2614              		@ frame_needed = 0, uses_anonymous_args = 0
 2615              	.LVL286:
 2616 0000 08B5     		push	{r3, lr}
 2617              	.LCFI83:
 2618              		.cfi_def_cfa_offset 8
 2619              		.cfi_offset 3, -8
 2620              		.cfi_offset 14, -4
1059:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, rx_addr_width, p_read_buffer);
 2621              		.loc 1 1059 0
ARM GAS  /tmp/ccI3eitI.s 			page 66


 2622 0002 0A46     		mov	r2, r1
 2623 0004 0146     		mov	r1, r0
 2624              	.LVL287:
 2625 0006 0A20     		movs	r0, #10
 2626              	.LVL288:
 2627 0008 FFF7FEFF 		bl	spi_read_register
 2628              	.LVL289:
 2629 000c 08BD     		pop	{r3, pc}
 2630              		.cfi_endproc
 2631              	.LFE172:
 2633              		.section	.text.nRF24_set_RX_ADDR_P1,"ax",%progbits
 2634              		.align	1
 2635              		.global	nRF24_set_RX_ADDR_P1
 2636              		.syntax unified
 2637              		.thumb
 2638              		.thumb_func
 2639              		.fpu fpv4-sp-d16
 2641              	nRF24_set_RX_ADDR_P1:
 2642              	.LFB173:
1060:Src/nRF24.c   **** }
1061:Src/nRF24.c   **** 
1062:Src/nRF24.c   **** 
1063:Src/nRF24.c   **** /**
1064:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 1. Least Significant Byte written first.
1065:Src/nRF24.c   ****   * @param  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1066:Src/nRF24.c   ****   * @param  p_rx_addr_p1 Pointer to an array storing receive address for data pipe 1. 
1067:Src/nRF24.c   ****   *           The array pointed should have a length of either 3, 4, or 5 bytes. 
1068:Src/nRF24.c   ****   *           The SET_AW register determines the length of the address array. Default length is 5.
1069:Src/nRF24.c   ****   * @note   The RX data pipe 0 and pipe 1 and have totally different addresses. 
1070:Src/nRF24.c   ****   *           However, for RX pipe 2,3,4,5 the [39:8] addresses byte need to be same as RX pipe 1.
1071:Src/nRF24.c   ****   *           Given an example,
1072:Src/nRF24.c   ****   *           RX_ADDR_P0 = 0xE7E7E7E7E7
1073:Src/nRF24.c   ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1074:Src/nRF24.c   ****   *           RX_ADDR_P2 = 0x--------C3 = 0xC2C2C2C2C3
1075:Src/nRF24.c   ****   *           RX_ADDR_P3 = 0x--------C4 = 0xC2C2C2C2C4
1076:Src/nRF24.c   ****   *           RX_ADDR_P4 = 0x--------C5 = 0xC2C2C2C2C5
1077:Src/nRF24.c   ****   *           RX_ADDR_P5 = 0x--------C6 = 0xC2C2C2C2C6
1078:Src/nRF24.c   ****   * @retval None.
1079:Src/nRF24.c   ****   */
1080:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P1(uint8_t rx_addr_width, uint8_t* p_rx_addr_p1) 
1081:Src/nRF24.c   **** {
 2643              		.loc 1 1081 0
 2644              		.cfi_startproc
 2645              		@ args = 0, pretend = 0, frame = 0
 2646              		@ frame_needed = 0, uses_anonymous_args = 0
 2647              	.LVL290:
 2648 0000 08B5     		push	{r3, lr}
 2649              	.LCFI84:
 2650              		.cfi_def_cfa_offset 8
 2651              		.cfi_offset 3, -8
 2652              		.cfi_offset 14, -4
1082:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P1, rx_addr_width, p_rx_addr_p1);
 2653              		.loc 1 1082 0
 2654 0002 0A46     		mov	r2, r1
 2655 0004 0146     		mov	r1, r0
 2656              	.LVL291:
 2657 0006 2B20     		movs	r0, #43
ARM GAS  /tmp/ccI3eitI.s 			page 67


 2658              	.LVL292:
 2659 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 2660              	.LVL293:
 2661 000c 08BD     		pop	{r3, pc}
 2662              		.cfi_endproc
 2663              	.LFE173:
 2665              		.section	.text.nRF24_get_RX_ADDR_P1,"ax",%progbits
 2666              		.align	1
 2667              		.global	nRF24_get_RX_ADDR_P1
 2668              		.syntax unified
 2669              		.thumb
 2670              		.thumb_func
 2671              		.fpu fpv4-sp-d16
 2673              	nRF24_get_RX_ADDR_P1:
 2674              	.LFB174:
1083:Src/nRF24.c   **** }
1084:Src/nRF24.c   **** 
1085:Src/nRF24.c   **** 
1086:Src/nRF24.c   **** /**
1087:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P1> register from nRF24.
1088:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1089:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1090:Src/nRF24.c   ****   * @retval     None.
1091:Src/nRF24.c   ****   */
1092:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P1(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1093:Src/nRF24.c   **** {
 2675              		.loc 1 1093 0
 2676              		.cfi_startproc
 2677              		@ args = 0, pretend = 0, frame = 0
 2678              		@ frame_needed = 0, uses_anonymous_args = 0
 2679              	.LVL294:
 2680 0000 08B5     		push	{r3, lr}
 2681              	.LCFI85:
 2682              		.cfi_def_cfa_offset 8
 2683              		.cfi_offset 3, -8
 2684              		.cfi_offset 14, -4
1094:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, rx_addr_width, p_read_buffer);
 2685              		.loc 1 1094 0
 2686 0002 0A46     		mov	r2, r1
 2687 0004 0146     		mov	r1, r0
 2688              	.LVL295:
 2689 0006 0B20     		movs	r0, #11
 2690              	.LVL296:
 2691 0008 FFF7FEFF 		bl	spi_read_register
 2692              	.LVL297:
 2693 000c 08BD     		pop	{r3, pc}
 2694              		.cfi_endproc
 2695              	.LFE174:
 2697              		.section	.text.nRF24_set_RX_ADDR_P2,"ax",%progbits
 2698              		.align	1
 2699              		.global	nRF24_set_RX_ADDR_P2
 2700              		.syntax unified
 2701              		.thumb
 2702              		.thumb_func
 2703              		.fpu fpv4-sp-d16
 2705              	nRF24_set_RX_ADDR_P2:
 2706              	.LFB175:
ARM GAS  /tmp/ccI3eitI.s 			page 68


1095:Src/nRF24.c   **** }
1096:Src/nRF24.c   **** 
1097:Src/nRF24.c   **** /**
1098:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 2. 
1099:Src/nRF24.c   ****   * @param  rx_addr_p2 Byte storing receive address for data pipe 2. 
1100:Src/nRF24.c   ****   *           rx_addr_p2 overwrite the Least Significant Byte on RX_ADDR_P1
1101:Src/nRF24.c   ****   *           Given an example,
1102:Src/nRF24.c   ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1103:Src/nRF24.c   ****   *           RX_ADDR_P2 = 0x--------C3 = 0xC2C2C2C2C3
1104:Src/nRF24.c   ****   * @retval None.
1105:Src/nRF24.c   ****   */
1106:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P2(uint8_t rx_addr_p2) 
1107:Src/nRF24.c   **** {
 2707              		.loc 1 1107 0
 2708              		.cfi_startproc
 2709              		@ args = 0, pretend = 0, frame = 8
 2710              		@ frame_needed = 0, uses_anonymous_args = 0
 2711              	.LVL298:
 2712 0000 00B5     		push	{lr}
 2713              	.LCFI86:
 2714              		.cfi_def_cfa_offset 4
 2715              		.cfi_offset 14, -4
 2716 0002 83B0     		sub	sp, sp, #12
 2717              	.LCFI87:
 2718              		.cfi_def_cfa_offset 16
1108:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1109:Src/nRF24.c   ****   writing_byte |= rx_addr_p2;
 2719              		.loc 1 1109 0
 2720 0004 02AA     		add	r2, sp, #8
 2721 0006 02F8010D 		strb	r0, [r2, #-1]!
1110:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P2, 1, &writing_byte);
 2722              		.loc 1 1110 0
 2723 000a 0121     		movs	r1, #1
 2724 000c 2C20     		movs	r0, #44
 2725              	.LVL299:
 2726 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2727              	.LVL300:
1111:Src/nRF24.c   **** }
 2728              		.loc 1 1111 0
 2729 0012 03B0     		add	sp, sp, #12
 2730              	.LCFI88:
 2731              		.cfi_def_cfa_offset 4
 2732              		@ sp needed
 2733 0014 5DF804FB 		ldr	pc, [sp], #4
 2734              		.cfi_endproc
 2735              	.LFE175:
 2737              		.section	.text.nRF24_get_RX_ADDR_P2,"ax",%progbits
 2738              		.align	1
 2739              		.global	nRF24_get_RX_ADDR_P2
 2740              		.syntax unified
 2741              		.thumb
 2742              		.thumb_func
 2743              		.fpu fpv4-sp-d16
 2745              	nRF24_get_RX_ADDR_P2:
 2746              	.LFB176:
1112:Src/nRF24.c   **** 
1113:Src/nRF24.c   **** 
ARM GAS  /tmp/ccI3eitI.s 			page 69


1114:Src/nRF24.c   **** 
1115:Src/nRF24.c   **** /**
1116:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P2> register from nRF24.
1117:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1118:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1119:Src/nRF24.c   ****   * @retval     None.
1120:Src/nRF24.c   ****   */
1121:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P2(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1122:Src/nRF24.c   **** {
 2747              		.loc 1 1122 0
 2748              		.cfi_startproc
 2749              		@ args = 0, pretend = 0, frame = 0
 2750              		@ frame_needed = 0, uses_anonymous_args = 0
 2751              	.LVL301:
 2752 0000 08B5     		push	{r3, lr}
 2753              	.LCFI89:
 2754              		.cfi_def_cfa_offset 8
 2755              		.cfi_offset 3, -8
 2756              		.cfi_offset 14, -4
1123:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, rx_addr_width, p_read_buffer);
 2757              		.loc 1 1123 0
 2758 0002 0A46     		mov	r2, r1
 2759 0004 0146     		mov	r1, r0
 2760              	.LVL302:
 2761 0006 0C20     		movs	r0, #12
 2762              	.LVL303:
 2763 0008 FFF7FEFF 		bl	spi_read_register
 2764              	.LVL304:
 2765 000c 08BD     		pop	{r3, pc}
 2766              		.cfi_endproc
 2767              	.LFE176:
 2769              		.section	.text.nRF24_set_RX_ADDR_P3,"ax",%progbits
 2770              		.align	1
 2771              		.global	nRF24_set_RX_ADDR_P3
 2772              		.syntax unified
 2773              		.thumb
 2774              		.thumb_func
 2775              		.fpu fpv4-sp-d16
 2777              	nRF24_set_RX_ADDR_P3:
 2778              	.LFB177:
1124:Src/nRF24.c   **** }
1125:Src/nRF24.c   **** 
1126:Src/nRF24.c   **** 
1127:Src/nRF24.c   **** /**
1128:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 3. 
1129:Src/nRF24.c   ****   * @param  rx_addr_p3 Byte storing receive address for data pipe 3. 
1130:Src/nRF24.c   ****   *           rx_addr_p3 overwrite the Least Significant Byte on RX_ADDR_P1
1131:Src/nRF24.c   ****   *           Given an example,
1132:Src/nRF24.c   ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1133:Src/nRF24.c   ****   *           RX_ADDR_P3 = 0x--------C4 = 0xC2C2C2C2C4
1134:Src/nRF24.c   ****   * @retval None.
1135:Src/nRF24.c   ****   */
1136:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P3(uint8_t rx_addr_p3) 
1137:Src/nRF24.c   **** {
 2779              		.loc 1 1137 0
 2780              		.cfi_startproc
 2781              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccI3eitI.s 			page 70


 2782              		@ frame_needed = 0, uses_anonymous_args = 0
 2783              	.LVL305:
 2784 0000 00B5     		push	{lr}
 2785              	.LCFI90:
 2786              		.cfi_def_cfa_offset 4
 2787              		.cfi_offset 14, -4
 2788 0002 83B0     		sub	sp, sp, #12
 2789              	.LCFI91:
 2790              		.cfi_def_cfa_offset 16
1138:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1139:Src/nRF24.c   ****   writing_byte |= rx_addr_p3;
 2791              		.loc 1 1139 0
 2792 0004 02AA     		add	r2, sp, #8
 2793 0006 02F8010D 		strb	r0, [r2, #-1]!
1140:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P3, 1, &writing_byte);
 2794              		.loc 1 1140 0
 2795 000a 0121     		movs	r1, #1
 2796 000c 2D20     		movs	r0, #45
 2797              	.LVL306:
 2798 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2799              	.LVL307:
1141:Src/nRF24.c   **** }
 2800              		.loc 1 1141 0
 2801 0012 03B0     		add	sp, sp, #12
 2802              	.LCFI92:
 2803              		.cfi_def_cfa_offset 4
 2804              		@ sp needed
 2805 0014 5DF804FB 		ldr	pc, [sp], #4
 2806              		.cfi_endproc
 2807              	.LFE177:
 2809              		.section	.text.nRF24_get_RX_ADDR_P3,"ax",%progbits
 2810              		.align	1
 2811              		.global	nRF24_get_RX_ADDR_P3
 2812              		.syntax unified
 2813              		.thumb
 2814              		.thumb_func
 2815              		.fpu fpv4-sp-d16
 2817              	nRF24_get_RX_ADDR_P3:
 2818              	.LFB178:
1142:Src/nRF24.c   **** 
1143:Src/nRF24.c   **** /**
1144:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P3> register from nRF24.
1145:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1146:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1147:Src/nRF24.c   ****   * @retval     None.
1148:Src/nRF24.c   ****   */
1149:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P3(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1150:Src/nRF24.c   **** {
 2819              		.loc 1 1150 0
 2820              		.cfi_startproc
 2821              		@ args = 0, pretend = 0, frame = 0
 2822              		@ frame_needed = 0, uses_anonymous_args = 0
 2823              	.LVL308:
 2824 0000 08B5     		push	{r3, lr}
 2825              	.LCFI93:
 2826              		.cfi_def_cfa_offset 8
 2827              		.cfi_offset 3, -8
ARM GAS  /tmp/ccI3eitI.s 			page 71


 2828              		.cfi_offset 14, -4
1151:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, rx_addr_width, p_read_buffer);
 2829              		.loc 1 1151 0
 2830 0002 0A46     		mov	r2, r1
 2831 0004 0146     		mov	r1, r0
 2832              	.LVL309:
 2833 0006 0D20     		movs	r0, #13
 2834              	.LVL310:
 2835 0008 FFF7FEFF 		bl	spi_read_register
 2836              	.LVL311:
 2837 000c 08BD     		pop	{r3, pc}
 2838              		.cfi_endproc
 2839              	.LFE178:
 2841              		.section	.text.nRF24_set_RX_ADDR_P4,"ax",%progbits
 2842              		.align	1
 2843              		.global	nRF24_set_RX_ADDR_P4
 2844              		.syntax unified
 2845              		.thumb
 2846              		.thumb_func
 2847              		.fpu fpv4-sp-d16
 2849              	nRF24_set_RX_ADDR_P4:
 2850              	.LFB179:
1152:Src/nRF24.c   **** }
1153:Src/nRF24.c   **** 
1154:Src/nRF24.c   **** /**
1155:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 4.
1156:Src/nRF24.c   ****   * @param  rx_addr_p4 Byte storing receive address for data pipe 4. 
1157:Src/nRF24.c   ****   *           rx_addr_p4 overwrite the Least Significant Byte on RX_ADDR_P1
1158:Src/nRF24.c   ****   *           Given an example,
1159:Src/nRF24.c   ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1160:Src/nRF24.c   ****   *           RX_ADDR_P4 = 0x--------C5 = 0xC2C2C2C2C5
1161:Src/nRF24.c   ****   * @retval None.
1162:Src/nRF24.c   ****   */
1163:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P4(uint8_t rx_addr_p4) 
1164:Src/nRF24.c   **** {
 2851              		.loc 1 1164 0
 2852              		.cfi_startproc
 2853              		@ args = 0, pretend = 0, frame = 8
 2854              		@ frame_needed = 0, uses_anonymous_args = 0
 2855              	.LVL312:
 2856 0000 00B5     		push	{lr}
 2857              	.LCFI94:
 2858              		.cfi_def_cfa_offset 4
 2859              		.cfi_offset 14, -4
 2860 0002 83B0     		sub	sp, sp, #12
 2861              	.LCFI95:
 2862              		.cfi_def_cfa_offset 16
1165:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1166:Src/nRF24.c   ****   writing_byte |= rx_addr_p4;
 2863              		.loc 1 1166 0
 2864 0004 02AA     		add	r2, sp, #8
 2865 0006 02F8010D 		strb	r0, [r2, #-1]!
1167:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P4, 1, &writing_byte);
 2866              		.loc 1 1167 0
 2867 000a 0121     		movs	r1, #1
 2868 000c 2E20     		movs	r0, #46
 2869              	.LVL313:
ARM GAS  /tmp/ccI3eitI.s 			page 72


 2870 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2871              	.LVL314:
1168:Src/nRF24.c   **** }
 2872              		.loc 1 1168 0
 2873 0012 03B0     		add	sp, sp, #12
 2874              	.LCFI96:
 2875              		.cfi_def_cfa_offset 4
 2876              		@ sp needed
 2877 0014 5DF804FB 		ldr	pc, [sp], #4
 2878              		.cfi_endproc
 2879              	.LFE179:
 2881              		.section	.text.nRF24_get_RX_ADDR_P4,"ax",%progbits
 2882              		.align	1
 2883              		.global	nRF24_get_RX_ADDR_P4
 2884              		.syntax unified
 2885              		.thumb
 2886              		.thumb_func
 2887              		.fpu fpv4-sp-d16
 2889              	nRF24_get_RX_ADDR_P4:
 2890              	.LFB180:
1169:Src/nRF24.c   **** 
1170:Src/nRF24.c   **** /**
1171:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P4> register from nRF24.
1172:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1173:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1174:Src/nRF24.c   ****   * @retval     None.
1175:Src/nRF24.c   ****   */
1176:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P4(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1177:Src/nRF24.c   **** {
 2891              		.loc 1 1177 0
 2892              		.cfi_startproc
 2893              		@ args = 0, pretend = 0, frame = 0
 2894              		@ frame_needed = 0, uses_anonymous_args = 0
 2895              	.LVL315:
 2896 0000 08B5     		push	{r3, lr}
 2897              	.LCFI97:
 2898              		.cfi_def_cfa_offset 8
 2899              		.cfi_offset 3, -8
 2900              		.cfi_offset 14, -4
1178:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, rx_addr_width, p_read_buffer);
 2901              		.loc 1 1178 0
 2902 0002 0A46     		mov	r2, r1
 2903 0004 0146     		mov	r1, r0
 2904              	.LVL316:
 2905 0006 0E20     		movs	r0, #14
 2906              	.LVL317:
 2907 0008 FFF7FEFF 		bl	spi_read_register
 2908              	.LVL318:
 2909 000c 08BD     		pop	{r3, pc}
 2910              		.cfi_endproc
 2911              	.LFE180:
 2913              		.section	.text.nRF24_set_RX_ADDR_P5,"ax",%progbits
 2914              		.align	1
 2915              		.global	nRF24_set_RX_ADDR_P5
 2916              		.syntax unified
 2917              		.thumb
 2918              		.thumb_func
ARM GAS  /tmp/ccI3eitI.s 			page 73


 2919              		.fpu fpv4-sp-d16
 2921              	nRF24_set_RX_ADDR_P5:
 2922              	.LFB181:
1179:Src/nRF24.c   **** }
1180:Src/nRF24.c   **** 
1181:Src/nRF24.c   **** /**
1182:Src/nRF24.c   ****   * @brief  Set RX (receive) address for data pipe 5.
1183:Src/nRF24.c   ****   * @param  rx_addr_p5 Byte storing receive address for data pipe 5. 
1184:Src/nRF24.c   ****   *           rx_addr_p5 overwrite the Least Significant Byte on RX_ADDR_P1
1185:Src/nRF24.c   ****   *           Given an example,
1186:Src/nRF24.c   ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1187:Src/nRF24.c   ****   *           RX_ADDR_P5 = 0x--------C6 = 0xC2C2C2C2C6
1188:Src/nRF24.c   ****   * @retval None.
1189:Src/nRF24.c   ****   */
1190:Src/nRF24.c   **** void nRF24_set_RX_ADDR_P5(uint8_t rx_addr_p5) 
1191:Src/nRF24.c   **** {
 2923              		.loc 1 1191 0
 2924              		.cfi_startproc
 2925              		@ args = 0, pretend = 0, frame = 8
 2926              		@ frame_needed = 0, uses_anonymous_args = 0
 2927              	.LVL319:
 2928 0000 00B5     		push	{lr}
 2929              	.LCFI98:
 2930              		.cfi_def_cfa_offset 4
 2931              		.cfi_offset 14, -4
 2932 0002 83B0     		sub	sp, sp, #12
 2933              	.LCFI99:
 2934              		.cfi_def_cfa_offset 16
1192:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1193:Src/nRF24.c   ****   writing_byte |= rx_addr_p5;
 2935              		.loc 1 1193 0
 2936 0004 02AA     		add	r2, sp, #8
 2937 0006 02F8010D 		strb	r0, [r2, #-1]!
1194:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P5, 1, &writing_byte);
 2938              		.loc 1 1194 0
 2939 000a 0121     		movs	r1, #1
 2940 000c 2F20     		movs	r0, #47
 2941              	.LVL320:
 2942 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2943              	.LVL321:
1195:Src/nRF24.c   **** }
 2944              		.loc 1 1195 0
 2945 0012 03B0     		add	sp, sp, #12
 2946              	.LCFI100:
 2947              		.cfi_def_cfa_offset 4
 2948              		@ sp needed
 2949 0014 5DF804FB 		ldr	pc, [sp], #4
 2950              		.cfi_endproc
 2951              	.LFE181:
 2953              		.section	.text.nRF24_get_RX_ADDR_P5,"ax",%progbits
 2954              		.align	1
 2955              		.global	nRF24_get_RX_ADDR_P5
 2956              		.syntax unified
 2957              		.thumb
 2958              		.thumb_func
 2959              		.fpu fpv4-sp-d16
 2961              	nRF24_get_RX_ADDR_P5:
ARM GAS  /tmp/ccI3eitI.s 			page 74


 2962              	.LFB182:
1196:Src/nRF24.c   **** 
1197:Src/nRF24.c   **** 
1198:Src/nRF24.c   **** /**
1199:Src/nRF24.c   ****   * @brief      Read <RX_ADDR_P5> register from nRF24.
1200:Src/nRF24.c   ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1201:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1202:Src/nRF24.c   ****   * @retval     None.
1203:Src/nRF24.c   ****   */
1204:Src/nRF24.c   **** void nRF24_get_RX_ADDR_P5(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1205:Src/nRF24.c   **** {
 2963              		.loc 1 1205 0
 2964              		.cfi_startproc
 2965              		@ args = 0, pretend = 0, frame = 0
 2966              		@ frame_needed = 0, uses_anonymous_args = 0
 2967              	.LVL322:
 2968 0000 08B5     		push	{r3, lr}
 2969              	.LCFI101:
 2970              		.cfi_def_cfa_offset 8
 2971              		.cfi_offset 3, -8
 2972              		.cfi_offset 14, -4
1206:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P5, rx_addr_width, p_read_buffer);
 2973              		.loc 1 1206 0
 2974 0002 0A46     		mov	r2, r1
 2975 0004 0146     		mov	r1, r0
 2976              	.LVL323:
 2977 0006 0F20     		movs	r0, #15
 2978              	.LVL324:
 2979 0008 FFF7FEFF 		bl	spi_read_register
 2980              	.LVL325:
 2981 000c 08BD     		pop	{r3, pc}
 2982              		.cfi_endproc
 2983              	.LFE182:
 2985              		.section	.text.nRF24_set_TX_ADDR,"ax",%progbits
 2986              		.align	1
 2987              		.global	nRF24_set_TX_ADDR
 2988              		.syntax unified
 2989              		.thumb
 2990              		.thumb_func
 2991              		.fpu fpv4-sp-d16
 2993              	nRF24_set_TX_ADDR:
 2994              	.LFB183:
1207:Src/nRF24.c   **** }
1208:Src/nRF24.c   **** 
1209:Src/nRF24.c   **** /**
1210:Src/nRF24.c   ****   * @brief  Set TX (transmit) address. Least Significant Byte written first.
1211:Src/nRF24.c   ****   * @param  tx_addr_width The width of TX address. Needs to be consistent with SET_AW.
1212:Src/nRF24.c   ****   * @param  p_tx_addr Pointer to an array storing the transmit address.
1213:Src/nRF24.c   ****   * @retval None.
1214:Src/nRF24.c   ****   */
1215:Src/nRF24.c   **** void nRF24_set_TX_ADDR(uint8_t tx_addr_width, uint8_t* p_tx_addr) 
1216:Src/nRF24.c   **** {
 2995              		.loc 1 1216 0
 2996              		.cfi_startproc
 2997              		@ args = 0, pretend = 0, frame = 0
 2998              		@ frame_needed = 0, uses_anonymous_args = 0
 2999              	.LVL326:
ARM GAS  /tmp/ccI3eitI.s 			page 75


 3000 0000 08B5     		push	{r3, lr}
 3001              	.LCFI102:
 3002              		.cfi_def_cfa_offset 8
 3003              		.cfi_offset 3, -8
 3004              		.cfi_offset 14, -4
1217:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + TX_ADDR, tx_addr_width, p_tx_addr);
 3005              		.loc 1 1217 0
 3006 0002 0A46     		mov	r2, r1
 3007 0004 0146     		mov	r1, r0
 3008              	.LVL327:
 3009 0006 3020     		movs	r0, #48
 3010              	.LVL328:
 3011 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 3012              	.LVL329:
 3013 000c 08BD     		pop	{r3, pc}
 3014              		.cfi_endproc
 3015              	.LFE183:
 3017              		.section	.text.nRF24_config_normal_tx_mode,"ax",%progbits
 3018              		.align	1
 3019              		.global	nRF24_config_normal_tx_mode
 3020              		.syntax unified
 3021              		.thumb
 3022              		.thumb_func
 3023              		.fpu fpv4-sp-d16
 3025              	nRF24_config_normal_tx_mode:
 3026              	.LFB150:
 601:Src/nRF24.c   ****     nRF24_CE_0();
 3027              		.loc 1 601 0
 3028              		.cfi_startproc
 3029              		@ args = 0, pretend = 0, frame = 8
 3030              		@ frame_needed = 0, uses_anonymous_args = 0
 3031 0000 10B5     		push	{r4, lr}
 3032              	.LCFI103:
 3033              		.cfi_def_cfa_offset 8
 3034              		.cfi_offset 4, -8
 3035              		.cfi_offset 14, -4
 3036 0002 86B0     		sub	sp, sp, #24
 3037              	.LCFI104:
 3038              		.cfi_def_cfa_offset 32
 602:Src/nRF24.c   **** 
 3039              		.loc 1 602 0
 3040 0004 FFF7FEFF 		bl	nRF24_CE_0
 3041              	.LVL330:
 605:Src/nRF24.c   ****  
 3042              		.loc 1 605 0
 3043 0008 0320     		movs	r0, #3
 3044 000a FFF7FEFF 		bl	nRF24_set_SETUP_AW
 3045              	.LVL331:
 608:Src/nRF24.c   **** 		nRF24_set_TX_ADDR(5, TX_ADDRESS); 
 3046              		.loc 1 608 0
 3047 000e 1B4B     		ldr	r3, .L165
 3048 0010 93E80300 		ldm	r3, {r0, r1}
 3049 0014 0490     		str	r0, [sp, #16]
 3050 0016 8DF81410 		strb	r1, [sp, #20]
 609:Src/nRF24.c   **** 
 3051              		.loc 1 609 0
 3052 001a 04A9     		add	r1, sp, #16
ARM GAS  /tmp/ccI3eitI.s 			page 76


 3053 001c 0520     		movs	r0, #5
 3054 001e FFF7FEFF 		bl	nRF24_set_TX_ADDR
 3055              	.LVL332:
 612:Src/nRF24.c   **** 
 3056              		.loc 1 612 0
 3057 0022 0024     		movs	r4, #0
 3058 0024 0194     		str	r4, [sp, #4]
 3059 0026 0094     		str	r4, [sp]
 3060 0028 2346     		mov	r3, r4
 3061 002a 2246     		mov	r2, r4
 3062 002c 2146     		mov	r1, r4
 3063 002e 2046     		mov	r0, r4
 3064 0030 FFF7FEFF 		bl	nRF24_set_EN_AA
 3065              	.LVL333:
 615:Src/nRF24.c   **** 
 3066              		.loc 1 615 0
 3067 0034 0194     		str	r4, [sp, #4]
 3068 0036 0094     		str	r4, [sp]
 3069 0038 2346     		mov	r3, r4
 3070 003a 2246     		mov	r2, r4
 3071 003c 2146     		mov	r1, r4
 3072 003e 2046     		mov	r0, r4
 3073 0040 FFF7FEFF 		bl	nRF24_set_EN_RXADDR
 3074              	.LVL334:
 618:Src/nRF24.c   **** 
 3075              		.loc 1 618 0
 3076 0044 2146     		mov	r1, r4
 3077 0046 2046     		mov	r0, r4
 3078 0048 FFF7FEFF 		bl	nRF24_set_SETUP_RETR
 3079              	.LVL335:
 621:Src/nRF24.c   **** 
 3080              		.loc 1 621 0
 3081 004c 2820     		movs	r0, #40
 3082 004e FFF7FEFF 		bl	nRF24_set_RF_CH
 3083              	.LVL336:
 624:Src/nRF24.c   **** 	
 3084              		.loc 1 624 0
 3085 0052 0623     		movs	r3, #6
 3086 0054 0093     		str	r3, [sp]
 3087 0056 0123     		movs	r3, #1
 3088 0058 2246     		mov	r2, r4
 3089 005a 2146     		mov	r1, r4
 3090 005c 2046     		mov	r0, r4
 3091 005e FFF7FEFF 		bl	nRF24_set_RF_SETUP
 3092              	.LVL337:
 627:Src/nRF24.c   **** 
 3093              		.loc 1 627 0
 3094 0062 0294     		str	r4, [sp, #8]
 3095 0064 0223     		movs	r3, #2
 3096 0066 0193     		str	r3, [sp, #4]
 3097 0068 0423     		movs	r3, #4
 3098 006a 0093     		str	r3, [sp]
 3099 006c 0823     		movs	r3, #8
 3100 006e 2246     		mov	r2, r4
 3101 0070 2146     		mov	r1, r4
 3102 0072 2046     		mov	r0, r4
 3103 0074 FFF7FEFF 		bl	nRF24_set_CONFIG
ARM GAS  /tmp/ccI3eitI.s 			page 77


 3104              	.LVL338:
 631:Src/nRF24.c   **** 
 3105              		.loc 1 631 0
 3106 0078 06B0     		add	sp, sp, #24
 3107              	.LCFI105:
 3108              		.cfi_def_cfa_offset 8
 3109              		@ sp needed
 3110 007a 10BD     		pop	{r4, pc}
 3111              	.L166:
 3112              		.align	2
 3113              	.L165:
 3114 007c 04000000 		.word	.LANCHOR0+4
 3115              		.cfi_endproc
 3116              	.LFE150:
 3118              		.section	.text.nRF24_config_enhanced_shockburst_tx_mode,"ax",%progbits
 3119              		.align	1
 3120              		.global	nRF24_config_enhanced_shockburst_tx_mode
 3121              		.syntax unified
 3122              		.thumb
 3123              		.thumb_func
 3124              		.fpu fpv4-sp-d16
 3126              	nRF24_config_enhanced_shockburst_tx_mode:
 3127              	.LFB151:
 645:Src/nRF24.c   ****     nRF24_CE_0();
 3128              		.loc 1 645 0
 3129              		.cfi_startproc
 3130              		@ args = 0, pretend = 0, frame = 16
 3131              		@ frame_needed = 0, uses_anonymous_args = 0
 3132 0000 30B5     		push	{r4, r5, lr}
 3133              	.LCFI106:
 3134              		.cfi_def_cfa_offset 12
 3135              		.cfi_offset 4, -12
 3136              		.cfi_offset 5, -8
 3137              		.cfi_offset 14, -4
 3138 0002 89B0     		sub	sp, sp, #36
 3139              	.LCFI107:
 3140              		.cfi_def_cfa_offset 48
 646:Src/nRF24.c   **** 		// nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 3141              		.loc 1 646 0
 3142 0004 FFF7FEFF 		bl	nRF24_CE_0
 3143              	.LVL339:
 650:Src/nRF24.c   **** 
 3144              		.loc 1 650 0
 3145 0008 0320     		movs	r0, #3
 3146 000a FFF7FEFF 		bl	nRF24_set_SETUP_AW
 3147              	.LVL340:
 652:Src/nRF24.c   **** 		nRF24_set_TX_ADDR(5, TX_ADDRESS);
 3148              		.loc 1 652 0
 3149 000e 1F4B     		ldr	r3, .L169
 3150 0010 93E80300 		ldm	r3, {r0, r1}
 3151 0014 0690     		str	r0, [sp, #24]
 3152 0016 8DF81C10 		strb	r1, [sp, #28]
 653:Src/nRF24.c   **** 
 3153              		.loc 1 653 0
 3154 001a 06A9     		add	r1, sp, #24
 3155 001c 0520     		movs	r0, #5
 3156 001e FFF7FEFF 		bl	nRF24_set_TX_ADDR
ARM GAS  /tmp/ccI3eitI.s 			page 78


 3157              	.LVL341:
 656:Src/nRF24.c   **** 
 3158              		.loc 1 656 0
 3159 0022 06A9     		add	r1, sp, #24
 3160 0024 0520     		movs	r0, #5
 3161 0026 FFF7FEFF 		bl	nRF24_set_RX_ADDR_P0
 3162              	.LVL342:
 658:Src/nRF24.c   **** 		nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P0_
 3163              		.loc 1 658 0
 3164 002a 0125     		movs	r5, #1
 3165 002c 0195     		str	r5, [sp, #4]
 3166 002e 0024     		movs	r4, #0
 3167 0030 0094     		str	r4, [sp]
 3168 0032 2346     		mov	r3, r4
 3169 0034 2246     		mov	r2, r4
 3170 0036 2146     		mov	r1, r4
 3171 0038 2046     		mov	r0, r4
 3172 003a FFF7FEFF 		bl	nRF24_set_EN_AA
 3173              	.LVL343:
 659:Src/nRF24.c   **** 		nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK10);
 3174              		.loc 1 659 0
 3175 003e 0195     		str	r5, [sp, #4]
 3176 0040 0094     		str	r4, [sp]
 3177 0042 2346     		mov	r3, r4
 3178 0044 2246     		mov	r2, r4
 3179 0046 2146     		mov	r1, r4
 3180 0048 2046     		mov	r0, r4
 3181 004a FFF7FEFF 		bl	nRF24_set_EN_RXADDR
 3182              	.LVL344:
 660:Src/nRF24.c   **** 		nRF24_set_RF_CH(40);
 3183              		.loc 1 660 0
 3184 004e 0A21     		movs	r1, #10
 3185 0050 2046     		mov	r0, r4
 3186 0052 FFF7FEFF 		bl	nRF24_set_SETUP_RETR
 3187              	.LVL345:
 661:Src/nRF24.c   **** 		uint8_t writing_byte = 0x07;
 3188              		.loc 1 661 0
 3189 0056 2820     		movs	r0, #40
 3190 0058 FFF7FEFF 		bl	nRF24_set_RF_CH
 3191              	.LVL346:
 662:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 3192              		.loc 1 662 0
 3193 005c 08AA     		add	r2, sp, #32
 3194 005e 0723     		movs	r3, #7
 3195 0060 02F8093D 		strb	r3, [r2, #-9]!
 663:Src/nRF24.c   **** 		// nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_H
 3196              		.loc 1 663 0
 3197 0064 2946     		mov	r1, r5
 3198 0066 2620     		movs	r0, #38
 3199 0068 FFF7FEFF 		bl	nRF24_verified_write_register
 3200              	.LVL347:
 665:Src/nRF24.c   ****     SPI_DELAY(10);
 3201              		.loc 1 665 0
 3202 006c 0294     		str	r4, [sp, #8]
 3203 006e 0223     		movs	r3, #2
 3204 0070 0193     		str	r3, [sp, #4]
 3205 0072 0423     		movs	r3, #4
ARM GAS  /tmp/ccI3eitI.s 			page 79


 3206 0074 0093     		str	r3, [sp]
 3207 0076 0823     		movs	r3, #8
 3208 0078 2246     		mov	r2, r4
 3209 007a 2146     		mov	r1, r4
 3210 007c 2046     		mov	r0, r4
 3211 007e FFF7FEFF 		bl	nRF24_set_CONFIG
 3212              	.LVL348:
 666:Src/nRF24.c   **** 
 3213              		.loc 1 666 0
 3214 0082 0A20     		movs	r0, #10
 3215 0084 FFF7FEFF 		bl	SPI_DELAY
 3216              	.LVL349:
 668:Src/nRF24.c   **** 
 3217              		.loc 1 668 0
 3218 0088 09B0     		add	sp, sp, #36
 3219              	.LCFI108:
 3220              		.cfi_def_cfa_offset 12
 3221              		@ sp needed
 3222 008a 30BD     		pop	{r4, r5, pc}
 3223              	.L170:
 3224              		.align	2
 3225              	.L169:
 3226 008c 04000000 		.word	.LANCHOR0+4
 3227              		.cfi_endproc
 3228              	.LFE151:
 3230              		.section	.text.nRF24_get_TX_ADDR,"ax",%progbits
 3231              		.align	1
 3232              		.global	nRF24_get_TX_ADDR
 3233              		.syntax unified
 3234              		.thumb
 3235              		.thumb_func
 3236              		.fpu fpv4-sp-d16
 3238              	nRF24_get_TX_ADDR:
 3239              	.LFB184:
1218:Src/nRF24.c   **** }
1219:Src/nRF24.c   **** 
1220:Src/nRF24.c   **** 
1221:Src/nRF24.c   **** /**
1222:Src/nRF24.c   ****   * @brief      Read <TX_ADDR> register from nRF24.
1223:Src/nRF24.c   ****   * @param[in]  tx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1224:Src/nRF24.c   ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read TX address.
1225:Src/nRF24.c   ****   * @retval     None.
1226:Src/nRF24.c   ****   */
1227:Src/nRF24.c   **** void nRF24_get_TX_ADDR(uint8_t tx_addr_width, uint8_t* p_read_buffer) 
1228:Src/nRF24.c   **** {
 3240              		.loc 1 1228 0
 3241              		.cfi_startproc
 3242              		@ args = 0, pretend = 0, frame = 0
 3243              		@ frame_needed = 0, uses_anonymous_args = 0
 3244              	.LVL350:
 3245 0000 08B5     		push	{r3, lr}
 3246              	.LCFI109:
 3247              		.cfi_def_cfa_offset 8
 3248              		.cfi_offset 3, -8
 3249              		.cfi_offset 14, -4
1229:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P5, tx_addr_width, p_read_buffer);
 3250              		.loc 1 1229 0
ARM GAS  /tmp/ccI3eitI.s 			page 80


 3251 0002 0A46     		mov	r2, r1
 3252 0004 0146     		mov	r1, r0
 3253              	.LVL351:
 3254 0006 0F20     		movs	r0, #15
 3255              	.LVL352:
 3256 0008 FFF7FEFF 		bl	spi_read_register
 3257              	.LVL353:
 3258 000c 08BD     		pop	{r3, pc}
 3259              		.cfi_endproc
 3260              	.LFE184:
 3262              		.section	.text.nRF24_set_RX_PW_P0,"ax",%progbits
 3263              		.align	1
 3264              		.global	nRF24_set_RX_PW_P0
 3265              		.syntax unified
 3266              		.thumb
 3267              		.thumb_func
 3268              		.fpu fpv4-sp-d16
 3270              	nRF24_set_RX_PW_P0:
 3271              	.LFB185:
1230:Src/nRF24.c   **** }
1231:Src/nRF24.c   **** 
1232:Src/nRF24.c   **** /**
1233:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 0.
1234:Src/nRF24.c   ****   * @param rx_pw_p0 Number of bytes. 
1235:Src/nRF24.c   ****   *          0 = pipe not used.
1236:Src/nRF24.c   ****   *          1 = 1 byte.
1237:Src/nRF24.c   ****   *          2 = 2 bytes.
1238:Src/nRF24.c   ****   *          ...
1239:Src/nRF24.c   ****   *          32 = 32 bytes.
1240:Src/nRF24.c   ****   */
1241:Src/nRF24.c   **** void nRF24_set_RX_PW_P0(uint8_t rx_pw_p0) 
1242:Src/nRF24.c   **** {
 3272              		.loc 1 1242 0
 3273              		.cfi_startproc
 3274              		@ args = 0, pretend = 0, frame = 8
 3275              		@ frame_needed = 0, uses_anonymous_args = 0
 3276              	.LVL354:
 3277 0000 00B5     		push	{lr}
 3278              	.LCFI110:
 3279              		.cfi_def_cfa_offset 4
 3280              		.cfi_offset 14, -4
 3281 0002 83B0     		sub	sp, sp, #12
 3282              	.LCFI111:
 3283              		.cfi_def_cfa_offset 16
1243:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1244:Src/nRF24.c   ****   writing_byte |= rx_pw_p0;
 3284              		.loc 1 1244 0
 3285 0004 02AA     		add	r2, sp, #8
 3286 0006 02F8010D 		strb	r0, [r2, #-1]!
1245:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P0, 1, &writing_byte);
 3287              		.loc 1 1245 0
 3288 000a 0121     		movs	r1, #1
 3289 000c 3120     		movs	r0, #49
 3290              	.LVL355:
 3291 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3292              	.LVL356:
1246:Src/nRF24.c   **** }
ARM GAS  /tmp/ccI3eitI.s 			page 81


 3293              		.loc 1 1246 0
 3294 0012 03B0     		add	sp, sp, #12
 3295              	.LCFI112:
 3296              		.cfi_def_cfa_offset 4
 3297              		@ sp needed
 3298 0014 5DF804FB 		ldr	pc, [sp], #4
 3299              		.cfi_endproc
 3300              	.LFE185:
 3302              		.section	.text.nRF24_get_RX_PW_P0,"ax",%progbits
 3303              		.align	1
 3304              		.global	nRF24_get_RX_PW_P0
 3305              		.syntax unified
 3306              		.thumb
 3307              		.thumb_func
 3308              		.fpu fpv4-sp-d16
 3310              	nRF24_get_RX_PW_P0:
 3311              	.LFB186:
1247:Src/nRF24.c   **** 
1248:Src/nRF24.c   **** 
1249:Src/nRF24.c   **** /**
1250:Src/nRF24.c   ****   * @brief      Read <RX_PW_P0> register from nRF24.
1251:Src/nRF24.c   ****   * @param      None.
1252:Src/nRF24.c   ****   * @retval     <RX_PW_P0> register value.
1253:Src/nRF24.c   ****   */
1254:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P0() 
1255:Src/nRF24.c   **** {
 3312              		.loc 1 1255 0
 3313              		.cfi_startproc
 3314              		@ args = 0, pretend = 0, frame = 8
 3315              		@ frame_needed = 0, uses_anonymous_args = 0
 3316 0000 00B5     		push	{lr}
 3317              	.LCFI113:
 3318              		.cfi_def_cfa_offset 4
 3319              		.cfi_offset 14, -4
 3320 0002 83B0     		sub	sp, sp, #12
 3321              	.LCFI114:
 3322              		.cfi_def_cfa_offset 16
1256:Src/nRF24.c   ****   uint8_t read_byte;
1257:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P0, 1, &read_byte);
 3323              		.loc 1 1257 0
 3324 0004 0DF10702 		add	r2, sp, #7
 3325 0008 0121     		movs	r1, #1
 3326 000a 1120     		movs	r0, #17
 3327 000c FFF7FEFF 		bl	spi_read_register
 3328              	.LVL357:
1258:Src/nRF24.c   ****   return read_byte;
1259:Src/nRF24.c   **** }
 3329              		.loc 1 1259 0
 3330 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3331 0014 03B0     		add	sp, sp, #12
 3332              	.LCFI115:
 3333              		.cfi_def_cfa_offset 4
 3334              		@ sp needed
 3335 0016 5DF804FB 		ldr	pc, [sp], #4
 3336              		.cfi_endproc
 3337              	.LFE186:
 3339              		.section	.text.nRF24_set_RX_PW_P1,"ax",%progbits
ARM GAS  /tmp/ccI3eitI.s 			page 82


 3340              		.align	1
 3341              		.global	nRF24_set_RX_PW_P1
 3342              		.syntax unified
 3343              		.thumb
 3344              		.thumb_func
 3345              		.fpu fpv4-sp-d16
 3347              	nRF24_set_RX_PW_P1:
 3348              	.LFB187:
1260:Src/nRF24.c   **** 
1261:Src/nRF24.c   **** 
1262:Src/nRF24.c   **** /**
1263:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 1.
1264:Src/nRF24.c   ****   * @param rx_pw_p1 Number of bytes. 
1265:Src/nRF24.c   ****   *          0 = pipe not used.
1266:Src/nRF24.c   ****   *          1 = 1 byte.
1267:Src/nRF24.c   ****   *          2 = 2 bytes.
1268:Src/nRF24.c   ****   *          ...
1269:Src/nRF24.c   ****   *          32 = 32 bytes.
1270:Src/nRF24.c   ****   * @retval None.
1271:Src/nRF24.c   ****   */
1272:Src/nRF24.c   **** void nRF24_set_RX_PW_P1(uint8_t rx_pw_p1) 
1273:Src/nRF24.c   **** {
 3349              		.loc 1 1273 0
 3350              		.cfi_startproc
 3351              		@ args = 0, pretend = 0, frame = 8
 3352              		@ frame_needed = 0, uses_anonymous_args = 0
 3353              	.LVL358:
 3354 0000 00B5     		push	{lr}
 3355              	.LCFI116:
 3356              		.cfi_def_cfa_offset 4
 3357              		.cfi_offset 14, -4
 3358 0002 83B0     		sub	sp, sp, #12
 3359              	.LCFI117:
 3360              		.cfi_def_cfa_offset 16
1274:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1275:Src/nRF24.c   ****   writing_byte |= rx_pw_p1;
 3361              		.loc 1 1275 0
 3362 0004 02AA     		add	r2, sp, #8
 3363 0006 02F8010D 		strb	r0, [r2, #-1]!
1276:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P1, 1, &writing_byte);
 3364              		.loc 1 1276 0
 3365 000a 0121     		movs	r1, #1
 3366 000c 3220     		movs	r0, #50
 3367              	.LVL359:
 3368 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3369              	.LVL360:
1277:Src/nRF24.c   **** }
 3370              		.loc 1 1277 0
 3371 0012 03B0     		add	sp, sp, #12
 3372              	.LCFI118:
 3373              		.cfi_def_cfa_offset 4
 3374              		@ sp needed
 3375 0014 5DF804FB 		ldr	pc, [sp], #4
 3376              		.cfi_endproc
 3377              	.LFE187:
 3379              		.section	.text.nRF24_get_RX_PW_P1,"ax",%progbits
 3380              		.align	1
ARM GAS  /tmp/ccI3eitI.s 			page 83


 3381              		.global	nRF24_get_RX_PW_P1
 3382              		.syntax unified
 3383              		.thumb
 3384              		.thumb_func
 3385              		.fpu fpv4-sp-d16
 3387              	nRF24_get_RX_PW_P1:
 3388              	.LFB188:
1278:Src/nRF24.c   **** 
1279:Src/nRF24.c   **** 
1280:Src/nRF24.c   **** /**
1281:Src/nRF24.c   ****   * @brief      Read <RX_PW_P1> register from nRF24.
1282:Src/nRF24.c   ****   * @param      None.
1283:Src/nRF24.c   ****   * @retval     <RX_PW_P1> register value.
1284:Src/nRF24.c   ****   */
1285:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P1() 
1286:Src/nRF24.c   **** {
 3389              		.loc 1 1286 0
 3390              		.cfi_startproc
 3391              		@ args = 0, pretend = 0, frame = 8
 3392              		@ frame_needed = 0, uses_anonymous_args = 0
 3393 0000 00B5     		push	{lr}
 3394              	.LCFI119:
 3395              		.cfi_def_cfa_offset 4
 3396              		.cfi_offset 14, -4
 3397 0002 83B0     		sub	sp, sp, #12
 3398              	.LCFI120:
 3399              		.cfi_def_cfa_offset 16
1287:Src/nRF24.c   ****   uint8_t read_byte;
1288:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P1, 1, &read_byte);
 3400              		.loc 1 1288 0
 3401 0004 0DF10702 		add	r2, sp, #7
 3402 0008 0121     		movs	r1, #1
 3403 000a 1220     		movs	r0, #18
 3404 000c FFF7FEFF 		bl	spi_read_register
 3405              	.LVL361:
1289:Src/nRF24.c   ****   return read_byte;
1290:Src/nRF24.c   **** }
 3406              		.loc 1 1290 0
 3407 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3408 0014 03B0     		add	sp, sp, #12
 3409              	.LCFI121:
 3410              		.cfi_def_cfa_offset 4
 3411              		@ sp needed
 3412 0016 5DF804FB 		ldr	pc, [sp], #4
 3413              		.cfi_endproc
 3414              	.LFE188:
 3416              		.section	.text.nRF24_set_RX_PW_P2,"ax",%progbits
 3417              		.align	1
 3418              		.global	nRF24_set_RX_PW_P2
 3419              		.syntax unified
 3420              		.thumb
 3421              		.thumb_func
 3422              		.fpu fpv4-sp-d16
 3424              	nRF24_set_RX_PW_P2:
 3425              	.LFB189:
1291:Src/nRF24.c   **** 
1292:Src/nRF24.c   **** 
ARM GAS  /tmp/ccI3eitI.s 			page 84


1293:Src/nRF24.c   **** /**
1294:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 2.
1295:Src/nRF24.c   ****   * @param rx_pw_p2 Number of bytes. 
1296:Src/nRF24.c   ****   *          0 = pipe not used.
1297:Src/nRF24.c   ****   *          1 = 1 byte.
1298:Src/nRF24.c   ****   *          2 = 2 bytes.
1299:Src/nRF24.c   ****   *          ...
1300:Src/nRF24.c   ****   *          32 = 32 bytes.
1301:Src/nRF24.c   ****   * @retval None.
1302:Src/nRF24.c   ****   */
1303:Src/nRF24.c   **** void nRF24_set_RX_PW_P2(uint8_t rx_pw_p2) 
1304:Src/nRF24.c   **** {
 3426              		.loc 1 1304 0
 3427              		.cfi_startproc
 3428              		@ args = 0, pretend = 0, frame = 8
 3429              		@ frame_needed = 0, uses_anonymous_args = 0
 3430              	.LVL362:
 3431 0000 00B5     		push	{lr}
 3432              	.LCFI122:
 3433              		.cfi_def_cfa_offset 4
 3434              		.cfi_offset 14, -4
 3435 0002 83B0     		sub	sp, sp, #12
 3436              	.LCFI123:
 3437              		.cfi_def_cfa_offset 16
1305:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1306:Src/nRF24.c   ****   writing_byte |= rx_pw_p2;
 3438              		.loc 1 1306 0
 3439 0004 02AA     		add	r2, sp, #8
 3440 0006 02F8010D 		strb	r0, [r2, #-1]!
1307:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P2, 1, &writing_byte);
 3441              		.loc 1 1307 0
 3442 000a 0121     		movs	r1, #1
 3443 000c 3320     		movs	r0, #51
 3444              	.LVL363:
 3445 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3446              	.LVL364:
1308:Src/nRF24.c   **** }
 3447              		.loc 1 1308 0
 3448 0012 03B0     		add	sp, sp, #12
 3449              	.LCFI124:
 3450              		.cfi_def_cfa_offset 4
 3451              		@ sp needed
 3452 0014 5DF804FB 		ldr	pc, [sp], #4
 3453              		.cfi_endproc
 3454              	.LFE189:
 3456              		.section	.text.nRF24_get_RX_PW_P2,"ax",%progbits
 3457              		.align	1
 3458              		.global	nRF24_get_RX_PW_P2
 3459              		.syntax unified
 3460              		.thumb
 3461              		.thumb_func
 3462              		.fpu fpv4-sp-d16
 3464              	nRF24_get_RX_PW_P2:
 3465              	.LFB190:
1309:Src/nRF24.c   **** 
1310:Src/nRF24.c   **** 
1311:Src/nRF24.c   **** /**
ARM GAS  /tmp/ccI3eitI.s 			page 85


1312:Src/nRF24.c   ****   * @brief      Read <RX_PW_P2> register from nRF24.
1313:Src/nRF24.c   ****   * @param      None.
1314:Src/nRF24.c   ****   * @retval     <RX_PW_P2> register value.
1315:Src/nRF24.c   ****   */
1316:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P2() 
1317:Src/nRF24.c   **** {
 3466              		.loc 1 1317 0
 3467              		.cfi_startproc
 3468              		@ args = 0, pretend = 0, frame = 8
 3469              		@ frame_needed = 0, uses_anonymous_args = 0
 3470 0000 00B5     		push	{lr}
 3471              	.LCFI125:
 3472              		.cfi_def_cfa_offset 4
 3473              		.cfi_offset 14, -4
 3474 0002 83B0     		sub	sp, sp, #12
 3475              	.LCFI126:
 3476              		.cfi_def_cfa_offset 16
1318:Src/nRF24.c   ****   uint8_t read_byte;
1319:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P2, 1, &read_byte);
 3477              		.loc 1 1319 0
 3478 0004 0DF10702 		add	r2, sp, #7
 3479 0008 0121     		movs	r1, #1
 3480 000a 1320     		movs	r0, #19
 3481 000c FFF7FEFF 		bl	spi_read_register
 3482              	.LVL365:
1320:Src/nRF24.c   ****   return read_byte;
1321:Src/nRF24.c   **** }
 3483              		.loc 1 1321 0
 3484 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3485 0014 03B0     		add	sp, sp, #12
 3486              	.LCFI127:
 3487              		.cfi_def_cfa_offset 4
 3488              		@ sp needed
 3489 0016 5DF804FB 		ldr	pc, [sp], #4
 3490              		.cfi_endproc
 3491              	.LFE190:
 3493              		.section	.text.nRF24_set_RX_PW_P3,"ax",%progbits
 3494              		.align	1
 3495              		.global	nRF24_set_RX_PW_P3
 3496              		.syntax unified
 3497              		.thumb
 3498              		.thumb_func
 3499              		.fpu fpv4-sp-d16
 3501              	nRF24_set_RX_PW_P3:
 3502              	.LFB191:
1322:Src/nRF24.c   **** 
1323:Src/nRF24.c   **** 
1324:Src/nRF24.c   **** /**
1325:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 3.
1326:Src/nRF24.c   ****   * @param rx_pw_p3 Number of bytes. 
1327:Src/nRF24.c   ****   *          0 = pipe not used.
1328:Src/nRF24.c   ****   *          1 = 1 byte.
1329:Src/nRF24.c   ****   *          2 = 2 bytes.
1330:Src/nRF24.c   ****   *          ...
1331:Src/nRF24.c   ****   *          32 = 32 bytes.
1332:Src/nRF24.c   ****   * @retval None.
1333:Src/nRF24.c   ****   */
ARM GAS  /tmp/ccI3eitI.s 			page 86


1334:Src/nRF24.c   **** void nRF24_set_RX_PW_P3(uint8_t rx_pw_p3) 
1335:Src/nRF24.c   **** {
 3503              		.loc 1 1335 0
 3504              		.cfi_startproc
 3505              		@ args = 0, pretend = 0, frame = 8
 3506              		@ frame_needed = 0, uses_anonymous_args = 0
 3507              	.LVL366:
 3508 0000 00B5     		push	{lr}
 3509              	.LCFI128:
 3510              		.cfi_def_cfa_offset 4
 3511              		.cfi_offset 14, -4
 3512 0002 83B0     		sub	sp, sp, #12
 3513              	.LCFI129:
 3514              		.cfi_def_cfa_offset 16
1336:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1337:Src/nRF24.c   ****   writing_byte |= rx_pw_p3;
 3515              		.loc 1 1337 0
 3516 0004 02AA     		add	r2, sp, #8
 3517 0006 02F8010D 		strb	r0, [r2, #-1]!
1338:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P3, 1, &writing_byte);
 3518              		.loc 1 1338 0
 3519 000a 0121     		movs	r1, #1
 3520 000c 3420     		movs	r0, #52
 3521              	.LVL367:
 3522 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3523              	.LVL368:
1339:Src/nRF24.c   **** }
 3524              		.loc 1 1339 0
 3525 0012 03B0     		add	sp, sp, #12
 3526              	.LCFI130:
 3527              		.cfi_def_cfa_offset 4
 3528              		@ sp needed
 3529 0014 5DF804FB 		ldr	pc, [sp], #4
 3530              		.cfi_endproc
 3531              	.LFE191:
 3533              		.section	.text.nRF24_get_RX_PW_P3,"ax",%progbits
 3534              		.align	1
 3535              		.global	nRF24_get_RX_PW_P3
 3536              		.syntax unified
 3537              		.thumb
 3538              		.thumb_func
 3539              		.fpu fpv4-sp-d16
 3541              	nRF24_get_RX_PW_P3:
 3542              	.LFB192:
1340:Src/nRF24.c   **** 
1341:Src/nRF24.c   **** /**
1342:Src/nRF24.c   ****   * @brief      Read <RX_PW_P3> register from nRF24.
1343:Src/nRF24.c   ****   * @param      None.
1344:Src/nRF24.c   ****   * @retval     <RX_PW_P3> register value.
1345:Src/nRF24.c   ****   */
1346:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P3() 
1347:Src/nRF24.c   **** {
 3543              		.loc 1 1347 0
 3544              		.cfi_startproc
 3545              		@ args = 0, pretend = 0, frame = 8
 3546              		@ frame_needed = 0, uses_anonymous_args = 0
 3547 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccI3eitI.s 			page 87


 3548              	.LCFI131:
 3549              		.cfi_def_cfa_offset 4
 3550              		.cfi_offset 14, -4
 3551 0002 83B0     		sub	sp, sp, #12
 3552              	.LCFI132:
 3553              		.cfi_def_cfa_offset 16
1348:Src/nRF24.c   ****   uint8_t read_byte;
1349:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P3, 1, &read_byte);
 3554              		.loc 1 1349 0
 3555 0004 0DF10702 		add	r2, sp, #7
 3556 0008 0121     		movs	r1, #1
 3557 000a 1420     		movs	r0, #20
 3558 000c FFF7FEFF 		bl	spi_read_register
 3559              	.LVL369:
1350:Src/nRF24.c   ****   return read_byte;
1351:Src/nRF24.c   **** }
 3560              		.loc 1 1351 0
 3561 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3562 0014 03B0     		add	sp, sp, #12
 3563              	.LCFI133:
 3564              		.cfi_def_cfa_offset 4
 3565              		@ sp needed
 3566 0016 5DF804FB 		ldr	pc, [sp], #4
 3567              		.cfi_endproc
 3568              	.LFE192:
 3570              		.section	.text.nRF24_set_RX_PW_P4,"ax",%progbits
 3571              		.align	1
 3572              		.global	nRF24_set_RX_PW_P4
 3573              		.syntax unified
 3574              		.thumb
 3575              		.thumb_func
 3576              		.fpu fpv4-sp-d16
 3578              	nRF24_set_RX_PW_P4:
 3579              	.LFB193:
1352:Src/nRF24.c   **** 
1353:Src/nRF24.c   **** 
1354:Src/nRF24.c   **** /**
1355:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 4.
1356:Src/nRF24.c   ****   * @param rx_pw_p4 Number of bytes. 
1357:Src/nRF24.c   ****   *          0 = pipe not used.
1358:Src/nRF24.c   ****   *          1 = 1 byte.
1359:Src/nRF24.c   ****   *          2 = 2 bytes.
1360:Src/nRF24.c   ****   *          ...
1361:Src/nRF24.c   ****   *          32 = 32 bytes.
1362:Src/nRF24.c   ****   * @retval None.
1363:Src/nRF24.c   ****   */
1364:Src/nRF24.c   **** void nRF24_set_RX_PW_P4(uint8_t rx_pw_p4) 
1365:Src/nRF24.c   **** {
 3580              		.loc 1 1365 0
 3581              		.cfi_startproc
 3582              		@ args = 0, pretend = 0, frame = 8
 3583              		@ frame_needed = 0, uses_anonymous_args = 0
 3584              	.LVL370:
 3585 0000 00B5     		push	{lr}
 3586              	.LCFI134:
 3587              		.cfi_def_cfa_offset 4
 3588              		.cfi_offset 14, -4
ARM GAS  /tmp/ccI3eitI.s 			page 88


 3589 0002 83B0     		sub	sp, sp, #12
 3590              	.LCFI135:
 3591              		.cfi_def_cfa_offset 16
1366:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1367:Src/nRF24.c   ****   writing_byte |= rx_pw_p4;
 3592              		.loc 1 1367 0
 3593 0004 02AA     		add	r2, sp, #8
 3594 0006 02F8010D 		strb	r0, [r2, #-1]!
1368:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P4, 1, &writing_byte);
 3595              		.loc 1 1368 0
 3596 000a 0121     		movs	r1, #1
 3597 000c 3520     		movs	r0, #53
 3598              	.LVL371:
 3599 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3600              	.LVL372:
1369:Src/nRF24.c   **** }
 3601              		.loc 1 1369 0
 3602 0012 03B0     		add	sp, sp, #12
 3603              	.LCFI136:
 3604              		.cfi_def_cfa_offset 4
 3605              		@ sp needed
 3606 0014 5DF804FB 		ldr	pc, [sp], #4
 3607              		.cfi_endproc
 3608              	.LFE193:
 3610              		.section	.text.nRF24_get_RX_PW_P4,"ax",%progbits
 3611              		.align	1
 3612              		.global	nRF24_get_RX_PW_P4
 3613              		.syntax unified
 3614              		.thumb
 3615              		.thumb_func
 3616              		.fpu fpv4-sp-d16
 3618              	nRF24_get_RX_PW_P4:
 3619              	.LFB194:
1370:Src/nRF24.c   **** 
1371:Src/nRF24.c   **** /**
1372:Src/nRF24.c   ****   * @brief      Read <RX_PW_P4> register from nRF24.
1373:Src/nRF24.c   ****   * @param      None.
1374:Src/nRF24.c   ****   * @retval     <RX_PW_P4> register value.
1375:Src/nRF24.c   ****   */
1376:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P4() 
1377:Src/nRF24.c   **** {
 3620              		.loc 1 1377 0
 3621              		.cfi_startproc
 3622              		@ args = 0, pretend = 0, frame = 8
 3623              		@ frame_needed = 0, uses_anonymous_args = 0
 3624 0000 00B5     		push	{lr}
 3625              	.LCFI137:
 3626              		.cfi_def_cfa_offset 4
 3627              		.cfi_offset 14, -4
 3628 0002 83B0     		sub	sp, sp, #12
 3629              	.LCFI138:
 3630              		.cfi_def_cfa_offset 16
1378:Src/nRF24.c   ****   uint8_t read_byte;
1379:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P4, 1, &read_byte);
 3631              		.loc 1 1379 0
 3632 0004 0DF10702 		add	r2, sp, #7
 3633 0008 0121     		movs	r1, #1
ARM GAS  /tmp/ccI3eitI.s 			page 89


 3634 000a 1520     		movs	r0, #21
 3635 000c FFF7FEFF 		bl	spi_read_register
 3636              	.LVL373:
1380:Src/nRF24.c   ****   return read_byte;
1381:Src/nRF24.c   **** }
 3637              		.loc 1 1381 0
 3638 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3639 0014 03B0     		add	sp, sp, #12
 3640              	.LCFI139:
 3641              		.cfi_def_cfa_offset 4
 3642              		@ sp needed
 3643 0016 5DF804FB 		ldr	pc, [sp], #4
 3644              		.cfi_endproc
 3645              	.LFE194:
 3647              		.section	.text.nRF24_set_RX_PW_P5,"ax",%progbits
 3648              		.align	1
 3649              		.global	nRF24_set_RX_PW_P5
 3650              		.syntax unified
 3651              		.thumb
 3652              		.thumb_func
 3653              		.fpu fpv4-sp-d16
 3655              	nRF24_set_RX_PW_P5:
 3656              	.LFB195:
1382:Src/nRF24.c   **** 
1383:Src/nRF24.c   **** /**
1384:Src/nRF24.c   ****   * @brief Set number of bytes in RX payload in data pipe 5.
1385:Src/nRF24.c   ****   * @param rx_pw_p5 Number of bytes. 
1386:Src/nRF24.c   ****   *          0 = pipe not used.
1387:Src/nRF24.c   ****   *          1 = 1 byte.
1388:Src/nRF24.c   ****   *          2 = 2 bytes.
1389:Src/nRF24.c   ****   *          ...
1390:Src/nRF24.c   ****   *          32 = 32 bytes.
1391:Src/nRF24.c   ****   * @retval None.
1392:Src/nRF24.c   ****   */
1393:Src/nRF24.c   **** void nRF24_set_RX_PW_P5(uint8_t rx_pw_p5) 
1394:Src/nRF24.c   **** {
 3657              		.loc 1 1394 0
 3658              		.cfi_startproc
 3659              		@ args = 0, pretend = 0, frame = 8
 3660              		@ frame_needed = 0, uses_anonymous_args = 0
 3661              	.LVL374:
 3662 0000 00B5     		push	{lr}
 3663              	.LCFI140:
 3664              		.cfi_def_cfa_offset 4
 3665              		.cfi_offset 14, -4
 3666 0002 83B0     		sub	sp, sp, #12
 3667              	.LCFI141:
 3668              		.cfi_def_cfa_offset 16
1395:Src/nRF24.c   ****   uint8_t writing_byte = 0x00;
1396:Src/nRF24.c   ****   writing_byte |= rx_pw_p5;
 3669              		.loc 1 1396 0
 3670 0004 02AA     		add	r2, sp, #8
 3671 0006 02F8010D 		strb	r0, [r2, #-1]!
1397:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P5, 1, &writing_byte);
 3672              		.loc 1 1397 0
 3673 000a 0121     		movs	r1, #1
 3674 000c 3620     		movs	r0, #54
ARM GAS  /tmp/ccI3eitI.s 			page 90


 3675              	.LVL375:
 3676 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3677              	.LVL376:
1398:Src/nRF24.c   **** }
 3678              		.loc 1 1398 0
 3679 0012 03B0     		add	sp, sp, #12
 3680              	.LCFI142:
 3681              		.cfi_def_cfa_offset 4
 3682              		@ sp needed
 3683 0014 5DF804FB 		ldr	pc, [sp], #4
 3684              		.cfi_endproc
 3685              	.LFE195:
 3687              		.section	.text.nRF24_get_RX_PW_P5,"ax",%progbits
 3688              		.align	1
 3689              		.global	nRF24_get_RX_PW_P5
 3690              		.syntax unified
 3691              		.thumb
 3692              		.thumb_func
 3693              		.fpu fpv4-sp-d16
 3695              	nRF24_get_RX_PW_P5:
 3696              	.LFB196:
1399:Src/nRF24.c   **** 
1400:Src/nRF24.c   **** /**
1401:Src/nRF24.c   ****   * @brief      Read <RX_PW_P5> register from nRF24.
1402:Src/nRF24.c   ****   * @param      None.
1403:Src/nRF24.c   ****   * @retval     <RX_PW_P5> register value.
1404:Src/nRF24.c   ****   */
1405:Src/nRF24.c   **** uint8_t nRF24_get_RX_PW_P5() 
1406:Src/nRF24.c   **** {
 3697              		.loc 1 1406 0
 3698              		.cfi_startproc
 3699              		@ args = 0, pretend = 0, frame = 8
 3700              		@ frame_needed = 0, uses_anonymous_args = 0
 3701 0000 00B5     		push	{lr}
 3702              	.LCFI143:
 3703              		.cfi_def_cfa_offset 4
 3704              		.cfi_offset 14, -4
 3705 0002 83B0     		sub	sp, sp, #12
 3706              	.LCFI144:
 3707              		.cfi_def_cfa_offset 16
1407:Src/nRF24.c   ****   uint8_t read_byte;
1408:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + RX_PW_P5, 1, &read_byte);
 3708              		.loc 1 1408 0
 3709 0004 0DF10702 		add	r2, sp, #7
 3710 0008 0121     		movs	r1, #1
 3711 000a 1620     		movs	r0, #22
 3712 000c FFF7FEFF 		bl	spi_read_register
 3713              	.LVL377:
1409:Src/nRF24.c   ****   return read_byte;
1410:Src/nRF24.c   **** }
 3714              		.loc 1 1410 0
 3715 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3716 0014 03B0     		add	sp, sp, #12
 3717              	.LCFI145:
 3718              		.cfi_def_cfa_offset 4
 3719              		@ sp needed
 3720 0016 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccI3eitI.s 			page 91


 3721              		.cfi_endproc
 3722              	.LFE196:
 3724              		.section	.text.nRF24_get_FIFO_STATUS,"ax",%progbits
 3725              		.align	1
 3726              		.global	nRF24_get_FIFO_STATUS
 3727              		.syntax unified
 3728              		.thumb
 3729              		.thumb_func
 3730              		.fpu fpv4-sp-d16
 3732              	nRF24_get_FIFO_STATUS:
 3733              	.LFB197:
1411:Src/nRF24.c   **** 
1412:Src/nRF24.c   **** 
1413:Src/nRF24.c   **** /**
1414:Src/nRF24.c   ****   * @brief      Read 'FIFO_STATUS' register from nRF24.
1415:Src/nRF24.c   ****   * @param      None.
1416:Src/nRF24.c   ****   * @retval     FIFO_STATUS register value.
1417:Src/nRF24.c   ****   * @note  Following masks can be used:
1418:Src/nRF24.c   ****   *  TX_REUSE_READMASK  
1419:Src/nRF24.c   ****   *  TX_EMPTY_READMASK  
1420:Src/nRF24.c   ****   *  RX_FULL_READMASK 
1421:Src/nRF24.c   ****   *  RX_EMPTY_READMASK 
1422:Src/nRF24.c   ****   */
1423:Src/nRF24.c   **** uint8_t nRF24_get_FIFO_STATUS() 
1424:Src/nRF24.c   **** {
 3734              		.loc 1 1424 0
 3735              		.cfi_startproc
 3736              		@ args = 0, pretend = 0, frame = 8
 3737              		@ frame_needed = 0, uses_anonymous_args = 0
 3738 0000 00B5     		push	{lr}
 3739              	.LCFI146:
 3740              		.cfi_def_cfa_offset 4
 3741              		.cfi_offset 14, -4
 3742 0002 83B0     		sub	sp, sp, #12
 3743              	.LCFI147:
 3744              		.cfi_def_cfa_offset 16
1425:Src/nRF24.c   ****   uint8_t fifo_status;
1426:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + FIFO_STATUS, 1, &fifo_status);
 3745              		.loc 1 1426 0
 3746 0004 0DF10702 		add	r2, sp, #7
 3747 0008 0121     		movs	r1, #1
 3748 000a 1720     		movs	r0, #23
 3749 000c FFF7FEFF 		bl	spi_read_register
 3750              	.LVL378:
1427:Src/nRF24.c   ****   return fifo_status;
1428:Src/nRF24.c   **** }
 3751              		.loc 1 1428 0
 3752 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3753 0014 03B0     		add	sp, sp, #12
 3754              	.LCFI148:
 3755              		.cfi_def_cfa_offset 4
 3756              		@ sp needed
 3757 0016 5DF804FB 		ldr	pc, [sp], #4
 3758              		.cfi_endproc
 3759              	.LFE197:
 3761              		.section	.text.nRF24_release_payload,"ax",%progbits
 3762              		.align	1
ARM GAS  /tmp/ccI3eitI.s 			page 92


 3763              		.global	nRF24_release_payload
 3764              		.syntax unified
 3765              		.thumb
 3766              		.thumb_func
 3767              		.fpu fpv4-sp-d16
 3769              	nRF24_release_payload:
 3770              	.LFB198:
1429:Src/nRF24.c   **** 
1430:Src/nRF24.c   **** /**
1431:Src/nRF24.c   **** 	* @brief Write the payload (data to transfer) to the TX FIFO.
1432:Src/nRF24.c   **** 	* @param tx_payload_width Length of the payload in number of bytes.
1433:Src/nRF24.c   **** 	            (!) tx_payload_width MUST be the same value as the receiver's <RX_PW_Px> to receive. x
1434:Src/nRF24.c   **** 	* @param payload  Actual data to transfer.
1435:Src/nRF24.c   **** 	* @retval None.
1436:Src/nRF24.c   **** 	*/
1437:Src/nRF24.c   **** void nRF24_release_payload(uint8_t tx_payload_width, uint8_t* payload)
1438:Src/nRF24.c   **** {
 3771              		.loc 1 1438 0
 3772              		.cfi_startproc
 3773              		@ args = 0, pretend = 0, frame = 0
 3774              		@ frame_needed = 0, uses_anonymous_args = 0
 3775              	.LVL379:
 3776 0000 08B5     		push	{r3, lr}
 3777              	.LCFI149:
 3778              		.cfi_def_cfa_offset 8
 3779              		.cfi_offset 3, -8
 3780              		.cfi_offset 14, -4
1439:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, tx_payload_width, payload);
 3781              		.loc 1 1439 0
 3782 0002 0A46     		mov	r2, r1
 3783 0004 0146     		mov	r1, r0
 3784              	.LVL380:
 3785 0006 A020     		movs	r0, #160
 3786              	.LVL381:
 3787 0008 FFF7FEFF 		bl	spi_write_register
 3788              	.LVL382:
 3789 000c 08BD     		pop	{r3, pc}
 3790              		.cfi_endproc
 3791              	.LFE198:
 3793              		.section	.text.nRF24_send_packet,"ax",%progbits
 3794              		.align	1
 3795              		.global	nRF24_send_packet
 3796              		.syntax unified
 3797              		.thumb
 3798              		.thumb_func
 3799              		.fpu fpv4-sp-d16
 3801              	nRF24_send_packet:
 3802              	.LFB149:
 549:Src/nRF24.c   **** 
 3803              		.loc 1 549 0
 3804              		.cfi_startproc
 3805              		@ args = 0, pretend = 0, frame = 72
 3806              		@ frame_needed = 0, uses_anonymous_args = 0
 3807              	.LVL383:
 3808 0000 30B5     		push	{r4, r5, lr}
 3809              	.LCFI150:
 3810              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccI3eitI.s 			page 93


 3811              		.cfi_offset 4, -12
 3812              		.cfi_offset 5, -8
 3813              		.cfi_offset 14, -4
 3814 0002 93B0     		sub	sp, sp, #76
 3815              	.LCFI151:
 3816              		.cfi_def_cfa_offset 88
 554:Src/nRF24.c   **** 
 3817              		.loc 1 554 0
 3818 0004 FFF7FEFF 		bl	nRF24_release_payload
 3819              	.LVL384:
 557:Src/nRF24.c   **** 
 3820              		.loc 1 557 0
 3821 0008 FFF7FEFF 		bl	nRF24_CE_1
 3822              	.LVL385:
 561:Src/nRF24.c   **** 
 3823              		.loc 1 561 0
 3824 000c 0DF10702 		add	r2, sp, #7
 3825 0010 0121     		movs	r1, #1
 3826 0012 0720     		movs	r0, #7
 3827 0014 FFF7FEFF 		bl	spi_read_register
 3828              	.LVL386:
 565:Src/nRF24.c   ****   serial_print(message);
 3829              		.loc 1 565 0
 3830 0018 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 3831 001c 2149     		ldr	r1, .L206
 3832 001e 02A8     		add	r0, sp, #8
 3833 0020 FFF7FEFF 		bl	sprintf
 3834              	.LVL387:
 3835              	.LBB164:
 3836              	.LBB165:
 124:Src/nRF24.c   **** }
 3837              		.loc 1 124 0
 3838 0024 02A8     		add	r0, sp, #8
 3839              	.LVL388:
 3840 0026 FFF7FEFF 		bl	strlen
 3841              	.LVL389:
 3842 002a 6423     		movs	r3, #100
 3843 002c 82B2     		uxth	r2, r0
 3844 002e 02A9     		add	r1, sp, #8
 3845              	.LVL390:
 3846 0030 1D48     		ldr	r0, .L206+4
 3847 0032 FFF7FEFF 		bl	HAL_UART_Transmit
 3848              	.LVL391:
 3849              	.LBE165:
 3850              	.LBE164:
 570:Src/nRF24.c   ****   {
 3851              		.loc 1 570 0
 3852 0036 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 3853 003a 2E2B     		cmp	r3, #46
 3854 003c 1CD0     		beq	.L205
 580:Src/nRF24.c   ****     serial_print(message);
 3855              		.loc 1 580 0
 3856 003e 02AC     		add	r4, sp, #8
 3857 0040 1A4D     		ldr	r5, .L206+8
 3858 0042 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3859 0044 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 3860 0046 95E80F00 		ldm	r5, {r0, r1, r2, r3}
ARM GAS  /tmp/ccI3eitI.s 			page 94


 3861 004a 07C4     		stmia	r4!, {r0, r1, r2}
 3862 004c 24F8023B 		strh	r3, [r4], #2	@ movhi
 3863 0050 1B0C     		lsrs	r3, r3, #16
 3864 0052 2370     		strb	r3, [r4]
 3865              	.LVL392:
 3866              	.LBB166:
 3867              	.LBB167:
 124:Src/nRF24.c   **** }
 3868              		.loc 1 124 0
 3869 0054 02A8     		add	r0, sp, #8
 3870              	.LVL393:
 3871 0056 FFF7FEFF 		bl	strlen
 3872              	.LVL394:
 3873 005a 6423     		movs	r3, #100
 3874 005c 82B2     		uxth	r2, r0
 3875 005e 02A9     		add	r1, sp, #8
 3876              	.LVL395:
 3877 0060 1148     		ldr	r0, .L206+4
 3878 0062 FFF7FEFF 		bl	HAL_UART_Transmit
 3879              	.LVL396:
 3880              	.L203:
 3881              	.LBE167:
 3882              	.LBE166:
 586:Src/nRF24.c   **** 
 3883              		.loc 1 586 0
 3884 0066 1022     		movs	r2, #16
 3885 0068 2021     		movs	r1, #32
 3886 006a 4020     		movs	r0, #64
 3887 006c FFF7FEFF 		bl	nRF24_clear_STATUS
 3888              	.LVL397:
 589:Src/nRF24.c   **** }
 3889              		.loc 1 589 0
 3890 0070 FFF7FEFF 		bl	nRF24_CE_0
 3891              	.LVL398:
 590:Src/nRF24.c   **** 
 3892              		.loc 1 590 0
 3893 0074 13B0     		add	sp, sp, #76
 3894              	.LCFI152:
 3895              		.cfi_remember_state
 3896              		.cfi_def_cfa_offset 12
 3897              		@ sp needed
 3898 0076 30BD     		pop	{r4, r5, pc}
 3899              	.L205:
 3900              	.LCFI153:
 3901              		.cfi_restore_state
 573:Src/nRF24.c   ****     serial_print(message);
 3902              		.loc 1 573 0
 3903 0078 02AC     		add	r4, sp, #8
 3904 007a 0D4D     		ldr	r5, .L206+12
 3905 007c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 3906 007e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 3907 0080 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 3908 0084 07C4     		stmia	r4!, {r0, r1, r2}
 3909 0086 24F8023B 		strh	r3, [r4], #2	@ movhi
 3910 008a 1B0C     		lsrs	r3, r3, #16
 3911 008c 2370     		strb	r3, [r4]
 3912              	.LVL399:
ARM GAS  /tmp/ccI3eitI.s 			page 95


 3913              	.LBB168:
 3914              	.LBB169:
 124:Src/nRF24.c   **** }
 3915              		.loc 1 124 0
 3916 008e 02A8     		add	r0, sp, #8
 3917              	.LVL400:
 3918 0090 FFF7FEFF 		bl	strlen
 3919              	.LVL401:
 3920 0094 6423     		movs	r3, #100
 3921 0096 82B2     		uxth	r2, r0
 3922 0098 02A9     		add	r1, sp, #8
 3923              	.LVL402:
 3924 009a 0348     		ldr	r0, .L206+4
 3925 009c FFF7FEFF 		bl	HAL_UART_Transmit
 3926              	.LVL403:
 3927 00a0 E1E7     		b	.L203
 3928              	.L207:
 3929 00a2 00BF     		.align	2
 3930              	.L206:
 3931 00a4 B4010000 		.word	.LC25
 3932 00a8 00000000 		.word	huart2
 3933 00ac F0010000 		.word	.LC27
 3934 00b0 D0010000 		.word	.LC26
 3935              	.LBE169:
 3936              	.LBE168:
 3937              		.cfi_endproc
 3938              	.LFE149:
 3940              		.section	.rodata
 3941              		.align	2
 3942              		.set	.LANCHOR0,. + 0
 3943              	.LC0:
 3944 0000 C0       		.byte	-64
 3945 0001 C0       		.byte	-64
 3946 0002 CA       		.byte	-54
 3947 0003 FE       		.byte	-2
 3948              	.LC1:
 3949 0004 99       		.byte	-103
 3950 0005 AA       		.byte	-86
 3951 0006 BB       		.byte	-69
 3952 0007 CC       		.byte	-52
 3953 0008 DD       		.byte	-35
 3954              		.section	.rodata.bytearray_to_string.str1.4,"aMS",%progbits,1
 3955              		.align	2
 3956              	.LC2:
 3957 0000 25233032 		.ascii	"%#02x\000"
 3957      7800
 3958              		.section	.rodata.nRF24_print_all_registers.str1.4,"aMS",%progbits,1
 3959              		.align	2
 3960              	.LC6:
 3961 0000 434F4E46 		.ascii	"CONFIG: <0x%02x>\012\000"
 3961      49473A20 
 3961      3C307825 
 3961      3032783E 
 3961      0A00
 3962 0012 0000     		.space	2
 3963              	.LC7:
 3964 0014 454E5F41 		.ascii	"EN_AA: <0x%02x>\012\000"
ARM GAS  /tmp/ccI3eitI.s 			page 96


 3964      413A203C 
 3964      30782530 
 3964      32783E0A 
 3964      00
 3965 0025 000000   		.space	3
 3966              	.LC8:
 3967 0028 454E5F52 		.ascii	"EN_RXADDR: <0x%02x>\012\000"
 3967      58414444 
 3967      523A203C 
 3967      30782530 
 3967      32783E0A 
 3968 003d 000000   		.space	3
 3969              	.LC9:
 3970 0040 53455455 		.ascii	"SETUP_AW: <0x%02x>\012\000"
 3970      505F4157 
 3970      3A203C30 
 3970      78253032 
 3970      783E0A00 
 3971              	.LC10:
 3972 0054 53455455 		.ascii	"SETUP_RETR: <0x%02x>\012\000"
 3972      505F5245 
 3972      54523A20 
 3972      3C307825 
 3972      3032783E 
 3973 006a 0000     		.space	2
 3974              	.LC11:
 3975 006c 52465F43 		.ascii	"RF_CH: <0x%02x>\012\000"
 3975      483A203C 
 3975      30782530 
 3975      32783E0A 
 3975      00
 3976 007d 000000   		.space	3
 3977              	.LC12:
 3978 0080 52465F53 		.ascii	"RF_SETUP: <0x%02x>\012\000"
 3978      45545550 
 3978      3A203C30 
 3978      78253032 
 3978      783E0A00 
 3979              	.LC13:
 3980 0094 53544154 		.ascii	"STATUS: <0x%02x>\012\000"
 3980      55533A20 
 3980      3C307825 
 3980      3032783E 
 3980      0A00
 3981 00a6 0000     		.space	2
 3982              	.LC14:
 3983 00a8 52585F41 		.ascii	"RX_ADDR_P0: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 3983      4444525F 
 3983      50303A20 
 3983      3C252330 
 3983      32782025 
 3984 00d5 000000   		.space	3
 3985              	.LC15:
 3986 00d8 52585F41 		.ascii	"RX_ADDR_P1: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 3986      4444525F 
 3986      50313A20 
 3986      3C252330 
ARM GAS  /tmp/ccI3eitI.s 			page 97


 3986      32782025 
 3987 0105 000000   		.space	3
 3988              	.LC16:
 3989 0108 52585F41 		.ascii	"RX_ADDR_P2: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 3989      4444525F 
 3989      50323A20 
 3989      3C252330 
 3989      32782025 
 3990 0135 000000   		.space	3
 3991              	.LC17:
 3992 0138 52585F41 		.ascii	"RX_ADDR_P3: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 3992      4444525F 
 3992      50333A20 
 3992      3C252330 
 3992      32782025 
 3993 0165 000000   		.space	3
 3994              	.LC18:
 3995 0168 52585F41 		.ascii	"RX_ADDR_P4: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 3995      4444525F 
 3995      50343A20 
 3995      3C252330 
 3995      32782025 
 3996 0195 000000   		.space	3
 3997              	.LC19:
 3998 0198 52585F41 		.ascii	"RX_ADDR_P5: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 3998      4444525F 
 3998      50353A20 
 3998      3C252330 
 3998      32782025 
 3999 01c5 000000   		.space	3
 4000              	.LC20:
 4001 01c8 54585F41 		.ascii	"TX_ADDR: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4001      4444523A 
 4001      203C2523 
 4001      30327820 
 4001      25233032 
 4002              		.section	.rodata.nRF24_tx_self_test.str1.4,"aMS",%progbits,1
 4003              		.align	2
 4004              	.LC21:
 4005 0000 2D2D2D2D 		.ascii	"---- nrf24 tx self test. ----\012\000"
 4005      206E7266 
 4005      32342074 
 4005      78207365 
 4005      6C662074 
 4006 001f 00       		.space	1
 4007              	.LC22:
 4008 0020 2D2D2D2D 		.ascii	"---- This test to verifies function of a tranmitter"
 4008      20546869 
 4008      73207465 
 4008      73742074 
 4008      6F207665 
 4009 0053 2073656E 		.ascii	" send without a receiver. ----\012\000"
 4009      64207769 
 4009      74686F75 
 4009      74206120 
 4009      72656365 
 4010 0073 00       		.space	1
ARM GAS  /tmp/ccI3eitI.s 			page 98


 4011              	.LC23:
 4012 0074 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has passed.    "
 4012      6E524632 
 4012      34207472 
 4012      616E736D 
 4012      69737369 
 4013 00a4 20202020 		.ascii	"                    <STATUS> has value of 0x2E.    "
 4013      20202020 
 4013      20202020 
 4013      20202020 
 4013      20202020 
 4014 00d7 20202020 		.ascii	"                    TX_DS (transfer data sent) was "
 4014      20202020 
 4014      20202020 
 4014      20202020 
 4014      20202020 
 4015 010a 7365742E 		.ascii	"set.                        RX_P_NO = 111, this mea"
 4015      20202020 
 4015      20202020 
 4015      20202020 
 4015      20202020 
 4016 013d 6E732052 		.ascii	"ns RX FIFO Empty. \012\000"
 4016      58204649 
 4016      464F2045 
 4016      6D707479 
 4016      2E200A00 
 4017 0151 000000   		.space	3
 4018              	.LC24:
 4019 0154 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has failed. <ST"
 4019      6E524632 
 4019      34207472 
 4019      616E736D 
 4019      69737369 
 4020 0184 41545553 		.ascii	"ATUS> is expected 0x2E. Current value: %#02x\012\000"
 4020      3E206973 
 4020      20657870 
 4020      65637465 
 4020      64203078 
 4021 01b2 0000     		.space	2
 4022              	.LC25:
 4023 01b4 3C535441 		.ascii	"<STATUS> REGISTER : %#02x\012\000"
 4023      5455533E 
 4023      20524547 
 4023      49535445 
 4023      52203A20 
 4024 01cf 00       		.space	1
 4025              	.LC26:
 4026 01d0 6E524632 		.ascii	"nRF24 send status - success -\012\000"
 4026      34207365 
 4026      6E642073 
 4026      74617475 
 4026      73202D20 
 4027 01ef 00       		.space	1
 4028              	.LC27:
 4029 01f0 6E524632 		.ascii	"nRF24 send status - failure -\012\000"
 4029      34207365 
 4029      6E642073 
ARM GAS  /tmp/ccI3eitI.s 			page 99


 4029      74617475 
 4029      73202D20 
 4030              		.section	.rodata.nRF24_verified_write_register.str1.4,"aMS",%progbits,1
 4031              		.align	2
 4032              	.LC3:
 4033 0000 50726F62 		.ascii	"Problem writing to nRF24 register -- \000"
 4033      6C656D20 
 4033      77726974 
 4033      696E6720 
 4033      746F206E 
 4034 0026 0000     		.space	2
 4035              	.LC4:
 4036 0028 77726974 		.ascii	"writing data: <%#02x> read_data: <%#02x>\012\000"
 4036      696E6720 
 4036      64617461 
 4036      3A203C25 
 4036      23303278 
 4037 0052 0000     		.space	2
 4038              	.LC5:
 4039 0054 53756363 		.ascii	"Success writing to nRF24 register -- \000"
 4039      65737320 
 4039      77726974 
 4039      696E6720 
 4039      746F206E 
 4040              		.text
 4041              	.Letext0:
 4042              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4043              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4044              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 4045              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 4046              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 4047              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 4048              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 4049              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 4050              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 4051              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 4052              		.file 12 "/usr/include/newlib/sys/lock.h"
 4053              		.file 13 "/usr/include/newlib/sys/_types.h"
 4054              		.file 14 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4055              		.file 15 "/usr/include/newlib/sys/reent.h"
 4056              		.file 16 "Inc/nRF24.h"
 4057              		.file 17 "/usr/include/newlib/string.h"
 4058              		.file 18 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccI3eitI.s 			page 100


DEFINED SYMBOLS
                            *ABS*:0000000000000000 nRF24.c
     /tmp/ccI3eitI.s:18     .text.SPI_SCK_1:0000000000000000 $t
     /tmp/ccI3eitI.s:25     .text.SPI_SCK_1:0000000000000000 SPI_SCK_1
     /tmp/ccI3eitI.s:47     .text.SPI_SCK_1:0000000000000010 $d
     /tmp/ccI3eitI.s:52     .text.SPI_SCK_0:0000000000000000 $t
     /tmp/ccI3eitI.s:59     .text.SPI_SCK_0:0000000000000000 SPI_SCK_0
     /tmp/ccI3eitI.s:80     .text.SPI_SCK_0:0000000000000010 $d
     /tmp/ccI3eitI.s:85     .text.SPI_MOSI_1:0000000000000000 $t
     /tmp/ccI3eitI.s:92     .text.SPI_MOSI_1:0000000000000000 SPI_MOSI_1
     /tmp/ccI3eitI.s:113    .text.SPI_MOSI_1:0000000000000010 $d
     /tmp/ccI3eitI.s:118    .text.SPI_MOSI_0:0000000000000000 $t
     /tmp/ccI3eitI.s:125    .text.SPI_MOSI_0:0000000000000000 SPI_MOSI_0
     /tmp/ccI3eitI.s:146    .text.SPI_MOSI_0:0000000000000010 $d
     /tmp/ccI3eitI.s:151    .text.SPI_CS_1:0000000000000000 $t
     /tmp/ccI3eitI.s:158    .text.SPI_CS_1:0000000000000000 SPI_CS_1
     /tmp/ccI3eitI.s:179    .text.SPI_CS_1:0000000000000010 $d
     /tmp/ccI3eitI.s:184    .text.SPI_CS_0:0000000000000000 $t
     /tmp/ccI3eitI.s:191    .text.SPI_CS_0:0000000000000000 SPI_CS_0
     /tmp/ccI3eitI.s:212    .text.SPI_CS_0:0000000000000010 $d
     /tmp/ccI3eitI.s:217    .text.SPI_READ_MISO:0000000000000000 $t
     /tmp/ccI3eitI.s:224    .text.SPI_READ_MISO:0000000000000000 SPI_READ_MISO
     /tmp/ccI3eitI.s:245    .text.SPI_READ_MISO:0000000000000010 $d
     /tmp/ccI3eitI.s:250    .text.serial_print:0000000000000000 $t
     /tmp/ccI3eitI.s:257    .text.serial_print:0000000000000000 serial_print
     /tmp/ccI3eitI.s:284    .text.serial_print:0000000000000018 $d
     /tmp/ccI3eitI.s:289    .text.SPI_DELAY:0000000000000000 $t
     /tmp/ccI3eitI.s:296    .text.SPI_DELAY:0000000000000000 SPI_DELAY
     /tmp/ccI3eitI.s:316    .text.gpio_clockout_8_bits:0000000000000000 $t
     /tmp/ccI3eitI.s:323    .text.gpio_clockout_8_bits:0000000000000000 gpio_clockout_8_bits
     /tmp/ccI3eitI.s:428    .text.gpio_clockout_8_bits:0000000000000068 $d
     /tmp/ccI3eitI.s:436    .text.gpio_clockin_8_bits:0000000000000000 $t
     /tmp/ccI3eitI.s:443    .text.gpio_clockin_8_bits:0000000000000000 gpio_clockin_8_bits
     /tmp/ccI3eitI.s:545    .text.gpio_clockin_8_bits:000000000000005c $d
     /tmp/ccI3eitI.s:550    .text.spi_read_register:0000000000000000 $t
     /tmp/ccI3eitI.s:557    .text.spi_read_register:0000000000000000 spi_read_register
     /tmp/ccI3eitI.s:622    .text.spi_read_register:0000000000000034 $d
     /tmp/ccI3eitI.s:629    .text.spi_write_register:0000000000000000 $t
     /tmp/ccI3eitI.s:636    .text.spi_write_register:0000000000000000 spi_write_register
     /tmp/ccI3eitI.s:703    .text.spi_write_register:0000000000000034 $d
     /tmp/ccI3eitI.s:710    .text.nRF24_CE_1:0000000000000000 $t
     /tmp/ccI3eitI.s:717    .text.nRF24_CE_1:0000000000000000 nRF24_CE_1
     /tmp/ccI3eitI.s:738    .text.nRF24_CE_1:0000000000000010 $d
     /tmp/ccI3eitI.s:743    .text.nRF24_CE_0:0000000000000000 $t
     /tmp/ccI3eitI.s:750    .text.nRF24_CE_0:0000000000000000 nRF24_CE_0
     /tmp/ccI3eitI.s:771    .text.nRF24_CE_0:0000000000000010 $d
     /tmp/ccI3eitI.s:776    .text.bytearray_to_string:0000000000000000 $t
     /tmp/ccI3eitI.s:783    .text.bytearray_to_string:0000000000000000 bytearray_to_string
     /tmp/ccI3eitI.s:841    .text.bytearray_to_string:0000000000000030 $d
     /tmp/ccI3eitI.s:846    .text.nRF24_verified_write_register:0000000000000000 $t
     /tmp/ccI3eitI.s:853    .text.nRF24_verified_write_register:0000000000000000 nRF24_verified_write_register
     /tmp/ccI3eitI.s:1042   .text.nRF24_verified_write_register:00000000000000f4 $d
     /tmp/ccI3eitI.s:1050   .text.nRF24_print_all_registers:0000000000000000 $t
     /tmp/ccI3eitI.s:1057   .text.nRF24_print_all_registers:0000000000000000 nRF24_print_all_registers
     /tmp/ccI3eitI.s:1551   .text.nRF24_print_all_registers:000000000000030c $d
     /tmp/ccI3eitI.s:1571   .text.nRF24_set_CONFIG:0000000000000000 $t
     /tmp/ccI3eitI.s:1578   .text.nRF24_set_CONFIG:0000000000000000 nRF24_set_CONFIG
ARM GAS  /tmp/ccI3eitI.s 			page 101


     /tmp/ccI3eitI.s:1623   .text.nRF24_get_CONFIG:0000000000000000 $t
     /tmp/ccI3eitI.s:1630   .text.nRF24_get_CONFIG:0000000000000000 nRF24_get_CONFIG
     /tmp/ccI3eitI.s:1660   .text.nRF24_set_EN_AA:0000000000000000 $t
     /tmp/ccI3eitI.s:1667   .text.nRF24_set_EN_AA:0000000000000000 nRF24_set_EN_AA
     /tmp/ccI3eitI.s:1709   .text.nRF24_get_EN_AA:0000000000000000 $t
     /tmp/ccI3eitI.s:1716   .text.nRF24_get_EN_AA:0000000000000000 nRF24_get_EN_AA
     /tmp/ccI3eitI.s:1746   .text.nRF24_set_EN_RXADDR:0000000000000000 $t
     /tmp/ccI3eitI.s:1753   .text.nRF24_set_EN_RXADDR:0000000000000000 nRF24_set_EN_RXADDR
     /tmp/ccI3eitI.s:1795   .text.nRF24_get_EN_RXADDR:0000000000000000 $t
     /tmp/ccI3eitI.s:1802   .text.nRF24_get_EN_RXADDR:0000000000000000 nRF24_get_EN_RXADDR
     /tmp/ccI3eitI.s:1832   .text.nRF24_set_SETUP_AW:0000000000000000 $t
     /tmp/ccI3eitI.s:1839   .text.nRF24_set_SETUP_AW:0000000000000000 nRF24_set_SETUP_AW
     /tmp/ccI3eitI.s:1872   .text.nRF24_get_SETUP_AW:0000000000000000 $t
     /tmp/ccI3eitI.s:1879   .text.nRF24_get_SETUP_AW:0000000000000000 nRF24_get_SETUP_AW
     /tmp/ccI3eitI.s:1909   .text.nRF24_set_SETUP_RETR:0000000000000000 $t
     /tmp/ccI3eitI.s:1916   .text.nRF24_set_SETUP_RETR:0000000000000000 nRF24_set_SETUP_RETR
     /tmp/ccI3eitI.s:1951   .text.nRF24_get_SETUP_RETR:0000000000000000 $t
     /tmp/ccI3eitI.s:1958   .text.nRF24_get_SETUP_RETR:0000000000000000 nRF24_get_SETUP_RETR
     /tmp/ccI3eitI.s:1991   .text.nRF24_set_RF_CH:0000000000000000 $t
     /tmp/ccI3eitI.s:1998   .text.nRF24_set_RF_CH:0000000000000000 nRF24_set_RF_CH
     /tmp/ccI3eitI.s:2031   .text.nRF24_get_RF_CH:0000000000000000 $t
     /tmp/ccI3eitI.s:2038   .text.nRF24_get_RF_CH:0000000000000000 nRF24_get_RF_CH
     /tmp/ccI3eitI.s:2068   .text.nRF24_set_RF_SETUP:0000000000000000 $t
     /tmp/ccI3eitI.s:2075   .text.nRF24_set_RF_SETUP:0000000000000000 nRF24_set_RF_SETUP
     /tmp/ccI3eitI.s:2116   .text.nRF24_get_RF_SETUP:0000000000000000 $t
     /tmp/ccI3eitI.s:2123   .text.nRF24_get_RF_SETUP:0000000000000000 nRF24_get_RF_SETUP
     /tmp/ccI3eitI.s:2153   .text.nRF24_clear_STATUS:0000000000000000 $t
     /tmp/ccI3eitI.s:2160   .text.nRF24_clear_STATUS:0000000000000000 nRF24_clear_STATUS
     /tmp/ccI3eitI.s:2197   .text.nRF24_tx_self_test:0000000000000000 $t
     /tmp/ccI3eitI.s:2204   .text.nRF24_tx_self_test:0000000000000000 nRF24_tx_self_test
     /tmp/ccI3eitI.s:2443   .text.nRF24_tx_self_test:0000000000000170 $d
     /tmp/ccI3eitI.s:2459   .text.nRF24_get_STATUS:0000000000000000 $t
     /tmp/ccI3eitI.s:2466   .text.nRF24_get_STATUS:0000000000000000 nRF24_get_STATUS
     /tmp/ccI3eitI.s:2496   .text.nRF24_get_OBSERVE_TX:0000000000000000 $t
     /tmp/ccI3eitI.s:2503   .text.nRF24_get_OBSERVE_TX:0000000000000000 nRF24_get_OBSERVE_TX
     /tmp/ccI3eitI.s:2533   .text.nRF24_get_RPD:0000000000000000 $t
     /tmp/ccI3eitI.s:2540   .text.nRF24_get_RPD:0000000000000000 nRF24_get_RPD
     /tmp/ccI3eitI.s:2570   .text.nRF24_set_RX_ADDR_P0:0000000000000000 $t
     /tmp/ccI3eitI.s:2577   .text.nRF24_set_RX_ADDR_P0:0000000000000000 nRF24_set_RX_ADDR_P0
     /tmp/ccI3eitI.s:2602   .text.nRF24_get_RX_ADDR_P0:0000000000000000 $t
     /tmp/ccI3eitI.s:2609   .text.nRF24_get_RX_ADDR_P0:0000000000000000 nRF24_get_RX_ADDR_P0
     /tmp/ccI3eitI.s:2634   .text.nRF24_set_RX_ADDR_P1:0000000000000000 $t
     /tmp/ccI3eitI.s:2641   .text.nRF24_set_RX_ADDR_P1:0000000000000000 nRF24_set_RX_ADDR_P1
     /tmp/ccI3eitI.s:2666   .text.nRF24_get_RX_ADDR_P1:0000000000000000 $t
     /tmp/ccI3eitI.s:2673   .text.nRF24_get_RX_ADDR_P1:0000000000000000 nRF24_get_RX_ADDR_P1
     /tmp/ccI3eitI.s:2698   .text.nRF24_set_RX_ADDR_P2:0000000000000000 $t
     /tmp/ccI3eitI.s:2705   .text.nRF24_set_RX_ADDR_P2:0000000000000000 nRF24_set_RX_ADDR_P2
     /tmp/ccI3eitI.s:2738   .text.nRF24_get_RX_ADDR_P2:0000000000000000 $t
     /tmp/ccI3eitI.s:2745   .text.nRF24_get_RX_ADDR_P2:0000000000000000 nRF24_get_RX_ADDR_P2
     /tmp/ccI3eitI.s:2770   .text.nRF24_set_RX_ADDR_P3:0000000000000000 $t
     /tmp/ccI3eitI.s:2777   .text.nRF24_set_RX_ADDR_P3:0000000000000000 nRF24_set_RX_ADDR_P3
     /tmp/ccI3eitI.s:2810   .text.nRF24_get_RX_ADDR_P3:0000000000000000 $t
     /tmp/ccI3eitI.s:2817   .text.nRF24_get_RX_ADDR_P3:0000000000000000 nRF24_get_RX_ADDR_P3
     /tmp/ccI3eitI.s:2842   .text.nRF24_set_RX_ADDR_P4:0000000000000000 $t
     /tmp/ccI3eitI.s:2849   .text.nRF24_set_RX_ADDR_P4:0000000000000000 nRF24_set_RX_ADDR_P4
     /tmp/ccI3eitI.s:2882   .text.nRF24_get_RX_ADDR_P4:0000000000000000 $t
     /tmp/ccI3eitI.s:2889   .text.nRF24_get_RX_ADDR_P4:0000000000000000 nRF24_get_RX_ADDR_P4
ARM GAS  /tmp/ccI3eitI.s 			page 102


     /tmp/ccI3eitI.s:2914   .text.nRF24_set_RX_ADDR_P5:0000000000000000 $t
     /tmp/ccI3eitI.s:2921   .text.nRF24_set_RX_ADDR_P5:0000000000000000 nRF24_set_RX_ADDR_P5
     /tmp/ccI3eitI.s:2954   .text.nRF24_get_RX_ADDR_P5:0000000000000000 $t
     /tmp/ccI3eitI.s:2961   .text.nRF24_get_RX_ADDR_P5:0000000000000000 nRF24_get_RX_ADDR_P5
     /tmp/ccI3eitI.s:2986   .text.nRF24_set_TX_ADDR:0000000000000000 $t
     /tmp/ccI3eitI.s:2993   .text.nRF24_set_TX_ADDR:0000000000000000 nRF24_set_TX_ADDR
     /tmp/ccI3eitI.s:3018   .text.nRF24_config_normal_tx_mode:0000000000000000 $t
     /tmp/ccI3eitI.s:3025   .text.nRF24_config_normal_tx_mode:0000000000000000 nRF24_config_normal_tx_mode
     /tmp/ccI3eitI.s:3114   .text.nRF24_config_normal_tx_mode:000000000000007c $d
     /tmp/ccI3eitI.s:3119   .text.nRF24_config_enhanced_shockburst_tx_mode:0000000000000000 $t
     /tmp/ccI3eitI.s:3126   .text.nRF24_config_enhanced_shockburst_tx_mode:0000000000000000 nRF24_config_enhanced_shockburst_tx_mode
     /tmp/ccI3eitI.s:3226   .text.nRF24_config_enhanced_shockburst_tx_mode:000000000000008c $d
     /tmp/ccI3eitI.s:3231   .text.nRF24_get_TX_ADDR:0000000000000000 $t
     /tmp/ccI3eitI.s:3238   .text.nRF24_get_TX_ADDR:0000000000000000 nRF24_get_TX_ADDR
     /tmp/ccI3eitI.s:3263   .text.nRF24_set_RX_PW_P0:0000000000000000 $t
     /tmp/ccI3eitI.s:3270   .text.nRF24_set_RX_PW_P0:0000000000000000 nRF24_set_RX_PW_P0
     /tmp/ccI3eitI.s:3303   .text.nRF24_get_RX_PW_P0:0000000000000000 $t
     /tmp/ccI3eitI.s:3310   .text.nRF24_get_RX_PW_P0:0000000000000000 nRF24_get_RX_PW_P0
     /tmp/ccI3eitI.s:3340   .text.nRF24_set_RX_PW_P1:0000000000000000 $t
     /tmp/ccI3eitI.s:3347   .text.nRF24_set_RX_PW_P1:0000000000000000 nRF24_set_RX_PW_P1
     /tmp/ccI3eitI.s:3380   .text.nRF24_get_RX_PW_P1:0000000000000000 $t
     /tmp/ccI3eitI.s:3387   .text.nRF24_get_RX_PW_P1:0000000000000000 nRF24_get_RX_PW_P1
     /tmp/ccI3eitI.s:3417   .text.nRF24_set_RX_PW_P2:0000000000000000 $t
     /tmp/ccI3eitI.s:3424   .text.nRF24_set_RX_PW_P2:0000000000000000 nRF24_set_RX_PW_P2
     /tmp/ccI3eitI.s:3457   .text.nRF24_get_RX_PW_P2:0000000000000000 $t
     /tmp/ccI3eitI.s:3464   .text.nRF24_get_RX_PW_P2:0000000000000000 nRF24_get_RX_PW_P2
     /tmp/ccI3eitI.s:3494   .text.nRF24_set_RX_PW_P3:0000000000000000 $t
     /tmp/ccI3eitI.s:3501   .text.nRF24_set_RX_PW_P3:0000000000000000 nRF24_set_RX_PW_P3
     /tmp/ccI3eitI.s:3534   .text.nRF24_get_RX_PW_P3:0000000000000000 $t
     /tmp/ccI3eitI.s:3541   .text.nRF24_get_RX_PW_P3:0000000000000000 nRF24_get_RX_PW_P3
     /tmp/ccI3eitI.s:3571   .text.nRF24_set_RX_PW_P4:0000000000000000 $t
     /tmp/ccI3eitI.s:3578   .text.nRF24_set_RX_PW_P4:0000000000000000 nRF24_set_RX_PW_P4
     /tmp/ccI3eitI.s:3611   .text.nRF24_get_RX_PW_P4:0000000000000000 $t
     /tmp/ccI3eitI.s:3618   .text.nRF24_get_RX_PW_P4:0000000000000000 nRF24_get_RX_PW_P4
     /tmp/ccI3eitI.s:3648   .text.nRF24_set_RX_PW_P5:0000000000000000 $t
     /tmp/ccI3eitI.s:3655   .text.nRF24_set_RX_PW_P5:0000000000000000 nRF24_set_RX_PW_P5
     /tmp/ccI3eitI.s:3688   .text.nRF24_get_RX_PW_P5:0000000000000000 $t
     /tmp/ccI3eitI.s:3695   .text.nRF24_get_RX_PW_P5:0000000000000000 nRF24_get_RX_PW_P5
     /tmp/ccI3eitI.s:3725   .text.nRF24_get_FIFO_STATUS:0000000000000000 $t
     /tmp/ccI3eitI.s:3732   .text.nRF24_get_FIFO_STATUS:0000000000000000 nRF24_get_FIFO_STATUS
     /tmp/ccI3eitI.s:3762   .text.nRF24_release_payload:0000000000000000 $t
     /tmp/ccI3eitI.s:3769   .text.nRF24_release_payload:0000000000000000 nRF24_release_payload
     /tmp/ccI3eitI.s:3794   .text.nRF24_send_packet:0000000000000000 $t
     /tmp/ccI3eitI.s:3801   .text.nRF24_send_packet:0000000000000000 nRF24_send_packet
     /tmp/ccI3eitI.s:3931   .text.nRF24_send_packet:00000000000000a4 $d
     /tmp/ccI3eitI.s:3941   .rodata:0000000000000000 $d
     /tmp/ccI3eitI.s:3955   .rodata.bytearray_to_string.str1.4:0000000000000000 $d
     /tmp/ccI3eitI.s:3959   .rodata.nRF24_print_all_registers.str1.4:0000000000000000 $d
     /tmp/ccI3eitI.s:4003   .rodata.nRF24_tx_self_test.str1.4:0000000000000000 $d
     /tmp/ccI3eitI.s:4031   .rodata.nRF24_verified_write_register.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_ReadPin
strlen
HAL_UART_Transmit
ARM GAS  /tmp/ccI3eitI.s 			page 103


huart2
HAL_Delay
sprintf
strcat
memcpy
