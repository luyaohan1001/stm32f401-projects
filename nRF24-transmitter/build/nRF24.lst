ARM GAS  /tmp/ccHkpHGQ.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"nRF24.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SPI_SCK_1,"ax",%progbits
  18              		.align	1
  19              		.global	SPI_SCK_1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SPI_SCK_1:
  26              	.LFB131:
  27              		.file 1 "Src/nRF24.c"
   1:Src/nRF24.c   **** /**
   2:Src/nRF24.c   ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
   3:Src/nRF24.c   ****   * @file      :     nRF24.c
   4:Src/nRF24.c   ****   * @author    :     Luyao Han
   5:Src/nRF24.c   ****   * @email     :     luyaohan1001@gmail.com
   6:Src/nRF24.c   ****   * @brief     :     C library for Nordic nRF24L01 2.4GHz wireless transceiver.
   7:Src/nRF24.c   ****   * @date      :     04-21-2022
   8:Src/nRF24.c   ****   * Copyright (C) 2022-2122 Luyao Han. The following code may be shared or modified for personal us
   9:Src/nRF24.c   ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
  10:Src/nRF24.c   **** 
  11:Src/nRF24.c   **** /* Includes ------------------------------------------------------------------- */
  12:Src/nRF24.c   **** #include "nRF24.h"
  13:Src/nRF24.c   **** 
  14:Src/nRF24.c   **** /* GPIO Operations --------------------------------------------------------*/
  15:Src/nRF24.c   **** 
  16:Src/nRF24.c   **** /* SCK    PA8  */
  17:Src/nRF24.c   **** /* MOSI   PB10 */
  18:Src/nRF24.c   **** /* CSN    PB4  */
  19:Src/nRF24.c   **** /* CE     PB5  */
  20:Src/nRF24.c   **** /* MISO   PA10 */
  21:Src/nRF24.c   **** 
  22:Src/nRF24.c   **** /**
  23:Src/nRF24.c   ****   * @brief Set high on SCK pin of SPI bus.
  24:Src/nRF24.c   ****   * @param None
  25:Src/nRF24.c   ****   * @retval None */
  26:Src/nRF24.c   **** __inline__ void SPI_SCK_1()
  27:Src/nRF24.c   **** {
  28              		.loc 1 27 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccHkpHGQ.s 			page 2


  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  28:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  
  37              		.loc 1 28 0
  38 0002 0122     		movs	r2, #1
  39 0004 4FF48071 		mov	r1, #256
  40 0008 0148     		ldr	r0, .L3
  41 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  42              	.LVL0:
  43 000e 08BD     		pop	{r3, pc}
  44              	.L4:
  45              		.align	2
  46              	.L3:
  47 0010 00000240 		.word	1073872896
  48              		.cfi_endproc
  49              	.LFE131:
  51              		.section	.text.SPI_SCK_0,"ax",%progbits
  52              		.align	1
  53              		.global	SPI_SCK_0
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	SPI_SCK_0:
  60              	.LFB132:
  29:Src/nRF24.c   **** }
  30:Src/nRF24.c   **** 
  31:Src/nRF24.c   **** /**
  32:Src/nRF24.c   ****   * @brief Set low on SCK pin of SPI bus.
  33:Src/nRF24.c   ****   * @param None
  34:Src/nRF24.c   ****   * @retval None
  35:Src/nRF24.c   ****   */
  36:Src/nRF24.c   **** __inline__ void SPI_SCK_0()
  37:Src/nRF24.c   **** {
  61              		.loc 1 37 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
  38:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  
  70              		.loc 1 38 0
  71 0002 0022     		movs	r2, #0
  72 0004 4FF48071 		mov	r1, #256
  73 0008 0148     		ldr	r0, .L7
  74 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  75              	.LVL1:
  76 000e 08BD     		pop	{r3, pc}
  77              	.L8:
  78              		.align	2
  79              	.L7:
ARM GAS  /tmp/ccHkpHGQ.s 			page 3


  80 0010 00000240 		.word	1073872896
  81              		.cfi_endproc
  82              	.LFE132:
  84              		.section	.text.SPI_MOSI_1,"ax",%progbits
  85              		.align	1
  86              		.global	SPI_MOSI_1
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	SPI_MOSI_1:
  93              	.LFB133:
  39:Src/nRF24.c   **** } 
  40:Src/nRF24.c   **** 
  41:Src/nRF24.c   **** /**
  42:Src/nRF24.c   ****   * @brief Set high on MOSI pin of SPI bus.
  43:Src/nRF24.c   ****   * @param None
  44:Src/nRF24.c   ****   * @retval None
  45:Src/nRF24.c   ****   */
  46:Src/nRF24.c   **** __inline__ void SPI_MOSI_1()
  47:Src/nRF24.c   **** {
  94              		.loc 1 47 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 08B5     		push	{r3, lr}
  99              	.LCFI2:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
  48:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  
 103              		.loc 1 48 0
 104 0002 0122     		movs	r2, #1
 105 0004 4FF48061 		mov	r1, #1024
 106 0008 0148     		ldr	r0, .L11
 107 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL2:
 109 000e 08BD     		pop	{r3, pc}
 110              	.L12:
 111              		.align	2
 112              	.L11:
 113 0010 00040240 		.word	1073873920
 114              		.cfi_endproc
 115              	.LFE133:
 117              		.section	.text.SPI_MOSI_0,"ax",%progbits
 118              		.align	1
 119              		.global	SPI_MOSI_0
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu fpv4-sp-d16
 125              	SPI_MOSI_0:
 126              	.LFB134:
  49:Src/nRF24.c   **** }
  50:Src/nRF24.c   **** 
  51:Src/nRF24.c   **** /**
  52:Src/nRF24.c   ****   * @brief Set low on MOSI pin of SPI bus.
ARM GAS  /tmp/ccHkpHGQ.s 			page 4


  53:Src/nRF24.c   ****   * @param None
  54:Src/nRF24.c   ****   * @retval None
  55:Src/nRF24.c   ****   */
  56:Src/nRF24.c   **** __inline__ void SPI_MOSI_0()
  57:Src/nRF24.c   **** {
 127              		.loc 1 57 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131 0000 08B5     		push	{r3, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 3, -8
 135              		.cfi_offset 14, -4
  58:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);  
 136              		.loc 1 58 0
 137 0002 0022     		movs	r2, #0
 138 0004 4FF48061 		mov	r1, #1024
 139 0008 0148     		ldr	r0, .L15
 140 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 141              	.LVL3:
 142 000e 08BD     		pop	{r3, pc}
 143              	.L16:
 144              		.align	2
 145              	.L15:
 146 0010 00040240 		.word	1073873920
 147              		.cfi_endproc
 148              	.LFE134:
 150              		.section	.text.SPI_CS_1,"ax",%progbits
 151              		.align	1
 152              		.global	SPI_CS_1
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu fpv4-sp-d16
 158              	SPI_CS_1:
 159              	.LFB135:
  59:Src/nRF24.c   **** }
  60:Src/nRF24.c   **** 
  61:Src/nRF24.c   **** /**
  62:Src/nRF24.c   ****   * @brief Set high on CS pin of SPI bus.
  63:Src/nRF24.c   ****   * @param None
  64:Src/nRF24.c   ****   * @retval None
  65:Src/nRF24.c   ****   */
  66:Src/nRF24.c   **** __inline__ void SPI_CS_1() 
  67:Src/nRF24.c   **** {
 160              		.loc 1 67 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 08B5     		push	{r3, lr}
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 3, -8
 168              		.cfi_offset 14, -4
  68:Src/nRF24.c   ****     /* CS High == CSN Low */
  69:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  
ARM GAS  /tmp/ccHkpHGQ.s 			page 5


 169              		.loc 1 69 0
 170 0002 0022     		movs	r2, #0
 171 0004 1021     		movs	r1, #16
 172 0006 0248     		ldr	r0, .L19
 173 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 174              	.LVL4:
 175 000c 08BD     		pop	{r3, pc}
 176              	.L20:
 177 000e 00BF     		.align	2
 178              	.L19:
 179 0010 00040240 		.word	1073873920
 180              		.cfi_endproc
 181              	.LFE135:
 183              		.section	.text.SPI_CS_0,"ax",%progbits
 184              		.align	1
 185              		.global	SPI_CS_0
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	SPI_CS_0:
 192              	.LFB136:
  70:Src/nRF24.c   **** }
  71:Src/nRF24.c   **** 
  72:Src/nRF24.c   **** /**
  73:Src/nRF24.c   ****   * @brief Set low on CS pin of SPI bus.
  74:Src/nRF24.c   ****   * @param None
  75:Src/nRF24.c   ****   * @retval None
  76:Src/nRF24.c   ****   */
  77:Src/nRF24.c   **** __inline__ void SPI_CS_0()
  78:Src/nRF24.c   **** {
 193              		.loc 1 78 0
 194              		.cfi_startproc
 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 08B5     		push	{r3, lr}
 198              	.LCFI5:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 3, -8
 201              		.cfi_offset 14, -4
  79:Src/nRF24.c   ****     /* CS Low == CSN High */
  80:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 202              		.loc 1 80 0
 203 0002 0122     		movs	r2, #1
 204 0004 1021     		movs	r1, #16
 205 0006 0248     		ldr	r0, .L23
 206 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 207              	.LVL5:
 208 000c 08BD     		pop	{r3, pc}
 209              	.L24:
 210 000e 00BF     		.align	2
 211              	.L23:
 212 0010 00040240 		.word	1073873920
 213              		.cfi_endproc
 214              	.LFE136:
 216              		.section	.text.SPI_READ_MISO,"ax",%progbits
 217              		.align	1
ARM GAS  /tmp/ccHkpHGQ.s 			page 6


 218              		.global	SPI_READ_MISO
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	SPI_READ_MISO:
 225              	.LFB137:
  81:Src/nRF24.c   **** }
  82:Src/nRF24.c   **** 
  83:Src/nRF24.c   **** 
  84:Src/nRF24.c   **** /**
  85:Src/nRF24.c   ****   * @brief  Get pin-level on MISO pin of SPI bus.
  86:Src/nRF24.c   ****   * @param  None
  87:Src/nRF24.c   ****   * @retval None
  88:Src/nRF24.c   ****   */
  89:Src/nRF24.c   **** __inline__ GPIO_PinState SPI_READ_MISO()
  90:Src/nRF24.c   **** {
 226              		.loc 1 90 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI6:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
  91:Src/nRF24.c   ****   return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 235              		.loc 1 91 0
 236 0002 4FF48061 		mov	r1, #1024
 237 0006 0248     		ldr	r0, .L27
 238 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 239              	.LVL6:
  92:Src/nRF24.c   **** }
 240              		.loc 1 92 0
 241 000c 08BD     		pop	{r3, pc}
 242              	.L28:
 243 000e 00BF     		.align	2
 244              	.L27:
 245 0010 00000240 		.word	1073872896
 246              		.cfi_endproc
 247              	.LFE137:
 249              		.section	.text.serial_print,"ax",%progbits
 250              		.align	1
 251              		.global	serial_print
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv4-sp-d16
 257              	serial_print:
 258              	.LFB138:
  93:Src/nRF24.c   **** 
  94:Src/nRF24.c   **** /**
  95:Src/nRF24.c   ****   * @brief   Print debug string through USART.
  96:Src/nRF24.c   ****   * @param   p_msg Pointer to anynomous message string.
  97:Src/nRF24.c   ****   * @retval  None.
  98:Src/nRF24.c   ****   * @note    When testing on STM32F401RE Nucleo Board, the board supports virtual COM (serial) port
  99:Src/nRF24.c   ****   *            Connecting a USB-TTL adapter such as CH340 to the 'TX/D1' on morpho connector will n
ARM GAS  /tmp/ccHkpHGQ.s 			page 7


 100:Src/nRF24.c   ****   *             In the datasheet it has been confirmed that the USART2 pins have been to multiplexe
 101:Src/nRF24.c   ****   *            On the PC, look for port /dev/ttyACM0 as the virtual serial port.  
 102:Src/nRF24.c   ****   */
 103:Src/nRF24.c   **** __inline__ void serial_print(char* message)
 104:Src/nRF24.c   **** {
 259              		.loc 1 104 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL7:
 264 0000 10B5     		push	{r4, lr}
 265              	.LCFI7:
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 4, -8
 268              		.cfi_offset 14, -4
 269 0002 0446     		mov	r4, r0
 105:Src/nRF24.c   ****   HAL_UART_Transmit(&huart2, (uint8_t*)message, strlen(message), 100);
 270              		.loc 1 105 0
 271 0004 FFF7FEFF 		bl	strlen
 272              	.LVL8:
 273 0008 6423     		movs	r3, #100
 274 000a 82B2     		uxth	r2, r0
 275 000c 2146     		mov	r1, r4
 276 000e 0248     		ldr	r0, .L31
 277 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 278              	.LVL9:
 279 0014 10BD     		pop	{r4, pc}
 280              	.LVL10:
 281              	.L32:
 282 0016 00BF     		.align	2
 283              	.L31:
 284 0018 00000000 		.word	huart2
 285              		.cfi_endproc
 286              	.LFE138:
 288              		.section	.text.spi_delay,"ax",%progbits
 289              		.align	1
 290              		.global	spi_delay
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	spi_delay:
 297              	.LFB141:
 106:Src/nRF24.c   **** }
 107:Src/nRF24.c   **** 
 108:Src/nRF24.c   **** /**
 109:Src/nRF24.c   ****   * @brief      Clock out (write) 8 bits on MOSI of SPI bus on SCK high.
 110:Src/nRF24.c   ****   * @param[in]  tx_data One byte of data to transmit.
 111:Src/nRF24.c   ****   * @retval     None.
 112:Src/nRF24.c   ****   * @note  
 113:Src/nRF24.c   ****   *   Endianess: Most Significant Bit First. Cn: Command Bits. Sn: Status Register bits. Dn: data b
 114:Src/nRF24.c   ****   *
 115:Src/nRF24.c   ****   *   Following is a diagram for time sequence:
 116:Src/nRF24.c   ****   *   CSN ````\____________________________________________________________________________________
 117:Src/nRF24.c   ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|D7|__|D6|__|D5|__|D4|__|D3|__|
 118:Src/nRF24.c   ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 119:Src/nRF24.c   ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
ARM GAS  /tmp/ccHkpHGQ.s 			page 8


 120:Src/nRF24.c   ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 121:Src/nRF24.c   ****   *
 122:Src/nRF24.c   ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 123:Src/nRF24.c   ****   */
 124:Src/nRF24.c   **** void gpio_clockout_8_bits(uint8_t tx_data) 
 125:Src/nRF24.c   **** {
 126:Src/nRF24.c   ****   spi_delay();
 127:Src/nRF24.c   ****   for (int i = 0; i < 8; ++i) 
 128:Src/nRF24.c   ****   {
 129:Src/nRF24.c   ****       SPI_SCK_0();
 130:Src/nRF24.c   ****       spi_delay();
 131:Src/nRF24.c   **** 
 132:Src/nRF24.c   ****       if(tx_data & 0x80) // MSBit first
 133:Src/nRF24.c   ****           SPI_MOSI_1();
 134:Src/nRF24.c   ****       else
 135:Src/nRF24.c   ****           SPI_MOSI_0();
 136:Src/nRF24.c   **** 
 137:Src/nRF24.c   **** 			/* setup time */	
 138:Src/nRF24.c   ****       spi_delay();
 139:Src/nRF24.c   **** 
 140:Src/nRF24.c   ****       SPI_SCK_1(); // clock data
 141:Src/nRF24.c   ****       tx_data = tx_data << 1; // load next MSB
 142:Src/nRF24.c   **** 
 143:Src/nRF24.c   **** 			/* hold time */
 144:Src/nRF24.c   ****       spi_delay();
 145:Src/nRF24.c   ****   }
 146:Src/nRF24.c   ****   SPI_SCK_0();
 147:Src/nRF24.c   **** }
 148:Src/nRF24.c   **** 
 149:Src/nRF24.c   **** /**
 150:Src/nRF24.c   ****   * @brief  Clock in (read) 8 bits from MISO of SPI bus on SCK high.
 151:Src/nRF24.c   ****   * @param  None
 152:Src/nRF24.c   ****   * @retval A byte of read data.
 153:Src/nRF24.c   ****   * @note
 154:Src/nRF24.c   ****   *   Endianess: Most Significant Bit first. Cn: Command bits. Sn: Status register bits. Dn: Data b
 155:Src/nRF24.c   ****   *    
 156:Src/nRF24.c   ****   *   Following is a diagram for time sequence:
 157:Src/nRF24.c   ****   *   CSN ````\____________________________________________________________________________________
 158:Src/nRF24.c   ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|00|__|00|__|00|__|00|__|00|__|
 159:Src/nRF24.c   ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 160:Src/nRF24.c   ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 161:Src/nRF24.c   ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______|D0|__|D1|__|D2|__|D3|__|D4|__|
 162:Src/nRF24.c   ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 163:Src/nRF24.c   ****   */
 164:Src/nRF24.c   **** uint8_t gpio_clockin_8_bits(void)
 165:Src/nRF24.c   **** {
 166:Src/nRF24.c   ****   uint8_t rx_data = 0;
 167:Src/nRF24.c   **** 
 168:Src/nRF24.c   ****   spi_delay();
 169:Src/nRF24.c   ****   for (int i=0; i < 8; ++i) 
 170:Src/nRF24.c   ****   {
 171:Src/nRF24.c   ****       SPI_SCK_0();
 172:Src/nRF24.c   ****       spi_delay();
 173:Src/nRF24.c   ****       SPI_MOSI_0();
 174:Src/nRF24.c   **** 
 175:Src/nRF24.c   **** 			/* setup time */
 176:Src/nRF24.c   ****       SPI_SCK_1();
ARM GAS  /tmp/ccHkpHGQ.s 			page 9


 177:Src/nRF24.c   ****       spi_delay();
 178:Src/nRF24.c   ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 179:Src/nRF24.c   ****       rx_data |= SPI_READ_MISO();
 180:Src/nRF24.c   **** 
 181:Src/nRF24.c   **** 			/* hold time */
 182:Src/nRF24.c   ****       spi_delay();
 183:Src/nRF24.c   ****   }
 184:Src/nRF24.c   **** 
 185:Src/nRF24.c   ****   SPI_SCK_0();
 186:Src/nRF24.c   ****   return rx_data;
 187:Src/nRF24.c   **** }
 188:Src/nRF24.c   ****   
 189:Src/nRF24.c   **** 
 190:Src/nRF24.c   **** /* SPI Operations -------------------------------------------------------------------------------*/
 191:Src/nRF24.c   **** void spi_delay() 
 192:Src/nRF24.c   **** {
 298              		.loc 1 192 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302 0000 08B5     		push	{r3, lr}
 303              	.LCFI8:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 3, -8
 306              		.cfi_offset 14, -4
 193:Src/nRF24.c   ****   HAL_Delay(1);
 307              		.loc 1 193 0
 308 0002 0120     		movs	r0, #1
 309 0004 FFF7FEFF 		bl	HAL_Delay
 310              	.LVL11:
 311 0008 08BD     		pop	{r3, pc}
 312              		.cfi_endproc
 313              	.LFE141:
 315              		.section	.text.gpio_clockout_8_bits,"ax",%progbits
 316              		.align	1
 317              		.global	gpio_clockout_8_bits
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu fpv4-sp-d16
 323              	gpio_clockout_8_bits:
 324              	.LFB139:
 125:Src/nRF24.c   ****   spi_delay();
 325              		.loc 1 125 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              	.LVL12:
 330 0000 38B5     		push	{r3, r4, r5, lr}
 331              	.LCFI9:
 332              		.cfi_def_cfa_offset 16
 333              		.cfi_offset 3, -16
 334              		.cfi_offset 4, -12
 335              		.cfi_offset 5, -8
 336              		.cfi_offset 14, -4
 337 0002 0446     		mov	r4, r0
 126:Src/nRF24.c   ****   for (int i = 0; i < 8; ++i) 
ARM GAS  /tmp/ccHkpHGQ.s 			page 10


 338              		.loc 1 126 0
 339 0004 FFF7FEFF 		bl	spi_delay
 340              	.LVL13:
 341              	.LBB35:
 127:Src/nRF24.c   ****   {
 342              		.loc 1 127 0
 343 0008 0025     		movs	r5, #0
 344 000a 12E0     		b	.L36
 345              	.LVL14:
 346              	.L42:
 347              	.LBB36:
 348              	.LBB37:
  48:Src/nRF24.c   **** }
 349              		.loc 1 48 0
 350 000c 0122     		movs	r2, #1
 351 000e 4FF48061 		mov	r1, #1024
 352 0012 1548     		ldr	r0, .L43
 353 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 354              	.LVL15:
 355              	.L38:
 356              	.LBE37:
 357              	.LBE36:
 138:Src/nRF24.c   **** 
 358              		.loc 1 138 0 discriminator 2
 359 0018 FFF7FEFF 		bl	spi_delay
 360              	.LVL16:
 361              	.LBB38:
 362              	.LBB39:
  28:Src/nRF24.c   **** }
 363              		.loc 1 28 0 discriminator 2
 364 001c 0122     		movs	r2, #1
 365 001e 4FF48071 		mov	r1, #256
 366 0022 1248     		ldr	r0, .L43+4
 367 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 368              	.LVL17:
 369              	.LBE39:
 370              	.LBE38:
 141:Src/nRF24.c   **** 
 371              		.loc 1 141 0 discriminator 2
 372 0028 6400     		lsls	r4, r4, #1
 373              	.LVL18:
 374 002a E4B2     		uxtb	r4, r4
 375              	.LVL19:
 144:Src/nRF24.c   ****   }
 376              		.loc 1 144 0 discriminator 2
 377 002c FFF7FEFF 		bl	spi_delay
 378              	.LVL20:
 127:Src/nRF24.c   ****   {
 379              		.loc 1 127 0 discriminator 2
 380 0030 0135     		adds	r5, r5, #1
 381              	.LVL21:
 382              	.L36:
 127:Src/nRF24.c   ****   {
 383              		.loc 1 127 0 is_stmt 0 discriminator 1
 384 0032 072D     		cmp	r5, #7
 385 0034 11DC     		bgt	.L41
 386              	.LBB40:
ARM GAS  /tmp/ccHkpHGQ.s 			page 11


 387              	.LBB41:
  38:Src/nRF24.c   **** } 
 388              		.loc 1 38 0 is_stmt 1
 389 0036 0022     		movs	r2, #0
 390 0038 4FF48071 		mov	r1, #256
 391 003c 0B48     		ldr	r0, .L43+4
 392 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 393              	.LVL22:
 394              	.LBE41:
 395              	.LBE40:
 130:Src/nRF24.c   **** 
 396              		.loc 1 130 0
 397 0042 FFF7FEFF 		bl	spi_delay
 398              	.LVL23:
 132:Src/nRF24.c   ****           SPI_MOSI_1();
 399              		.loc 1 132 0
 400 0046 14F0800F 		tst	r4, #128
 401 004a DFD1     		bne	.L42
 402              	.LBB42:
 403              	.LBB43:
  58:Src/nRF24.c   **** }
 404              		.loc 1 58 0
 405 004c 0022     		movs	r2, #0
 406 004e 4FF48061 		mov	r1, #1024
 407 0052 0548     		ldr	r0, .L43
 408 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 409              	.LVL24:
 410 0058 DEE7     		b	.L38
 411              	.L41:
 412              	.LBE43:
 413              	.LBE42:
 414              	.LBE35:
 415              	.LBB44:
 416              	.LBB45:
  38:Src/nRF24.c   **** } 
 417              		.loc 1 38 0
 418 005a 0022     		movs	r2, #0
 419 005c 4FF48071 		mov	r1, #256
 420 0060 0248     		ldr	r0, .L43+4
 421 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 422              	.LVL25:
 423 0066 38BD     		pop	{r3, r4, r5, pc}
 424              	.LVL26:
 425              	.L44:
 426              		.align	2
 427              	.L43:
 428 0068 00040240 		.word	1073873920
 429 006c 00000240 		.word	1073872896
 430              	.LBE45:
 431              	.LBE44:
 432              		.cfi_endproc
 433              	.LFE139:
 435              		.section	.text.gpio_clockin_8_bits,"ax",%progbits
 436              		.align	1
 437              		.global	gpio_clockin_8_bits
 438              		.syntax unified
 439              		.thumb
ARM GAS  /tmp/ccHkpHGQ.s 			page 12


 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	gpio_clockin_8_bits:
 444              	.LFB140:
 165:Src/nRF24.c   ****   uint8_t rx_data = 0;
 445              		.loc 1 165 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449 0000 70B5     		push	{r4, r5, r6, lr}
 450              	.LCFI10:
 451              		.cfi_def_cfa_offset 16
 452              		.cfi_offset 4, -16
 453              		.cfi_offset 5, -12
 454              		.cfi_offset 6, -8
 455              		.cfi_offset 14, -4
 456              	.LVL27:
 168:Src/nRF24.c   ****   for (int i=0; i < 8; ++i) 
 457              		.loc 1 168 0
 458 0002 FFF7FEFF 		bl	spi_delay
 459              	.LVL28:
 460              	.LBB46:
 169:Src/nRF24.c   ****   {
 461              		.loc 1 169 0
 462 0006 0026     		movs	r6, #0
 463              	.LBE46:
 166:Src/nRF24.c   **** 
 464              		.loc 1 166 0
 465 0008 3446     		mov	r4, r6
 466              	.LBB55:
 169:Src/nRF24.c   ****   {
 467              		.loc 1 169 0
 468 000a 22E0     		b	.L46
 469              	.LVL29:
 470              	.L47:
 471              	.LBB47:
 472              	.LBB48:
  38:Src/nRF24.c   **** } 
 473              		.loc 1 38 0
 474 000c 164D     		ldr	r5, .L49
 475 000e 0022     		movs	r2, #0
 476 0010 4FF48071 		mov	r1, #256
 477 0014 2846     		mov	r0, r5
 478 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 479              	.LVL30:
 480              	.LBE48:
 481              	.LBE47:
 172:Src/nRF24.c   ****       SPI_MOSI_0();
 482              		.loc 1 172 0
 483 001a FFF7FEFF 		bl	spi_delay
 484              	.LVL31:
 485              	.LBB49:
 486              	.LBB50:
  58:Src/nRF24.c   **** }
 487              		.loc 1 58 0
 488 001e 0022     		movs	r2, #0
 489 0020 4FF48061 		mov	r1, #1024
ARM GAS  /tmp/ccHkpHGQ.s 			page 13


 490 0024 1148     		ldr	r0, .L49+4
 491 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 492              	.LVL32:
 493              	.LBE50:
 494              	.LBE49:
 495              	.LBB51:
 496              	.LBB52:
  28:Src/nRF24.c   **** }
 497              		.loc 1 28 0
 498 002a 0122     		movs	r2, #1
 499 002c 4FF48071 		mov	r1, #256
 500 0030 2846     		mov	r0, r5
 501 0032 FFF7FEFF 		bl	HAL_GPIO_WritePin
 502              	.LVL33:
 503              	.LBE52:
 504              	.LBE51:
 177:Src/nRF24.c   ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 505              		.loc 1 177 0
 506 0036 FFF7FEFF 		bl	spi_delay
 507              	.LVL34:
 178:Src/nRF24.c   ****       rx_data |= SPI_READ_MISO();
 508              		.loc 1 178 0
 509 003a 6400     		lsls	r4, r4, #1
 510              	.LVL35:
 511 003c E4B2     		uxtb	r4, r4
 512              	.LVL36:
 513              	.LBB53:
 514              	.LBB54:
  91:Src/nRF24.c   **** }
 515              		.loc 1 91 0
 516 003e 4FF48061 		mov	r1, #1024
 517 0042 2846     		mov	r0, r5
 518 0044 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 519              	.LVL37:
 520              	.LBE54:
 521              	.LBE53:
 179:Src/nRF24.c   **** 
 522              		.loc 1 179 0
 523 0048 0443     		orrs	r4, r4, r0
 524              	.LVL38:
 525 004a E4B2     		uxtb	r4, r4
 526              	.LVL39:
 182:Src/nRF24.c   ****   }
 527              		.loc 1 182 0
 528 004c FFF7FEFF 		bl	spi_delay
 529              	.LVL40:
 169:Src/nRF24.c   ****   {
 530              		.loc 1 169 0
 531 0050 0136     		adds	r6, r6, #1
 532              	.LVL41:
 533              	.L46:
 169:Src/nRF24.c   ****   {
 534              		.loc 1 169 0 is_stmt 0 discriminator 1
 535 0052 072E     		cmp	r6, #7
 536 0054 DADD     		ble	.L47
 537              	.LBE55:
 538              	.LBB56:
ARM GAS  /tmp/ccHkpHGQ.s 			page 14


 539              	.LBB57:
  38:Src/nRF24.c   **** } 
 540              		.loc 1 38 0 is_stmt 1
 541 0056 0022     		movs	r2, #0
 542 0058 4FF48071 		mov	r1, #256
 543 005c 0248     		ldr	r0, .L49
 544 005e FFF7FEFF 		bl	HAL_GPIO_WritePin
 545              	.LVL42:
 546              	.LBE57:
 547              	.LBE56:
 187:Src/nRF24.c   ****   
 548              		.loc 1 187 0
 549 0062 2046     		mov	r0, r4
 550 0064 70BD     		pop	{r4, r5, r6, pc}
 551              	.LVL43:
 552              	.L50:
 553 0066 00BF     		.align	2
 554              	.L49:
 555 0068 00000240 		.word	1073872896
 556 006c 00040240 		.word	1073873920
 557              		.cfi_endproc
 558              	.LFE140:
 560              		.section	.text.spi_read_register,"ax",%progbits
 561              		.align	1
 562              		.global	spi_read_register
 563              		.syntax unified
 564              		.thumb
 565              		.thumb_func
 566              		.fpu fpv4-sp-d16
 568              	spi_read_register:
 569              	.LFB142:
 194:Src/nRF24.c   **** }
 195:Src/nRF24.c   **** 
 196:Src/nRF24.c   **** 
 197:Src/nRF24.c   **** /**
 198:Src/nRF24.c   ****   * @brief      Read data from the SPI target device register. Endianess: LSByte first.
 199:Src/nRF24.c   ****   * @param[in]  reg SPI target device register to write to.
 200:Src/nRF24.c   ****   * @param[in]  num_bytes Number of bytes needed to write to that address.
 201:Src/nRF24.c   ****   * @param[out] p_read_data A pointer pointing to a memory location that can store the data read fr
 202:Src/nRF24.c   ****   * @retval     none.
 203:Src/nRF24.c   ****   */
 204:Src/nRF24.c   **** void spi_read_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_read_data)
 205:Src/nRF24.c   **** {
 570              		.loc 1 205 0
 571              		.cfi_startproc
 572              		@ args = 0, pretend = 0, frame = 0
 573              		@ frame_needed = 0, uses_anonymous_args = 0
 574              	.LVL44:
 575 0000 70B5     		push	{r4, r5, r6, lr}
 576              	.LCFI11:
 577              		.cfi_def_cfa_offset 16
 578              		.cfi_offset 4, -16
 579              		.cfi_offset 5, -12
 580              		.cfi_offset 6, -8
 581              		.cfi_offset 14, -4
 582 0002 0446     		mov	r4, r0
 583 0004 0D46     		mov	r5, r1
ARM GAS  /tmp/ccHkpHGQ.s 			page 15


 584 0006 1646     		mov	r6, r2
 585              	.LBB58:
 586              	.LBB59:
  69:Src/nRF24.c   **** }
 587              		.loc 1 69 0
 588 0008 0022     		movs	r2, #0
 589              	.LVL45:
 590 000a 1021     		movs	r1, #16
 591              	.LVL46:
 592 000c 0948     		ldr	r0, .L55
 593              	.LVL47:
 594 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 595              	.LVL48:
 596              	.LBE59:
 597              	.LBE58:
 206:Src/nRF24.c   ****   /* SPI CHIP SELECT */
 207:Src/nRF24.c   ****   SPI_CS_1();
 208:Src/nRF24.c   ****   
 209:Src/nRF24.c   ****   /* Clock out target register. */
 210:Src/nRF24.c   ****   gpio_clockout_8_bits(reg);
 598              		.loc 1 210 0
 599 0012 2046     		mov	r0, r4
 600 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 601              	.LVL49:
 602              	.LBB60:
 211:Src/nRF24.c   **** 
 212:Src/nRF24.c   ****   /* Clock in target register value. */
 213:Src/nRF24.c   ****   for (int i = 0; i < num_bytes; ++i) 
 603              		.loc 1 213 0
 604 0018 0024     		movs	r4, #0
 605 001a 03E0     		b	.L52
 606              	.LVL50:
 607              	.L53:
 214:Src/nRF24.c   ****   {
 215:Src/nRF24.c   ****     p_read_data[i] = gpio_clockin_8_bits();
 608              		.loc 1 215 0 discriminator 3
 609 001c FFF7FEFF 		bl	gpio_clockin_8_bits
 610              	.LVL51:
 611 0020 3055     		strb	r0, [r6, r4]
 213:Src/nRF24.c   ****   {
 612              		.loc 1 213 0 discriminator 3
 613 0022 0134     		adds	r4, r4, #1
 614              	.LVL52:
 615              	.L52:
 213:Src/nRF24.c   ****   {
 616              		.loc 1 213 0 is_stmt 0 discriminator 1
 617 0024 AC42     		cmp	r4, r5
 618 0026 F9DB     		blt	.L53
 619              	.LBE60:
 620              	.LBB61:
 621              	.LBB62:
  80:Src/nRF24.c   **** }
 622              		.loc 1 80 0 is_stmt 1
 623 0028 0122     		movs	r2, #1
 624 002a 1021     		movs	r1, #16
 625 002c 0148     		ldr	r0, .L55
 626 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
ARM GAS  /tmp/ccHkpHGQ.s 			page 16


 627              	.LVL53:
 628 0032 70BD     		pop	{r4, r5, r6, pc}
 629              	.LVL54:
 630              	.L56:
 631              		.align	2
 632              	.L55:
 633 0034 00040240 		.word	1073873920
 634              	.LBE62:
 635              	.LBE61:
 636              		.cfi_endproc
 637              	.LFE142:
 639              		.section	.text.spi_write_register,"ax",%progbits
 640              		.align	1
 641              		.global	spi_write_register
 642              		.syntax unified
 643              		.thumb
 644              		.thumb_func
 645              		.fpu fpv4-sp-d16
 647              	spi_write_register:
 648              	.LFB143:
 216:Src/nRF24.c   ****   }
 217:Src/nRF24.c   ****   
 218:Src/nRF24.c   ****   /* SPI CHIP DESELECT */
 219:Src/nRF24.c   ****   SPI_CS_0();
 220:Src/nRF24.c   **** }
 221:Src/nRF24.c   **** 
 222:Src/nRF24.c   **** 
 223:Src/nRF24.c   **** /**
 224:Src/nRF24.c   ****   * @brief      Write a number of bytes to the spi target device register.
 225:Src/nRF24.c   ****   * @param[in]  reg spi target device register to write to.
 226:Src/nRF24.c   ****   * @param[in]  num_bytes number of bytes needed to write to that address.
 227:Src/nRF24.c   ****   * @param[in]  p_writing_data A pointer pointing to a memory location storing the data to write.
 228:Src/nRF24.c   ****   * @retval     none.
 229:Src/nRF24.c   ****   */
 230:Src/nRF24.c   **** void spi_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 231:Src/nRF24.c   **** {
 649              		.loc 1 231 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 0
 652              		@ frame_needed = 0, uses_anonymous_args = 0
 653              	.LVL55:
 654 0000 70B5     		push	{r4, r5, r6, lr}
 655              	.LCFI12:
 656              		.cfi_def_cfa_offset 16
 657              		.cfi_offset 4, -16
 658              		.cfi_offset 5, -12
 659              		.cfi_offset 6, -8
 660              		.cfi_offset 14, -4
 661 0002 0446     		mov	r4, r0
 662 0004 0D46     		mov	r5, r1
 663 0006 1646     		mov	r6, r2
 664              	.LBB63:
 665              	.LBB64:
  69:Src/nRF24.c   **** }
 666              		.loc 1 69 0
 667 0008 0022     		movs	r2, #0
 668              	.LVL56:
ARM GAS  /tmp/ccHkpHGQ.s 			page 17


 669 000a 1021     		movs	r1, #16
 670              	.LVL57:
 671 000c 0948     		ldr	r0, .L61
 672              	.LVL58:
 673 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 674              	.LVL59:
 675              	.LBE64:
 676              	.LBE63:
 232:Src/nRF24.c   ****   /* SPI CHIP SELECT */
 233:Src/nRF24.c   ****   SPI_CS_1();
 234:Src/nRF24.c   **** 
 235:Src/nRF24.c   ****   /* Clock out target register. */
 236:Src/nRF24.c   ****   gpio_clockout_8_bits(reg); 
 677              		.loc 1 236 0
 678 0012 2046     		mov	r0, r4
 679 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 680              	.LVL60:
 681              	.LBB65:
 237:Src/nRF24.c   **** 
 238:Src/nRF24.c   ****   /* Clock out value bytes to the target. */
 239:Src/nRF24.c   ****   for (int i = 0; i < num_bytes; ++i)
 682              		.loc 1 239 0
 683 0018 0024     		movs	r4, #0
 684 001a 03E0     		b	.L58
 685              	.LVL61:
 686              	.L59:
 687              	.LBB66:
 240:Src/nRF24.c   ****   {
 241:Src/nRF24.c   ****     uint8_t writing_byte = p_writing_data[i];
 242:Src/nRF24.c   ****     gpio_clockout_8_bits(writing_byte);
 688              		.loc 1 242 0 discriminator 3
 689 001c 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 690 001e FFF7FEFF 		bl	gpio_clockout_8_bits
 691              	.LVL62:
 692              	.LBE66:
 239:Src/nRF24.c   ****   {
 693              		.loc 1 239 0 discriminator 3
 694 0022 0134     		adds	r4, r4, #1
 695              	.LVL63:
 696              	.L58:
 239:Src/nRF24.c   ****   {
 697              		.loc 1 239 0 is_stmt 0 discriminator 1
 698 0024 AC42     		cmp	r4, r5
 699 0026 F9DB     		blt	.L59
 700              	.LBE65:
 701              	.LBB67:
 702              	.LBB68:
  80:Src/nRF24.c   **** }
 703              		.loc 1 80 0 is_stmt 1
 704 0028 0122     		movs	r2, #1
 705 002a 1021     		movs	r1, #16
 706 002c 0148     		ldr	r0, .L61
 707 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 708              	.LVL64:
 709 0032 70BD     		pop	{r4, r5, r6, pc}
 710              	.LVL65:
 711              	.L62:
ARM GAS  /tmp/ccHkpHGQ.s 			page 18


 712              		.align	2
 713              	.L61:
 714 0034 00040240 		.word	1073873920
 715              	.LBE68:
 716              	.LBE67:
 717              		.cfi_endproc
 718              	.LFE143:
 720              		.section	.text.nRF24_CE_1,"ax",%progbits
 721              		.align	1
 722              		.global	nRF24_CE_1
 723              		.syntax unified
 724              		.thumb
 725              		.thumb_func
 726              		.fpu fpv4-sp-d16
 728              	nRF24_CE_1:
 729              	.LFB144:
 243:Src/nRF24.c   ****   }
 244:Src/nRF24.c   **** 
 245:Src/nRF24.c   ****   /* SPI CHIP DESELECT */
 246:Src/nRF24.c   ****   SPI_CS_0();
 247:Src/nRF24.c   **** }
 248:Src/nRF24.c   **** 
 249:Src/nRF24.c   **** 
 250:Src/nRF24.c   **** /* nRF24 Operations -------------------------------------------------------------------------------
 251:Src/nRF24.c   **** 
 252:Src/nRF24.c   **** 
 253:Src/nRF24.c   **** /**
 254:Src/nRF24.c   ****   * @brief Set high on Chip-Enable pin of nRF24L01.
 255:Src/nRF24.c   ****   * @param None
 256:Src/nRF24.c   ****   * @retval None
 257:Src/nRF24.c   ****   */
 258:Src/nRF24.c   **** void nRF24_CE_1()
 259:Src/nRF24.c   **** {
 730              		.loc 1 259 0
 731              		.cfi_startproc
 732              		@ args = 0, pretend = 0, frame = 0
 733              		@ frame_needed = 0, uses_anonymous_args = 0
 734 0000 08B5     		push	{r3, lr}
 735              	.LCFI13:
 736              		.cfi_def_cfa_offset 8
 737              		.cfi_offset 3, -8
 738              		.cfi_offset 14, -4
 260:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  
 739              		.loc 1 260 0
 740 0002 0122     		movs	r2, #1
 741 0004 2021     		movs	r1, #32
 742 0006 0248     		ldr	r0, .L65
 743 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 744              	.LVL66:
 745 000c 08BD     		pop	{r3, pc}
 746              	.L66:
 747 000e 00BF     		.align	2
 748              	.L65:
 749 0010 00040240 		.word	1073873920
 750              		.cfi_endproc
 751              	.LFE144:
 753              		.section	.text.nRF24_CE_0,"ax",%progbits
ARM GAS  /tmp/ccHkpHGQ.s 			page 19


 754              		.align	1
 755              		.global	nRF24_CE_0
 756              		.syntax unified
 757              		.thumb
 758              		.thumb_func
 759              		.fpu fpv4-sp-d16
 761              	nRF24_CE_0:
 762              	.LFB145:
 261:Src/nRF24.c   **** }
 262:Src/nRF24.c   **** 
 263:Src/nRF24.c   **** 
 264:Src/nRF24.c   **** /**
 265:Src/nRF24.c   ****   * @brief Set low on Chip-Enable pin of nRF24L01.
 266:Src/nRF24.c   ****   * @param None
 267:Src/nRF24.c   ****   * @retval None
 268:Src/nRF24.c   ****   */
 269:Src/nRF24.c   **** void nRF24_CE_0()
 270:Src/nRF24.c   **** {
 763              		.loc 1 270 0
 764              		.cfi_startproc
 765              		@ args = 0, pretend = 0, frame = 0
 766              		@ frame_needed = 0, uses_anonymous_args = 0
 767 0000 08B5     		push	{r3, lr}
 768              	.LCFI14:
 769              		.cfi_def_cfa_offset 8
 770              		.cfi_offset 3, -8
 771              		.cfi_offset 14, -4
 271:Src/nRF24.c   ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 772              		.loc 1 271 0
 773 0002 0022     		movs	r2, #0
 774 0004 2021     		movs	r1, #32
 775 0006 0248     		ldr	r0, .L69
 776 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 777              	.LVL67:
 778 000c 08BD     		pop	{r3, pc}
 779              	.L70:
 780 000e 00BF     		.align	2
 781              	.L69:
 782 0010 00040240 		.word	1073873920
 783              		.cfi_endproc
 784              	.LFE145:
 786              		.section	.text.nRF24_verified_write_register,"ax",%progbits
 787              		.align	1
 788              		.global	nRF24_verified_write_register
 789              		.syntax unified
 790              		.thumb
 791              		.thumb_func
 792              		.fpu fpv4-sp-d16
 794              	nRF24_verified_write_register:
 795              	.LFB146:
 272:Src/nRF24.c   **** }
 273:Src/nRF24.c   **** 
 274:Src/nRF24.c   **** /**
 275:Src/nRF24.c   ****   * @brief      Write to a register on target device through SPI. Read the same registers after wri
 276:Src/nRF24.c   ****   * @param[in]  reg The device register to write value to.
 277:Src/nRF24.c   ****   * @param[in]  num_bytes Number of bytes to write.
 278:Src/nRF24.c   ****   * @param[in]  p_writing_data Data to write.
ARM GAS  /tmp/ccHkpHGQ.s 			page 20


 279:Src/nRF24.c   ****   * @retval     Boolean. 1 for mistakes happen. 0 for success.
 280:Src/nRF24.c   ****   * @note       reg & ~ W_REGISTER_MASK is reverse operation of reg | W_REGISTER_MASK,
 281:Src/nRF24.c   **** 	*               essentially get rid of Write Regiter Mask and add a Read Register Mask. 
 282:Src/nRF24.c   ****   */
 283:Src/nRF24.c   **** bool nRF24_verified_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 284:Src/nRF24.c   **** {
 796              		.loc 1 284 0
 797              		.cfi_startproc
 798              		@ args = 0, pretend = 0, frame = 64
 799              		@ frame_needed = 1, uses_anonymous_args = 0
 800              	.LVL68:
 801 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 802              	.LCFI15:
 803              		.cfi_def_cfa_offset 32
 804              		.cfi_offset 4, -32
 805              		.cfi_offset 5, -28
 806              		.cfi_offset 6, -24
 807              		.cfi_offset 7, -20
 808              		.cfi_offset 8, -16
 809              		.cfi_offset 9, -12
 810              		.cfi_offset 10, -8
 811              		.cfi_offset 14, -4
 812 0004 90B0     		sub	sp, sp, #64
 813              	.LCFI16:
 814              		.cfi_def_cfa_offset 96
 815 0006 00AF     		add	r7, sp, #0
 816              	.LCFI17:
 817              		.cfi_def_cfa_register 7
 818 0008 0546     		mov	r5, r0
 819 000a 0C46     		mov	r4, r1
 820 000c 9046     		mov	r8, r2
 285:Src/nRF24.c   **** 
 286:Src/nRF24.c   ****     char message[64] = {'\0'};
 821              		.loc 1 286 0
 822 000e 4022     		movs	r2, #64
 823              	.LVL69:
 824 0010 0021     		movs	r1, #0
 825              	.LVL70:
 826 0012 3846     		mov	r0, r7
 827              	.LVL71:
 828 0014 FFF7FEFF 		bl	memset
 829              	.LVL72:
 287:Src/nRF24.c   ****     uint8_t read_data[num_bytes];
 830              		.loc 1 287 0
 831 0018 A246     		mov	r10, r4
 832              	.LVL73:
 833 001a E31D     		adds	r3, r4, #7
 834 001c 23F00703 		bic	r3, r3, #7
 835 0020 ADEB030D 		sub	sp, sp, r3
 836 0024 E946     		mov	r9, sp
 837              	.LVL74:
 288:Src/nRF24.c   **** 
 289:Src/nRF24.c   **** 		/* Write the data to target register. */
 290:Src/nRF24.c   ****     spi_write_register(reg, num_bytes, p_writing_data); 
 838              		.loc 1 290 0
 839 0026 4246     		mov	r2, r8
 840 0028 2146     		mov	r1, r4
ARM GAS  /tmp/ccHkpHGQ.s 			page 21


 841 002a 2846     		mov	r0, r5
 842 002c FFF7FEFF 		bl	spi_write_register
 843              	.LVL75:
 291:Src/nRF24.c   **** 
 292:Src/nRF24.c   **** 		/* Read from same target register to verify if data has been successfully written. */
 293:Src/nRF24.c   **** 
 294:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK | (reg & ~W_REGISTER_MASK), num_bytes, read_data);
 844              		.loc 1 294 0
 845 0030 6A46     		mov	r2, sp
 846 0032 2146     		mov	r1, r4
 847 0034 05F0DF00 		and	r0, r5, #223
 848 0038 FFF7FEFF 		bl	spi_read_register
 849              	.LVL76:
 850              	.LBB78:
 295:Src/nRF24.c   **** 
 296:Src/nRF24.c   ****     for (int i = 0; i < num_bytes; ++i) 
 851              		.loc 1 296 0
 852 003c 0026     		movs	r6, #0
 853              	.LVL77:
 854              	.L72:
 855              		.loc 1 296 0 is_stmt 0 discriminator 1
 856 003e 5645     		cmp	r6, r10
 857 0040 54DA     		bge	.L77
 297:Src/nRF24.c   ****     {
 298:Src/nRF24.c   ****       if (read_data[i] != p_writing_data[i])  // check mismatch between written data and read data 
 858              		.loc 1 298 0 is_stmt 1
 859 0042 19F80620 		ldrb	r2, [r9, r6]	@ zero_extendqisi2
 860 0046 08EB0604 		add	r4, r8, r6
 861 004a 18F80630 		ldrb	r3, [r8, r6]	@ zero_extendqisi2
 862 004e 9A42     		cmp	r2, r3
 863 0050 24D1     		bne	.L78
 299:Src/nRF24.c   ****       {
 300:Src/nRF24.c   ****         strcpy(message, "Problem writing to SPI register -- ");
 301:Src/nRF24.c   ****         serial_print(message);
 302:Src/nRF24.c   ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 303:Src/nRF24.c   ****         serial_print(message);
 304:Src/nRF24.c   ****         return true;
 305:Src/nRF24.c   ****       } else {
 306:Src/nRF24.c   ****         strcpy(message, "Success writing to SPI register -- ");
 864              		.loc 1 306 0 discriminator 2
 865 0052 3C46     		mov	r4, r7
 866 0054 284D     		ldr	r5, .L79
 867 0056 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 868 0058 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 869 005a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 870 005c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 871 005e 2B68     		ldr	r3, [r5]
 872 0060 2360     		str	r3, [r4]
 873              	.LVL78:
 874              	.LBB79:
 875              	.LBB80:
 105:Src/nRF24.c   **** }
 876              		.loc 1 105 0 discriminator 2
 877 0062 3846     		mov	r0, r7
 878              	.LVL79:
 879 0064 FFF7FEFF 		bl	strlen
 880              	.LVL80:
ARM GAS  /tmp/ccHkpHGQ.s 			page 22


 881 0068 244C     		ldr	r4, .L79+4
 882              	.LVL81:
 883 006a 6423     		movs	r3, #100
 884 006c 82B2     		uxth	r2, r0
 885 006e 3946     		mov	r1, r7
 886              	.LVL82:
 887 0070 2046     		mov	r0, r4
 888 0072 FFF7FEFF 		bl	HAL_UART_Transmit
 889              	.LVL83:
 890              	.LBE80:
 891              	.LBE79:
 307:Src/nRF24.c   ****         serial_print(message);
 308:Src/nRF24.c   ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 892              		.loc 1 308 0 discriminator 2
 893 0076 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 894 007a 18F80620 		ldrb	r2, [r8, r6]	@ zero_extendqisi2
 895 007e 2049     		ldr	r1, .L79+8
 896 0080 3846     		mov	r0, r7
 897 0082 FFF7FEFF 		bl	sprintf
 898              	.LVL84:
 899              	.LBB81:
 900              	.LBB82:
 105:Src/nRF24.c   **** }
 901              		.loc 1 105 0 discriminator 2
 902 0086 3846     		mov	r0, r7
 903              	.LVL85:
 904 0088 FFF7FEFF 		bl	strlen
 905              	.LVL86:
 906 008c 6423     		movs	r3, #100
 907 008e 82B2     		uxth	r2, r0
 908 0090 3946     		mov	r1, r7
 909              	.LVL87:
 910 0092 2046     		mov	r0, r4
 911 0094 FFF7FEFF 		bl	HAL_UART_Transmit
 912              	.LVL88:
 913              	.LBE82:
 914              	.LBE81:
 296:Src/nRF24.c   ****     {
 915              		.loc 1 296 0 discriminator 2
 916 0098 0136     		adds	r6, r6, #1
 917              	.LVL89:
 918 009a D0E7     		b	.L72
 919              	.L78:
 300:Src/nRF24.c   ****         serial_print(message);
 920              		.loc 1 300 0
 921 009c 3D46     		mov	r5, r7
 922 009e DFF864E0 		ldr	lr, .L79+12
 923 00a2 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 924 00a6 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 925 00a8 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 926 00ac 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 927 00ae DEF80030 		ldr	r3, [lr]
 928 00b2 2B60     		str	r3, [r5]
 929              	.LVL90:
 930              	.LBB83:
 931              	.LBB84:
 105:Src/nRF24.c   **** }
ARM GAS  /tmp/ccHkpHGQ.s 			page 23


 932              		.loc 1 105 0
 933 00b4 3846     		mov	r0, r7
 934              	.LVL91:
 935 00b6 FFF7FEFF 		bl	strlen
 936              	.LVL92:
 937 00ba 104D     		ldr	r5, .L79+4
 938              	.LVL93:
 939 00bc 6423     		movs	r3, #100
 940 00be 82B2     		uxth	r2, r0
 941 00c0 3946     		mov	r1, r7
 942              	.LVL94:
 943 00c2 2846     		mov	r0, r5
 944 00c4 FFF7FEFF 		bl	HAL_UART_Transmit
 945              	.LVL95:
 946              	.LBE84:
 947              	.LBE83:
 302:Src/nRF24.c   ****         serial_print(message);
 948              		.loc 1 302 0
 949 00c8 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 950 00cc 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 951 00ce 0C49     		ldr	r1, .L79+8
 952 00d0 3846     		mov	r0, r7
 953 00d2 FFF7FEFF 		bl	sprintf
 954              	.LVL96:
 955              	.LBB85:
 956              	.LBB86:
 105:Src/nRF24.c   **** }
 957              		.loc 1 105 0
 958 00d6 3846     		mov	r0, r7
 959              	.LVL97:
 960 00d8 FFF7FEFF 		bl	strlen
 961              	.LVL98:
 962 00dc 6423     		movs	r3, #100
 963 00de 82B2     		uxth	r2, r0
 964 00e0 3946     		mov	r1, r7
 965              	.LVL99:
 966 00e2 2846     		mov	r0, r5
 967 00e4 FFF7FEFF 		bl	HAL_UART_Transmit
 968              	.LVL100:
 969              	.LBE86:
 970              	.LBE85:
 304:Src/nRF24.c   ****       } else {
 971              		.loc 1 304 0
 972 00e8 0120     		movs	r0, #1
 973 00ea 00E0     		b	.L74
 974              	.LVL101:
 975              	.L77:
 976              	.LBE78:
 309:Src/nRF24.c   ****         serial_print(message);
 310:Src/nRF24.c   ****       }
 311:Src/nRF24.c   ****   }
 312:Src/nRF24.c   ****   return false;
 977              		.loc 1 312 0
 978 00ec 0020     		movs	r0, #0
 979              	.L74:
 313:Src/nRF24.c   **** }
 980              		.loc 1 313 0
ARM GAS  /tmp/ccHkpHGQ.s 			page 24


 981 00ee 4037     		adds	r7, r7, #64
 982              	.LCFI18:
 983              		.cfi_def_cfa_offset 32
 984 00f0 BD46     		mov	sp, r7
 985              	.LCFI19:
 986              		.cfi_def_cfa_register 13
 987              		@ sp needed
 988 00f2 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 989              	.LVL102:
 990              	.L80:
 991 00f6 00BF     		.align	2
 992              	.L79:
 993 00f8 50000000 		.word	.LC5
 994 00fc 00000000 		.word	huart2
 995 0100 24000000 		.word	.LC4
 996 0104 00000000 		.word	.LC3
 997              		.cfi_endproc
 998              	.LFE146:
 1000              		.section	.text.nRF24_configure_tx_mode,"ax",%progbits
 1001              		.align	1
 1002              		.global	nRF24_configure_tx_mode
 1003              		.syntax unified
 1004              		.thumb
 1005              		.thumb_func
 1006              		.fpu fpv4-sp-d16
 1008              	nRF24_configure_tx_mode:
 1009              	.LFB148:
 314:Src/nRF24.c   **** 
 315:Src/nRF24.c   **** 
 316:Src/nRF24.c   **** /**  
 317:Src/nRF24.c   ****  *  @brief:  Test nRF24 transmitter function without a receiver.
 318:Src/nRF24.c   ****  *  @note:  
 319:Src/nRF24.c   ****  *      
 320:Src/nRF24.c   ****  *      Steps: 1. Disable Auto Acknowledgement, disable Auto Retransmit.
 321:Src/nRF24.c   ****  *             2. TX_DS (in STATUS register) is expected to be set when data has been clock into TX
 322:Src/nRF24.c   ****  *             3. Check if STATUS = 0x2E, if so we have a working TX module.
 323:Src/nRF24.c   ****  *            
 324:Src/nRF24.c   ****  *            After writing to W_TX_PAYLOAD, TX_EMPTY (in FIFO_STATUS register) becomes 0.
 325:Src/nRF24.c   ****  *            
 326:Src/nRF24.c   ****  *            What happens if sending is not successful?
 327:Src/nRF24.c   ****  *            TX_FULL (in FIFO_STATUS register) becomes 1.
 328:Src/nRF24.c   ****  *            TX_FULL (in STATUS register) becomes 1.
 329:Src/nRF24.c   ****  *            TX_DS (in STATUS register) remains 0.  
 330:Src/nRF24.c   ****  *
 331:Src/nRF24.c   ****  *      States: 
 332:Src/nRF24.c   ****  *            The states can be referred in 6.1.1 State diagram.
 333:Src/nRF24.c   ****  *      
 334:Src/nRF24.c   ****  *      STATUS register
 335:Src/nRF24.c   ****  *                7             6           5         4         3:1         0
 336:Src/nRF24.c   ****  *            <reserved>      RX_DR       TX_DS     MAX_RT     RX_P_NO     TX_FULL
 337:Src/nRF24.c   ****  *            -----------------------------------------------------------------------
 338:Src/nRF24.c   ****  *             Always 0       Receive     Transfer  Maximum    000-101 :    1: 
 339:Src/nRF24.c   ****  *                            Data        Data      TX         Data Pipe #  TX_FULL
 340:Src/nRF24.c   ****  *                            Ready       Sent      Transmits  110 :
 341:Src/nRF24.c   ****  *                                                             Not Used.
 342:Src/nRF24.c   ****  *                                                             111:
 343:Src/nRF24.c   ****  *                                                             RX FIFO Empty.
ARM GAS  /tmp/ccHkpHGQ.s 			page 25


 344:Src/nRF24.c   ****  */
 345:Src/nRF24.c   **** bool nRF24_tx_self_test() 
 346:Src/nRF24.c   **** {
 347:Src/nRF24.c   **** 	char message[128];
 348:Src/nRF24.c   **** 	uint8_t writing_byte;
 349:Src/nRF24.c   **** 
 350:Src/nRF24.c   ****   strcpy(message, "---- nrf24 tx self test. ----\n");
 351:Src/nRF24.c   ****   serial_print(message);
 352:Src/nRF24.c   **** 
 353:Src/nRF24.c   ****   strcpy(message, "---- This test to verifies function of a tranmitter send without a receiver. ---
 354:Src/nRF24.c   ****   serial_print(message);
 355:Src/nRF24.c   **** 
 356:Src/nRF24.c   ****   uint8_t nRF24_status = 0x00;
 357:Src/nRF24.c   **** 
 358:Src/nRF24.c   ****   // Note that if we reset the nRF connected without re-poweron the chip, initial value of register
 359:Src/nRF24.c   ****   /* Current State: [Power-on reset 100 ms] */
 360:Src/nRF24.c   ****   nRF24_CE_0();
 361:Src/nRF24.c   **** 
 362:Src/nRF24.c   ****   /* Current State: [Power-Down] (RF transmission is Power-Down, but SPI is alive.) */
 363:Src/nRF24.c   ****   writing_byte = 0x00;
 364:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
 365:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
 366:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 367:Src/nRF24.c   **** 
 368:Src/nRF24.c   ****   writing_byte = 0x0E;
 369:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
 370:Src/nRF24.c   **** 
 371:Src/nRF24.c   ****   /* PWR_UP=1, state transition to [Standby-I] */
 372:Src/nRF24.c   ****   uint8_t test_payload[4] = {0xC0, 0xFE, 0xBE, 0xEF}; // clock in a payload, now TX FIFO not empty 
 373:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 374:Src/nRF24.c   ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 375:Src/nRF24.c   ****   
 376:Src/nRF24.c   ****   /* TX FIFO not empty AND CE = 1, state transition to [TX MODE] */
 377:Src/nRF24.c   ****   nRF24_status = nRF24_get_STATUS();
 378:Src/nRF24.c   ****   spi_delay(1);
 379:Src/nRF24.c   **** 
 380:Src/nRF24.c   ****   /* CE=0, state transition -> now return to [Standby-I]. */
 381:Src/nRF24.c   ****   nRF24_CE_0();
 382:Src/nRF24.c   **** 
 383:Src/nRF24.c   ****   /* PWR_UP = 0, state transition to [Power Down] */
 384:Src/nRF24.c   ****   writing_byte = 0x08; // write default value for CONFIG register (writing_byte = 0)
 385:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       
 386:Src/nRF24.c   **** 
 387:Src/nRF24.c   ****   /* Now the chip is back to power down mode, check test result. */
 388:Src/nRF24.c   ****   if (nRF24_status & 0x2E) 
 389:Src/nRF24.c   ****   {
 390:Src/nRF24.c   ****     strcpy(message, "\n > nRF24 transmission self-test has passed. \
 391:Src/nRF24.c   ****                        STATUS has value of 0x2E. \
 392:Src/nRF24.c   ****                        TX_DS (transfer data sent) was set. \
 393:Src/nRF24.c   ****                        RX_P_NO = 111, means RX FIFO Empty. \n");
 394:Src/nRF24.c   ****     serial_print(message);
 395:Src/nRF24.c   ****     return true;
 396:Src/nRF24.c   ****   } 
 397:Src/nRF24.c   ****   else 
 398:Src/nRF24.c   ****   {
 399:Src/nRF24.c   ****     strcpy(message, "\n > nRF24 transmission self-test has failed. STATUS is expected 0x2E.");
 400:Src/nRF24.c   ****     serial_print(message);
ARM GAS  /tmp/ccHkpHGQ.s 			page 26


 401:Src/nRF24.c   ****     return false;
 402:Src/nRF24.c   ****   }
 403:Src/nRF24.c   ****   
 404:Src/nRF24.c   **** }
 405:Src/nRF24.c   **** 
 406:Src/nRF24.c   **** /**
 407:Src/nRF24.c   ****   * @brief  Configure nRF24 to work in TX (transmit) mode.
 408:Src/nRF24.c   ****   * @param  None.
 409:Src/nRF24.c   ****   * @retval None.
 410:Src/nRF24.c   ****   * @note   After nRF24_configure_tx_mode() is called, use nRF24_keep_sending() to keep sending dat
 411:Src/nRF24.c   ****   */
 412:Src/nRF24.c   **** void nRF24_configure_tx_mode() 
 413:Src/nRF24.c   **** {
 1010              		.loc 1 413 0
 1011              		.cfi_startproc
 1012              		@ args = 0, pretend = 0, frame = 16
 1013              		@ frame_needed = 0, uses_anonymous_args = 0
 1014 0000 30B5     		push	{r4, r5, lr}
 1015              	.LCFI20:
 1016              		.cfi_def_cfa_offset 12
 1017              		.cfi_offset 4, -12
 1018              		.cfi_offset 5, -8
 1019              		.cfi_offset 14, -4
 1020 0002 85B0     		sub	sp, sp, #20
 1021              	.LCFI21:
 1022              		.cfi_def_cfa_offset 32
 414:Src/nRF24.c   ****     nRF24_CE_0();
 1023              		.loc 1 414 0
 1024 0004 FFF7FEFF 		bl	nRF24_CE_0
 1025              	.LVL103:
 415:Src/nRF24.c   **** 
 416:Src/nRF24.c   ****     /* Set TX_ADDR for sender. On the Receiver side, set RX_ADDR_P0 with same value. */
 417:Src/nRF24.c   **** 
 418:Src/nRF24.c   ****     uint8_t TX_ADDRESS[5] = {0x10,0xDE,0x10,0x10,0x10};  // 5 byte transmit-address
 1026              		.loc 1 418 0
 1027 0008 1F4B     		ldr	r3, .L83
 1028 000a 93E80300 		ldm	r3, {r0, r1}
 1029 000e 0290     		str	r0, [sp, #8]
 1030 0010 8DF80C10 		strb	r1, [sp, #12]
 419:Src/nRF24.c   ****     spi_write_register(W_REGISTER_MASK + TX_ADDR, 5, TX_ADDRESS);     // Write transmit-address to 
 1031              		.loc 1 419 0
 1032 0014 02AA     		add	r2, sp, #8
 1033 0016 0521     		movs	r1, #5
 1034 0018 3020     		movs	r0, #48
 1035 001a FFF7FEFF 		bl	spi_write_register
 1036              	.LVL104:
 420:Src/nRF24.c   **** 
 421:Src/nRF24.c   ****     uint8_t writing_byte;
 422:Src/nRF24.c   **** 
 423:Src/nRF24.c   ****     writing_byte = 0x00;
 1037              		.loc 1 423 0
 1038 001e 0025     		movs	r5, #0
 1039 0020 04AC     		add	r4, sp, #16
 1040 0022 04F8095D 		strb	r5, [r4, #-9]!
 424:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);
 1041              		.loc 1 424 0
 1042 0026 2246     		mov	r2, r4
ARM GAS  /tmp/ccHkpHGQ.s 			page 27


 1043 0028 0121     		movs	r1, #1
 1044 002a 2120     		movs	r0, #33
 1045 002c FFF7FEFF 		bl	nRF24_verified_write_register
 1046              	.LVL105:
 425:Src/nRF24.c   **** 
 426:Src/nRF24.c   ****     writing_byte = 0x00;
 1047              		.loc 1 426 0
 1048 0030 8DF80750 		strb	r5, [sp, #7]
 427:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);
 1049              		.loc 1 427 0
 1050 0034 2246     		mov	r2, r4
 1051 0036 0121     		movs	r1, #1
 1052 0038 2220     		movs	r0, #34
 1053 003a FFF7FEFF 		bl	nRF24_verified_write_register
 1054              	.LVL106:
 428:Src/nRF24.c   **** 
 429:Src/nRF24.c   ****     writing_byte = 0x00;
 1055              		.loc 1 429 0
 1056 003e 8DF80750 		strb	r5, [sp, #7]
 430:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);
 1057              		.loc 1 430 0
 1058 0042 2246     		mov	r2, r4
 1059 0044 0121     		movs	r1, #1
 1060 0046 2420     		movs	r0, #36
 1061 0048 FFF7FEFF 		bl	nRF24_verified_write_register
 1062              	.LVL107:
 431:Src/nRF24.c   **** 
 432:Src/nRF24.c   ****     writing_byte = 40;
 1063              		.loc 1 432 0
 1064 004c 2823     		movs	r3, #40
 1065 004e 8DF80730 		strb	r3, [sp, #7]
 433:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_CH, 1, &writing_byte);
 1066              		.loc 1 433 0
 1067 0052 2246     		mov	r2, r4
 1068 0054 0121     		movs	r1, #1
 1069 0056 2520     		movs	r0, #37
 1070 0058 FFF7FEFF 		bl	nRF24_verified_write_register
 1071              	.LVL108:
 434:Src/nRF24.c   **** 
 435:Src/nRF24.c   ****     writing_byte = 0x07;
 1072              		.loc 1 435 0
 1073 005c 0723     		movs	r3, #7
 1074 005e 8DF80730 		strb	r3, [sp, #7]
 436:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 1075              		.loc 1 436 0
 1076 0062 2246     		mov	r2, r4
 1077 0064 0121     		movs	r1, #1
 1078 0066 2620     		movs	r0, #38
 1079 0068 FFF7FEFF 		bl	nRF24_verified_write_register
 1080              	.LVL109:
 437:Src/nRF24.c   **** 
 438:Src/nRF24.c   ****     // PWR_UP, state transition to [Standby-I]
 439:Src/nRF24.c   ****     writing_byte = 0x0e;
 1081              		.loc 1 439 0
 1082 006c 0E23     		movs	r3, #14
 1083 006e 8DF80730 		strb	r3, [sp, #7]
 440:Src/nRF24.c   ****     nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);
ARM GAS  /tmp/ccHkpHGQ.s 			page 28


 1084              		.loc 1 440 0
 1085 0072 2246     		mov	r2, r4
 1086 0074 0121     		movs	r1, #1
 1087 0076 2020     		movs	r0, #32
 1088 0078 FFF7FEFF 		bl	nRF24_verified_write_register
 1089              	.LVL110:
 441:Src/nRF24.c   ****     spi_delay(150);
 1090              		.loc 1 441 0
 1091 007c 9620     		movs	r0, #150
 1092 007e FFF7FEFF 		bl	spi_delay
 1093              	.LVL111:
 442:Src/nRF24.c   **** 
 443:Src/nRF24.c   ****     // CE is not set to 1, nRF24 still stays in [Standby-I] Mode.
 444:Src/nRF24.c   ****     // CE = 1 is not activated until we write to TX FIFO so stays in Standby-I mode.
 445:Src/nRF24.c   **** }
 1094              		.loc 1 445 0
 1095 0082 05B0     		add	sp, sp, #20
 1096              	.LCFI22:
 1097              		.cfi_def_cfa_offset 12
 1098              		@ sp needed
 1099 0084 30BD     		pop	{r4, r5, pc}
 1100              	.L84:
 1101 0086 00BF     		.align	2
 1102              	.L83:
 1103 0088 00000000 		.word	.LANCHOR0
 1104              		.cfi_endproc
 1105              	.LFE148:
 1107              		.section	.text.nRF24_print_all_registers,"ax",%progbits
 1108              		.align	1
 1109              		.global	nRF24_print_all_registers
 1110              		.syntax unified
 1111              		.thumb
 1112              		.thumb_func
 1113              		.fpu fpv4-sp-d16
 1115              	nRF24_print_all_registers:
 1116              	.LFB150:
 446:Src/nRF24.c   **** 
 447:Src/nRF24.c   **** 
 448:Src/nRF24.c   **** /**
 449:Src/nRF24.c   ****   * @brief  Make nRF24 keep sending data.
 450:Src/nRF24.c   ****   * @param  None.
 451:Src/nRF24.c   ****   * @retval None.
 452:Src/nRF24.c   ****   */
 453:Src/nRF24.c   **** void nRF24_keep_sending() 
 454:Src/nRF24.c   **** {
 455:Src/nRF24.c   ****   uint8_t payload[] = {0xBE, 0xEF, 0xCA, 0xFE}; // clock in a payload, TX FIFO not empty 
 456:Src/nRF24.c   **** 
 457:Src/nRF24.c   ****   char debug_msg[64];
 458:Src/nRF24.c   ****   
 459:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, (uint8_t*) payload);
 460:Src/nRF24.c   **** 
 461:Src/nRF24.c   ****   /* Fire out the transmit packet */
 462:Src/nRF24.c   ****   nRF24_CE_1(); 
 463:Src/nRF24.c   **** 
 464:Src/nRF24.c   ****   uint8_t stat = nRF24_get_STATUS();
 465:Src/nRF24.c   **** 
 466:Src/nRF24.c   ****   sprintf(debug_msg, "<STATUS> REGISTER : %x\n", stat);
ARM GAS  /tmp/ccHkpHGQ.s 			page 29


 467:Src/nRF24.c   ****   serial_print(debug_msg);
 468:Src/nRF24.c   **** 
 469:Src/nRF24.c   ****   if (stat == 0x2e) // TX_DS bit is set.
 470:Src/nRF24.c   ****   {
 471:Src/nRF24.c   ****     strcpy(debug_msg, "nRF24 send successful.\n");
 472:Src/nRF24.c   ****     serial_print(debug_msg);
 473:Src/nRF24.c   ****   } 
 474:Src/nRF24.c   ****   else 
 475:Src/nRF24.c   ****   {
 476:Src/nRF24.c   ****     strcpy(debug_msg, "nRF24 send failed.\n");
 477:Src/nRF24.c   ****     serial_print(debug_msg);
 478:Src/nRF24.c   ****   }
 479:Src/nRF24.c   ****   // write 1 to clear TX_DS, TX_DS bit is Write-to-Clear.
 480:Src/nRF24.c   ****   uint8_t writing_byte = 0x20;
 481:Src/nRF24.c   ****   spi_write_register(W_REGISTER_MASK + STATUS, 1, &writing_byte); 
 482:Src/nRF24.c   **** 
 483:Src/nRF24.c   ****   nRF24_CE_0(); /* stop transmission. Returns to [Standby-I]. */
 484:Src/nRF24.c   **** }
 485:Src/nRF24.c   **** 
 486:Src/nRF24.c   **** 
 487:Src/nRF24.c   **** 
 488:Src/nRF24.c   **** /**
 489:Src/nRF24.c   ****   * @brief  Print all registers on nRF24. 
 490:Src/nRF24.c   ****   * @param  None.
 491:Src/nRF24.c   ****   * @retval None.
 492:Src/nRF24.c   ****   */
 493:Src/nRF24.c   **** void nRF24_print_all_registers()
 494:Src/nRF24.c   **** {
 1117              		.loc 1 494 0
 1118              		.cfi_startproc
 1119              		@ args = 0, pretend = 0, frame = 40
 1120              		@ frame_needed = 0, uses_anonymous_args = 0
 1121 0000 10B5     		push	{r4, lr}
 1122              	.LCFI23:
 1123              		.cfi_def_cfa_offset 8
 1124              		.cfi_offset 4, -8
 1125              		.cfi_offset 14, -4
 1126 0002 8CB0     		sub	sp, sp, #48
 1127              	.LCFI24:
 1128              		.cfi_def_cfa_offset 56
 495:Src/nRF24.c   **** 	  uint8_t read_data;
 496:Src/nRF24.c   **** 		uint8_t read_buf[4];
 497:Src/nRF24.c   **** 		char message[32];
 498:Src/nRF24.c   ****   
 499:Src/nRF24.c   ****     spi_read_register(R_REGISTER_MASK + CONFIG, 1, &read_data);
 1129              		.loc 1 499 0
 1130 0004 0DF12F02 		add	r2, sp, #47
 1131 0008 0121     		movs	r1, #1
 1132 000a 0020     		movs	r0, #0
 1133 000c FFF7FEFF 		bl	spi_read_register
 1134              	.LVL112:
 500:Src/nRF24.c   **** 		sprintf(message, "CONFIG: <0x%02x>\n", read_data);
 1135              		.loc 1 500 0
 1136 0010 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1137 0014 B349     		ldr	r1, .L87
 1138 0016 02A8     		add	r0, sp, #8
 1139 0018 FFF7FEFF 		bl	sprintf
ARM GAS  /tmp/ccHkpHGQ.s 			page 30


 1140              	.LVL113:
 1141              	.LBB117:
 1142              	.LBB118:
 105:Src/nRF24.c   **** }
 1143              		.loc 1 105 0
 1144 001c 02A8     		add	r0, sp, #8
 1145              	.LVL114:
 1146 001e FFF7FEFF 		bl	strlen
 1147              	.LVL115:
 1148 0022 B14C     		ldr	r4, .L87+4
 1149 0024 6423     		movs	r3, #100
 1150 0026 82B2     		uxth	r2, r0
 1151 0028 02A9     		add	r1, sp, #8
 1152              	.LVL116:
 1153 002a 2046     		mov	r0, r4
 1154 002c FFF7FEFF 		bl	HAL_UART_Transmit
 1155              	.LVL117:
 1156              	.LBE118:
 1157              	.LBE117:
 501:Src/nRF24.c   ****     serial_print(message);
 502:Src/nRF24.c   **** 
 503:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_data);
 1158              		.loc 1 503 0
 1159 0030 0DF12F02 		add	r2, sp, #47
 1160 0034 0121     		movs	r1, #1
 1161 0036 0846     		mov	r0, r1
 1162 0038 FFF7FEFF 		bl	spi_read_register
 1163              	.LVL118:
 504:Src/nRF24.c   **** 		sprintf(message, "EN_AA: <0x%02x>\n", read_data);
 1164              		.loc 1 504 0
 1165 003c 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1166 0040 AA49     		ldr	r1, .L87+8
 1167 0042 02A8     		add	r0, sp, #8
 1168 0044 FFF7FEFF 		bl	sprintf
 1169              	.LVL119:
 1170              	.LBB119:
 1171              	.LBB120:
 105:Src/nRF24.c   **** }
 1172              		.loc 1 105 0
 1173 0048 02A8     		add	r0, sp, #8
 1174              	.LVL120:
 1175 004a FFF7FEFF 		bl	strlen
 1176              	.LVL121:
 1177 004e 6423     		movs	r3, #100
 1178 0050 82B2     		uxth	r2, r0
 1179 0052 02A9     		add	r1, sp, #8
 1180              	.LVL122:
 1181 0054 2046     		mov	r0, r4
 1182 0056 FFF7FEFF 		bl	HAL_UART_Transmit
 1183              	.LVL123:
 1184              	.LBE120:
 1185              	.LBE119:
 505:Src/nRF24.c   ****     serial_print(message);
 506:Src/nRF24.c   **** 
 507:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_data);
 1186              		.loc 1 507 0
 1187 005a 0DF12F02 		add	r2, sp, #47
ARM GAS  /tmp/ccHkpHGQ.s 			page 31


 1188 005e 0121     		movs	r1, #1
 1189 0060 0220     		movs	r0, #2
 1190 0062 FFF7FEFF 		bl	spi_read_register
 1191              	.LVL124:
 508:Src/nRF24.c   **** 		sprintf(message, "EN_RXADDR: <0x%02x>\n", read_data);
 1192              		.loc 1 508 0
 1193 0066 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1194 006a A149     		ldr	r1, .L87+12
 1195 006c 02A8     		add	r0, sp, #8
 1196 006e FFF7FEFF 		bl	sprintf
 1197              	.LVL125:
 1198              	.LBB121:
 1199              	.LBB122:
 105:Src/nRF24.c   **** }
 1200              		.loc 1 105 0
 1201 0072 02A8     		add	r0, sp, #8
 1202              	.LVL126:
 1203 0074 FFF7FEFF 		bl	strlen
 1204              	.LVL127:
 1205 0078 6423     		movs	r3, #100
 1206 007a 82B2     		uxth	r2, r0
 1207 007c 02A9     		add	r1, sp, #8
 1208              	.LVL128:
 1209 007e 2046     		mov	r0, r4
 1210 0080 FFF7FEFF 		bl	HAL_UART_Transmit
 1211              	.LVL129:
 1212              	.LBE122:
 1213              	.LBE121:
 509:Src/nRF24.c   ****     serial_print(message);
 510:Src/nRF24.c   **** 
 511:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_data);
 1214              		.loc 1 511 0
 1215 0084 0DF12F02 		add	r2, sp, #47
 1216 0088 0121     		movs	r1, #1
 1217 008a 0320     		movs	r0, #3
 1218 008c FFF7FEFF 		bl	spi_read_register
 1219              	.LVL130:
 512:Src/nRF24.c   **** 		sprintf(message, "SETUP_AW: <0x%02x>\n", read_data);
 1220              		.loc 1 512 0
 1221 0090 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1222 0094 9749     		ldr	r1, .L87+16
 1223 0096 02A8     		add	r0, sp, #8
 1224 0098 FFF7FEFF 		bl	sprintf
 1225              	.LVL131:
 1226              	.LBB123:
 1227              	.LBB124:
 105:Src/nRF24.c   **** }
 1228              		.loc 1 105 0
 1229 009c 02A8     		add	r0, sp, #8
 1230              	.LVL132:
 1231 009e FFF7FEFF 		bl	strlen
 1232              	.LVL133:
 1233 00a2 6423     		movs	r3, #100
 1234 00a4 82B2     		uxth	r2, r0
 1235 00a6 02A9     		add	r1, sp, #8
 1236              	.LVL134:
 1237 00a8 2046     		mov	r0, r4
ARM GAS  /tmp/ccHkpHGQ.s 			page 32


 1238 00aa FFF7FEFF 		bl	HAL_UART_Transmit
 1239              	.LVL135:
 1240              	.LBE124:
 1241              	.LBE123:
 513:Src/nRF24.c   ****     serial_print(message);
 514:Src/nRF24.c   **** 
 515:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_data);
 1242              		.loc 1 515 0
 1243 00ae 0DF12F02 		add	r2, sp, #47
 1244 00b2 0121     		movs	r1, #1
 1245 00b4 0420     		movs	r0, #4
 1246 00b6 FFF7FEFF 		bl	spi_read_register
 1247              	.LVL136:
 516:Src/nRF24.c   **** 		sprintf(message, "SETUP_RETR: <0x%02x>\n", read_data);
 1248              		.loc 1 516 0
 1249 00ba 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1250 00be 8E49     		ldr	r1, .L87+20
 1251 00c0 02A8     		add	r0, sp, #8
 1252 00c2 FFF7FEFF 		bl	sprintf
 1253              	.LVL137:
 1254              	.LBB125:
 1255              	.LBB126:
 105:Src/nRF24.c   **** }
 1256              		.loc 1 105 0
 1257 00c6 02A8     		add	r0, sp, #8
 1258              	.LVL138:
 1259 00c8 FFF7FEFF 		bl	strlen
 1260              	.LVL139:
 1261 00cc 6423     		movs	r3, #100
 1262 00ce 82B2     		uxth	r2, r0
 1263 00d0 02A9     		add	r1, sp, #8
 1264              	.LVL140:
 1265 00d2 2046     		mov	r0, r4
 1266 00d4 FFF7FEFF 		bl	HAL_UART_Transmit
 1267              	.LVL141:
 1268              	.LBE126:
 1269              	.LBE125:
 517:Src/nRF24.c   ****     serial_print(message);
 518:Src/nRF24.c   **** 
 519:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_data);
 1270              		.loc 1 519 0
 1271 00d8 0DF12F02 		add	r2, sp, #47
 1272 00dc 0121     		movs	r1, #1
 1273 00de 0520     		movs	r0, #5
 1274 00e0 FFF7FEFF 		bl	spi_read_register
 1275              	.LVL142:
 520:Src/nRF24.c   **** 		sprintf(message, "RF_CH: <0x%02x>\n", read_data);
 1276              		.loc 1 520 0
 1277 00e4 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1278 00e8 8449     		ldr	r1, .L87+24
 1279 00ea 02A8     		add	r0, sp, #8
 1280 00ec FFF7FEFF 		bl	sprintf
 1281              	.LVL143:
 1282              	.LBB127:
 1283              	.LBB128:
 105:Src/nRF24.c   **** }
 1284              		.loc 1 105 0
ARM GAS  /tmp/ccHkpHGQ.s 			page 33


 1285 00f0 02A8     		add	r0, sp, #8
 1286              	.LVL144:
 1287 00f2 FFF7FEFF 		bl	strlen
 1288              	.LVL145:
 1289 00f6 6423     		movs	r3, #100
 1290 00f8 82B2     		uxth	r2, r0
 1291 00fa 02A9     		add	r1, sp, #8
 1292              	.LVL146:
 1293 00fc 2046     		mov	r0, r4
 1294 00fe FFF7FEFF 		bl	HAL_UART_Transmit
 1295              	.LVL147:
 1296              	.LBE128:
 1297              	.LBE127:
 521:Src/nRF24.c   ****     serial_print(message);
 522:Src/nRF24.c   **** 
 523:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_data);
 1298              		.loc 1 523 0
 1299 0102 0DF12F02 		add	r2, sp, #47
 1300 0106 0121     		movs	r1, #1
 1301 0108 0620     		movs	r0, #6
 1302 010a FFF7FEFF 		bl	spi_read_register
 1303              	.LVL148:
 524:Src/nRF24.c   **** 		sprintf(message, "RF_SETUP: <0x%02x>\n", read_data);
 1304              		.loc 1 524 0
 1305 010e 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1306 0112 7B49     		ldr	r1, .L87+28
 1307 0114 02A8     		add	r0, sp, #8
 1308 0116 FFF7FEFF 		bl	sprintf
 1309              	.LVL149:
 1310              	.LBB129:
 1311              	.LBB130:
 105:Src/nRF24.c   **** }
 1312              		.loc 1 105 0
 1313 011a 02A8     		add	r0, sp, #8
 1314              	.LVL150:
 1315 011c FFF7FEFF 		bl	strlen
 1316              	.LVL151:
 1317 0120 6423     		movs	r3, #100
 1318 0122 82B2     		uxth	r2, r0
 1319 0124 02A9     		add	r1, sp, #8
 1320              	.LVL152:
 1321 0126 2046     		mov	r0, r4
 1322 0128 FFF7FEFF 		bl	HAL_UART_Transmit
 1323              	.LVL153:
 1324              	.LBE130:
 1325              	.LBE129:
 525:Src/nRF24.c   ****     serial_print(message);
 526:Src/nRF24.c   **** 
 527:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + STATUS, 1, &read_data);
 1326              		.loc 1 527 0
 1327 012c 0DF12F02 		add	r2, sp, #47
 1328 0130 0121     		movs	r1, #1
 1329 0132 0720     		movs	r0, #7
 1330 0134 FFF7FEFF 		bl	spi_read_register
 1331              	.LVL154:
 528:Src/nRF24.c   **** 		sprintf(message, "STATUS: <0x%02x>\n", read_data);
 1332              		.loc 1 528 0
ARM GAS  /tmp/ccHkpHGQ.s 			page 34


 1333 0138 9DF82F20 		ldrb	r2, [sp, #47]	@ zero_extendqisi2
 1334 013c 7149     		ldr	r1, .L87+32
 1335 013e 02A8     		add	r0, sp, #8
 1336 0140 FFF7FEFF 		bl	sprintf
 1337              	.LVL155:
 1338              	.LBB131:
 1339              	.LBB132:
 105:Src/nRF24.c   **** }
 1340              		.loc 1 105 0
 1341 0144 02A8     		add	r0, sp, #8
 1342              	.LVL156:
 1343 0146 FFF7FEFF 		bl	strlen
 1344              	.LVL157:
 1345 014a 6423     		movs	r3, #100
 1346 014c 82B2     		uxth	r2, r0
 1347 014e 02A9     		add	r1, sp, #8
 1348              	.LVL158:
 1349 0150 2046     		mov	r0, r4
 1350 0152 FFF7FEFF 		bl	HAL_UART_Transmit
 1351              	.LVL159:
 1352              	.LBE132:
 1353              	.LBE131:
 529:Src/nRF24.c   ****     serial_print(message);
 530:Src/nRF24.c   **** 
 531:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, 4, read_buf);
 1354              		.loc 1 531 0
 1355 0156 0AAA     		add	r2, sp, #40
 1356 0158 0421     		movs	r1, #4
 1357 015a 0A20     		movs	r0, #10
 1358 015c FFF7FEFF 		bl	spi_read_register
 1359              	.LVL160:
 532:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P0: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1360              		.loc 1 532 0
 1361 0160 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1362 0164 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1363 0168 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1364 016c 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1365 0170 0190     		str	r0, [sp, #4]
 1366 0172 0091     		str	r1, [sp]
 1367 0174 6449     		ldr	r1, .L87+36
 1368 0176 02A8     		add	r0, sp, #8
 1369 0178 FFF7FEFF 		bl	sprintf
 1370              	.LVL161:
 1371              	.LBB133:
 1372              	.LBB134:
 105:Src/nRF24.c   **** }
 1373              		.loc 1 105 0
 1374 017c 02A8     		add	r0, sp, #8
 1375              	.LVL162:
 1376 017e FFF7FEFF 		bl	strlen
 1377              	.LVL163:
 1378 0182 6423     		movs	r3, #100
 1379 0184 82B2     		uxth	r2, r0
 1380 0186 02A9     		add	r1, sp, #8
 1381              	.LVL164:
 1382 0188 2046     		mov	r0, r4
 1383 018a FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccHkpHGQ.s 			page 35


 1384              	.LVL165:
 1385              	.LBE134:
 1386              	.LBE133:
 533:Src/nRF24.c   ****     serial_print(message);
 534:Src/nRF24.c   **** 
 535:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, 4, read_buf);
 1387              		.loc 1 535 0
 1388 018e 0AAA     		add	r2, sp, #40
 1389 0190 0421     		movs	r1, #4
 1390 0192 0B20     		movs	r0, #11
 1391 0194 FFF7FEFF 		bl	spi_read_register
 1392              	.LVL166:
 536:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P1: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1393              		.loc 1 536 0
 1394 0198 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1395 019c 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1396 01a0 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1397 01a4 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1398 01a8 0190     		str	r0, [sp, #4]
 1399 01aa 0091     		str	r1, [sp]
 1400 01ac 5749     		ldr	r1, .L87+40
 1401 01ae 02A8     		add	r0, sp, #8
 1402 01b0 FFF7FEFF 		bl	sprintf
 1403              	.LVL167:
 1404              	.LBB135:
 1405              	.LBB136:
 105:Src/nRF24.c   **** }
 1406              		.loc 1 105 0
 1407 01b4 02A8     		add	r0, sp, #8
 1408              	.LVL168:
 1409 01b6 FFF7FEFF 		bl	strlen
 1410              	.LVL169:
 1411 01ba 6423     		movs	r3, #100
 1412 01bc 82B2     		uxth	r2, r0
 1413 01be 02A9     		add	r1, sp, #8
 1414              	.LVL170:
 1415 01c0 2046     		mov	r0, r4
 1416 01c2 FFF7FEFF 		bl	HAL_UART_Transmit
 1417              	.LVL171:
 1418              	.LBE136:
 1419              	.LBE135:
 537:Src/nRF24.c   ****     serial_print(message);
 538:Src/nRF24.c   **** 
 539:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, 4, read_buf);
 1420              		.loc 1 539 0
 1421 01c6 0AAA     		add	r2, sp, #40
 1422 01c8 0421     		movs	r1, #4
 1423 01ca 0C20     		movs	r0, #12
 1424 01cc FFF7FEFF 		bl	spi_read_register
 1425              	.LVL172:
 540:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P2: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1426              		.loc 1 540 0
 1427 01d0 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1428 01d4 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1429 01d8 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1430 01dc 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1431 01e0 0190     		str	r0, [sp, #4]
ARM GAS  /tmp/ccHkpHGQ.s 			page 36


 1432 01e2 0091     		str	r1, [sp]
 1433 01e4 4A49     		ldr	r1, .L87+44
 1434 01e6 02A8     		add	r0, sp, #8
 1435 01e8 FFF7FEFF 		bl	sprintf
 1436              	.LVL173:
 1437              	.LBB137:
 1438              	.LBB138:
 105:Src/nRF24.c   **** }
 1439              		.loc 1 105 0
 1440 01ec 02A8     		add	r0, sp, #8
 1441              	.LVL174:
 1442 01ee FFF7FEFF 		bl	strlen
 1443              	.LVL175:
 1444 01f2 6423     		movs	r3, #100
 1445 01f4 82B2     		uxth	r2, r0
 1446 01f6 02A9     		add	r1, sp, #8
 1447              	.LVL176:
 1448 01f8 2046     		mov	r0, r4
 1449 01fa FFF7FEFF 		bl	HAL_UART_Transmit
 1450              	.LVL177:
 1451              	.LBE138:
 1452              	.LBE137:
 541:Src/nRF24.c   ****     serial_print(message);
 542:Src/nRF24.c   **** 
 543:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, 4, read_buf);
 1453              		.loc 1 543 0
 1454 01fe 0AAA     		add	r2, sp, #40
 1455 0200 0421     		movs	r1, #4
 1456 0202 0D20     		movs	r0, #13
 1457 0204 FFF7FEFF 		bl	spi_read_register
 1458              	.LVL178:
 544:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P3: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1459              		.loc 1 544 0
 1460 0208 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1461 020c 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1462 0210 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1463 0214 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1464 0218 0190     		str	r0, [sp, #4]
 1465 021a 0091     		str	r1, [sp]
 1466 021c 3D49     		ldr	r1, .L87+48
 1467 021e 02A8     		add	r0, sp, #8
 1468 0220 FFF7FEFF 		bl	sprintf
 1469              	.LVL179:
 1470              	.LBB139:
 1471              	.LBB140:
 105:Src/nRF24.c   **** }
 1472              		.loc 1 105 0
 1473 0224 02A8     		add	r0, sp, #8
 1474              	.LVL180:
 1475 0226 FFF7FEFF 		bl	strlen
 1476              	.LVL181:
 1477 022a 6423     		movs	r3, #100
 1478 022c 82B2     		uxth	r2, r0
 1479 022e 02A9     		add	r1, sp, #8
 1480              	.LVL182:
 1481 0230 2046     		mov	r0, r4
 1482 0232 FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccHkpHGQ.s 			page 37


 1483              	.LVL183:
 1484              	.LBE140:
 1485              	.LBE139:
 545:Src/nRF24.c   ****     serial_print(message);
 546:Src/nRF24.c   **** 
 547:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, 4, read_buf);
 1486              		.loc 1 547 0
 1487 0236 0AAA     		add	r2, sp, #40
 1488 0238 0421     		movs	r1, #4
 1489 023a 0E20     		movs	r0, #14
 1490 023c FFF7FEFF 		bl	spi_read_register
 1491              	.LVL184:
 548:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P4: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1492              		.loc 1 548 0
 1493 0240 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1494 0244 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1495 0248 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1496 024c 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1497 0250 0190     		str	r0, [sp, #4]
 1498 0252 0091     		str	r1, [sp]
 1499 0254 3049     		ldr	r1, .L87+52
 1500 0256 02A8     		add	r0, sp, #8
 1501 0258 FFF7FEFF 		bl	sprintf
 1502              	.LVL185:
 1503              	.LBB141:
 1504              	.LBB142:
 105:Src/nRF24.c   **** }
 1505              		.loc 1 105 0
 1506 025c 02A8     		add	r0, sp, #8
 1507              	.LVL186:
 1508 025e FFF7FEFF 		bl	strlen
 1509              	.LVL187:
 1510 0262 6423     		movs	r3, #100
 1511 0264 82B2     		uxth	r2, r0
 1512 0266 02A9     		add	r1, sp, #8
 1513              	.LVL188:
 1514 0268 2046     		mov	r0, r4
 1515 026a FFF7FEFF 		bl	HAL_UART_Transmit
 1516              	.LVL189:
 1517              	.LBE142:
 1518              	.LBE141:
 549:Src/nRF24.c   ****     serial_print(message);
 550:Src/nRF24.c   **** 
 551:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + RX_PW_P5, 4, read_buf);
 1519              		.loc 1 551 0
 1520 026e 0AAA     		add	r2, sp, #40
 1521 0270 0421     		movs	r1, #4
 1522 0272 1620     		movs	r0, #22
 1523 0274 FFF7FEFF 		bl	spi_read_register
 1524              	.LVL190:
 552:Src/nRF24.c   **** 		sprintf(message, "RX_ADDR_P5: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2],
 1525              		.loc 1 552 0
 1526 0278 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1527 027c 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1528 0280 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1529 0284 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1530 0288 0190     		str	r0, [sp, #4]
ARM GAS  /tmp/ccHkpHGQ.s 			page 38


 1531 028a 0091     		str	r1, [sp]
 1532 028c 2349     		ldr	r1, .L87+56
 1533 028e 02A8     		add	r0, sp, #8
 1534 0290 FFF7FEFF 		bl	sprintf
 1535              	.LVL191:
 1536              	.LBB143:
 1537              	.LBB144:
 105:Src/nRF24.c   **** }
 1538              		.loc 1 105 0
 1539 0294 02A8     		add	r0, sp, #8
 1540              	.LVL192:
 1541 0296 FFF7FEFF 		bl	strlen
 1542              	.LVL193:
 1543 029a 6423     		movs	r3, #100
 1544 029c 82B2     		uxth	r2, r0
 1545 029e 02A9     		add	r1, sp, #8
 1546              	.LVL194:
 1547 02a0 2046     		mov	r0, r4
 1548 02a2 FFF7FEFF 		bl	HAL_UART_Transmit
 1549              	.LVL195:
 1550              	.LBE144:
 1551              	.LBE143:
 553:Src/nRF24.c   ****     serial_print(message);
 554:Src/nRF24.c   **** 
 555:Src/nRF24.c   ****   	spi_read_register(R_REGISTER_MASK + TX_ADDR, 4, read_buf);
 1552              		.loc 1 555 0
 1553 02a6 0AAA     		add	r2, sp, #40
 1554 02a8 0421     		movs	r1, #4
 1555 02aa 1020     		movs	r0, #16
 1556 02ac FFF7FEFF 		bl	spi_read_register
 1557              	.LVL196:
 556:Src/nRF24.c   **** 		sprintf(message, "TX_ADDR: %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_buf[2], re
 1558              		.loc 1 556 0
 1559 02b0 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 1560 02b4 9DF82930 		ldrb	r3, [sp, #41]	@ zero_extendqisi2
 1561 02b8 9DF82A10 		ldrb	r1, [sp, #42]	@ zero_extendqisi2
 1562 02bc 9DF82B00 		ldrb	r0, [sp, #43]	@ zero_extendqisi2
 1563 02c0 0190     		str	r0, [sp, #4]
 1564 02c2 0091     		str	r1, [sp]
 1565 02c4 1649     		ldr	r1, .L87+60
 1566 02c6 02A8     		add	r0, sp, #8
 1567 02c8 FFF7FEFF 		bl	sprintf
 1568              	.LVL197:
 1569              	.LBB145:
 1570              	.LBB146:
 105:Src/nRF24.c   **** }
 1571              		.loc 1 105 0
 1572 02cc 02A8     		add	r0, sp, #8
 1573              	.LVL198:
 1574 02ce FFF7FEFF 		bl	strlen
 1575              	.LVL199:
 1576 02d2 6423     		movs	r3, #100
 1577 02d4 82B2     		uxth	r2, r0
 1578 02d6 02A9     		add	r1, sp, #8
 1579              	.LVL200:
 1580 02d8 2046     		mov	r0, r4
 1581 02da FFF7FEFF 		bl	HAL_UART_Transmit
ARM GAS  /tmp/ccHkpHGQ.s 			page 39


 1582              	.LVL201:
 1583              	.LBE146:
 1584              	.LBE145:
 557:Src/nRF24.c   ****     serial_print(message);
 558:Src/nRF24.c   **** 
 559:Src/nRF24.c   **** }
 1585              		.loc 1 559 0
 1586 02de 0CB0     		add	sp, sp, #48
 1587              	.LCFI25:
 1588              		.cfi_def_cfa_offset 8
 1589              		@ sp needed
 1590 02e0 10BD     		pop	{r4, pc}
 1591              	.L88:
 1592 02e2 00BF     		.align	2
 1593              	.L87:
 1594 02e4 00000000 		.word	.LC6
 1595 02e8 00000000 		.word	huart2
 1596 02ec 14000000 		.word	.LC7
 1597 02f0 28000000 		.word	.LC8
 1598 02f4 40000000 		.word	.LC9
 1599 02f8 54000000 		.word	.LC10
 1600 02fc 6C000000 		.word	.LC11
 1601 0300 80000000 		.word	.LC12
 1602 0304 94000000 		.word	.LC13
 1603 0308 A8000000 		.word	.LC14
 1604 030c D0000000 		.word	.LC15
 1605 0310 F8000000 		.word	.LC16
 1606 0314 20010000 		.word	.LC17
 1607 0318 48010000 		.word	.LC18
 1608 031c 70010000 		.word	.LC19
 1609 0320 98010000 		.word	.LC20
 1610              		.cfi_endproc
 1611              	.LFE150:
 1613              		.section	.text.nRF24_get_STATUS,"ax",%progbits
 1614              		.align	1
 1615              		.global	nRF24_get_STATUS
 1616              		.syntax unified
 1617              		.thumb
 1618              		.thumb_func
 1619              		.fpu fpv4-sp-d16
 1621              	nRF24_get_STATUS:
 1622              	.LFB151:
 560:Src/nRF24.c   **** 
 561:Src/nRF24.c   **** 
 562:Src/nRF24.c   **** 
 563:Src/nRF24.c   **** 
 564:Src/nRF24.c   **** /**
 565:Src/nRF24.c   ****   * @brief      Read 'STATUS' register from nRF24.
 566:Src/nRF24.c   ****   * @param      None.
 567:Src/nRF24.c   ****   * @retval     STATUS register value.
 568:Src/nRF24.c   ****   */
 569:Src/nRF24.c   **** uint8_t nRF24_get_STATUS(void) 
 570:Src/nRF24.c   **** {
 1623              		.loc 1 570 0
 1624              		.cfi_startproc
 1625              		@ args = 0, pretend = 0, frame = 8
 1626              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccHkpHGQ.s 			page 40


 1627 0000 00B5     		push	{lr}
 1628              	.LCFI26:
 1629              		.cfi_def_cfa_offset 4
 1630              		.cfi_offset 14, -4
 1631 0002 83B0     		sub	sp, sp, #12
 1632              	.LCFI27:
 1633              		.cfi_def_cfa_offset 16
 571:Src/nRF24.c   ****   uint8_t status;
 572:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 1634              		.loc 1 572 0
 1635 0004 0DF10702 		add	r2, sp, #7
 1636 0008 0121     		movs	r1, #1
 1637 000a 0720     		movs	r0, #7
 1638 000c FFF7FEFF 		bl	spi_read_register
 1639              	.LVL202:
 573:Src/nRF24.c   ****   return status;
 574:Src/nRF24.c   **** }
 1640              		.loc 1 574 0
 1641 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1642 0014 03B0     		add	sp, sp, #12
 1643              	.LCFI28:
 1644              		.cfi_def_cfa_offset 4
 1645              		@ sp needed
 1646 0016 5DF804FB 		ldr	pc, [sp], #4
 1647              		.cfi_endproc
 1648              	.LFE151:
 1650              		.section	.text.nRF24_tx_self_test,"ax",%progbits
 1651              		.align	1
 1652              		.global	nRF24_tx_self_test
 1653              		.syntax unified
 1654              		.thumb
 1655              		.thumb_func
 1656              		.fpu fpv4-sp-d16
 1658              	nRF24_tx_self_test:
 1659              	.LFB147:
 346:Src/nRF24.c   **** 	char message[128];
 1660              		.loc 1 346 0
 1661              		.cfi_startproc
 1662              		@ args = 0, pretend = 0, frame = 136
 1663              		@ frame_needed = 0, uses_anonymous_args = 0
 1664 0000 30B5     		push	{r4, r5, lr}
 1665              	.LCFI29:
 1666              		.cfi_def_cfa_offset 12
 1667              		.cfi_offset 4, -12
 1668              		.cfi_offset 5, -8
 1669              		.cfi_offset 14, -4
 1670 0002 A3B0     		sub	sp, sp, #140
 1671              	.LCFI30:
 1672              		.cfi_def_cfa_offset 152
 350:Src/nRF24.c   ****   serial_print(message);
 1673              		.loc 1 350 0
 1674 0004 02AC     		add	r4, sp, #8
 1675 0006 3F4D     		ldr	r5, .L96
 1676 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1677 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1678 000c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 1679 0010 07C4     		stmia	r4!, {r0, r1, r2}
ARM GAS  /tmp/ccHkpHGQ.s 			page 41


 1680 0012 24F8023B 		strh	r3, [r4], #2	@ movhi
 1681 0016 1B0C     		lsrs	r3, r3, #16
 1682 0018 2370     		strb	r3, [r4]
 1683              	.LVL203:
 1684              	.LBB155:
 1685              	.LBB156:
 105:Src/nRF24.c   **** }
 1686              		.loc 1 105 0
 1687 001a 02A8     		add	r0, sp, #8
 1688              	.LVL204:
 1689 001c FFF7FEFF 		bl	strlen
 1690              	.LVL205:
 1691 0020 394C     		ldr	r4, .L96+4
 1692              	.LVL206:
 1693 0022 6423     		movs	r3, #100
 1694 0024 82B2     		uxth	r2, r0
 1695 0026 02A9     		add	r1, sp, #8
 1696              	.LVL207:
 1697 0028 2046     		mov	r0, r4
 1698 002a FFF7FEFF 		bl	HAL_UART_Transmit
 1699              	.LVL208:
 1700              	.LBE156:
 1701              	.LBE155:
 353:Src/nRF24.c   ****   serial_print(message);
 1702              		.loc 1 353 0
 1703 002e 5322     		movs	r2, #83
 1704 0030 3649     		ldr	r1, .L96+8
 1705 0032 02A8     		add	r0, sp, #8
 1706 0034 FFF7FEFF 		bl	memcpy
 1707              	.LVL209:
 1708              	.LBB157:
 1709              	.LBB158:
 105:Src/nRF24.c   **** }
 1710              		.loc 1 105 0
 1711 0038 02A8     		add	r0, sp, #8
 1712              	.LVL210:
 1713 003a FFF7FEFF 		bl	strlen
 1714              	.LVL211:
 1715 003e 6423     		movs	r3, #100
 1716 0040 82B2     		uxth	r2, r0
 1717 0042 02A9     		add	r1, sp, #8
 1718              	.LVL212:
 1719 0044 2046     		mov	r0, r4
 1720 0046 FFF7FEFF 		bl	HAL_UART_Transmit
 1721              	.LVL213:
 1722              	.LBE158:
 1723              	.LBE157:
 360:Src/nRF24.c   **** 
 1724              		.loc 1 360 0
 1725 004a FFF7FEFF 		bl	nRF24_CE_0
 1726              	.LVL214:
 363:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
 1727              		.loc 1 363 0
 1728 004e 22AC     		add	r4, sp, #136
 1729 0050 0023     		movs	r3, #0
 1730 0052 04F8813D 		strb	r3, [r4, #-129]!
 364:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
ARM GAS  /tmp/ccHkpHGQ.s 			page 42


 1731              		.loc 1 364 0
 1732 0056 2246     		mov	r2, r4
 1733 0058 0121     		movs	r1, #1
 1734 005a 2120     		movs	r0, #33
 1735 005c FFF7FEFF 		bl	nRF24_verified_write_register
 1736              	.LVL215:
 365:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 1737              		.loc 1 365 0
 1738 0060 2246     		mov	r2, r4
 1739 0062 0121     		movs	r1, #1
 1740 0064 2220     		movs	r0, #34
 1741 0066 FFF7FEFF 		bl	nRF24_verified_write_register
 1742              	.LVL216:
 366:Src/nRF24.c   **** 
 1743              		.loc 1 366 0
 1744 006a 2246     		mov	r2, r4
 1745 006c 0121     		movs	r1, #1
 1746 006e 2420     		movs	r0, #36
 1747 0070 FFF7FEFF 		bl	nRF24_verified_write_register
 1748              	.LVL217:
 368:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
 1749              		.loc 1 368 0
 1750 0074 0E23     		movs	r3, #14
 1751 0076 8DF80730 		strb	r3, [sp, #7]
 369:Src/nRF24.c   **** 
 1752              		.loc 1 369 0
 1753 007a 2246     		mov	r2, r4
 1754 007c 0121     		movs	r1, #1
 1755 007e 2020     		movs	r0, #32
 1756 0080 FFF7FEFF 		bl	nRF24_verified_write_register
 1757              	.LVL218:
 372:Src/nRF24.c   ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 1758              		.loc 1 372 0
 1759 0084 224B     		ldr	r3, .L96+12
 1760 0086 9B68     		ldr	r3, [r3, #8]
 1761 0088 22AA     		add	r2, sp, #136
 1762 008a 42F8883D 		str	r3, [r2, #-136]!
 373:Src/nRF24.c   ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 1763              		.loc 1 373 0
 1764 008e 0421     		movs	r1, #4
 1765 0090 A020     		movs	r0, #160
 1766 0092 FFF7FEFF 		bl	spi_write_register
 1767              	.LVL219:
 374:Src/nRF24.c   ****   
 1768              		.loc 1 374 0
 1769 0096 FFF7FEFF 		bl	nRF24_CE_1
 1770              	.LVL220:
 377:Src/nRF24.c   ****   spi_delay(1);
 1771              		.loc 1 377 0
 1772 009a FFF7FEFF 		bl	nRF24_get_STATUS
 1773              	.LVL221:
 1774 009e 0546     		mov	r5, r0
 1775              	.LVL222:
 378:Src/nRF24.c   **** 
 1776              		.loc 1 378 0
 1777 00a0 0120     		movs	r0, #1
 1778 00a2 FFF7FEFF 		bl	spi_delay
ARM GAS  /tmp/ccHkpHGQ.s 			page 43


 1779              	.LVL223:
 381:Src/nRF24.c   **** 
 1780              		.loc 1 381 0
 1781 00a6 FFF7FEFF 		bl	nRF24_CE_0
 1782              	.LVL224:
 384:Src/nRF24.c   ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       
 1783              		.loc 1 384 0
 1784 00aa 0823     		movs	r3, #8
 1785 00ac 8DF80730 		strb	r3, [sp, #7]
 385:Src/nRF24.c   **** 
 1786              		.loc 1 385 0
 1787 00b0 2246     		mov	r2, r4
 1788 00b2 0121     		movs	r1, #1
 1789 00b4 2020     		movs	r0, #32
 1790 00b6 FFF7FEFF 		bl	nRF24_verified_write_register
 1791              	.LVL225:
 388:Src/nRF24.c   ****   {
 1792              		.loc 1 388 0
 1793 00ba 15F02E0F 		tst	r5, #46
 1794 00be 10D1     		bne	.L95
 399:Src/nRF24.c   ****     serial_print(message);
 1795              		.loc 1 399 0
 1796 00c0 4622     		movs	r2, #70
 1797 00c2 1449     		ldr	r1, .L96+16
 1798 00c4 02A8     		add	r0, sp, #8
 1799 00c6 FFF7FEFF 		bl	memcpy
 1800              	.LVL226:
 1801              	.LBB159:
 1802              	.LBB160:
 105:Src/nRF24.c   **** }
 1803              		.loc 1 105 0
 1804 00ca 02A8     		add	r0, sp, #8
 1805              	.LVL227:
 1806 00cc FFF7FEFF 		bl	strlen
 1807              	.LVL228:
 1808 00d0 6423     		movs	r3, #100
 1809 00d2 82B2     		uxth	r2, r0
 1810 00d4 02A9     		add	r1, sp, #8
 1811              	.LVL229:
 1812 00d6 0C48     		ldr	r0, .L96+4
 1813 00d8 FFF7FEFF 		bl	HAL_UART_Transmit
 1814              	.LVL230:
 1815              	.LBE160:
 1816              	.LBE159:
 401:Src/nRF24.c   ****   }
 1817              		.loc 1 401 0
 1818 00dc 0020     		movs	r0, #0
 1819              	.LVL231:
 1820              	.L93:
 404:Src/nRF24.c   **** 
 1821              		.loc 1 404 0
 1822 00de 23B0     		add	sp, sp, #140
 1823              	.LCFI31:
 1824              		.cfi_remember_state
 1825              		.cfi_def_cfa_offset 12
 1826              		@ sp needed
 1827 00e0 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccHkpHGQ.s 			page 44


 1828              	.LVL232:
 1829              	.L95:
 1830              	.LCFI32:
 1831              		.cfi_restore_state
 390:Src/nRF24.c   ****                        STATUS has value of 0x2E. \
 1832              		.loc 1 390 0
 1833 00e2 D622     		movs	r2, #214
 1834 00e4 0C49     		ldr	r1, .L96+20
 1835 00e6 02A8     		add	r0, sp, #8
 1836 00e8 FFF7FEFF 		bl	memcpy
 1837              	.LVL233:
 1838              	.LBB161:
 1839              	.LBB162:
 105:Src/nRF24.c   **** }
 1840              		.loc 1 105 0
 1841 00ec 02A8     		add	r0, sp, #8
 1842              	.LVL234:
 1843 00ee FFF7FEFF 		bl	strlen
 1844              	.LVL235:
 1845 00f2 6423     		movs	r3, #100
 1846 00f4 82B2     		uxth	r2, r0
 1847 00f6 02A9     		add	r1, sp, #8
 1848              	.LVL236:
 1849 00f8 0348     		ldr	r0, .L96+4
 1850 00fa FFF7FEFF 		bl	HAL_UART_Transmit
 1851              	.LVL237:
 1852              	.LBE162:
 1853              	.LBE161:
 395:Src/nRF24.c   ****   } 
 1854              		.loc 1 395 0
 1855 00fe 0120     		movs	r0, #1
 1856 0100 EDE7     		b	.L93
 1857              	.L97:
 1858 0102 00BF     		.align	2
 1859              	.L96:
 1860 0104 00000000 		.word	.LC21
 1861 0108 00000000 		.word	huart2
 1862 010c 20000000 		.word	.LC22
 1863 0110 00000000 		.word	.LANCHOR0
 1864 0114 4C010000 		.word	.LC24
 1865 0118 74000000 		.word	.LC23
 1866              		.cfi_endproc
 1867              	.LFE147:
 1869              		.section	.text.nRF24_keep_sending,"ax",%progbits
 1870              		.align	1
 1871              		.global	nRF24_keep_sending
 1872              		.syntax unified
 1873              		.thumb
 1874              		.thumb_func
 1875              		.fpu fpv4-sp-d16
 1877              	nRF24_keep_sending:
 1878              	.LFB149:
 454:Src/nRF24.c   ****   uint8_t payload[] = {0xBE, 0xEF, 0xCA, 0xFE}; // clock in a payload, TX FIFO not empty 
 1879              		.loc 1 454 0
 1880              		.cfi_startproc
 1881              		@ args = 0, pretend = 0, frame = 72
 1882              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccHkpHGQ.s 			page 45


 1883 0000 30B5     		push	{r4, r5, lr}
 1884              	.LCFI33:
 1885              		.cfi_def_cfa_offset 12
 1886              		.cfi_offset 4, -12
 1887              		.cfi_offset 5, -8
 1888              		.cfi_offset 14, -4
 1889 0002 93B0     		sub	sp, sp, #76
 1890              	.LCFI34:
 1891              		.cfi_def_cfa_offset 88
 455:Src/nRF24.c   **** 
 1892              		.loc 1 455 0
 1893 0004 254B     		ldr	r3, .L103
 1894 0006 DB68     		ldr	r3, [r3, #12]
 1895 0008 12AA     		add	r2, sp, #72
 1896 000a 42F8043D 		str	r3, [r2, #-4]!
 459:Src/nRF24.c   **** 
 1897              		.loc 1 459 0
 1898 000e 0421     		movs	r1, #4
 1899 0010 A020     		movs	r0, #160
 1900 0012 FFF7FEFF 		bl	spi_write_register
 1901              	.LVL238:
 462:Src/nRF24.c   **** 
 1902              		.loc 1 462 0
 1903 0016 FFF7FEFF 		bl	nRF24_CE_1
 1904              	.LVL239:
 464:Src/nRF24.c   **** 
 1905              		.loc 1 464 0
 1906 001a FFF7FEFF 		bl	nRF24_get_STATUS
 1907              	.LVL240:
 1908 001e 0446     		mov	r4, r0
 1909              	.LVL241:
 466:Src/nRF24.c   ****   serial_print(debug_msg);
 1910              		.loc 1 466 0
 1911 0020 0246     		mov	r2, r0
 1912 0022 1F49     		ldr	r1, .L103+4
 1913 0024 01A8     		add	r0, sp, #4
 1914              	.LVL242:
 1915 0026 FFF7FEFF 		bl	sprintf
 1916              	.LVL243:
 1917              	.LBB169:
 1918              	.LBB170:
 105:Src/nRF24.c   **** }
 1919              		.loc 1 105 0
 1920 002a 01A8     		add	r0, sp, #4
 1921              	.LVL244:
 1922 002c FFF7FEFF 		bl	strlen
 1923              	.LVL245:
 1924 0030 6423     		movs	r3, #100
 1925 0032 82B2     		uxth	r2, r0
 1926 0034 01A9     		add	r1, sp, #4
 1927              	.LVL246:
 1928 0036 1B48     		ldr	r0, .L103+8
 1929 0038 FFF7FEFF 		bl	HAL_UART_Transmit
 1930              	.LVL247:
 1931              	.LBE170:
 1932              	.LBE169:
 469:Src/nRF24.c   ****   {
ARM GAS  /tmp/ccHkpHGQ.s 			page 46


 1933              		.loc 1 469 0
 1934 003c 2E2C     		cmp	r4, #46
 1935 003e 1AD0     		beq	.L102
 476:Src/nRF24.c   ****     serial_print(debug_msg);
 1936              		.loc 1 476 0
 1937 0040 01AC     		add	r4, sp, #4
 1938 0042 194D     		ldr	r5, .L103+12
 1939 0044 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1940 0046 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1941 0048 2B68     		ldr	r3, [r5]
 1942 004a 2360     		str	r3, [r4]
 1943              	.LVL248:
 1944              	.LBB171:
 1945              	.LBB172:
 105:Src/nRF24.c   **** }
 1946              		.loc 1 105 0
 1947 004c 01A8     		add	r0, sp, #4
 1948              	.LVL249:
 1949 004e FFF7FEFF 		bl	strlen
 1950              	.LVL250:
 1951 0052 6423     		movs	r3, #100
 1952 0054 82B2     		uxth	r2, r0
 1953 0056 01A9     		add	r1, sp, #4
 1954              	.LVL251:
 1955 0058 1248     		ldr	r0, .L103+8
 1956 005a FFF7FEFF 		bl	HAL_UART_Transmit
 1957              	.LVL252:
 1958              	.L100:
 1959              	.LBE172:
 1960              	.LBE171:
 480:Src/nRF24.c   ****   spi_write_register(W_REGISTER_MASK + STATUS, 1, &writing_byte); 
 1961              		.loc 1 480 0
 1962 005e 12AA     		add	r2, sp, #72
 1963 0060 2023     		movs	r3, #32
 1964 0062 02F8453D 		strb	r3, [r2, #-69]!
 481:Src/nRF24.c   **** 
 1965              		.loc 1 481 0
 1966 0066 0121     		movs	r1, #1
 1967 0068 2720     		movs	r0, #39
 1968 006a FFF7FEFF 		bl	spi_write_register
 1969              	.LVL253:
 483:Src/nRF24.c   **** }
 1970              		.loc 1 483 0
 1971 006e FFF7FEFF 		bl	nRF24_CE_0
 1972              	.LVL254:
 484:Src/nRF24.c   **** 
 1973              		.loc 1 484 0
 1974 0072 13B0     		add	sp, sp, #76
 1975              	.LCFI35:
 1976              		.cfi_remember_state
 1977              		.cfi_def_cfa_offset 12
 1978              		@ sp needed
 1979 0074 30BD     		pop	{r4, r5, pc}
 1980              	.L102:
 1981              	.LCFI36:
 1982              		.cfi_restore_state
 471:Src/nRF24.c   ****     serial_print(debug_msg);
ARM GAS  /tmp/ccHkpHGQ.s 			page 47


 1983              		.loc 1 471 0
 1984 0076 01AC     		add	r4, sp, #4
 1985 0078 0C4D     		ldr	r5, .L103+16
 1986 007a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1987 007c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1988 007e 95E80300 		ldm	r5, {r0, r1}
 1989 0082 84E80300 		stm	r4, {r0, r1}
 1990              	.LVL255:
 1991              	.LBB173:
 1992              	.LBB174:
 105:Src/nRF24.c   **** }
 1993              		.loc 1 105 0
 1994 0086 01A8     		add	r0, sp, #4
 1995              	.LVL256:
 1996 0088 FFF7FEFF 		bl	strlen
 1997              	.LVL257:
 1998 008c 6423     		movs	r3, #100
 1999 008e 82B2     		uxth	r2, r0
 2000 0090 01A9     		add	r1, sp, #4
 2001              	.LVL258:
 2002 0092 0448     		ldr	r0, .L103+8
 2003 0094 FFF7FEFF 		bl	HAL_UART_Transmit
 2004              	.LVL259:
 2005 0098 E1E7     		b	.L100
 2006              	.L104:
 2007 009a 00BF     		.align	2
 2008              	.L103:
 2009 009c 00000000 		.word	.LANCHOR0
 2010 00a0 00000000 		.word	.LC25
 2011 00a4 00000000 		.word	huart2
 2012 00a8 30000000 		.word	.LC27
 2013 00ac 18000000 		.word	.LC26
 2014              	.LBE174:
 2015              	.LBE173:
 2016              		.cfi_endproc
 2017              	.LFE149:
 2019              		.section	.text.nRF24_get_FIFO_STATUS,"ax",%progbits
 2020              		.align	1
 2021              		.global	nRF24_get_FIFO_STATUS
 2022              		.syntax unified
 2023              		.thumb
 2024              		.thumb_func
 2025              		.fpu fpv4-sp-d16
 2027              	nRF24_get_FIFO_STATUS:
 2028              	.LFB152:
 575:Src/nRF24.c   **** 
 576:Src/nRF24.c   **** /**
 577:Src/nRF24.c   ****   * @brief      Read 'FIFO_STATUS' register from nRF24.
 578:Src/nRF24.c   ****   * @param      None.
 579:Src/nRF24.c   ****   * @retval     FIFO_STATUS register value.
 580:Src/nRF24.c   ****   */
 581:Src/nRF24.c   **** uint8_t nRF24_get_FIFO_STATUS() 
 582:Src/nRF24.c   **** {
 2029              		.loc 1 582 0
 2030              		.cfi_startproc
 2031              		@ args = 0, pretend = 0, frame = 8
 2032              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccHkpHGQ.s 			page 48


 2033 0000 00B5     		push	{lr}
 2034              	.LCFI37:
 2035              		.cfi_def_cfa_offset 4
 2036              		.cfi_offset 14, -4
 2037 0002 83B0     		sub	sp, sp, #12
 2038              	.LCFI38:
 2039              		.cfi_def_cfa_offset 16
 583:Src/nRF24.c   ****   uint8_t fifo_status;
 584:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + FIFO_STATUS, 1, &fifo_status);
 2040              		.loc 1 584 0
 2041 0004 0DF10702 		add	r2, sp, #7
 2042 0008 0121     		movs	r1, #1
 2043 000a 1720     		movs	r0, #23
 2044 000c FFF7FEFF 		bl	spi_read_register
 2045              	.LVL260:
 585:Src/nRF24.c   ****   return fifo_status;
 586:Src/nRF24.c   **** }
 2046              		.loc 1 586 0
 2047 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2048 0014 03B0     		add	sp, sp, #12
 2049              	.LCFI39:
 2050              		.cfi_def_cfa_offset 4
 2051              		@ sp needed
 2052 0016 5DF804FB 		ldr	pc, [sp], #4
 2053              		.cfi_endproc
 2054              	.LFE152:
 2056              		.section	.text.nRF24_get_CONFIG,"ax",%progbits
 2057              		.align	1
 2058              		.global	nRF24_get_CONFIG
 2059              		.syntax unified
 2060              		.thumb
 2061              		.thumb_func
 2062              		.fpu fpv4-sp-d16
 2064              	nRF24_get_CONFIG:
 2065              	.LFB153:
 587:Src/nRF24.c   **** 
 588:Src/nRF24.c   **** /**
 589:Src/nRF24.c   ****   * @brief      Read 'CONFIG' register from nRF24.
 590:Src/nRF24.c   ****   * @param      None.
 591:Src/nRF24.c   ****   * @retval     CONFIG register value.
 592:Src/nRF24.c   ****   */
 593:Src/nRF24.c   **** uint8_t nRF24_get_CONFIG() 
 594:Src/nRF24.c   **** {
 2066              		.loc 1 594 0
 2067              		.cfi_startproc
 2068              		@ args = 0, pretend = 0, frame = 8
 2069              		@ frame_needed = 0, uses_anonymous_args = 0
 2070 0000 00B5     		push	{lr}
 2071              	.LCFI40:
 2072              		.cfi_def_cfa_offset 4
 2073              		.cfi_offset 14, -4
 2074 0002 83B0     		sub	sp, sp, #12
 2075              	.LCFI41:
 2076              		.cfi_def_cfa_offset 16
 595:Src/nRF24.c   ****   uint8_t config_reg;
 596:Src/nRF24.c   ****   spi_read_register(R_REGISTER_MASK + CONFIG, 1, &config_reg);
 2077              		.loc 1 596 0
ARM GAS  /tmp/ccHkpHGQ.s 			page 49


 2078 0004 0DF10702 		add	r2, sp, #7
 2079 0008 0121     		movs	r1, #1
 2080 000a 0020     		movs	r0, #0
 2081 000c FFF7FEFF 		bl	spi_read_register
 2082              	.LVL261:
 597:Src/nRF24.c   ****   return config_reg;
 598:Src/nRF24.c   **** }
 2083              		.loc 1 598 0
 2084 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2085 0014 03B0     		add	sp, sp, #12
 2086              	.LCFI42:
 2087              		.cfi_def_cfa_offset 4
 2088              		@ sp needed
 2089 0016 5DF804FB 		ldr	pc, [sp], #4
 2090              		.cfi_endproc
 2091              	.LFE153:
 2093              		.section	.rodata
 2094              		.align	2
 2095              		.set	.LANCHOR0,. + 0
 2096              	.LC1:
 2097 0000 10       		.byte	16
 2098 0001 DE       		.byte	-34
 2099 0002 10       		.byte	16
 2100 0003 10       		.byte	16
 2101 0004 10       		.byte	16
 2102 0005 000000   		.space	3
 2103              	.LC0:
 2104 0008 C0       		.byte	-64
 2105 0009 FE       		.byte	-2
 2106 000a BE       		.byte	-66
 2107 000b EF       		.byte	-17
 2108              	.LC2:
 2109 000c BE       		.byte	-66
 2110 000d EF       		.byte	-17
 2111 000e CA       		.byte	-54
 2112 000f FE       		.byte	-2
 2113              		.section	.rodata.nRF24_keep_sending.str1.4,"aMS",%progbits,1
 2114              		.align	2
 2115              	.LC25:
 2116 0000 3C535441 		.ascii	"<STATUS> REGISTER : %x\012\000"
 2116      5455533E 
 2116      20524547 
 2116      49535445 
 2116      52203A20 
 2117              	.LC26:
 2118 0018 6E524632 		.ascii	"nRF24 send successful.\012\000"
 2118      34207365 
 2118      6E642073 
 2118      75636365 
 2118      73736675 
 2119              	.LC27:
 2120 0030 6E524632 		.ascii	"nRF24 send failed.\012\000"
 2120      34207365 
 2120      6E642066 
 2120      61696C65 
 2120      642E0A00 
 2121              		.section	.rodata.nRF24_print_all_registers.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccHkpHGQ.s 			page 50


 2122              		.align	2
 2123              	.LC6:
 2124 0000 434F4E46 		.ascii	"CONFIG: <0x%02x>\012\000"
 2124      49473A20 
 2124      3C307825 
 2124      3032783E 
 2124      0A00
 2125 0012 0000     		.space	2
 2126              	.LC7:
 2127 0014 454E5F41 		.ascii	"EN_AA: <0x%02x>\012\000"
 2127      413A203C 
 2127      30782530 
 2127      32783E0A 
 2127      00
 2128 0025 000000   		.space	3
 2129              	.LC8:
 2130 0028 454E5F52 		.ascii	"EN_RXADDR: <0x%02x>\012\000"
 2130      58414444 
 2130      523A203C 
 2130      30782530 
 2130      32783E0A 
 2131 003d 000000   		.space	3
 2132              	.LC9:
 2133 0040 53455455 		.ascii	"SETUP_AW: <0x%02x>\012\000"
 2133      505F4157 
 2133      3A203C30 
 2133      78253032 
 2133      783E0A00 
 2134              	.LC10:
 2135 0054 53455455 		.ascii	"SETUP_RETR: <0x%02x>\012\000"
 2135      505F5245 
 2135      54523A20 
 2135      3C307825 
 2135      3032783E 
 2136 006a 0000     		.space	2
 2137              	.LC11:
 2138 006c 52465F43 		.ascii	"RF_CH: <0x%02x>\012\000"
 2138      483A203C 
 2138      30782530 
 2138      32783E0A 
 2138      00
 2139 007d 000000   		.space	3
 2140              	.LC12:
 2141 0080 52465F53 		.ascii	"RF_SETUP: <0x%02x>\012\000"
 2141      45545550 
 2141      3A203C30 
 2141      78253032 
 2141      783E0A00 
 2142              	.LC13:
 2143 0094 53544154 		.ascii	"STATUS: <0x%02x>\012\000"
 2143      55533A20 
 2143      3C307825 
 2143      3032783E 
 2143      0A00
 2144 00a6 0000     		.space	2
 2145              	.LC14:
 2146 00a8 52585F41 		.ascii	"RX_ADDR_P0: %#02x %#02x %#02x %#02x>\012\000"
ARM GAS  /tmp/ccHkpHGQ.s 			page 51


 2146      4444525F 
 2146      50303A20 
 2146      25233032 
 2146      78202523 
 2147 00ce 0000     		.space	2
 2148              	.LC15:
 2149 00d0 52585F41 		.ascii	"RX_ADDR_P1: %#02x %#02x %#02x %#02x>\012\000"
 2149      4444525F 
 2149      50313A20 
 2149      25233032 
 2149      78202523 
 2150 00f6 0000     		.space	2
 2151              	.LC16:
 2152 00f8 52585F41 		.ascii	"RX_ADDR_P2: %#02x %#02x %#02x %#02x>\012\000"
 2152      4444525F 
 2152      50323A20 
 2152      25233032 
 2152      78202523 
 2153 011e 0000     		.space	2
 2154              	.LC17:
 2155 0120 52585F41 		.ascii	"RX_ADDR_P3: %#02x %#02x %#02x %#02x>\012\000"
 2155      4444525F 
 2155      50333A20 
 2155      25233032 
 2155      78202523 
 2156 0146 0000     		.space	2
 2157              	.LC18:
 2158 0148 52585F41 		.ascii	"RX_ADDR_P4: %#02x %#02x %#02x %#02x>\012\000"
 2158      4444525F 
 2158      50343A20 
 2158      25233032 
 2158      78202523 
 2159 016e 0000     		.space	2
 2160              	.LC19:
 2161 0170 52585F41 		.ascii	"RX_ADDR_P5: %#02x %#02x %#02x %#02x>\012\000"
 2161      4444525F 
 2161      50353A20 
 2161      25233032 
 2161      78202523 
 2162 0196 0000     		.space	2
 2163              	.LC20:
 2164 0198 54585F41 		.ascii	"TX_ADDR: %#02x %#02x %#02x %#02x>\012\000"
 2164      4444523A 
 2164      20252330 
 2164      32782025 
 2164      23303278 
 2165              		.section	.rodata.nRF24_tx_self_test.str1.4,"aMS",%progbits,1
 2166              		.align	2
 2167              	.LC21:
 2168 0000 2D2D2D2D 		.ascii	"---- nrf24 tx self test. ----\012\000"
 2168      206E7266 
 2168      32342074 
 2168      78207365 
 2168      6C662074 
 2169 001f 00       		.space	1
 2170              	.LC22:
 2171 0020 2D2D2D2D 		.ascii	"---- This test to verifies function of a tranmitter"
ARM GAS  /tmp/ccHkpHGQ.s 			page 52


 2171      20546869 
 2171      73207465 
 2171      73742074 
 2171      6F207665 
 2172 0053 2073656E 		.ascii	" send without a receiver. ----\012\000"
 2172      64207769 
 2172      74686F75 
 2172      74206120 
 2172      72656365 
 2173 0073 00       		.space	1
 2174              	.LC23:
 2175 0074 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has passed.    "
 2175      6E524632 
 2175      34207472 
 2175      616E736D 
 2175      69737369 
 2176 00a4 20202020 		.ascii	"                    STATUS has value of 0x2E.      "
 2176      20202020 
 2176      20202020 
 2176      20202020 
 2176      20202020 
 2177 00d7 20202020 		.ascii	"                  TX_DS (transfer data sent) was se"
 2177      20202020 
 2177      20202020 
 2177      20202020 
 2177      20205458 
 2178 010a 742E2020 		.ascii	"t.                        RX_P_NO = 111, means RX F"
 2178      20202020 
 2178      20202020 
 2178      20202020 
 2178      20202020 
 2179 013d 49464F20 		.ascii	"IFO Empty. \012\000"
 2179      456D7074 
 2179      792E200A 
 2179      00
 2180 014a 0000     		.space	2
 2181              	.LC24:
 2182 014c 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has failed. STA"
 2182      6E524632 
 2182      34207472 
 2182      616E736D 
 2182      69737369 
 2183 017c 54555320 		.ascii	"TUS is expected 0x2E.\000"
 2183      69732065 
 2183      78706563 
 2183      74656420 
 2183      30783245 
 2184              		.section	.rodata.nRF24_verified_write_register.str1.4,"aMS",%progbits,1
 2185              		.align	2
 2186              	.LC3:
 2187 0000 50726F62 		.ascii	"Problem writing to SPI register -- \000"
 2187      6C656D20 
 2187      77726974 
 2187      696E6720 
 2187      746F2053 
 2188              	.LC4:
 2189 0024 77726974 		.ascii	"writing data: <%#02x> read_data: <%#02x>\012\000"
ARM GAS  /tmp/ccHkpHGQ.s 			page 53


 2189      696E6720 
 2189      64617461 
 2189      3A203C25 
 2189      23303278 
 2190 004e 0000     		.space	2
 2191              	.LC5:
 2192 0050 53756363 		.ascii	"Success writing to SPI register -- \000"
 2192      65737320 
 2192      77726974 
 2192      696E6720 
 2192      746F2053 
 2193              		.text
 2194              	.Letext0:
 2195              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2196              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2197              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 2198              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 2199              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 2200              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 2201              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 2202              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 2203              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 2204              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 2205              		.file 12 "/usr/include/newlib/sys/lock.h"
 2206              		.file 13 "/usr/include/newlib/sys/_types.h"
 2207              		.file 14 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 2208              		.file 15 "/usr/include/newlib/sys/reent.h"
 2209              		.file 16 "Inc/nRF24.h"
 2210              		.file 17 "/usr/include/newlib/string.h"
 2211              		.file 18 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccHkpHGQ.s 			page 54


DEFINED SYMBOLS
                            *ABS*:0000000000000000 nRF24.c
     /tmp/ccHkpHGQ.s:18     .text.SPI_SCK_1:0000000000000000 $t
     /tmp/ccHkpHGQ.s:25     .text.SPI_SCK_1:0000000000000000 SPI_SCK_1
     /tmp/ccHkpHGQ.s:47     .text.SPI_SCK_1:0000000000000010 $d
     /tmp/ccHkpHGQ.s:52     .text.SPI_SCK_0:0000000000000000 $t
     /tmp/ccHkpHGQ.s:59     .text.SPI_SCK_0:0000000000000000 SPI_SCK_0
     /tmp/ccHkpHGQ.s:80     .text.SPI_SCK_0:0000000000000010 $d
     /tmp/ccHkpHGQ.s:85     .text.SPI_MOSI_1:0000000000000000 $t
     /tmp/ccHkpHGQ.s:92     .text.SPI_MOSI_1:0000000000000000 SPI_MOSI_1
     /tmp/ccHkpHGQ.s:113    .text.SPI_MOSI_1:0000000000000010 $d
     /tmp/ccHkpHGQ.s:118    .text.SPI_MOSI_0:0000000000000000 $t
     /tmp/ccHkpHGQ.s:125    .text.SPI_MOSI_0:0000000000000000 SPI_MOSI_0
     /tmp/ccHkpHGQ.s:146    .text.SPI_MOSI_0:0000000000000010 $d
     /tmp/ccHkpHGQ.s:151    .text.SPI_CS_1:0000000000000000 $t
     /tmp/ccHkpHGQ.s:158    .text.SPI_CS_1:0000000000000000 SPI_CS_1
     /tmp/ccHkpHGQ.s:179    .text.SPI_CS_1:0000000000000010 $d
     /tmp/ccHkpHGQ.s:184    .text.SPI_CS_0:0000000000000000 $t
     /tmp/ccHkpHGQ.s:191    .text.SPI_CS_0:0000000000000000 SPI_CS_0
     /tmp/ccHkpHGQ.s:212    .text.SPI_CS_0:0000000000000010 $d
     /tmp/ccHkpHGQ.s:217    .text.SPI_READ_MISO:0000000000000000 $t
     /tmp/ccHkpHGQ.s:224    .text.SPI_READ_MISO:0000000000000000 SPI_READ_MISO
     /tmp/ccHkpHGQ.s:245    .text.SPI_READ_MISO:0000000000000010 $d
     /tmp/ccHkpHGQ.s:250    .text.serial_print:0000000000000000 $t
     /tmp/ccHkpHGQ.s:257    .text.serial_print:0000000000000000 serial_print
     /tmp/ccHkpHGQ.s:284    .text.serial_print:0000000000000018 $d
     /tmp/ccHkpHGQ.s:289    .text.spi_delay:0000000000000000 $t
     /tmp/ccHkpHGQ.s:296    .text.spi_delay:0000000000000000 spi_delay
     /tmp/ccHkpHGQ.s:316    .text.gpio_clockout_8_bits:0000000000000000 $t
     /tmp/ccHkpHGQ.s:323    .text.gpio_clockout_8_bits:0000000000000000 gpio_clockout_8_bits
     /tmp/ccHkpHGQ.s:428    .text.gpio_clockout_8_bits:0000000000000068 $d
     /tmp/ccHkpHGQ.s:436    .text.gpio_clockin_8_bits:0000000000000000 $t
     /tmp/ccHkpHGQ.s:443    .text.gpio_clockin_8_bits:0000000000000000 gpio_clockin_8_bits
     /tmp/ccHkpHGQ.s:555    .text.gpio_clockin_8_bits:0000000000000068 $d
     /tmp/ccHkpHGQ.s:561    .text.spi_read_register:0000000000000000 $t
     /tmp/ccHkpHGQ.s:568    .text.spi_read_register:0000000000000000 spi_read_register
     /tmp/ccHkpHGQ.s:633    .text.spi_read_register:0000000000000034 $d
     /tmp/ccHkpHGQ.s:640    .text.spi_write_register:0000000000000000 $t
     /tmp/ccHkpHGQ.s:647    .text.spi_write_register:0000000000000000 spi_write_register
     /tmp/ccHkpHGQ.s:714    .text.spi_write_register:0000000000000034 $d
     /tmp/ccHkpHGQ.s:721    .text.nRF24_CE_1:0000000000000000 $t
     /tmp/ccHkpHGQ.s:728    .text.nRF24_CE_1:0000000000000000 nRF24_CE_1
     /tmp/ccHkpHGQ.s:749    .text.nRF24_CE_1:0000000000000010 $d
     /tmp/ccHkpHGQ.s:754    .text.nRF24_CE_0:0000000000000000 $t
     /tmp/ccHkpHGQ.s:761    .text.nRF24_CE_0:0000000000000000 nRF24_CE_0
     /tmp/ccHkpHGQ.s:782    .text.nRF24_CE_0:0000000000000010 $d
     /tmp/ccHkpHGQ.s:787    .text.nRF24_verified_write_register:0000000000000000 $t
     /tmp/ccHkpHGQ.s:794    .text.nRF24_verified_write_register:0000000000000000 nRF24_verified_write_register
     /tmp/ccHkpHGQ.s:993    .text.nRF24_verified_write_register:00000000000000f8 $d
     /tmp/ccHkpHGQ.s:1001   .text.nRF24_configure_tx_mode:0000000000000000 $t
     /tmp/ccHkpHGQ.s:1008   .text.nRF24_configure_tx_mode:0000000000000000 nRF24_configure_tx_mode
     /tmp/ccHkpHGQ.s:1103   .text.nRF24_configure_tx_mode:0000000000000088 $d
     /tmp/ccHkpHGQ.s:1108   .text.nRF24_print_all_registers:0000000000000000 $t
     /tmp/ccHkpHGQ.s:1115   .text.nRF24_print_all_registers:0000000000000000 nRF24_print_all_registers
     /tmp/ccHkpHGQ.s:1594   .text.nRF24_print_all_registers:00000000000002e4 $d
     /tmp/ccHkpHGQ.s:1614   .text.nRF24_get_STATUS:0000000000000000 $t
     /tmp/ccHkpHGQ.s:1621   .text.nRF24_get_STATUS:0000000000000000 nRF24_get_STATUS
ARM GAS  /tmp/ccHkpHGQ.s 			page 55


     /tmp/ccHkpHGQ.s:1651   .text.nRF24_tx_self_test:0000000000000000 $t
     /tmp/ccHkpHGQ.s:1658   .text.nRF24_tx_self_test:0000000000000000 nRF24_tx_self_test
     /tmp/ccHkpHGQ.s:1860   .text.nRF24_tx_self_test:0000000000000104 $d
     /tmp/ccHkpHGQ.s:1870   .text.nRF24_keep_sending:0000000000000000 $t
     /tmp/ccHkpHGQ.s:1877   .text.nRF24_keep_sending:0000000000000000 nRF24_keep_sending
     /tmp/ccHkpHGQ.s:2009   .text.nRF24_keep_sending:000000000000009c $d
     /tmp/ccHkpHGQ.s:2020   .text.nRF24_get_FIFO_STATUS:0000000000000000 $t
     /tmp/ccHkpHGQ.s:2027   .text.nRF24_get_FIFO_STATUS:0000000000000000 nRF24_get_FIFO_STATUS
     /tmp/ccHkpHGQ.s:2057   .text.nRF24_get_CONFIG:0000000000000000 $t
     /tmp/ccHkpHGQ.s:2064   .text.nRF24_get_CONFIG:0000000000000000 nRF24_get_CONFIG
     /tmp/ccHkpHGQ.s:2094   .rodata:0000000000000000 $d
     /tmp/ccHkpHGQ.s:2114   .rodata.nRF24_keep_sending.str1.4:0000000000000000 $d
     /tmp/ccHkpHGQ.s:2122   .rodata.nRF24_print_all_registers.str1.4:0000000000000000 $d
     /tmp/ccHkpHGQ.s:2166   .rodata.nRF24_tx_self_test.str1.4:0000000000000000 $d
     /tmp/ccHkpHGQ.s:2185   .rodata.nRF24_verified_write_register.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_ReadPin
strlen
HAL_UART_Transmit
huart2
HAL_Delay
memset
sprintf
memcpy
