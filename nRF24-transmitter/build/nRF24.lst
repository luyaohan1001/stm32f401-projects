ARM GAS  /tmp/ccvdf1ti.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"nRF24.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.SPI_SCK_1,"ax",%progbits
  18              		.align	1
  19              		.global	SPI_SCK_1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	SPI_SCK_1:
  26              	.LFB131:
  27              		.file 1 "libs/nRF24/nRF24.c"
   1:libs/nRF24/nRF24.c **** /**
   2:libs/nRF24/nRF24.c ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
   3:libs/nRF24/nRF24.c ****   * @file      :     nRF24.c
   4:libs/nRF24/nRF24.c ****   * @author    :     Luyao Han
   5:libs/nRF24/nRF24.c ****   * @email     :     luyaohan1001@gmail.com
   6:libs/nRF24/nRF24.c ****   * @brief     :     C library for Nordic nRF24L01+ (or nRF24L01p) 2.4GHz wireless transceiver.
   7:libs/nRF24/nRF24.c ****   * @date      :     04-21-2022
   8:libs/nRF24/nRF24.c ****   * @note      :     The library strictly follows "nRF24L01+ Single Chip 2.4GHz Transceiver Product
   9:libs/nRF24/nRF24.c **** 	*                  On the fresh import of this library. How do I get nRF24L01+ working?
  10:libs/nRF24/nRF24.c **** 	*                    1. Setup debugger such as OpenOCD. So you can single step debug.
  11:libs/nRF24/nRF24.c **** 	*                    2. Setup UART serial connection. Make sure "Hello World\n" printing is possib
  12:libs/nRF24/nRF24.c **** 	*                    3. TODO: Modify the platform dependent functions labeled in nRF24.h (< 2 mins
  13:libs/nRF24/nRF24.c **** 	*                    3. Without a RX nRF24, setup a TX nRF24 and run nRF24_tx_self_test();
  14:libs/nRF24/nRF24.c **** 	*                    4. Finally if we get TX nRF24 working, work on a RX nRF24 module.
  15:libs/nRF24/nRF24.c ****   * Copyright (C) 2022-2122 Luyao Han. The following code may be shared or modified for personal us
  16:libs/nRF24/nRF24.c ****   ******** ******** ******** ******** ******** ******** ******** ******** ******** ******** *******
  17:libs/nRF24/nRF24.c **** 
  18:libs/nRF24/nRF24.c **** /* Includes ---------------------------------------------------------------------------------------
  19:libs/nRF24/nRF24.c **** #include "nRF24.h"
  20:libs/nRF24/nRF24.c **** 
  21:libs/nRF24/nRF24.c **** /* Macro Define -----------------------------------------------------------------------------------
  22:libs/nRF24/nRF24.c **** #define NRF24_DEBUG /* When defined, debug messages are logged through UART. */
  23:libs/nRF24/nRF24.c **** 
  24:libs/nRF24/nRF24.c **** /* GPIO Physical Layer ----------------------------------------------------------------------------
  25:libs/nRF24/nRF24.c **** 
  26:libs/nRF24/nRF24.c **** /* GPIO Defined on STM32F401 */
  27:libs/nRF24/nRF24.c **** /* SCK    PA8  */
  28:libs/nRF24/nRF24.c **** /* MOSI   PB10 */
  29:libs/nRF24/nRF24.c **** /* CSN    PB4  */
  30:libs/nRF24/nRF24.c **** /* CE     PB5  */
  31:libs/nRF24/nRF24.c **** /* MISO   PA10 */
ARM GAS  /tmp/ccvdf1ti.s 			page 2


  32:libs/nRF24/nRF24.c **** 
  33:libs/nRF24/nRF24.c **** /**
  34:libs/nRF24/nRF24.c ****   * @brief  Set high on SCK pin of SPI bus.
  35:libs/nRF24/nRF24.c ****   * @param  None.
  36:libs/nRF24/nRF24.c ****   * @retval None.
  37:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
  38:libs/nRF24/nRF24.c ****   *           Initialization code is not included in this library.
  39:libs/nRF24/nRF24.c ****   */
  40:libs/nRF24/nRF24.c **** __inline__ void SPI_SCK_1()
  41:libs/nRF24/nRF24.c **** {
  28              		.loc 1 41 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  42:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);  
  37              		.loc 1 42 0
  38 0002 0122     		movs	r2, #1
  39 0004 4FF48071 		mov	r1, #256
  40 0008 0148     		ldr	r0, .L3
  41 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  42              	.LVL0:
  43 000e 08BD     		pop	{r3, pc}
  44              	.L4:
  45              		.align	2
  46              	.L3:
  47 0010 00000240 		.word	1073872896
  48              		.cfi_endproc
  49              	.LFE131:
  51              		.section	.text.SPI_SCK_0,"ax",%progbits
  52              		.align	1
  53              		.global	SPI_SCK_0
  54              		.syntax unified
  55              		.thumb
  56              		.thumb_func
  57              		.fpu fpv4-sp-d16
  59              	SPI_SCK_0:
  60              	.LFB132:
  43:libs/nRF24/nRF24.c **** }
  44:libs/nRF24/nRF24.c **** 
  45:libs/nRF24/nRF24.c **** /**
  46:libs/nRF24/nRF24.c ****   * @brief  Set low on SCK pin of SPI bus.
  47:libs/nRF24/nRF24.c ****   * @param  None.
  48:libs/nRF24/nRF24.c ****   * @retval None.
  49:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
  50:libs/nRF24/nRF24.c ****   *           Initialization code is not part of this library.
  51:libs/nRF24/nRF24.c ****   */
  52:libs/nRF24/nRF24.c **** __inline__ void SPI_SCK_0()
  53:libs/nRF24/nRF24.c **** {
  61              		.loc 1 53 0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 0
  64              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccvdf1ti.s 			page 3


  65 0000 08B5     		push	{r3, lr}
  66              	.LCFI1:
  67              		.cfi_def_cfa_offset 8
  68              		.cfi_offset 3, -8
  69              		.cfi_offset 14, -4
  54:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);  
  70              		.loc 1 54 0
  71 0002 0022     		movs	r2, #0
  72 0004 4FF48071 		mov	r1, #256
  73 0008 0148     		ldr	r0, .L7
  74 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
  75              	.LVL1:
  76 000e 08BD     		pop	{r3, pc}
  77              	.L8:
  78              		.align	2
  79              	.L7:
  80 0010 00000240 		.word	1073872896
  81              		.cfi_endproc
  82              	.LFE132:
  84              		.section	.text.SPI_MOSI_1,"ax",%progbits
  85              		.align	1
  86              		.global	SPI_MOSI_1
  87              		.syntax unified
  88              		.thumb
  89              		.thumb_func
  90              		.fpu fpv4-sp-d16
  92              	SPI_MOSI_1:
  93              	.LFB133:
  55:libs/nRF24/nRF24.c **** } 
  56:libs/nRF24/nRF24.c **** 
  57:libs/nRF24/nRF24.c **** /**
  58:libs/nRF24/nRF24.c ****   * @brief  Set high on MOSI pin of SPI bus.
  59:libs/nRF24/nRF24.c ****   * @param  None.
  60:libs/nRF24/nRF24.c ****   * @retval None.
  61:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
  62:libs/nRF24/nRF24.c ****   *           Initialization code is not part of this library.
  63:libs/nRF24/nRF24.c ****   */
  64:libs/nRF24/nRF24.c **** __inline__ void SPI_MOSI_1()
  65:libs/nRF24/nRF24.c **** {
  94              		.loc 1 65 0
  95              		.cfi_startproc
  96              		@ args = 0, pretend = 0, frame = 0
  97              		@ frame_needed = 0, uses_anonymous_args = 0
  98 0000 08B5     		push	{r3, lr}
  99              	.LCFI2:
 100              		.cfi_def_cfa_offset 8
 101              		.cfi_offset 3, -8
 102              		.cfi_offset 14, -4
  66:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);  
 103              		.loc 1 66 0
 104 0002 0122     		movs	r2, #1
 105 0004 4FF48061 		mov	r1, #1024
 106 0008 0148     		ldr	r0, .L11
 107 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL2:
 109 000e 08BD     		pop	{r3, pc}
 110              	.L12:
ARM GAS  /tmp/ccvdf1ti.s 			page 4


 111              		.align	2
 112              	.L11:
 113 0010 00040240 		.word	1073873920
 114              		.cfi_endproc
 115              	.LFE133:
 117              		.section	.text.SPI_MOSI_0,"ax",%progbits
 118              		.align	1
 119              		.global	SPI_MOSI_0
 120              		.syntax unified
 121              		.thumb
 122              		.thumb_func
 123              		.fpu fpv4-sp-d16
 125              	SPI_MOSI_0:
 126              	.LFB134:
  67:libs/nRF24/nRF24.c **** }
  68:libs/nRF24/nRF24.c **** 
  69:libs/nRF24/nRF24.c **** /**
  70:libs/nRF24/nRF24.c ****   * @brief  Set low on MOSI pin of SPI bus.
  71:libs/nRF24/nRF24.c ****   * @param  None.
  72:libs/nRF24/nRF24.c ****   * @retval None.
  73:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
  74:libs/nRF24/nRF24.c ****   *           Initialization code is not part of this library.
  75:libs/nRF24/nRF24.c ****   */
  76:libs/nRF24/nRF24.c **** __inline__ void SPI_MOSI_0()
  77:libs/nRF24/nRF24.c **** {
 127              		.loc 1 77 0
 128              		.cfi_startproc
 129              		@ args = 0, pretend = 0, frame = 0
 130              		@ frame_needed = 0, uses_anonymous_args = 0
 131 0000 08B5     		push	{r3, lr}
 132              	.LCFI3:
 133              		.cfi_def_cfa_offset 8
 134              		.cfi_offset 3, -8
 135              		.cfi_offset 14, -4
  78:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);  
 136              		.loc 1 78 0
 137 0002 0022     		movs	r2, #0
 138 0004 4FF48061 		mov	r1, #1024
 139 0008 0148     		ldr	r0, .L15
 140 000a FFF7FEFF 		bl	HAL_GPIO_WritePin
 141              	.LVL3:
 142 000e 08BD     		pop	{r3, pc}
 143              	.L16:
 144              		.align	2
 145              	.L15:
 146 0010 00040240 		.word	1073873920
 147              		.cfi_endproc
 148              	.LFE134:
 150              		.section	.text.SPI_CS_1,"ax",%progbits
 151              		.align	1
 152              		.global	SPI_CS_1
 153              		.syntax unified
 154              		.thumb
 155              		.thumb_func
 156              		.fpu fpv4-sp-d16
 158              	SPI_CS_1:
 159              	.LFB135:
ARM GAS  /tmp/ccvdf1ti.s 			page 5


  79:libs/nRF24/nRF24.c **** }
  80:libs/nRF24/nRF24.c **** 
  81:libs/nRF24/nRF24.c **** /**
  82:libs/nRF24/nRF24.c ****   * @brief  Set high on CS pin of SPI bus.
  83:libs/nRF24/nRF24.c ****   * @param  None.
  84:libs/nRF24/nRF24.c ****   * @retval None.
  85:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
  86:libs/nRF24/nRF24.c ****   *           Initialization code is not part of this library.
  87:libs/nRF24/nRF24.c ****   */
  88:libs/nRF24/nRF24.c **** __inline__ void SPI_CS_1() 
  89:libs/nRF24/nRF24.c **** {
 160              		.loc 1 89 0
 161              		.cfi_startproc
 162              		@ args = 0, pretend = 0, frame = 0
 163              		@ frame_needed = 0, uses_anonymous_args = 0
 164 0000 08B5     		push	{r3, lr}
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 3, -8
 168              		.cfi_offset 14, -4
  90:libs/nRF24/nRF24.c ****     /* CS High == CSN Low */
  91:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);  
 169              		.loc 1 91 0
 170 0002 0022     		movs	r2, #0
 171 0004 1021     		movs	r1, #16
 172 0006 0248     		ldr	r0, .L19
 173 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 174              	.LVL4:
 175 000c 08BD     		pop	{r3, pc}
 176              	.L20:
 177 000e 00BF     		.align	2
 178              	.L19:
 179 0010 00040240 		.word	1073873920
 180              		.cfi_endproc
 181              	.LFE135:
 183              		.section	.text.SPI_CS_0,"ax",%progbits
 184              		.align	1
 185              		.global	SPI_CS_0
 186              		.syntax unified
 187              		.thumb
 188              		.thumb_func
 189              		.fpu fpv4-sp-d16
 191              	SPI_CS_0:
 192              	.LFB136:
  92:libs/nRF24/nRF24.c **** }
  93:libs/nRF24/nRF24.c **** 
  94:libs/nRF24/nRF24.c **** /**
  95:libs/nRF24/nRF24.c ****   * @brief  Set low on CS pin of SPI bus.
  96:libs/nRF24/nRF24.c ****   * @param  None.
  97:libs/nRF24/nRF24.c ****   * @retval None.
  98:libs/nRF24/nRF24.c ****   * @note   This GPIO pin must be initialized. 
  99:libs/nRF24/nRF24.c ****   *           Initialization code is not part of this library.
 100:libs/nRF24/nRF24.c ****   */
 101:libs/nRF24/nRF24.c **** __inline__ void SPI_CS_0()
 102:libs/nRF24/nRF24.c **** {
 193              		.loc 1 102 0
 194              		.cfi_startproc
ARM GAS  /tmp/ccvdf1ti.s 			page 6


 195              		@ args = 0, pretend = 0, frame = 0
 196              		@ frame_needed = 0, uses_anonymous_args = 0
 197 0000 08B5     		push	{r3, lr}
 198              	.LCFI5:
 199              		.cfi_def_cfa_offset 8
 200              		.cfi_offset 3, -8
 201              		.cfi_offset 14, -4
 103:libs/nRF24/nRF24.c ****     /* CS Low == CSN High */
 104:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 202              		.loc 1 104 0
 203 0002 0122     		movs	r2, #1
 204 0004 1021     		movs	r1, #16
 205 0006 0248     		ldr	r0, .L23
 206 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 207              	.LVL5:
 208 000c 08BD     		pop	{r3, pc}
 209              	.L24:
 210 000e 00BF     		.align	2
 211              	.L23:
 212 0010 00040240 		.word	1073873920
 213              		.cfi_endproc
 214              	.LFE136:
 216              		.section	.text.SPI_READ_MISO,"ax",%progbits
 217              		.align	1
 218              		.global	SPI_READ_MISO
 219              		.syntax unified
 220              		.thumb
 221              		.thumb_func
 222              		.fpu fpv4-sp-d16
 224              	SPI_READ_MISO:
 225              	.LFB137:
 105:libs/nRF24/nRF24.c **** }
 106:libs/nRF24/nRF24.c **** 
 107:libs/nRF24/nRF24.c **** 
 108:libs/nRF24/nRF24.c **** /**
 109:libs/nRF24/nRF24.c ****   * @brief  Get pin-level on MISO pin of SPI bus.
 110:libs/nRF24/nRF24.c ****   * @param  None
 111:libs/nRF24/nRF24.c ****   * @retval None
 112:libs/nRF24/nRF24.c ****   */
 113:libs/nRF24/nRF24.c **** __inline__ GPIO_PinState SPI_READ_MISO()
 114:libs/nRF24/nRF24.c **** {
 226              		.loc 1 114 0
 227              		.cfi_startproc
 228              		@ args = 0, pretend = 0, frame = 0
 229              		@ frame_needed = 0, uses_anonymous_args = 0
 230 0000 08B5     		push	{r3, lr}
 231              	.LCFI6:
 232              		.cfi_def_cfa_offset 8
 233              		.cfi_offset 3, -8
 234              		.cfi_offset 14, -4
 115:libs/nRF24/nRF24.c ****   return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 235              		.loc 1 115 0
 236 0002 4FF48061 		mov	r1, #1024
 237 0006 0248     		ldr	r0, .L27
 238 0008 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 239              	.LVL6:
 116:libs/nRF24/nRF24.c **** }
ARM GAS  /tmp/ccvdf1ti.s 			page 7


 240              		.loc 1 116 0
 241 000c 08BD     		pop	{r3, pc}
 242              	.L28:
 243 000e 00BF     		.align	2
 244              	.L27:
 245 0010 00000240 		.word	1073872896
 246              		.cfi_endproc
 247              	.LFE137:
 249              		.section	.text.serial_print,"ax",%progbits
 250              		.align	1
 251              		.global	serial_print
 252              		.syntax unified
 253              		.thumb
 254              		.thumb_func
 255              		.fpu fpv4-sp-d16
 257              	serial_print:
 258              	.LFB138:
 117:libs/nRF24/nRF24.c **** 
 118:libs/nRF24/nRF24.c **** /**
 119:libs/nRF24/nRF24.c ****   * @brief   Print debug string through USART.
 120:libs/nRF24/nRF24.c ****   * @param   p_message Pointer to a message string.
 121:libs/nRF24/nRF24.c ****   * @retval  None.
 122:libs/nRF24/nRF24.c ****   * @note    When testing on STM32F401RE Nucleo Board, the board supports virtual COM (serial) port
 123:libs/nRF24/nRF24.c ****   *            Connecting a USB-TTL adapter such as CH340 to the 'TX/D1' on morpho connector will n
 124:libs/nRF24/nRF24.c ****   *             In the datasheet it has been confirmed that the USART2 pins have been to multiplexe
 125:libs/nRF24/nRF24.c ****   *             On the PC, look for port /dev/ttyACM0 as the virtual serial port in CuteCom / MiniC
 126:libs/nRF24/nRF24.c ****   */
 127:libs/nRF24/nRF24.c **** __inline__ void serial_print(char* p_message)
 128:libs/nRF24/nRF24.c **** {
 259              		.loc 1 128 0
 260              		.cfi_startproc
 261              		@ args = 0, pretend = 0, frame = 0
 262              		@ frame_needed = 0, uses_anonymous_args = 0
 263              	.LVL7:
 264 0000 10B5     		push	{r4, lr}
 265              	.LCFI7:
 266              		.cfi_def_cfa_offset 8
 267              		.cfi_offset 4, -8
 268              		.cfi_offset 14, -4
 269 0002 0446     		mov	r4, r0
 129:libs/nRF24/nRF24.c ****   /* Call STM32 HAL library function to UART, pass uart hander, string, length to UART. */
 130:libs/nRF24/nRF24.c ****   HAL_UART_Transmit(&huart2, (uint8_t*)p_message, strlen(p_message), 100);
 270              		.loc 1 130 0
 271 0004 FFF7FEFF 		bl	strlen
 272              	.LVL8:
 273 0008 6423     		movs	r3, #100
 274 000a 82B2     		uxth	r2, r0
 275 000c 2146     		mov	r1, r4
 276 000e 0248     		ldr	r0, .L31
 277 0010 FFF7FEFF 		bl	HAL_UART_Transmit
 278              	.LVL9:
 279 0014 10BD     		pop	{r4, pc}
 280              	.LVL10:
 281              	.L32:
 282 0016 00BF     		.align	2
 283              	.L31:
 284 0018 00000000 		.word	huart2
ARM GAS  /tmp/ccvdf1ti.s 			page 8


 285              		.cfi_endproc
 286              	.LFE138:
 288              		.section	.text.SPI_DELAY,"ax",%progbits
 289              		.align	1
 290              		.global	SPI_DELAY
 291              		.syntax unified
 292              		.thumb
 293              		.thumb_func
 294              		.fpu fpv4-sp-d16
 296              	SPI_DELAY:
 297              	.LFB141:
 131:libs/nRF24/nRF24.c **** }
 132:libs/nRF24/nRF24.c **** 
 133:libs/nRF24/nRF24.c **** /**
 134:libs/nRF24/nRF24.c ****   * @brief      Clock out (write) 8 bits on MOSI of SPI bus on SCK high. 
 135:libs/nRF24/nRF24.c ****   *               SPI Mode = [CPOL = 0, CPHA = 0]. (Non-inverted clock and sample data on rising ed
 136:libs/nRF24/nRF24.c ****   * @param[in]  tx_data One byte of data to transmit.
 137:libs/nRF24/nRF24.c ****   * @retval     None.
 138:libs/nRF24/nRF24.c ****   * @note  
 139:libs/nRF24/nRF24.c ****   *   SPI Timing Requirement specified in section 8.3.2 SPI Timing of nRF24L01+ Product Specificati
 140:libs/nRF24/nRF24.c ****   *   Endianess: Most Significant Bit First. Cn: Command Bits. Sn: Status Register bits. Dn: data b
 141:libs/nRF24/nRF24.c ****   *
 142:libs/nRF24/nRF24.c ****   *   Following is a diagram for time sequence:
 143:libs/nRF24/nRF24.c ****   *   CSN ````\____________________________________________________________________________________
 144:libs/nRF24/nRF24.c ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|D7|__|D6|__|D5|__|D4|__|D3|__|
 145:libs/nRF24/nRF24.c ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 146:libs/nRF24/nRF24.c ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 147:libs/nRF24/nRF24.c ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
 148:libs/nRF24/nRF24.c ****   *
 149:libs/nRF24/nRF24.c ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 150:libs/nRF24/nRF24.c ****   * 
 151:libs/nRF24/nRF24.c ****   *   '^' indicates the clock rising pulse sampling MOSI data line. 
 152:libs/nRF24/nRF24.c ****   *   MOSI data establish '|' arrives slightly before SCK clock rising edge '/' to satisfy setup-ti
 153:libs/nRF24/nRF24.c ****   *     It is required Data to SCK setup-time > 2 ns.
 154:libs/nRF24/nRF24.c ****   *   SCK falling edge '\' settles slightly after MOSI change back to 0 to satisfy hold-time.
 155:libs/nRF24/nRF24.c ****   *     It is required SCK to Data hold > 2 ns.
 156:libs/nRF24/nRF24.c ****   */
 157:libs/nRF24/nRF24.c **** void gpio_clockout_8_bits(uint8_t tx_data) 
 158:libs/nRF24/nRF24.c **** {
 159:libs/nRF24/nRF24.c ****   SPI_DELAY();
 160:libs/nRF24/nRF24.c ****   /* Repeat for each bit in the tx_data. */
 161:libs/nRF24/nRF24.c ****   for (int i = 0; i < 8; ++i) 
 162:libs/nRF24/nRF24.c ****   {
 163:libs/nRF24/nRF24.c ****       /* Clock Falling Edge */
 164:libs/nRF24/nRF24.c ****       SPI_SCK_0();
 165:libs/nRF24/nRF24.c ****       SPI_DELAY();
 166:libs/nRF24/nRF24.c **** 
 167:libs/nRF24/nRF24.c ****       /* Fetch the Most Significant Bit. */
 168:libs/nRF24/nRF24.c ****       if(tx_data & 0x80) 
 169:libs/nRF24/nRF24.c ****           SPI_MOSI_1();
 170:libs/nRF24/nRF24.c ****       else
 171:libs/nRF24/nRF24.c ****           SPI_MOSI_0();
 172:libs/nRF24/nRF24.c **** 
 173:libs/nRF24/nRF24.c ****       /* Setup Time */  
 174:libs/nRF24/nRF24.c ****       SPI_DELAY();
 175:libs/nRF24/nRF24.c **** 
 176:libs/nRF24/nRF24.c ****       /* Clock Rising Edge - '^' Sampling in the diagram.*/
ARM GAS  /tmp/ccvdf1ti.s 			page 9


 177:libs/nRF24/nRF24.c ****       SPI_SCK_1(); 
 178:libs/nRF24/nRF24.c **** 
 179:libs/nRF24/nRF24.c ****       /* Loads next bit. e.g. 10110011 << 1 = 01100110 */
 180:libs/nRF24/nRF24.c ****       tx_data = tx_data << 1; 
 181:libs/nRF24/nRF24.c **** 
 182:libs/nRF24/nRF24.c ****       /* hold time */
 183:libs/nRF24/nRF24.c ****       SPI_DELAY();
 184:libs/nRF24/nRF24.c ****   }
 185:libs/nRF24/nRF24.c **** 
 186:libs/nRF24/nRF24.c ****   /* Make sure SPI clock set to 0 after the last bit has been clocked out. */
 187:libs/nRF24/nRF24.c ****   SPI_SCK_0();
 188:libs/nRF24/nRF24.c **** }
 189:libs/nRF24/nRF24.c **** 
 190:libs/nRF24/nRF24.c **** /**
 191:libs/nRF24/nRF24.c ****   * @brief  Clock in (read) 8 bits from MISO of SPI bus on SCK high.
 192:libs/nRF24/nRF24.c ****   *               SPI Mode = [CPOL = 0, CPHA = 0]. (Non-inverted clock and sample data on rising ed
 193:libs/nRF24/nRF24.c ****   * @param  None
 194:libs/nRF24/nRF24.c ****   * @retval A byte of read data.
 195:libs/nRF24/nRF24.c ****   * @note
 196:libs/nRF24/nRF24.c ****   *   SPI Timing Requirement specified in section 8.3.2 SPI Timing of nRF24L01+ Product Specificati
 197:libs/nRF24/nRF24.c ****   *
 198:libs/nRF24/nRF24.c ****   *   Endianess: Most Significant Bit first. Cn: Command bits. Sn: Status register bits. Dn: Data b
 199:libs/nRF24/nRF24.c ****   *    
 200:libs/nRF24/nRF24.c ****   *   Following is a diagram for time sequence:
 201:libs/nRF24/nRF24.c ****   *   CSN ````\____________________________________________________________________________________
 202:libs/nRF24/nRF24.c ****   *   MOSI______|C7|__|C6|__|C5|__|C4|__|C3|__|C2|__|C1|__|C0|______|XX|__|XX|__|XX|__|XX|__|XX|__|
 203:libs/nRF24/nRF24.c ****   *             ^     ^     ^     ^     ^     ^     ^     ^         ^     ^     ^     ^     ^     ^
 204:libs/nRF24/nRF24.c ****   *   SCK ______/``\__/``\__/``\__/``\__/``\__/``\__/``\__/``\______/``\__/``\__/``\__/``\__/``\__/
 205:libs/nRF24/nRF24.c ****   *   MISO______|S7|__|S6|__|S5|__|S4|__|S3|__|S2|__|S1|__|S0|______|D0|__|D1|__|D2|__|D3|__|D4|__|
 206:libs/nRF24/nRF24.c ****   *   Pulse#     1     2     3     4     5     6     7     8         9     10    11    12    13    
 207:libs/nRF24/nRF24.c ****   *
 208:libs/nRF24/nRF24.c ****   *   '^' indicates the clock rising pulse sampling MISO data line. 
 209:libs/nRF24/nRF24.c ****   *   MISO data establish '|' arrives slightly before SCK clock rising edge '/' to satisfy setup-ti
 210:libs/nRF24/nRF24.c ****   *     It is required Data to SCK setup-time > 2 ns.
 211:libs/nRF24/nRF24.c ****   *   SCK falling edge '\' settles slightly after MISO change back to 0 to satisfy hold-time.
 212:libs/nRF24/nRF24.c ****   *     It is required SCK to Data hold > 2 ns.
 213:libs/nRF24/nRF24.c ****   */
 214:libs/nRF24/nRF24.c **** uint8_t gpio_clockin_8_bits(void)
 215:libs/nRF24/nRF24.c **** {
 216:libs/nRF24/nRF24.c ****   uint8_t rx_data = 0;
 217:libs/nRF24/nRF24.c **** 
 218:libs/nRF24/nRF24.c ****   SPI_DELAY();
 219:libs/nRF24/nRF24.c **** 
 220:libs/nRF24/nRF24.c ****   /* Repeat for each bit read from MISO. */
 221:libs/nRF24/nRF24.c ****   for (int i=0; i < 8; ++i) 
 222:libs/nRF24/nRF24.c ****   {
 223:libs/nRF24/nRF24.c **** 
 224:libs/nRF24/nRF24.c ****       /* Clock Falling Edge */
 225:libs/nRF24/nRF24.c ****       SPI_SCK_0();
 226:libs/nRF24/nRF24.c **** 
 227:libs/nRF24/nRF24.c ****       /* Setup Time for MISO. MISO finished changnig before SCK rising edge. */  
 228:libs/nRF24/nRF24.c ****       SPI_DELAY();
 229:libs/nRF24/nRF24.c **** 
 230:libs/nRF24/nRF24.c ****       /* Clock Rising Edge - '^' Sampling in the diagram.*/
 231:libs/nRF24/nRF24.c ****       SPI_SCK_1();
 232:libs/nRF24/nRF24.c **** 
 233:libs/nRF24/nRF24.c ****       /* Setup Time for MISO. MISO starts change level on SCK rising edge. */  
ARM GAS  /tmp/ccvdf1ti.s 			page 10


 234:libs/nRF24/nRF24.c ****       SPI_DELAY();
 235:libs/nRF24/nRF24.c ****       
 236:libs/nRF24/nRF24.c ****       /* Store the bit read from MISO. */
 237:libs/nRF24/nRF24.c ****       rx_data = rx_data << 1; // Why shift first then OR'? range (0, 8) will need to shift only 7 t
 238:libs/nRF24/nRF24.c ****       rx_data |= SPI_READ_MISO();
 239:libs/nRF24/nRF24.c **** 
 240:libs/nRF24/nRF24.c ****       /* hold time */
 241:libs/nRF24/nRF24.c ****       SPI_DELAY();
 242:libs/nRF24/nRF24.c ****   }
 243:libs/nRF24/nRF24.c **** 
 244:libs/nRF24/nRF24.c ****   /* Make sure SPI clock set to 0 after the last bit has been clocked in. */
 245:libs/nRF24/nRF24.c ****   SPI_SCK_0();
 246:libs/nRF24/nRF24.c ****   return rx_data;
 247:libs/nRF24/nRF24.c **** }
 248:libs/nRF24/nRF24.c ****   
 249:libs/nRF24/nRF24.c **** 
 250:libs/nRF24/nRF24.c **** 
 251:libs/nRF24/nRF24.c **** /* SPI Datalink Layer------------------------------------------------------------------------------
 252:libs/nRF24/nRF24.c **** 
 253:libs/nRF24/nRF24.c **** /**
 254:libs/nRF24/nRF24.c ****   * @brief  Provide on milisecond delay for SPI bus to satisfy timing requirement.
 255:libs/nRF24/nRF24.c ****   * @param  None.
 256:libs/nRF24/nRF24.c ****   * @retval None.
 257:libs/nRF24/nRF24.c ****   */
 258:libs/nRF24/nRF24.c **** void SPI_DELAY() 
 259:libs/nRF24/nRF24.c **** {
 298              		.loc 1 259 0
 299              		.cfi_startproc
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302 0000 08B5     		push	{r3, lr}
 303              	.LCFI8:
 304              		.cfi_def_cfa_offset 8
 305              		.cfi_offset 3, -8
 306              		.cfi_offset 14, -4
 260:libs/nRF24/nRF24.c ****   HAL_Delay(1);
 307              		.loc 1 260 0
 308 0002 0120     		movs	r0, #1
 309 0004 FFF7FEFF 		bl	HAL_Delay
 310              	.LVL11:
 311 0008 08BD     		pop	{r3, pc}
 312              		.cfi_endproc
 313              	.LFE141:
 315              		.section	.text.gpio_clockout_8_bits,"ax",%progbits
 316              		.align	1
 317              		.global	gpio_clockout_8_bits
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu fpv4-sp-d16
 323              	gpio_clockout_8_bits:
 324              	.LFB139:
 158:libs/nRF24/nRF24.c ****   SPI_DELAY();
 325              		.loc 1 158 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccvdf1ti.s 			page 11


 329              	.LVL12:
 330 0000 38B5     		push	{r3, r4, r5, lr}
 331              	.LCFI9:
 332              		.cfi_def_cfa_offset 16
 333              		.cfi_offset 3, -16
 334              		.cfi_offset 4, -12
 335              		.cfi_offset 5, -8
 336              		.cfi_offset 14, -4
 337 0002 0446     		mov	r4, r0
 159:libs/nRF24/nRF24.c ****   /* Repeat for each bit in the tx_data. */
 338              		.loc 1 159 0
 339 0004 FFF7FEFF 		bl	SPI_DELAY
 340              	.LVL13:
 341              	.LBB33:
 161:libs/nRF24/nRF24.c ****   {
 342              		.loc 1 161 0
 343 0008 0025     		movs	r5, #0
 344 000a 12E0     		b	.L36
 345              	.LVL14:
 346              	.L42:
 347              	.LBB34:
 348              	.LBB35:
  66:libs/nRF24/nRF24.c **** }
 349              		.loc 1 66 0
 350 000c 0122     		movs	r2, #1
 351 000e 4FF48061 		mov	r1, #1024
 352 0012 1548     		ldr	r0, .L43
 353 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 354              	.LVL15:
 355              	.L38:
 356              	.LBE35:
 357              	.LBE34:
 174:libs/nRF24/nRF24.c **** 
 358              		.loc 1 174 0 discriminator 2
 359 0018 FFF7FEFF 		bl	SPI_DELAY
 360              	.LVL16:
 361              	.LBB36:
 362              	.LBB37:
  42:libs/nRF24/nRF24.c **** }
 363              		.loc 1 42 0 discriminator 2
 364 001c 0122     		movs	r2, #1
 365 001e 4FF48071 		mov	r1, #256
 366 0022 1248     		ldr	r0, .L43+4
 367 0024 FFF7FEFF 		bl	HAL_GPIO_WritePin
 368              	.LVL17:
 369              	.LBE37:
 370              	.LBE36:
 180:libs/nRF24/nRF24.c **** 
 371              		.loc 1 180 0 discriminator 2
 372 0028 6400     		lsls	r4, r4, #1
 373              	.LVL18:
 374 002a E4B2     		uxtb	r4, r4
 375              	.LVL19:
 183:libs/nRF24/nRF24.c ****   }
 376              		.loc 1 183 0 discriminator 2
 377 002c FFF7FEFF 		bl	SPI_DELAY
 378              	.LVL20:
ARM GAS  /tmp/ccvdf1ti.s 			page 12


 161:libs/nRF24/nRF24.c ****   {
 379              		.loc 1 161 0 discriminator 2
 380 0030 0135     		adds	r5, r5, #1
 381              	.LVL21:
 382              	.L36:
 161:libs/nRF24/nRF24.c ****   {
 383              		.loc 1 161 0 is_stmt 0 discriminator 1
 384 0032 072D     		cmp	r5, #7
 385 0034 11DC     		bgt	.L41
 386              	.LBB38:
 387              	.LBB39:
  54:libs/nRF24/nRF24.c **** } 
 388              		.loc 1 54 0 is_stmt 1
 389 0036 0022     		movs	r2, #0
 390 0038 4FF48071 		mov	r1, #256
 391 003c 0B48     		ldr	r0, .L43+4
 392 003e FFF7FEFF 		bl	HAL_GPIO_WritePin
 393              	.LVL22:
 394              	.LBE39:
 395              	.LBE38:
 165:libs/nRF24/nRF24.c **** 
 396              		.loc 1 165 0
 397 0042 FFF7FEFF 		bl	SPI_DELAY
 398              	.LVL23:
 168:libs/nRF24/nRF24.c ****           SPI_MOSI_1();
 399              		.loc 1 168 0
 400 0046 14F0800F 		tst	r4, #128
 401 004a DFD1     		bne	.L42
 402              	.LBB40:
 403              	.LBB41:
  78:libs/nRF24/nRF24.c **** }
 404              		.loc 1 78 0
 405 004c 0022     		movs	r2, #0
 406 004e 4FF48061 		mov	r1, #1024
 407 0052 0548     		ldr	r0, .L43
 408 0054 FFF7FEFF 		bl	HAL_GPIO_WritePin
 409              	.LVL24:
 410 0058 DEE7     		b	.L38
 411              	.L41:
 412              	.LBE41:
 413              	.LBE40:
 414              	.LBE33:
 415              	.LBB42:
 416              	.LBB43:
  54:libs/nRF24/nRF24.c **** } 
 417              		.loc 1 54 0
 418 005a 0022     		movs	r2, #0
 419 005c 4FF48071 		mov	r1, #256
 420 0060 0248     		ldr	r0, .L43+4
 421 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 422              	.LVL25:
 423 0066 38BD     		pop	{r3, r4, r5, pc}
 424              	.LVL26:
 425              	.L44:
 426              		.align	2
 427              	.L43:
 428 0068 00040240 		.word	1073873920
ARM GAS  /tmp/ccvdf1ti.s 			page 13


 429 006c 00000240 		.word	1073872896
 430              	.LBE43:
 431              	.LBE42:
 432              		.cfi_endproc
 433              	.LFE139:
 435              		.section	.text.gpio_clockin_8_bits,"ax",%progbits
 436              		.align	1
 437              		.global	gpio_clockin_8_bits
 438              		.syntax unified
 439              		.thumb
 440              		.thumb_func
 441              		.fpu fpv4-sp-d16
 443              	gpio_clockin_8_bits:
 444              	.LFB140:
 215:libs/nRF24/nRF24.c ****   uint8_t rx_data = 0;
 445              		.loc 1 215 0
 446              		.cfi_startproc
 447              		@ args = 0, pretend = 0, frame = 0
 448              		@ frame_needed = 0, uses_anonymous_args = 0
 449 0000 70B5     		push	{r4, r5, r6, lr}
 450              	.LCFI10:
 451              		.cfi_def_cfa_offset 16
 452              		.cfi_offset 4, -16
 453              		.cfi_offset 5, -12
 454              		.cfi_offset 6, -8
 455              		.cfi_offset 14, -4
 456              	.LVL27:
 218:libs/nRF24/nRF24.c **** 
 457              		.loc 1 218 0
 458 0002 FFF7FEFF 		bl	SPI_DELAY
 459              	.LVL28:
 460              	.LBB44:
 221:libs/nRF24/nRF24.c ****   {
 461              		.loc 1 221 0
 462 0006 0026     		movs	r6, #0
 463              	.LBE44:
 216:libs/nRF24/nRF24.c **** 
 464              		.loc 1 216 0
 465 0008 3446     		mov	r4, r6
 466              	.LBB51:
 221:libs/nRF24/nRF24.c ****   {
 467              		.loc 1 221 0
 468 000a 1CE0     		b	.L46
 469              	.LVL29:
 470              	.L47:
 471              	.LBB45:
 472              	.LBB46:
  54:libs/nRF24/nRF24.c **** } 
 473              		.loc 1 54 0
 474 000c 134D     		ldr	r5, .L49
 475 000e 0022     		movs	r2, #0
 476 0010 4FF48071 		mov	r1, #256
 477 0014 2846     		mov	r0, r5
 478 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 479              	.LVL30:
 480              	.LBE46:
 481              	.LBE45:
ARM GAS  /tmp/ccvdf1ti.s 			page 14


 228:libs/nRF24/nRF24.c **** 
 482              		.loc 1 228 0
 483 001a FFF7FEFF 		bl	SPI_DELAY
 484              	.LVL31:
 485              	.LBB47:
 486              	.LBB48:
  42:libs/nRF24/nRF24.c **** }
 487              		.loc 1 42 0
 488 001e 0122     		movs	r2, #1
 489 0020 4FF48071 		mov	r1, #256
 490 0024 2846     		mov	r0, r5
 491 0026 FFF7FEFF 		bl	HAL_GPIO_WritePin
 492              	.LVL32:
 493              	.LBE48:
 494              	.LBE47:
 234:libs/nRF24/nRF24.c ****       
 495              		.loc 1 234 0
 496 002a FFF7FEFF 		bl	SPI_DELAY
 497              	.LVL33:
 237:libs/nRF24/nRF24.c ****       rx_data |= SPI_READ_MISO();
 498              		.loc 1 237 0
 499 002e 6400     		lsls	r4, r4, #1
 500              	.LVL34:
 501 0030 E4B2     		uxtb	r4, r4
 502              	.LVL35:
 503              	.LBB49:
 504              	.LBB50:
 115:libs/nRF24/nRF24.c **** }
 505              		.loc 1 115 0
 506 0032 4FF48061 		mov	r1, #1024
 507 0036 2846     		mov	r0, r5
 508 0038 FFF7FEFF 		bl	HAL_GPIO_ReadPin
 509              	.LVL36:
 510              	.LBE50:
 511              	.LBE49:
 238:libs/nRF24/nRF24.c **** 
 512              		.loc 1 238 0
 513 003c 0443     		orrs	r4, r4, r0
 514              	.LVL37:
 515 003e E4B2     		uxtb	r4, r4
 516              	.LVL38:
 241:libs/nRF24/nRF24.c ****   }
 517              		.loc 1 241 0
 518 0040 FFF7FEFF 		bl	SPI_DELAY
 519              	.LVL39:
 221:libs/nRF24/nRF24.c ****   {
 520              		.loc 1 221 0
 521 0044 0136     		adds	r6, r6, #1
 522              	.LVL40:
 523              	.L46:
 221:libs/nRF24/nRF24.c ****   {
 524              		.loc 1 221 0 is_stmt 0 discriminator 1
 525 0046 072E     		cmp	r6, #7
 526 0048 E0DD     		ble	.L47
 527              	.LBE51:
 528              	.LBB52:
 529              	.LBB53:
ARM GAS  /tmp/ccvdf1ti.s 			page 15


  54:libs/nRF24/nRF24.c **** } 
 530              		.loc 1 54 0 is_stmt 1
 531 004a 0022     		movs	r2, #0
 532 004c 4FF48071 		mov	r1, #256
 533 0050 0248     		ldr	r0, .L49
 534 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 535              	.LVL41:
 536              	.LBE53:
 537              	.LBE52:
 247:libs/nRF24/nRF24.c ****   
 538              		.loc 1 247 0
 539 0056 2046     		mov	r0, r4
 540 0058 70BD     		pop	{r4, r5, r6, pc}
 541              	.LVL42:
 542              	.L50:
 543 005a 00BF     		.align	2
 544              	.L49:
 545 005c 00000240 		.word	1073872896
 546              		.cfi_endproc
 547              	.LFE140:
 549              		.section	.text.spi_read_register,"ax",%progbits
 550              		.align	1
 551              		.global	spi_read_register
 552              		.syntax unified
 553              		.thumb
 554              		.thumb_func
 555              		.fpu fpv4-sp-d16
 557              	spi_read_register:
 558              	.LFB142:
 261:libs/nRF24/nRF24.c **** }
 262:libs/nRF24/nRF24.c **** 
 263:libs/nRF24/nRF24.c **** 
 264:libs/nRF24/nRF24.c **** /**
 265:libs/nRF24/nRF24.c ****   * @brief      Read data from the SPI target device register. Endianess: LSByte first.
 266:libs/nRF24/nRF24.c ****   * @param[in]  reg SPI target device register to write to.
 267:libs/nRF24/nRF24.c ****   * @param[in]  num_bytes Number of bytes needed to write to that address.
 268:libs/nRF24/nRF24.c ****   * @param[out] p_read_data A pointer pointing to a memory location that can store the data read fr
 269:libs/nRF24/nRF24.c ****   * @retval     none.
 270:libs/nRF24/nRF24.c ****   */
 271:libs/nRF24/nRF24.c **** void spi_read_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_read_data)
 272:libs/nRF24/nRF24.c **** {
 559              		.loc 1 272 0
 560              		.cfi_startproc
 561              		@ args = 0, pretend = 0, frame = 0
 562              		@ frame_needed = 0, uses_anonymous_args = 0
 563              	.LVL43:
 564 0000 70B5     		push	{r4, r5, r6, lr}
 565              	.LCFI11:
 566              		.cfi_def_cfa_offset 16
 567              		.cfi_offset 4, -16
 568              		.cfi_offset 5, -12
 569              		.cfi_offset 6, -8
 570              		.cfi_offset 14, -4
 571 0002 0446     		mov	r4, r0
 572 0004 0D46     		mov	r5, r1
 573 0006 1646     		mov	r6, r2
 574              	.LBB54:
ARM GAS  /tmp/ccvdf1ti.s 			page 16


 575              	.LBB55:
  91:libs/nRF24/nRF24.c **** }
 576              		.loc 1 91 0
 577 0008 0022     		movs	r2, #0
 578              	.LVL44:
 579 000a 1021     		movs	r1, #16
 580              	.LVL45:
 581 000c 0948     		ldr	r0, .L55
 582              	.LVL46:
 583 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 584              	.LVL47:
 585              	.LBE55:
 586              	.LBE54:
 273:libs/nRF24/nRF24.c ****   /* SPI CHIP SELECT */
 274:libs/nRF24/nRF24.c ****   SPI_CS_1();
 275:libs/nRF24/nRF24.c ****   
 276:libs/nRF24/nRF24.c ****   /* Clock out first byte: target register to read. */
 277:libs/nRF24/nRF24.c ****   gpio_clockout_8_bits(reg);
 587              		.loc 1 277 0
 588 0012 2046     		mov	r0, r4
 589 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 590              	.LVL48:
 591              	.LBB56:
 278:libs/nRF24/nRF24.c **** 
 279:libs/nRF24/nRF24.c ****   /* Repeat for number of bytes. */
 280:libs/nRF24/nRF24.c ****   for (int i = 0; i < num_bytes; ++i) 
 592              		.loc 1 280 0
 593 0018 0024     		movs	r4, #0
 594 001a 03E0     		b	.L52
 595              	.LVL49:
 596              	.L53:
 281:libs/nRF24/nRF24.c ****   {
 282:libs/nRF24/nRF24.c ****     /* Clock in byte data from target register. */
 283:libs/nRF24/nRF24.c ****     p_read_data[i] = gpio_clockin_8_bits();
 597              		.loc 1 283 0 discriminator 3
 598 001c FFF7FEFF 		bl	gpio_clockin_8_bits
 599              	.LVL50:
 600 0020 3055     		strb	r0, [r6, r4]
 280:libs/nRF24/nRF24.c ****   {
 601              		.loc 1 280 0 discriminator 3
 602 0022 0134     		adds	r4, r4, #1
 603              	.LVL51:
 604              	.L52:
 280:libs/nRF24/nRF24.c ****   {
 605              		.loc 1 280 0 is_stmt 0 discriminator 1
 606 0024 AC42     		cmp	r4, r5
 607 0026 F9DB     		blt	.L53
 608              	.LBE56:
 609              	.LBB57:
 610              	.LBB58:
 104:libs/nRF24/nRF24.c **** }
 611              		.loc 1 104 0 is_stmt 1
 612 0028 0122     		movs	r2, #1
 613 002a 1021     		movs	r1, #16
 614 002c 0148     		ldr	r0, .L55
 615 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 616              	.LVL52:
ARM GAS  /tmp/ccvdf1ti.s 			page 17


 617 0032 70BD     		pop	{r4, r5, r6, pc}
 618              	.LVL53:
 619              	.L56:
 620              		.align	2
 621              	.L55:
 622 0034 00040240 		.word	1073873920
 623              	.LBE58:
 624              	.LBE57:
 625              		.cfi_endproc
 626              	.LFE142:
 628              		.section	.text.spi_write_register,"ax",%progbits
 629              		.align	1
 630              		.global	spi_write_register
 631              		.syntax unified
 632              		.thumb
 633              		.thumb_func
 634              		.fpu fpv4-sp-d16
 636              	spi_write_register:
 637              	.LFB143:
 284:libs/nRF24/nRF24.c ****   }
 285:libs/nRF24/nRF24.c ****   
 286:libs/nRF24/nRF24.c ****   /* SPI CHIP DESELECT */
 287:libs/nRF24/nRF24.c ****   SPI_CS_0();
 288:libs/nRF24/nRF24.c **** }
 289:libs/nRF24/nRF24.c **** 
 290:libs/nRF24/nRF24.c **** 
 291:libs/nRF24/nRF24.c **** /**
 292:libs/nRF24/nRF24.c ****   * @brief      Write a number of bytes to the spi target device register.
 293:libs/nRF24/nRF24.c ****   * @param[in]  reg            SPI target device register to write to.
 294:libs/nRF24/nRF24.c ****   * @param[in]  num_bytes      Number of bytes needed to write to that address.
 295:libs/nRF24/nRF24.c ****   * @param[in]  p_writing_data A pointer pointing to a memory location storing the data to write.
 296:libs/nRF24/nRF24.c ****   * @retval     None.
 297:libs/nRF24/nRF24.c ****   */
 298:libs/nRF24/nRF24.c **** void spi_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 299:libs/nRF24/nRF24.c **** {
 638              		.loc 1 299 0
 639              		.cfi_startproc
 640              		@ args = 0, pretend = 0, frame = 0
 641              		@ frame_needed = 0, uses_anonymous_args = 0
 642              	.LVL54:
 643 0000 70B5     		push	{r4, r5, r6, lr}
 644              	.LCFI12:
 645              		.cfi_def_cfa_offset 16
 646              		.cfi_offset 4, -16
 647              		.cfi_offset 5, -12
 648              		.cfi_offset 6, -8
 649              		.cfi_offset 14, -4
 650 0002 0446     		mov	r4, r0
 651 0004 0D46     		mov	r5, r1
 652 0006 1646     		mov	r6, r2
 653              	.LBB59:
 654              	.LBB60:
  91:libs/nRF24/nRF24.c **** }
 655              		.loc 1 91 0
 656 0008 0022     		movs	r2, #0
 657              	.LVL55:
 658 000a 1021     		movs	r1, #16
ARM GAS  /tmp/ccvdf1ti.s 			page 18


 659              	.LVL56:
 660 000c 0948     		ldr	r0, .L61
 661              	.LVL57:
 662 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 663              	.LVL58:
 664              	.LBE60:
 665              	.LBE59:
 300:libs/nRF24/nRF24.c ****   /* SPI CHIP SELECT */
 301:libs/nRF24/nRF24.c ****   SPI_CS_1();
 302:libs/nRF24/nRF24.c **** 
 303:libs/nRF24/nRF24.c ****   /* Clock out first byte: target register to write. */
 304:libs/nRF24/nRF24.c ****   gpio_clockout_8_bits(reg); 
 666              		.loc 1 304 0
 667 0012 2046     		mov	r0, r4
 668 0014 FFF7FEFF 		bl	gpio_clockout_8_bits
 669              	.LVL59:
 670              	.LBB61:
 305:libs/nRF24/nRF24.c **** 
 306:libs/nRF24/nRF24.c ****   /* Repeat for total number of bytes to write. */
 307:libs/nRF24/nRF24.c ****   for (int i = 0; i < num_bytes; ++i)
 671              		.loc 1 307 0
 672 0018 0024     		movs	r4, #0
 673 001a 03E0     		b	.L58
 674              	.LVL60:
 675              	.L59:
 676              	.LBB62:
 308:libs/nRF24/nRF24.c ****   {
 309:libs/nRF24/nRF24.c ****     uint8_t writing_byte = p_writing_data[i];
 310:libs/nRF24/nRF24.c ****     /* Clock out data to the target register. */
 311:libs/nRF24/nRF24.c ****     gpio_clockout_8_bits(writing_byte);
 677              		.loc 1 311 0 discriminator 3
 678 001c 305D     		ldrb	r0, [r6, r4]	@ zero_extendqisi2
 679 001e FFF7FEFF 		bl	gpio_clockout_8_bits
 680              	.LVL61:
 681              	.LBE62:
 307:libs/nRF24/nRF24.c ****   {
 682              		.loc 1 307 0 discriminator 3
 683 0022 0134     		adds	r4, r4, #1
 684              	.LVL62:
 685              	.L58:
 307:libs/nRF24/nRF24.c ****   {
 686              		.loc 1 307 0 is_stmt 0 discriminator 1
 687 0024 AC42     		cmp	r4, r5
 688 0026 F9DB     		blt	.L59
 689              	.LBE61:
 690              	.LBB63:
 691              	.LBB64:
 104:libs/nRF24/nRF24.c **** }
 692              		.loc 1 104 0 is_stmt 1
 693 0028 0122     		movs	r2, #1
 694 002a 1021     		movs	r1, #16
 695 002c 0148     		ldr	r0, .L61
 696 002e FFF7FEFF 		bl	HAL_GPIO_WritePin
 697              	.LVL63:
 698 0032 70BD     		pop	{r4, r5, r6, pc}
 699              	.LVL64:
 700              	.L62:
ARM GAS  /tmp/ccvdf1ti.s 			page 19


 701              		.align	2
 702              	.L61:
 703 0034 00040240 		.word	1073873920
 704              	.LBE64:
 705              	.LBE63:
 706              		.cfi_endproc
 707              	.LFE143:
 709              		.section	.text.nRF24_CE_1,"ax",%progbits
 710              		.align	1
 711              		.global	nRF24_CE_1
 712              		.syntax unified
 713              		.thumb
 714              		.thumb_func
 715              		.fpu fpv4-sp-d16
 717              	nRF24_CE_1:
 718              	.LFB144:
 312:libs/nRF24/nRF24.c ****   }
 313:libs/nRF24/nRF24.c **** 
 314:libs/nRF24/nRF24.c ****   /* SPI CHIP DESELECT */
 315:libs/nRF24/nRF24.c ****   SPI_CS_0();
 316:libs/nRF24/nRF24.c **** }
 317:libs/nRF24/nRF24.c **** 
 318:libs/nRF24/nRF24.c **** 
 319:libs/nRF24/nRF24.c **** /* nRF24 Data-Link Layer Operations ---------------------------------------------------------------
 320:libs/nRF24/nRF24.c **** 
 321:libs/nRF24/nRF24.c **** /**
 322:libs/nRF24/nRF24.c ****   * @brief  Set high on Chip-Enable pin of nRF24L01.
 323:libs/nRF24/nRF24.c ****   * @param  None.
 324:libs/nRF24/nRF24.c ****   * @retval None.
 325:libs/nRF24/nRF24.c ****   */
 326:libs/nRF24/nRF24.c **** void nRF24_CE_1()
 327:libs/nRF24/nRF24.c **** {
 719              		.loc 1 327 0
 720              		.cfi_startproc
 721              		@ args = 0, pretend = 0, frame = 0
 722              		@ frame_needed = 0, uses_anonymous_args = 0
 723 0000 08B5     		push	{r3, lr}
 724              	.LCFI13:
 725              		.cfi_def_cfa_offset 8
 726              		.cfi_offset 3, -8
 727              		.cfi_offset 14, -4
 328:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);  
 728              		.loc 1 328 0
 729 0002 0122     		movs	r2, #1
 730 0004 2021     		movs	r1, #32
 731 0006 0248     		ldr	r0, .L65
 732 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 733              	.LVL65:
 734 000c 08BD     		pop	{r3, pc}
 735              	.L66:
 736 000e 00BF     		.align	2
 737              	.L65:
 738 0010 00040240 		.word	1073873920
 739              		.cfi_endproc
 740              	.LFE144:
 742              		.section	.text.nRF24_CE_0,"ax",%progbits
 743              		.align	1
ARM GAS  /tmp/ccvdf1ti.s 			page 20


 744              		.global	nRF24_CE_0
 745              		.syntax unified
 746              		.thumb
 747              		.thumb_func
 748              		.fpu fpv4-sp-d16
 750              	nRF24_CE_0:
 751              	.LFB145:
 329:libs/nRF24/nRF24.c **** }
 330:libs/nRF24/nRF24.c **** 
 331:libs/nRF24/nRF24.c **** 
 332:libs/nRF24/nRF24.c **** /**
 333:libs/nRF24/nRF24.c ****   * @brief  Set low on Chip-Enable pin of nRF24L01.
 334:libs/nRF24/nRF24.c ****   * @param  None.
 335:libs/nRF24/nRF24.c ****   * @retval None.
 336:libs/nRF24/nRF24.c ****   */
 337:libs/nRF24/nRF24.c **** void nRF24_CE_0()
 338:libs/nRF24/nRF24.c **** {
 752              		.loc 1 338 0
 753              		.cfi_startproc
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756 0000 08B5     		push	{r3, lr}
 757              	.LCFI14:
 758              		.cfi_def_cfa_offset 8
 759              		.cfi_offset 3, -8
 760              		.cfi_offset 14, -4
 339:libs/nRF24/nRF24.c ****     HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 761              		.loc 1 339 0
 762 0002 0022     		movs	r2, #0
 763 0004 2021     		movs	r1, #32
 764 0006 0248     		ldr	r0, .L69
 765 0008 FFF7FEFF 		bl	HAL_GPIO_WritePin
 766              	.LVL66:
 767 000c 08BD     		pop	{r3, pc}
 768              	.L70:
 769 000e 00BF     		.align	2
 770              	.L69:
 771 0010 00040240 		.word	1073873920
 772              		.cfi_endproc
 773              	.LFE145:
 775              		.section	.text.nRF24_verified_write_register,"ax",%progbits
 776              		.align	1
 777              		.global	nRF24_verified_write_register
 778              		.syntax unified
 779              		.thumb
 780              		.thumb_func
 781              		.fpu fpv4-sp-d16
 783              	nRF24_verified_write_register:
 784              	.LFB146:
 340:libs/nRF24/nRF24.c **** }
 341:libs/nRF24/nRF24.c **** 
 342:libs/nRF24/nRF24.c **** 
 343:libs/nRF24/nRF24.c **** /**
 344:libs/nRF24/nRF24.c ****   * @brief      Write to a register on nRF24L01+ through SPI. Read the same registers after write t
 345:libs/nRF24/nRF24.c ****   *               This function seems to waste cycles but SPI communication issues expose immediate
 346:libs/nRF24/nRF24.c ****   * @param[in]  reg            The target register to write value to.
 347:libs/nRF24/nRF24.c ****   * @param[in]  num_bytes      Number of bytes to write.
ARM GAS  /tmp/ccvdf1ti.s 			page 21


 348:libs/nRF24/nRF24.c ****   * @param[in]  p_writing_data Pointer to the data to write.
 349:libs/nRF24/nRF24.c ****   * @retval     Boolean. 1 for mistakes happen. 0 for success.
 350:libs/nRF24/nRF24.c ****   * @note       reg & ~ W_REGISTER_MASK is the reverse operation of reg | W_REGISTER_MASK,
 351:libs/nRF24/nRF24.c ****   *               essentially get rid of Write Regiter Mask and add a Read Register Mask. 
 352:libs/nRF24/nRF24.c ****   *             See section 8.3.1 SPI commands in nRF24L01+ Product Specification for details.
 353:libs/nRF24/nRF24.c ****   */
 354:libs/nRF24/nRF24.c **** bool nRF24_verified_write_register(uint8_t reg, uint8_t num_bytes, uint8_t* p_writing_data)
 355:libs/nRF24/nRF24.c **** {
 785              		.loc 1 355 0
 786              		.cfi_startproc
 787              		@ args = 0, pretend = 0, frame = 256
 788              		@ frame_needed = 1, uses_anonymous_args = 0
 789              	.LVL67:
 790 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 791              	.LCFI15:
 792              		.cfi_def_cfa_offset 32
 793              		.cfi_offset 4, -32
 794              		.cfi_offset 5, -28
 795              		.cfi_offset 6, -24
 796              		.cfi_offset 7, -20
 797              		.cfi_offset 8, -16
 798              		.cfi_offset 9, -12
 799              		.cfi_offset 10, -8
 800              		.cfi_offset 14, -4
 801 0004 C0B0     		sub	sp, sp, #256
 802              	.LCFI16:
 803              		.cfi_def_cfa_offset 288
 804 0006 00AF     		add	r7, sp, #0
 805              	.LCFI17:
 806              		.cfi_def_cfa_register 7
 807 0008 0546     		mov	r5, r0
 808 000a 0C46     		mov	r4, r1
 809 000c 9046     		mov	r8, r2
 356:libs/nRF24/nRF24.c **** 
 357:libs/nRF24/nRF24.c ****     char message[256];
 358:libs/nRF24/nRF24.c ****     uint8_t read_data[num_bytes];
 810              		.loc 1 358 0
 811 000e 8A46     		mov	r10, r1
 812              	.LVL68:
 813 0010 CB1D     		adds	r3, r1, #7
 814 0012 23F00703 		bic	r3, r3, #7
 815 0016 ADEB030D 		sub	sp, sp, r3
 816 001a E946     		mov	r9, sp
 817              	.LVL69:
 359:libs/nRF24/nRF24.c **** 
 360:libs/nRF24/nRF24.c ****     /* Write the data to target register. */
 361:libs/nRF24/nRF24.c ****     spi_write_register(reg, num_bytes, p_writing_data); 
 818              		.loc 1 361 0
 819 001c FFF7FEFF 		bl	spi_write_register
 820              	.LVL70:
 362:libs/nRF24/nRF24.c **** 
 363:libs/nRF24/nRF24.c ****     /* Read from same target register to verify if data has been successfully written. */
 364:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK | (reg & ~W_REGISTER_MASK), num_bytes, read_data);
 821              		.loc 1 364 0
 822 0020 6A46     		mov	r2, sp
 823 0022 2146     		mov	r1, r4
 824 0024 05F0DF00 		and	r0, r5, #223
ARM GAS  /tmp/ccvdf1ti.s 			page 22


 825 0028 FFF7FEFF 		bl	spi_read_register
 826              	.LVL71:
 827              	.LBB74:
 365:libs/nRF24/nRF24.c ****     
 366:libs/nRF24/nRF24.c ****     /* For each byte, check mismatch between written data and read data from target register. */
 367:libs/nRF24/nRF24.c ****     for (int i = 0; i < num_bytes; ++i) 
 828              		.loc 1 367 0
 829 002c 0026     		movs	r6, #0
 830              	.LVL72:
 831              	.L72:
 832              		.loc 1 367 0 is_stmt 0 discriminator 1
 833 002e 5645     		cmp	r6, r10
 834 0030 59DA     		bge	.L77
 368:libs/nRF24/nRF24.c ****     {
 369:libs/nRF24/nRF24.c ****       if (read_data[i] != p_writing_data[i])  
 835              		.loc 1 369 0 is_stmt 1
 836 0032 19F80620 		ldrb	r2, [r9, r6]	@ zero_extendqisi2
 837 0036 08EB0604 		add	r4, r8, r6
 838 003a 18F80630 		ldrb	r3, [r8, r6]	@ zero_extendqisi2
 839 003e 9A42     		cmp	r2, r3
 840 0040 27D1     		bne	.L78
 370:libs/nRF24/nRF24.c ****       {
 371:libs/nRF24/nRF24.c ****         #ifdef NRF24_DEBUG
 372:libs/nRF24/nRF24.c ****         strcpy(message, "Problem writing to nRF24 register -- ");
 373:libs/nRF24/nRF24.c ****         serial_print(message);
 374:libs/nRF24/nRF24.c ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 375:libs/nRF24/nRF24.c ****         serial_print(message);
 376:libs/nRF24/nRF24.c ****         #endif 
 377:libs/nRF24/nRF24.c ****         return true;
 378:libs/nRF24/nRF24.c ****       } else {
 379:libs/nRF24/nRF24.c ****         #ifdef NRF24_DEBUG
 380:libs/nRF24/nRF24.c ****         strcpy(message, "Success writing to nRF24 register -- ");
 841              		.loc 1 380 0 discriminator 2
 842 0042 3C46     		mov	r4, r7
 843 0044 2B4D     		ldr	r5, .L79
 844 0046 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 845 0048 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 846 004a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 847 004c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 848 004e 95E80300 		ldm	r5, {r0, r1}
 849 0052 44F8040B 		str	r0, [r4], #4
 850 0056 2180     		strh	r1, [r4]	@ movhi
 851              	.LVL73:
 852              	.LBB75:
 853              	.LBB76:
 130:libs/nRF24/nRF24.c **** }
 854              		.loc 1 130 0 discriminator 2
 855 0058 3846     		mov	r0, r7
 856              	.LVL74:
 857 005a FFF7FEFF 		bl	strlen
 858              	.LVL75:
 859 005e 264C     		ldr	r4, .L79+4
 860              	.LVL76:
 861 0060 6423     		movs	r3, #100
 862 0062 82B2     		uxth	r2, r0
 863 0064 3946     		mov	r1, r7
 864              	.LVL77:
ARM GAS  /tmp/ccvdf1ti.s 			page 23


 865 0066 2046     		mov	r0, r4
 866 0068 FFF7FEFF 		bl	HAL_UART_Transmit
 867              	.LVL78:
 868              	.LBE76:
 869              	.LBE75:
 381:libs/nRF24/nRF24.c ****         serial_print(message);
 382:libs/nRF24/nRF24.c ****         sprintf(message, "writing data: <%#02x> read_data: <%#02x>\n", p_writing_data[i], read_data
 870              		.loc 1 382 0 discriminator 2
 871 006c 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 872 0070 18F80620 		ldrb	r2, [r8, r6]	@ zero_extendqisi2
 873 0074 2149     		ldr	r1, .L79+8
 874 0076 3846     		mov	r0, r7
 875 0078 FFF7FEFF 		bl	sprintf
 876              	.LVL79:
 877              	.LBB77:
 878              	.LBB78:
 130:libs/nRF24/nRF24.c **** }
 879              		.loc 1 130 0 discriminator 2
 880 007c 3846     		mov	r0, r7
 881              	.LVL80:
 882 007e FFF7FEFF 		bl	strlen
 883              	.LVL81:
 884 0082 6423     		movs	r3, #100
 885 0084 82B2     		uxth	r2, r0
 886 0086 3946     		mov	r1, r7
 887              	.LVL82:
 888 0088 2046     		mov	r0, r4
 889 008a FFF7FEFF 		bl	HAL_UART_Transmit
 890              	.LVL83:
 891              	.LBE78:
 892              	.LBE77:
 367:libs/nRF24/nRF24.c ****     {
 893              		.loc 1 367 0 discriminator 2
 894 008e 0136     		adds	r6, r6, #1
 895              	.LVL84:
 896 0090 CDE7     		b	.L72
 897              	.L78:
 372:libs/nRF24/nRF24.c ****         serial_print(message);
 898              		.loc 1 372 0
 899 0092 3D46     		mov	r5, r7
 900 0094 DFF868E0 		ldr	lr, .L79+12
 901 0098 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 902 009c 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 903 009e BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 904 00a2 0FC5     		stmia	r5!, {r0, r1, r2, r3}
 905 00a4 9EE80300 		ldm	lr, {r0, r1}
 906 00a8 45F8040B 		str	r0, [r5], #4
 907 00ac 2980     		strh	r1, [r5]	@ movhi
 908              	.LVL85:
 909              	.LBB79:
 910              	.LBB80:
 130:libs/nRF24/nRF24.c **** }
 911              		.loc 1 130 0
 912 00ae 3846     		mov	r0, r7
 913              	.LVL86:
 914 00b0 FFF7FEFF 		bl	strlen
 915              	.LVL87:
ARM GAS  /tmp/ccvdf1ti.s 			page 24


 916 00b4 104D     		ldr	r5, .L79+4
 917              	.LVL88:
 918 00b6 6423     		movs	r3, #100
 919 00b8 82B2     		uxth	r2, r0
 920 00ba 3946     		mov	r1, r7
 921              	.LVL89:
 922 00bc 2846     		mov	r0, r5
 923 00be FFF7FEFF 		bl	HAL_UART_Transmit
 924              	.LVL90:
 925              	.LBE80:
 926              	.LBE79:
 374:libs/nRF24/nRF24.c ****         serial_print(message);
 927              		.loc 1 374 0
 928 00c2 19F80630 		ldrb	r3, [r9, r6]	@ zero_extendqisi2
 929 00c6 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 930 00c8 0C49     		ldr	r1, .L79+8
 931 00ca 3846     		mov	r0, r7
 932 00cc FFF7FEFF 		bl	sprintf
 933              	.LVL91:
 934              	.LBB81:
 935              	.LBB82:
 130:libs/nRF24/nRF24.c **** }
 936              		.loc 1 130 0
 937 00d0 3846     		mov	r0, r7
 938              	.LVL92:
 939 00d2 FFF7FEFF 		bl	strlen
 940              	.LVL93:
 941 00d6 6423     		movs	r3, #100
 942 00d8 82B2     		uxth	r2, r0
 943 00da 3946     		mov	r1, r7
 944              	.LVL94:
 945 00dc 2846     		mov	r0, r5
 946 00de FFF7FEFF 		bl	HAL_UART_Transmit
 947              	.LVL95:
 948              	.LBE82:
 949              	.LBE81:
 377:libs/nRF24/nRF24.c ****       } else {
 950              		.loc 1 377 0
 951 00e2 0120     		movs	r0, #1
 952 00e4 00E0     		b	.L74
 953              	.LVL96:
 954              	.L77:
 955              	.LBE74:
 383:libs/nRF24/nRF24.c ****         serial_print(message);
 384:libs/nRF24/nRF24.c ****         #endif
 385:libs/nRF24/nRF24.c ****       }
 386:libs/nRF24/nRF24.c ****   }
 387:libs/nRF24/nRF24.c ****   return false;
 956              		.loc 1 387 0
 957 00e6 0020     		movs	r0, #0
 958              	.L74:
 388:libs/nRF24/nRF24.c **** }
 959              		.loc 1 388 0
 960 00e8 07F58077 		add	r7, r7, #256
 961              	.LCFI18:
 962              		.cfi_def_cfa_offset 32
 963 00ec BD46     		mov	sp, r7
ARM GAS  /tmp/ccvdf1ti.s 			page 25


 964              	.LCFI19:
 965              		.cfi_def_cfa_register 13
 966              		@ sp needed
 967 00ee BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 968              	.LVL97:
 969              	.L80:
 970 00f2 00BF     		.align	2
 971              	.L79:
 972 00f4 54000000 		.word	.LC4
 973 00f8 00000000 		.word	huart2
 974 00fc 28000000 		.word	.LC3
 975 0100 00000000 		.word	.LC2
 976              		.cfi_endproc
 977              	.LFE146:
 979              		.section	.text.print_bytearray,"ax",%progbits
 980              		.align	1
 981              		.global	print_bytearray
 982              		.syntax unified
 983              		.thumb
 984              		.thumb_func
 985              		.fpu fpv4-sp-d16
 987              	print_bytearray:
 988              	.LFB152:
 389:libs/nRF24/nRF24.c **** 
 390:libs/nRF24/nRF24.c **** 
 391:libs/nRF24/nRF24.c **** /**  
 392:libs/nRF24/nRF24.c ****  *  @brief  Test nRF24 transmitter function without a receiver. 
 393:libs/nRF24/nRF24.c ****  *          In the project, we always make sure that TX is working before RX.
 394:libs/nRF24/nRF24.c ****  *          Thus use this function on a fresh setup of the nRF24 modules.
 395:libs/nRF24/nRF24.c ****  *  @param  None.
 396:libs/nRF24/nRF24.c ****  *  @retval None.
 397:libs/nRF24/nRF24.c ****  *  @note  
 398:libs/nRF24/nRF24.c ****  *      Steps: 1. Disable Auto Acknowledgement, disable Auto Retransmit. 
 399:libs/nRF24/nRF24.c ****  *                The reason to disable them is that if they are enabled, ShockBurst mode is on.
 400:libs/nRF24/nRF24.c ****  *                Without a usable receiver, it cannot be determined if the transceiver is working 
 401:libs/nRF24/nRF24.c ****  *             2. TX_DS (in STATUS register) is expected to be set when data has been clock into TX
 402:libs/nRF24/nRF24.c ****  *             3. Check if STATUS = 0x2E, if so we have a working TX module.
 403:libs/nRF24/nRF24.c ****  *            
 404:libs/nRF24/nRF24.c ****  *            After writing to W_TX_PAYLOAD, TX_EMPTY (in FIFO_STATUS register) becomes 0.
 405:libs/nRF24/nRF24.c ****  *            
 406:libs/nRF24/nRF24.c ****  *            What happens if sending is not successful?
 407:libs/nRF24/nRF24.c ****  *            TX_FULL (in FIFO_STATUS register) becomes 1.
 408:libs/nRF24/nRF24.c ****  *            TX_FULL (in STATUS register) becomes 1.
 409:libs/nRF24/nRF24.c ****  *            TX_DS (in STATUS register) remains 0.  
 410:libs/nRF24/nRF24.c ****  *
 411:libs/nRF24/nRF24.c ****  *      States: 
 412:libs/nRF24/nRF24.c ****  *            The states can be referred in 6.1.1 State diagram.
 413:libs/nRF24/nRF24.c ****  *      
 414:libs/nRF24/nRF24.c ****  *      STATUS register
 415:libs/nRF24/nRF24.c ****  *                7             6           5         4         3:1         0
 416:libs/nRF24/nRF24.c ****  *            <reserved>      RX_DR       TX_DS     MAX_RT     RX_P_NO     TX_FULL
 417:libs/nRF24/nRF24.c ****  *            -----------------------------------------------------------------------
 418:libs/nRF24/nRF24.c ****  *             Always 0       Receive     Transfer  Maximum    000-101 :    1: 
 419:libs/nRF24/nRF24.c ****  *                            Data        Data      TX         Data Pipe #  TX_FULL
 420:libs/nRF24/nRF24.c ****  *                            Ready       Sent      Transmits  110 :
 421:libs/nRF24/nRF24.c ****  *                                                             Not Used.
 422:libs/nRF24/nRF24.c ****  *                                                             111:
ARM GAS  /tmp/ccvdf1ti.s 			page 26


 423:libs/nRF24/nRF24.c ****  *                                                             RX FIFO Empty.
 424:libs/nRF24/nRF24.c ****  */
 425:libs/nRF24/nRF24.c **** void nRF24_tx_self_test() 
 426:libs/nRF24/nRF24.c **** {
 427:libs/nRF24/nRF24.c ****   char message[256];
 428:libs/nRF24/nRF24.c ****   uint8_t writing_byte;
 429:libs/nRF24/nRF24.c **** 
 430:libs/nRF24/nRF24.c ****   #ifdef NRF24_DEBUG
 431:libs/nRF24/nRF24.c ****   strcpy(message, "---- nrf24 tx self test. ----\n");
 432:libs/nRF24/nRF24.c ****   serial_print(message);
 433:libs/nRF24/nRF24.c **** 
 434:libs/nRF24/nRF24.c ****   strcpy(message, "---- This test to verifies function of a tranmitter send without a receiver. ---
 435:libs/nRF24/nRF24.c ****   serial_print(message);
 436:libs/nRF24/nRF24.c ****   #endif
 437:libs/nRF24/nRF24.c **** 
 438:libs/nRF24/nRF24.c ****   uint8_t nRF24_status = 0x00;
 439:libs/nRF24/nRF24.c **** 
 440:libs/nRF24/nRF24.c ****   // Note that if we reset the nRF connected without re-poweron the chip, initial value of register
 441:libs/nRF24/nRF24.c ****   /* Current State: [Power-on reset 100 ms] */
 442:libs/nRF24/nRF24.c ****   nRF24_CE_0();
 443:libs/nRF24/nRF24.c **** 
 444:libs/nRF24/nRF24.c ****   /* Current State: [Power-Down] (RF transmission is Power-Down, but SPI is alive.) */
 445:libs/nRF24/nRF24.c ****   writing_byte = 0x00;
 446:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
 447:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
 448:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 449:libs/nRF24/nRF24.c **** 
 450:libs/nRF24/nRF24.c ****   writing_byte = 0x0E;
 451:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
 452:libs/nRF24/nRF24.c **** 
 453:libs/nRF24/nRF24.c ****   /* PWR_UP=1, state transition to [Standby-I] */
 454:libs/nRF24/nRF24.c ****   uint8_t test_payload[4] = {0xC0, 0xC0, 0xCA, 0xFE}; // clock out a payload, now TX FIFO not empty
 455:libs/nRF24/nRF24.c ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 456:libs/nRF24/nRF24.c ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 457:libs/nRF24/nRF24.c ****   
 458:libs/nRF24/nRF24.c ****   /* TX FIFO not empty AND CE = 1, state transition to [TX MODE] */
 459:libs/nRF24/nRF24.c ****   /* Get nRF24 <STATUS> register value. */
 460:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &nRF24_status);
 461:libs/nRF24/nRF24.c **** 
 462:libs/nRF24/nRF24.c ****   SPI_DELAY(1);
 463:libs/nRF24/nRF24.c **** 
 464:libs/nRF24/nRF24.c ****   /* CE=0, state transition -> now return to [Standby-I]. */
 465:libs/nRF24/nRF24.c ****   nRF24_CE_0();
 466:libs/nRF24/nRF24.c **** 
 467:libs/nRF24/nRF24.c ****   /* Now check test result. */
 468:libs/nRF24/nRF24.c ****   if (nRF24_status & 0x2E) 
 469:libs/nRF24/nRF24.c ****   {
 470:libs/nRF24/nRF24.c ****     #ifdef NRF24_DEBUG
 471:libs/nRF24/nRF24.c ****     strcpy(message, "\n > nRF24 transmission self-test has passed. \
 472:libs/nRF24/nRF24.c ****                        <STATUS> has value of 0x2E. \
 473:libs/nRF24/nRF24.c ****                        TX_DS (transfer data sent) was set. \
 474:libs/nRF24/nRF24.c ****                        RX_P_NO = 111, this means RX FIFO Empty. \n");
 475:libs/nRF24/nRF24.c ****     serial_print(message);
 476:libs/nRF24/nRF24.c ****     #endif
 477:libs/nRF24/nRF24.c ****   } 
 478:libs/nRF24/nRF24.c ****   else 
 479:libs/nRF24/nRF24.c ****   {
ARM GAS  /tmp/ccvdf1ti.s 			page 27


 480:libs/nRF24/nRF24.c ****     #ifdef NRF24_DEBUG
 481:libs/nRF24/nRF24.c ****     sprintf(message, "\n > nRF24 transmission self-test has failed. <STATUS> is expected 0x2E. Curr
 482:libs/nRF24/nRF24.c ****     serial_print(message);
 483:libs/nRF24/nRF24.c ****     #endif
 484:libs/nRF24/nRF24.c ****   }
 485:libs/nRF24/nRF24.c **** 
 486:libs/nRF24/nRF24.c ****   /* (!) The above code already determined if the chip works in TX mode.*/
 487:libs/nRF24/nRF24.c ****   /* The following code keeps sending the payload in a while loop. Comment below out if we don't ne
 488:libs/nRF24/nRF24.c ****   /* The following code will be useful when we are testing a receiver board. */
 489:libs/nRF24/nRF24.c ****   /* clock out a four-byte payload "C0C0 CAFE" */
 490:libs/nRF24/nRF24.c ****   while(1) 
 491:libs/nRF24/nRF24.c ****   {
 492:libs/nRF24/nRF24.c ****     uint8_t payload[] = {0xC0, 0xC0, 0xCA, 0xFE}; 
 493:libs/nRF24/nRF24.c **** 
 494:libs/nRF24/nRF24.c ****     spi_write_register(W_TX_PAYLOAD, 4, (uint8_t*) payload);
 495:libs/nRF24/nRF24.c **** 
 496:libs/nRF24/nRF24.c ****     /* Fire out the transmit packet */
 497:libs/nRF24/nRF24.c ****     nRF24_CE_1(); 
 498:libs/nRF24/nRF24.c **** 
 499:libs/nRF24/nRF24.c ****     /* read <STATUS> register*/
 500:libs/nRF24/nRF24.c ****     uint8_t status;
 501:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 502:libs/nRF24/nRF24.c **** 
 503:libs/nRF24/nRF24.c ****     #ifdef NRF24_DEBUG
 504:libs/nRF24/nRF24.c ****     sprintf(message, "<STATUS> REGISTER : %#02x\n", status);
 505:libs/nRF24/nRF24.c ****     serial_print(message);
 506:libs/nRF24/nRF24.c ****     #endif
 507:libs/nRF24/nRF24.c **** 
 508:libs/nRF24/nRF24.c ****     if (status == 0x2e) /* TX_DS bit is set. */
 509:libs/nRF24/nRF24.c ****     {
 510:libs/nRF24/nRF24.c ****       #ifdef NRF24_DEBUG
 511:libs/nRF24/nRF24.c ****       strcpy(message, "nRF24 send status - success -\n");
 512:libs/nRF24/nRF24.c ****       serial_print(message);
 513:libs/nRF24/nRF24.c ****       #endif
 514:libs/nRF24/nRF24.c ****     } 
 515:libs/nRF24/nRF24.c ****     else 
 516:libs/nRF24/nRF24.c ****     {
 517:libs/nRF24/nRF24.c ****       #ifdef NRF24_DEBUG
 518:libs/nRF24/nRF24.c ****       strcpy(message, "nRF24 send status - failure -\n");
 519:libs/nRF24/nRF24.c ****       serial_print(message);
 520:libs/nRF24/nRF24.c ****       #endif
 521:libs/nRF24/nRF24.c ****     }
 522:libs/nRF24/nRF24.c **** 
 523:libs/nRF24/nRF24.c ****     /* write 1 to <STATUS> register to clear TX_DS, TX_DS bit is Write-to-Clear. */
 524:libs/nRF24/nRF24.c ****     nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 525:libs/nRF24/nRF24.c **** 
 526:libs/nRF24/nRF24.c ****     nRF24_CE_0(); /* stop transmission. Returns to [Standby-I]. */
 527:libs/nRF24/nRF24.c ****   }
 528:libs/nRF24/nRF24.c ****   
 529:libs/nRF24/nRF24.c **** }
 530:libs/nRF24/nRF24.c **** 
 531:libs/nRF24/nRF24.c **** 
 532:libs/nRF24/nRF24.c **** /**
 533:libs/nRF24/nRF24.c ****   * @brief  Send packet with nRF24.
 534:libs/nRF24/nRF24.c ****   * @param  tx_payload_width. Length of data packet to send to the receiver. 
 535:libs/nRF24/nRF24.c ****               (!) tx_payload_width Must be the same value as the receiver's <RX_PW_Px>. x being the
 536:libs/nRF24/nRF24.c ****   * @param  payload Pointer to the actual data packet being sent to the receiver.
ARM GAS  /tmp/ccvdf1ti.s 			page 28


 537:libs/nRF24/nRF24.c ****   * @retval None.
 538:libs/nRF24/nRF24.c ****   * @note   Call nRF24_configure_tx_mode() before this test to initailize TX mode in nRF24L01+.
 539:libs/nRF24/nRF24.c ****   */
 540:libs/nRF24/nRF24.c **** void nRF24_send_packet(uint8_t tx_payload_width, uint8_t* p_payload) 
 541:libs/nRF24/nRF24.c **** {
 542:libs/nRF24/nRF24.c **** 
 543:libs/nRF24/nRF24.c ****   char message[64];
 544:libs/nRF24/nRF24.c ****       
 545:libs/nRF24/nRF24.c ****   /* clock out the packet to TX FIFO*/
 546:libs/nRF24/nRF24.c ****   nRF24_release_payload(tx_payload_width, p_payload);
 547:libs/nRF24/nRF24.c **** 
 548:libs/nRF24/nRF24.c ****   /* Fire out the transmit packet */
 549:libs/nRF24/nRF24.c ****   nRF24_CE_1(); 
 550:libs/nRF24/nRF24.c **** 
 551:libs/nRF24/nRF24.c ****   /* read <STATUS> register*/
 552:libs/nRF24/nRF24.c ****   uint8_t status;
 553:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 554:libs/nRF24/nRF24.c **** 
 555:libs/nRF24/nRF24.c ****   /* print <STATUS> register*/
 556:libs/nRF24/nRF24.c ****   #ifdef NRF24_DEBUG
 557:libs/nRF24/nRF24.c ****   sprintf(message, "<STATUS> REGISTER : %#02x\n", status);
 558:libs/nRF24/nRF24.c ****   serial_print(message);
 559:libs/nRF24/nRF24.c ****   #endif
 560:libs/nRF24/nRF24.c **** 
 561:libs/nRF24/nRF24.c ****   /* Verify if TX_DS bit is set in <STATUS> */
 562:libs/nRF24/nRF24.c ****   if (status == 0x2e) /* TX_DS_MASK1 = 1 << 5 = 0x20 */
 563:libs/nRF24/nRF24.c ****   {
 564:libs/nRF24/nRF24.c ****     #ifdef NRF24_DEBUG
 565:libs/nRF24/nRF24.c ****     strcpy(message, "nRF24 send status - success -\n");
 566:libs/nRF24/nRF24.c ****     serial_print(message);
 567:libs/nRF24/nRF24.c ****     #endif
 568:libs/nRF24/nRF24.c ****   } 
 569:libs/nRF24/nRF24.c ****   else 
 570:libs/nRF24/nRF24.c ****   {
 571:libs/nRF24/nRF24.c ****     #ifdef NRF24_DEBUG
 572:libs/nRF24/nRF24.c ****     strcpy(message, "nRF24 send status - failure -\n");
 573:libs/nRF24/nRF24.c ****     serial_print(message);
 574:libs/nRF24/nRF24.c ****     #endif
 575:libs/nRF24/nRF24.c ****   }
 576:libs/nRF24/nRF24.c **** 
 577:libs/nRF24/nRF24.c ****   /* write 1 to <STATUS> register to clear TX_DS, TX_DS bit is Write-to-Clear. */
 578:libs/nRF24/nRF24.c ****   nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 579:libs/nRF24/nRF24.c **** 
 580:libs/nRF24/nRF24.c ****   /* Stop transmission. Returns to [Standby-I]. */
 581:libs/nRF24/nRF24.c ****   nRF24_CE_0(); 
 582:libs/nRF24/nRF24.c **** }
 583:libs/nRF24/nRF24.c **** 
 584:libs/nRF24/nRF24.c **** /**
 585:libs/nRF24/nRF24.c ****   * @brief  Configure nRF24L01+ in TX mode without Enhanced ShockBurst.
 586:libs/nRF24/nRF24.c ****   *           Without Enhanced ShockBurst, Auto Acknowledgement and Auto-Retransmission is masked o
 587:libs/nRF24/nRF24.c ****   *           The TX nRF transmit is successful by detecting 1 on TX_DS field in <STATUS> register.
 588:libs/nRF24/nRF24.c ****   *           TX is successful even if there's no presense or acknowledge from an RX nRF.
 589:libs/nRF24/nRF24.c ****   *         (!) Auto Acknowledgement must also be masked off on the RX nRF24 in order for it to rec
 590:libs/nRF24/nRF24.c ****   *           If RX nRF has different setting in parameters (expect for TX/RX), 
 591:libs/nRF24/nRF24.c ****   *           The TX nRF24 may be successfully sending data, but RX nRF24 receives none.
 592:libs/nRF24/nRF24.c ****   * @param  None.
 593:libs/nRF24/nRF24.c ****   * @retval None.
ARM GAS  /tmp/ccvdf1ti.s 			page 29


 594:libs/nRF24/nRF24.c ****   * @note   The states (marked such as [TX Mode]) are found in "nRF24L01+ Product Spefication" -- 6
 595:libs/nRF24/nRF24.c ****   */
 596:libs/nRF24/nRF24.c **** void nRF24_config_normal_tx_mode() 
 597:libs/nRF24/nRF24.c **** {
 598:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 599:libs/nRF24/nRF24.c **** 
 600:libs/nRF24/nRF24.c ****     /* Set Address Width as 5 bytes. On the Receiver side, set RX_ADDR_P0 with same value. */
 601:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_AW(SETUP_AW_MASK5bytes);
 602:libs/nRF24/nRF24.c ****  
 603:libs/nRF24/nRF24.c ****     /* Set TX address to nRF24. */
 604:libs/nRF24/nRF24.c ****     uint8_t TX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  /* 5 byte TX address */
 605:libs/nRF24/nRF24.c ****     nRF24_set_TX_ADDR(5, TX_ADDRESS); 
 606:libs/nRF24/nRF24.c **** 
 607:libs/nRF24/nRF24.c ****     /* Disable Auto-Acknowledgement on Pipe 5 - Pipe 0, this also disables Enhanced ShockBurst. */
 608:libs/nRF24/nRF24.c ****     nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA
 609:libs/nRF24/nRF24.c **** 
 610:libs/nRF24/nRF24.c ****     /* Disable RX on Pipe 5 - Pipe 0. */
 611:libs/nRF24/nRF24.c ****     nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P
 612:libs/nRF24/nRF24.c **** 
 613:libs/nRF24/nRF24.c ****     /* Disable Auto-Retransmission, this also disables Enhanced ShockBurst. */
 614:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK0);
 615:libs/nRF24/nRF24.c **** 
 616:libs/nRF24/nRF24.c ****     /* Set Frquency Channel. Carrier Frequency = 2.4GHz + RF_CH = (2400 + RF_CH) = 2440 MHz. */
 617:libs/nRF24/nRF24.c ****     nRF24_set_RF_CH(40);
 618:libs/nRF24/nRF24.c **** 
 619:libs/nRF24/nRF24.c ****     /* Set 'Continuous Carrier Transmit', RF Data Rate, and RF TX Power */
 620:libs/nRF24/nRF24.c ****     nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_HI
 621:libs/nRF24/nRF24.c ****   
 622:libs/nRF24/nRF24.c ****     /* Set IRQ Masks, CRC, Power-Up and select RX/TX mode. */
 623:libs/nRF24/nRF24.c ****     nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CR
 624:libs/nRF24/nRF24.c **** 
 625:libs/nRF24/nRF24.c ****     /* CE is not set to 1, nRF24 still stays in [Standby-I] Mode. */
 626:libs/nRF24/nRF24.c ****     /* CE = 1 is not activated until we write to TX FIFO so stays in Standby-I mode. */
 627:libs/nRF24/nRF24.c **** }
 628:libs/nRF24/nRF24.c **** 
 629:libs/nRF24/nRF24.c **** /**
 630:libs/nRF24/nRF24.c ****   * @brief  TX (transmit) Mode with Enhanced ShockBurst.
 631:libs/nRF24/nRF24.c ****   * @param  None.
 632:libs/nRF24/nRF24.c ****   * @retval None.
 633:libs/nRF24/nRF24.c ****   * @note   In Enhanced ShockBurst, Auto Acknowledgement and Auto-Retransmission are used to guaran
 634:libs/nRF24/nRF24.c ****   *         Thus used pipe's EN_AA and SETUP_RETR is masked 1.
 635:libs/nRF24/nRF24.c ****   *         The TX nRF transmit is successful by detecting 1 on TX_DS field in <STATUS> register.
 636:libs/nRF24/nRF24.c ****   *         However, trasmit is successful only when an RX nRF, also with Enhanced ShockBurst turne
 637:libs/nRF24/nRF24.c ****   *           send Acknowledgement to the TX nRF.
 638:libs/nRF24/nRF24.c ****   *         The TX nRF, in order to receive that Acknowledgement signal, needs to turn on receive o
 639:libs/nRF24/nRF24.c ****   *         The states (marked such as [TX Mode]) are found in "nRF24L01+ Product Spefication" -- 6
 640:libs/nRF24/nRF24.c ****   */
 641:libs/nRF24/nRF24.c **** void nRF24_config_enhanced_shockburst_tx_mode() 
 642:libs/nRF24/nRF24.c **** {
 643:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 644:libs/nRF24/nRF24.c ****     // nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 645:libs/nRF24/nRF24.c **** 
 646:libs/nRF24/nRF24.c ****     /* Set TX_ADDR for transmit. On the Receiver side, set RX_ADDR_P0 with same value. */
 647:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_AW(SETUP_AW_MASK5bytes);
 648:libs/nRF24/nRF24.c **** 
 649:libs/nRF24/nRF24.c ****     uint8_t TX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  
 650:libs/nRF24/nRF24.c ****     nRF24_set_TX_ADDR(5, TX_ADDRESS);
ARM GAS  /tmp/ccvdf1ti.s 			page 30


 651:libs/nRF24/nRF24.c **** 
 652:libs/nRF24/nRF24.c ****     /* ShockBurst Auto-Acknowledgement: In order to receive hardware-generated ACK from the receive
 653:libs/nRF24/nRF24.c ****     nRF24_set_RX_ADDR_P0(5, TX_ADDRESS);
 654:libs/nRF24/nRF24.c **** 
 655:libs/nRF24/nRF24.c ****     nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA
 656:libs/nRF24/nRF24.c ****     nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P
 657:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK10);
 658:libs/nRF24/nRF24.c ****     nRF24_set_RF_CH(40);
 659:libs/nRF24/nRF24.c ****     uint8_t writing_byte = 0x07;
 660:libs/nRF24/nRF24.c ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 661:libs/nRF24/nRF24.c ****     // nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR
 662:libs/nRF24/nRF24.c ****     nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CR
 663:libs/nRF24/nRF24.c ****     SPI_DELAY(10);
 664:libs/nRF24/nRF24.c **** 
 665:libs/nRF24/nRF24.c **** }
 666:libs/nRF24/nRF24.c **** 
 667:libs/nRF24/nRF24.c **** 
 668:libs/nRF24/nRF24.c **** /**
 669:libs/nRF24/nRF24.c ****   * @brief  Configure nRF24L01+ in RX mode without Enhanced ShockBurst.
 670:libs/nRF24/nRF24.c ****   *           Without Enhanced ShockBurst, Auto Acknowledgement and Auto-Retransmission is masked o
 671:libs/nRF24/nRF24.c **** 	*           Make sure to setup a TX nRF24 first and keep transmitting so we can test if RX nRF24 i
 672:libs/nRF24/nRF24.c ****   *         (!) Auto Acknowledgement must also be masked off on the TX nRF24 in order for RX to rec
 673:libs/nRF24/nRF24.c ****   *           If TX and RX nRF24 module has different setting in parameters (expect for PRIM_RX), 
 674:libs/nRF24/nRF24.c ****   *           The TX nRF24 may be successfully sending data, but RX nRF24 receives none.
 675:libs/nRF24/nRF24.c ****   * @param  None.
 676:libs/nRF24/nRF24.c ****   * @retval None.
 677:libs/nRF24/nRF24.c ****   * @note   The states (marked such as [TX Mode]) are found in "nRF24L01+ Product Spefication" -- 6
 678:libs/nRF24/nRF24.c ****   */
 679:libs/nRF24/nRF24.c **** void nRF24_config_normal_rx_mode() 
 680:libs/nRF24/nRF24.c **** {
 681:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 682:libs/nRF24/nRF24.c **** 
 683:libs/nRF24/nRF24.c ****     /* Set Address Width as 5 bytes. On the Receiver side, set RX_ADDR_P0 with same value. */
 684:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_AW(SETUP_AW_MASK5bytes);
 685:libs/nRF24/nRF24.c ****  
 686:libs/nRF24/nRF24.c ****     /* Set TX address to nRF24. */
 687:libs/nRF24/nRF24.c ****     uint8_t RX_ADDRESS[5] = {0x99,0xAA,0xBB,0xCC,0xDD};  /* 5 byte RX address, need to be same as T
 688:libs/nRF24/nRF24.c ****     nRF24_set_RX_ADDR_P0(5, RX_ADDRESS); 
 689:libs/nRF24/nRF24.c **** 
 690:libs/nRF24/nRF24.c ****     /* Disable Auto-Acknowledgement on Pipe 5 - Pipe 0, this also disables Enhanced ShockBurst. */
 691:libs/nRF24/nRF24.c ****     nRF24_set_EN_AA(ENAA_P5_MASK0, ENAA_P4_MASK0, ENAA_P3_MASK0, ENAA_P2_MASK0, ENAA_P1_MASK0, ENAA
 692:libs/nRF24/nRF24.c **** 
 693:libs/nRF24/nRF24.c ****     /* Enable only RX address on Pipe 0 */
 694:libs/nRF24/nRF24.c ****     nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P
 695:libs/nRF24/nRF24.c **** 
 696:libs/nRF24/nRF24.c ****     /* Disable Auto-Retransmission, this also disables Enhanced ShockBurst. */
 697:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK0);
 698:libs/nRF24/nRF24.c **** 
 699:libs/nRF24/nRF24.c ****     /* Set Frquency Channel. Carrier Frequency = 2.4GHz + RF_CH = (2400 + RF_CH) = 2440 MHz. */
 700:libs/nRF24/nRF24.c ****     nRF24_set_RF_CH(40);
 701:libs/nRF24/nRF24.c **** 
 702:libs/nRF24/nRF24.c ****     /* Set 'Continuous Carrier Transmit', RF Data Rate, and RF TX Power */
 703:libs/nRF24/nRF24.c ****     nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR_HI
 704:libs/nRF24/nRF24.c **** 
 705:libs/nRF24/nRF24.c **** 		/* Set receive payload width = 32. */
 706:libs/nRF24/nRF24.c **** 		nRF24_set_RX_PW_P0(32);
 707:libs/nRF24/nRF24.c ****   
ARM GAS  /tmp/ccvdf1ti.s 			page 31


 708:libs/nRF24/nRF24.c ****     /* Set IRQ Masks, CRC, Power-Up and select RX mode. */
 709:libs/nRF24/nRF24.c ****     nRF24_set_CONFIG(MASK_RX_DR_MASKDEFAULT, MASK_TX_DS_MASKDEFAULT, MASK_MAX_RT_MASKDEFAULT, EN_CR
 710:libs/nRF24/nRF24.c **** 
 711:libs/nRF24/nRF24.c ****     /* CE is set to 1, nRF24 transition from [Standby-I] to active [RX Mode]. */
 712:libs/nRF24/nRF24.c **** 		nRF24_CE_1();
 713:libs/nRF24/nRF24.c **** 		/* nRF24 starts hearing as RX. */
 714:libs/nRF24/nRF24.c **** }
 715:libs/nRF24/nRF24.c **** 
 716:libs/nRF24/nRF24.c **** 
 717:libs/nRF24/nRF24.c **** 
 718:libs/nRF24/nRF24.c **** /**
 719:libs/nRF24/nRF24.c ****   * @TODO Convert an array of hex bytes to string.
 720:libs/nRF24/nRF24.c ****   */
 721:libs/nRF24/nRF24.c **** void print_bytearray(uint8_t num_bytes, uint8_t* byte_array)
 722:libs/nRF24/nRF24.c **** {
 989              		.loc 1 722 0
 990              		.cfi_startproc
 991              		@ args = 0, pretend = 0, frame = 8
 992              		@ frame_needed = 0, uses_anonymous_args = 0
 993              	.LVL98:
 994 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 995              	.LCFI20:
 996              		.cfi_def_cfa_offset 20
 997              		.cfi_offset 4, -20
 998              		.cfi_offset 5, -16
 999              		.cfi_offset 6, -12
 1000              		.cfi_offset 7, -8
 1001              		.cfi_offset 14, -4
 1002 0002 83B0     		sub	sp, sp, #12
 1003              	.LCFI21:
 1004              		.cfi_def_cfa_offset 32
 1005 0004 0646     		mov	r6, r0
 1006 0006 0F46     		mov	r7, r1
 1007              	.LVL99:
 1008              	.LBB90:
 723:libs/nRF24/nRF24.c ****   char buf;
 724:libs/nRF24/nRF24.c ****   for (int i = 0; i < num_bytes; ++i)
 1009              		.loc 1 724 0
 1010 0008 0024     		movs	r4, #0
 1011 000a 18E0     		b	.L82
 1012              	.LVL100:
 1013              	.L83:
 725:libs/nRF24/nRF24.c ****   {
 726:libs/nRF24/nRF24.c ****     sprintf(&buf, "%#02x", byte_array[i]);
 1014              		.loc 1 726 0 discriminator 3
 1015 000c 3A5D     		ldrb	r2, [r7, r4]	@ zero_extendqisi2
 1016 000e 1149     		ldr	r1, .L85
 1017 0010 0DF10700 		add	r0, sp, #7
 1018 0014 FFF7FEFF 		bl	sprintf
 1019              	.LVL101:
 1020              	.LBB91:
 1021              	.LBB92:
 130:libs/nRF24/nRF24.c **** }
 1022              		.loc 1 130 0 discriminator 3
 1023 0018 0DF10700 		add	r0, sp, #7
 1024              	.LVL102:
 1025 001c FFF7FEFF 		bl	strlen
ARM GAS  /tmp/ccvdf1ti.s 			page 32


 1026              	.LVL103:
 1027 0020 0D4D     		ldr	r5, .L85+4
 1028 0022 6423     		movs	r3, #100
 1029 0024 82B2     		uxth	r2, r0
 1030 0026 0DF10701 		add	r1, sp, #7
 1031              	.LVL104:
 1032 002a 2846     		mov	r0, r5
 1033 002c FFF7FEFF 		bl	HAL_UART_Transmit
 1034              	.LVL105:
 1035              	.LBE92:
 1036              	.LBE91:
 1037              	.LBB93:
 1038              	.LBB94:
 1039 0030 6423     		movs	r3, #100
 1040 0032 0122     		movs	r2, #1
 1041 0034 0949     		ldr	r1, .L85+8
 1042 0036 2846     		mov	r0, r5
 1043 0038 FFF7FEFF 		bl	HAL_UART_Transmit
 1044              	.LVL106:
 1045              	.LBE94:
 1046              	.LBE93:
 724:libs/nRF24/nRF24.c ****   {
 1047              		.loc 1 724 0 discriminator 3
 1048 003c 0134     		adds	r4, r4, #1
 1049              	.LVL107:
 1050              	.L82:
 724:libs/nRF24/nRF24.c ****   {
 1051              		.loc 1 724 0 is_stmt 0 discriminator 1
 1052 003e B442     		cmp	r4, r6
 1053 0040 E4DB     		blt	.L83
 1054              	.LVL108:
 1055              	.LBE90:
 1056              	.LBB95:
 1057              	.LBB96:
 130:libs/nRF24/nRF24.c **** }
 1058              		.loc 1 130 0 is_stmt 1
 1059 0042 6423     		movs	r3, #100
 1060 0044 0122     		movs	r2, #1
 1061 0046 0649     		ldr	r1, .L85+12
 1062 0048 0348     		ldr	r0, .L85+4
 1063 004a FFF7FEFF 		bl	HAL_UART_Transmit
 1064              	.LVL109:
 1065              	.LBE96:
 1066              	.LBE95:
 727:libs/nRF24/nRF24.c **** 		serial_print(&buf);
 728:libs/nRF24/nRF24.c **** 		/* Print delimiter */
 729:libs/nRF24/nRF24.c **** 		serial_print("-");
 730:libs/nRF24/nRF24.c ****   }
 731:libs/nRF24/nRF24.c **** 	serial_print("\n");
 732:libs/nRF24/nRF24.c **** }
 1067              		.loc 1 732 0
 1068 004e 03B0     		add	sp, sp, #12
 1069              	.LCFI22:
 1070              		.cfi_def_cfa_offset 20
 1071              		@ sp needed
 1072 0050 F0BD     		pop	{r4, r5, r6, r7, pc}
 1073              	.LVL110:
ARM GAS  /tmp/ccvdf1ti.s 			page 33


 1074              	.L86:
 1075 0052 00BF     		.align	2
 1076              	.L85:
 1077 0054 00000000 		.word	.LC5
 1078 0058 00000000 		.word	huart2
 1079 005c 08000000 		.word	.LC6
 1080 0060 0C000000 		.word	.LC7
 1081              		.cfi_endproc
 1082              	.LFE152:
 1084              		.section	.text.nRF24_print_all_registers,"ax",%progbits
 1085              		.align	1
 1086              		.global	nRF24_print_all_registers
 1087              		.syntax unified
 1088              		.thumb
 1089              		.thumb_func
 1090              		.fpu fpv4-sp-d16
 1092              	nRF24_print_all_registers:
 1093              	.LFB154:
 733:libs/nRF24/nRF24.c **** 
 734:libs/nRF24/nRF24.c **** /**
 735:libs/nRF24/nRF24.c **** 	* @brief  Read received packet from RX FIFO.
 736:libs/nRF24/nRF24.c **** 	* @param  None.
 737:libs/nRF24/nRF24.c **** 	* @retval None.
 738:libs/nRF24/nRF24.c **** 	* @note   This function polls the status register and determined whether there's data received ava
 739:libs/nRF24/nRF24.c **** 	*/
 740:libs/nRF24/nRF24.c **** void nRF24_receive_packet() 
 741:libs/nRF24/nRF24.c **** {
 742:libs/nRF24/nRF24.c **** 	uint8_t RX_WIDTH = 32;
 743:libs/nRF24/nRF24.c ****   uint8_t payload[RX_WIDTH];
 744:libs/nRF24/nRF24.c ****   char message[64];
 745:libs/nRF24/nRF24.c **** 
 746:libs/nRF24/nRF24.c ****   uint8_t nRF24_status = nRF24_get_STATUS();
 747:libs/nRF24/nRF24.c **** 
 748:libs/nRF24/nRF24.c **** 	/* Check if RX_DR is set: RX Data Ready*/
 749:libs/nRF24/nRF24.c ****   if (nRF24_status & RX_DR_READMASK){
 750:libs/nRF24/nRF24.c **** 		/* Transition from [RX Mode] to [Standby-I] */
 751:libs/nRF24/nRF24.c ****     nRF24_CE_0(); 
 752:libs/nRF24/nRF24.c **** 
 753:libs/nRF24/nRF24.c **** 		/* Read received payload */
 754:libs/nRF24/nRF24.c ****     spi_read_register(R_RX_PAYLOAD, RX_WIDTH, payload); 
 755:libs/nRF24/nRF24.c **** 
 756:libs/nRF24/nRF24.c **** 		#ifdef NRF24_DEBUG
 757:libs/nRF24/nRF24.c **** 		strcpy(message, "> Data received: ");
 758:libs/nRF24/nRF24.c **** 		serial_print(message);
 759:libs/nRF24/nRF24.c **** 		print_bytearray(32, payload);
 760:libs/nRF24/nRF24.c **** 		#endif
 761:libs/nRF24/nRF24.c **** 
 762:libs/nRF24/nRF24.c **** 		/* Clear status register */
 763:libs/nRF24/nRF24.c ****     nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 764:libs/nRF24/nRF24.c ****     nRF24_CE_1();
 765:libs/nRF24/nRF24.c ****   }else {
 766:libs/nRF24/nRF24.c **** 		#ifdef NRF24_DEBUG
 767:libs/nRF24/nRF24.c **** 		strcpy(message, "No data has been received.\n");
 768:libs/nRF24/nRF24.c **** 		serial_print(message);
 769:libs/nRF24/nRF24.c **** 		#endif
 770:libs/nRF24/nRF24.c ****   }
 771:libs/nRF24/nRF24.c **** }
ARM GAS  /tmp/ccvdf1ti.s 			page 34


 772:libs/nRF24/nRF24.c **** 
 773:libs/nRF24/nRF24.c **** 
 774:libs/nRF24/nRF24.c **** /**
 775:libs/nRF24/nRF24.c ****   * @brief  Print all registers on nRF24. 
 776:libs/nRF24/nRF24.c ****   * @param  None.
 777:libs/nRF24/nRF24.c ****   * @retval None.
 778:libs/nRF24/nRF24.c ****   */
 779:libs/nRF24/nRF24.c **** void nRF24_print_all_registers()
 780:libs/nRF24/nRF24.c **** {
 1094              		.loc 1 780 0
 1095              		.cfi_startproc
 1096              		@ args = 0, pretend = 0, frame = 40
 1097              		@ frame_needed = 0, uses_anonymous_args = 0
 1098 0000 30B5     		push	{r4, r5, lr}
 1099              	.LCFI23:
 1100              		.cfi_def_cfa_offset 12
 1101              		.cfi_offset 4, -12
 1102              		.cfi_offset 5, -8
 1103              		.cfi_offset 14, -4
 1104 0002 8FB0     		sub	sp, sp, #60
 1105              	.LCFI24:
 1106              		.cfi_def_cfa_offset 72
 781:libs/nRF24/nRF24.c ****     uint8_t read_data;
 782:libs/nRF24/nRF24.c ****     uint8_t read_buf[4];
 783:libs/nRF24/nRF24.c ****     char message[32];
 784:libs/nRF24/nRF24.c ****   
 785:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + CONFIG, 1, &read_data);
 1107              		.loc 1 785 0
 1108 0004 0DF13702 		add	r2, sp, #55
 1109 0008 0121     		movs	r1, #1
 1110 000a 0020     		movs	r0, #0
 1111 000c FFF7FEFF 		bl	spi_read_register
 1112              	.LVL111:
 786:libs/nRF24/nRF24.c ****     sprintf(message, "CONFIG: <0x%02x>\n", read_data);
 1113              		.loc 1 786 0
 1114 0010 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1115 0014 BD49     		ldr	r1, .L89
 1116 0016 04A8     		add	r0, sp, #16
 1117 0018 FFF7FEFF 		bl	sprintf
 1118              	.LVL112:
 1119              	.LBB127:
 1120              	.LBB128:
 130:libs/nRF24/nRF24.c **** }
 1121              		.loc 1 130 0
 1122 001c 04A8     		add	r0, sp, #16
 1123              	.LVL113:
 1124 001e FFF7FEFF 		bl	strlen
 1125              	.LVL114:
 1126 0022 BB4C     		ldr	r4, .L89+4
 1127 0024 6423     		movs	r3, #100
 1128 0026 82B2     		uxth	r2, r0
 1129 0028 04A9     		add	r1, sp, #16
 1130              	.LVL115:
 1131 002a 2046     		mov	r0, r4
 1132 002c FFF7FEFF 		bl	HAL_UART_Transmit
 1133              	.LVL116:
 1134              	.LBE128:
ARM GAS  /tmp/ccvdf1ti.s 			page 35


 1135              	.LBE127:
 787:libs/nRF24/nRF24.c ****     serial_print(message);
 788:libs/nRF24/nRF24.c **** 
 789:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_data);
 1136              		.loc 1 789 0
 1137 0030 0DF13702 		add	r2, sp, #55
 1138 0034 0121     		movs	r1, #1
 1139 0036 0846     		mov	r0, r1
 1140 0038 FFF7FEFF 		bl	spi_read_register
 1141              	.LVL117:
 790:libs/nRF24/nRF24.c ****     sprintf(message, "EN_AA: <0x%02x>\n", read_data);
 1142              		.loc 1 790 0
 1143 003c 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1144 0040 B449     		ldr	r1, .L89+8
 1145 0042 04A8     		add	r0, sp, #16
 1146 0044 FFF7FEFF 		bl	sprintf
 1147              	.LVL118:
 1148              	.LBB129:
 1149              	.LBB130:
 130:libs/nRF24/nRF24.c **** }
 1150              		.loc 1 130 0
 1151 0048 04A8     		add	r0, sp, #16
 1152              	.LVL119:
 1153 004a FFF7FEFF 		bl	strlen
 1154              	.LVL120:
 1155 004e 6423     		movs	r3, #100
 1156 0050 82B2     		uxth	r2, r0
 1157 0052 04A9     		add	r1, sp, #16
 1158              	.LVL121:
 1159 0054 2046     		mov	r0, r4
 1160 0056 FFF7FEFF 		bl	HAL_UART_Transmit
 1161              	.LVL122:
 1162              	.LBE130:
 1163              	.LBE129:
 791:libs/nRF24/nRF24.c ****     serial_print(message);
 792:libs/nRF24/nRF24.c **** 
 793:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_data);
 1164              		.loc 1 793 0
 1165 005a 0DF13702 		add	r2, sp, #55
 1166 005e 0121     		movs	r1, #1
 1167 0060 0220     		movs	r0, #2
 1168 0062 FFF7FEFF 		bl	spi_read_register
 1169              	.LVL123:
 794:libs/nRF24/nRF24.c ****     sprintf(message, "EN_RXADDR: <0x%02x>\n", read_data);
 1170              		.loc 1 794 0
 1171 0066 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1172 006a AB49     		ldr	r1, .L89+12
 1173 006c 04A8     		add	r0, sp, #16
 1174 006e FFF7FEFF 		bl	sprintf
 1175              	.LVL124:
 1176              	.LBB131:
 1177              	.LBB132:
 130:libs/nRF24/nRF24.c **** }
 1178              		.loc 1 130 0
 1179 0072 04A8     		add	r0, sp, #16
 1180              	.LVL125:
 1181 0074 FFF7FEFF 		bl	strlen
ARM GAS  /tmp/ccvdf1ti.s 			page 36


 1182              	.LVL126:
 1183 0078 6423     		movs	r3, #100
 1184 007a 82B2     		uxth	r2, r0
 1185 007c 04A9     		add	r1, sp, #16
 1186              	.LVL127:
 1187 007e 2046     		mov	r0, r4
 1188 0080 FFF7FEFF 		bl	HAL_UART_Transmit
 1189              	.LVL128:
 1190              	.LBE132:
 1191              	.LBE131:
 795:libs/nRF24/nRF24.c ****     serial_print(message);
 796:libs/nRF24/nRF24.c **** 
 797:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_data);
 1192              		.loc 1 797 0
 1193 0084 0DF13702 		add	r2, sp, #55
 1194 0088 0121     		movs	r1, #1
 1195 008a 0320     		movs	r0, #3
 1196 008c FFF7FEFF 		bl	spi_read_register
 1197              	.LVL129:
 798:libs/nRF24/nRF24.c ****     sprintf(message, "SETUP_AW: <0x%02x>\n", read_data);
 1198              		.loc 1 798 0
 1199 0090 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1200 0094 A149     		ldr	r1, .L89+16
 1201 0096 04A8     		add	r0, sp, #16
 1202 0098 FFF7FEFF 		bl	sprintf
 1203              	.LVL130:
 1204              	.LBB133:
 1205              	.LBB134:
 130:libs/nRF24/nRF24.c **** }
 1206              		.loc 1 130 0
 1207 009c 04A8     		add	r0, sp, #16
 1208              	.LVL131:
 1209 009e FFF7FEFF 		bl	strlen
 1210              	.LVL132:
 1211 00a2 6423     		movs	r3, #100
 1212 00a4 82B2     		uxth	r2, r0
 1213 00a6 04A9     		add	r1, sp, #16
 1214              	.LVL133:
 1215 00a8 2046     		mov	r0, r4
 1216 00aa FFF7FEFF 		bl	HAL_UART_Transmit
 1217              	.LVL134:
 1218              	.LBE134:
 1219              	.LBE133:
 799:libs/nRF24/nRF24.c ****     serial_print(message);
 800:libs/nRF24/nRF24.c **** 
 801:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_data);
 1220              		.loc 1 801 0
 1221 00ae 0DF13702 		add	r2, sp, #55
 1222 00b2 0121     		movs	r1, #1
 1223 00b4 0420     		movs	r0, #4
 1224 00b6 FFF7FEFF 		bl	spi_read_register
 1225              	.LVL135:
 802:libs/nRF24/nRF24.c ****     sprintf(message, "SETUP_RETR: <0x%02x>\n", read_data);
 1226              		.loc 1 802 0
 1227 00ba 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1228 00be 9849     		ldr	r1, .L89+20
 1229 00c0 04A8     		add	r0, sp, #16
ARM GAS  /tmp/ccvdf1ti.s 			page 37


 1230 00c2 FFF7FEFF 		bl	sprintf
 1231              	.LVL136:
 1232              	.LBB135:
 1233              	.LBB136:
 130:libs/nRF24/nRF24.c **** }
 1234              		.loc 1 130 0
 1235 00c6 04A8     		add	r0, sp, #16
 1236              	.LVL137:
 1237 00c8 FFF7FEFF 		bl	strlen
 1238              	.LVL138:
 1239 00cc 6423     		movs	r3, #100
 1240 00ce 82B2     		uxth	r2, r0
 1241 00d0 04A9     		add	r1, sp, #16
 1242              	.LVL139:
 1243 00d2 2046     		mov	r0, r4
 1244 00d4 FFF7FEFF 		bl	HAL_UART_Transmit
 1245              	.LVL140:
 1246              	.LBE136:
 1247              	.LBE135:
 803:libs/nRF24/nRF24.c ****     serial_print(message);
 804:libs/nRF24/nRF24.c **** 
 805:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_data);
 1248              		.loc 1 805 0
 1249 00d8 0DF13702 		add	r2, sp, #55
 1250 00dc 0121     		movs	r1, #1
 1251 00de 0520     		movs	r0, #5
 1252 00e0 FFF7FEFF 		bl	spi_read_register
 1253              	.LVL141:
 806:libs/nRF24/nRF24.c ****     sprintf(message, "RF_CH: <0x%02x>\n", read_data);
 1254              		.loc 1 806 0
 1255 00e4 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1256 00e8 8E49     		ldr	r1, .L89+24
 1257 00ea 04A8     		add	r0, sp, #16
 1258 00ec FFF7FEFF 		bl	sprintf
 1259              	.LVL142:
 1260              	.LBB137:
 1261              	.LBB138:
 130:libs/nRF24/nRF24.c **** }
 1262              		.loc 1 130 0
 1263 00f0 04A8     		add	r0, sp, #16
 1264              	.LVL143:
 1265 00f2 FFF7FEFF 		bl	strlen
 1266              	.LVL144:
 1267 00f6 6423     		movs	r3, #100
 1268 00f8 82B2     		uxth	r2, r0
 1269 00fa 04A9     		add	r1, sp, #16
 1270              	.LVL145:
 1271 00fc 2046     		mov	r0, r4
 1272 00fe FFF7FEFF 		bl	HAL_UART_Transmit
 1273              	.LVL146:
 1274              	.LBE138:
 1275              	.LBE137:
 807:libs/nRF24/nRF24.c ****     serial_print(message);
 808:libs/nRF24/nRF24.c **** 
 809:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_data);
 1276              		.loc 1 809 0
 1277 0102 0DF13702 		add	r2, sp, #55
ARM GAS  /tmp/ccvdf1ti.s 			page 38


 1278 0106 0121     		movs	r1, #1
 1279 0108 0620     		movs	r0, #6
 1280 010a FFF7FEFF 		bl	spi_read_register
 1281              	.LVL147:
 810:libs/nRF24/nRF24.c ****     sprintf(message, "RF_SETUP: <0x%02x>\n", read_data);
 1282              		.loc 1 810 0
 1283 010e 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1284 0112 8549     		ldr	r1, .L89+28
 1285 0114 04A8     		add	r0, sp, #16
 1286 0116 FFF7FEFF 		bl	sprintf
 1287              	.LVL148:
 1288              	.LBB139:
 1289              	.LBB140:
 130:libs/nRF24/nRF24.c **** }
 1290              		.loc 1 130 0
 1291 011a 04A8     		add	r0, sp, #16
 1292              	.LVL149:
 1293 011c FFF7FEFF 		bl	strlen
 1294              	.LVL150:
 1295 0120 6423     		movs	r3, #100
 1296 0122 82B2     		uxth	r2, r0
 1297 0124 04A9     		add	r1, sp, #16
 1298              	.LVL151:
 1299 0126 2046     		mov	r0, r4
 1300 0128 FFF7FEFF 		bl	HAL_UART_Transmit
 1301              	.LVL152:
 1302              	.LBE140:
 1303              	.LBE139:
 811:libs/nRF24/nRF24.c ****     serial_print(message);
 812:libs/nRF24/nRF24.c **** 
 813:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + STATUS, 1, &read_data);
 1304              		.loc 1 813 0
 1305 012c 0DF13702 		add	r2, sp, #55
 1306 0130 0121     		movs	r1, #1
 1307 0132 0720     		movs	r0, #7
 1308 0134 FFF7FEFF 		bl	spi_read_register
 1309              	.LVL153:
 814:libs/nRF24/nRF24.c ****     sprintf(message, "STATUS: <0x%02x>\n", read_data);
 1310              		.loc 1 814 0
 1311 0138 9DF83720 		ldrb	r2, [sp, #55]	@ zero_extendqisi2
 1312 013c 7B49     		ldr	r1, .L89+32
 1313 013e 04A8     		add	r0, sp, #16
 1314 0140 FFF7FEFF 		bl	sprintf
 1315              	.LVL154:
 1316              	.LBB141:
 1317              	.LBB142:
 130:libs/nRF24/nRF24.c **** }
 1318              		.loc 1 130 0
 1319 0144 04A8     		add	r0, sp, #16
 1320              	.LVL155:
 1321 0146 FFF7FEFF 		bl	strlen
 1322              	.LVL156:
 1323 014a 6423     		movs	r3, #100
 1324 014c 82B2     		uxth	r2, r0
 1325 014e 04A9     		add	r1, sp, #16
 1326              	.LVL157:
 1327 0150 2046     		mov	r0, r4
ARM GAS  /tmp/ccvdf1ti.s 			page 39


 1328 0152 FFF7FEFF 		bl	HAL_UART_Transmit
 1329              	.LVL158:
 1330              	.LBE142:
 1331              	.LBE141:
 815:libs/nRF24/nRF24.c ****     serial_print(message);
 816:libs/nRF24/nRF24.c **** 
 817:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, 5, read_buf);
 1332              		.loc 1 817 0
 1333 0156 0CAA     		add	r2, sp, #48
 1334 0158 0521     		movs	r1, #5
 1335 015a 0A20     		movs	r0, #10
 1336 015c FFF7FEFF 		bl	spi_read_register
 1337              	.LVL159:
 818:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P0: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1338              		.loc 1 818 0
 1339 0160 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1340 0164 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1341 0168 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1342 016c 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1343 0170 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1344 0174 0295     		str	r5, [sp, #8]
 1345 0176 0190     		str	r0, [sp, #4]
 1346 0178 0091     		str	r1, [sp]
 1347 017a 6D49     		ldr	r1, .L89+36
 1348 017c 04A8     		add	r0, sp, #16
 1349 017e FFF7FEFF 		bl	sprintf
 1350              	.LVL160:
 1351              	.LBB143:
 1352              	.LBB144:
 130:libs/nRF24/nRF24.c **** }
 1353              		.loc 1 130 0
 1354 0182 04A8     		add	r0, sp, #16
 1355              	.LVL161:
 1356 0184 FFF7FEFF 		bl	strlen
 1357              	.LVL162:
 1358 0188 6423     		movs	r3, #100
 1359 018a 82B2     		uxth	r2, r0
 1360 018c 04A9     		add	r1, sp, #16
 1361              	.LVL163:
 1362 018e 2046     		mov	r0, r4
 1363 0190 FFF7FEFF 		bl	HAL_UART_Transmit
 1364              	.LVL164:
 1365              	.LBE144:
 1366              	.LBE143:
 819:libs/nRF24/nRF24.c ****     serial_print(message);
 820:libs/nRF24/nRF24.c **** 
 821:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, 5, read_buf);
 1367              		.loc 1 821 0
 1368 0194 0CAA     		add	r2, sp, #48
 1369 0196 0521     		movs	r1, #5
 1370 0198 0B20     		movs	r0, #11
 1371 019a FFF7FEFF 		bl	spi_read_register
 1372              	.LVL165:
 822:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P1: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1373              		.loc 1 822 0
 1374 019e 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1375 01a2 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
ARM GAS  /tmp/ccvdf1ti.s 			page 40


 1376 01a6 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1377 01aa 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1378 01ae 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1379 01b2 0295     		str	r5, [sp, #8]
 1380 01b4 0190     		str	r0, [sp, #4]
 1381 01b6 0091     		str	r1, [sp]
 1382 01b8 5E49     		ldr	r1, .L89+40
 1383 01ba 04A8     		add	r0, sp, #16
 1384 01bc FFF7FEFF 		bl	sprintf
 1385              	.LVL166:
 1386              	.LBB145:
 1387              	.LBB146:
 130:libs/nRF24/nRF24.c **** }
 1388              		.loc 1 130 0
 1389 01c0 04A8     		add	r0, sp, #16
 1390              	.LVL167:
 1391 01c2 FFF7FEFF 		bl	strlen
 1392              	.LVL168:
 1393 01c6 6423     		movs	r3, #100
 1394 01c8 82B2     		uxth	r2, r0
 1395 01ca 04A9     		add	r1, sp, #16
 1396              	.LVL169:
 1397 01cc 2046     		mov	r0, r4
 1398 01ce FFF7FEFF 		bl	HAL_UART_Transmit
 1399              	.LVL170:
 1400              	.LBE146:
 1401              	.LBE145:
 823:libs/nRF24/nRF24.c ****     serial_print(message);
 824:libs/nRF24/nRF24.c **** 
 825:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, 5, read_buf);
 1402              		.loc 1 825 0
 1403 01d2 0CAA     		add	r2, sp, #48
 1404 01d4 0521     		movs	r1, #5
 1405 01d6 0C20     		movs	r0, #12
 1406 01d8 FFF7FEFF 		bl	spi_read_register
 1407              	.LVL171:
 826:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P2: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1408              		.loc 1 826 0
 1409 01dc 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1410 01e0 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1411 01e4 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1412 01e8 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1413 01ec 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1414 01f0 0295     		str	r5, [sp, #8]
 1415 01f2 0190     		str	r0, [sp, #4]
 1416 01f4 0091     		str	r1, [sp]
 1417 01f6 5049     		ldr	r1, .L89+44
 1418 01f8 04A8     		add	r0, sp, #16
 1419 01fa FFF7FEFF 		bl	sprintf
 1420              	.LVL172:
 1421              	.LBB147:
 1422              	.LBB148:
 130:libs/nRF24/nRF24.c **** }
 1423              		.loc 1 130 0
 1424 01fe 04A8     		add	r0, sp, #16
 1425              	.LVL173:
 1426 0200 FFF7FEFF 		bl	strlen
ARM GAS  /tmp/ccvdf1ti.s 			page 41


 1427              	.LVL174:
 1428 0204 6423     		movs	r3, #100
 1429 0206 82B2     		uxth	r2, r0
 1430 0208 04A9     		add	r1, sp, #16
 1431              	.LVL175:
 1432 020a 2046     		mov	r0, r4
 1433 020c FFF7FEFF 		bl	HAL_UART_Transmit
 1434              	.LVL176:
 1435              	.LBE148:
 1436              	.LBE147:
 827:libs/nRF24/nRF24.c ****     serial_print(message);
 828:libs/nRF24/nRF24.c **** 
 829:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, 5, read_buf);
 1437              		.loc 1 829 0
 1438 0210 0CAA     		add	r2, sp, #48
 1439 0212 0521     		movs	r1, #5
 1440 0214 0D20     		movs	r0, #13
 1441 0216 FFF7FEFF 		bl	spi_read_register
 1442              	.LVL177:
 830:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P3: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1443              		.loc 1 830 0
 1444 021a 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1445 021e 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1446 0222 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1447 0226 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1448 022a 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1449 022e 0295     		str	r5, [sp, #8]
 1450 0230 0190     		str	r0, [sp, #4]
 1451 0232 0091     		str	r1, [sp]
 1452 0234 4149     		ldr	r1, .L89+48
 1453 0236 04A8     		add	r0, sp, #16
 1454 0238 FFF7FEFF 		bl	sprintf
 1455              	.LVL178:
 1456              	.LBB149:
 1457              	.LBB150:
 130:libs/nRF24/nRF24.c **** }
 1458              		.loc 1 130 0
 1459 023c 04A8     		add	r0, sp, #16
 1460              	.LVL179:
 1461 023e FFF7FEFF 		bl	strlen
 1462              	.LVL180:
 1463 0242 6423     		movs	r3, #100
 1464 0244 82B2     		uxth	r2, r0
 1465 0246 04A9     		add	r1, sp, #16
 1466              	.LVL181:
 1467 0248 2046     		mov	r0, r4
 1468 024a FFF7FEFF 		bl	HAL_UART_Transmit
 1469              	.LVL182:
 1470              	.LBE150:
 1471              	.LBE149:
 831:libs/nRF24/nRF24.c ****     serial_print(message);
 832:libs/nRF24/nRF24.c **** 
 833:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, 5, read_buf);
 1472              		.loc 1 833 0
 1473 024e 0CAA     		add	r2, sp, #48
 1474 0250 0521     		movs	r1, #5
 1475 0252 0E20     		movs	r0, #14
ARM GAS  /tmp/ccvdf1ti.s 			page 42


 1476 0254 FFF7FEFF 		bl	spi_read_register
 1477              	.LVL183:
 834:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P4: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1478              		.loc 1 834 0
 1479 0258 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1480 025c 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1481 0260 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1482 0264 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1483 0268 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1484 026c 0295     		str	r5, [sp, #8]
 1485 026e 0190     		str	r0, [sp, #4]
 1486 0270 0091     		str	r1, [sp]
 1487 0272 3349     		ldr	r1, .L89+52
 1488 0274 04A8     		add	r0, sp, #16
 1489 0276 FFF7FEFF 		bl	sprintf
 1490              	.LVL184:
 1491              	.LBB151:
 1492              	.LBB152:
 130:libs/nRF24/nRF24.c **** }
 1493              		.loc 1 130 0
 1494 027a 04A8     		add	r0, sp, #16
 1495              	.LVL185:
 1496 027c FFF7FEFF 		bl	strlen
 1497              	.LVL186:
 1498 0280 6423     		movs	r3, #100
 1499 0282 82B2     		uxth	r2, r0
 1500 0284 04A9     		add	r1, sp, #16
 1501              	.LVL187:
 1502 0286 2046     		mov	r0, r4
 1503 0288 FFF7FEFF 		bl	HAL_UART_Transmit
 1504              	.LVL188:
 1505              	.LBE152:
 1506              	.LBE151:
 835:libs/nRF24/nRF24.c ****     serial_print(message);
 836:libs/nRF24/nRF24.c **** 
 837:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + RX_PW_P5, 5, read_buf);
 1507              		.loc 1 837 0
 1508 028c 0CAA     		add	r2, sp, #48
 1509 028e 0521     		movs	r1, #5
 1510 0290 1620     		movs	r0, #22
 1511 0292 FFF7FEFF 		bl	spi_read_register
 1512              	.LVL189:
 838:libs/nRF24/nRF24.c ****     sprintf(message, "RX_ADDR_P5: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], rea
 1513              		.loc 1 838 0
 1514 0296 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1515 029a 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1516 029e 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1517 02a2 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1518 02a6 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1519 02aa 0295     		str	r5, [sp, #8]
 1520 02ac 0190     		str	r0, [sp, #4]
 1521 02ae 0091     		str	r1, [sp]
 1522 02b0 2449     		ldr	r1, .L89+56
 1523 02b2 04A8     		add	r0, sp, #16
 1524 02b4 FFF7FEFF 		bl	sprintf
 1525              	.LVL190:
 1526              	.LBB153:
ARM GAS  /tmp/ccvdf1ti.s 			page 43


 1527              	.LBB154:
 130:libs/nRF24/nRF24.c **** }
 1528              		.loc 1 130 0
 1529 02b8 04A8     		add	r0, sp, #16
 1530              	.LVL191:
 1531 02ba FFF7FEFF 		bl	strlen
 1532              	.LVL192:
 1533 02be 6423     		movs	r3, #100
 1534 02c0 82B2     		uxth	r2, r0
 1535 02c2 04A9     		add	r1, sp, #16
 1536              	.LVL193:
 1537 02c4 2046     		mov	r0, r4
 1538 02c6 FFF7FEFF 		bl	HAL_UART_Transmit
 1539              	.LVL194:
 1540              	.LBE154:
 1541              	.LBE153:
 839:libs/nRF24/nRF24.c ****     serial_print(message);
 840:libs/nRF24/nRF24.c **** 
 841:libs/nRF24/nRF24.c ****     spi_read_register(R_REGISTER_MASK + TX_ADDR, 5, read_buf);
 1542              		.loc 1 841 0
 1543 02ca 0CAA     		add	r2, sp, #48
 1544 02cc 0521     		movs	r1, #5
 1545 02ce 1020     		movs	r0, #16
 1546 02d0 FFF7FEFF 		bl	spi_read_register
 1547              	.LVL195:
 842:libs/nRF24/nRF24.c ****     sprintf(message, "TX_ADDR: <%#02x %#02x %#02x %#02x %#02x>\n", read_buf[0], read_buf[1], read_b
 1548              		.loc 1 842 0
 1549 02d4 9DF83020 		ldrb	r2, [sp, #48]	@ zero_extendqisi2
 1550 02d8 9DF83130 		ldrb	r3, [sp, #49]	@ zero_extendqisi2
 1551 02dc 9DF83210 		ldrb	r1, [sp, #50]	@ zero_extendqisi2
 1552 02e0 9DF83300 		ldrb	r0, [sp, #51]	@ zero_extendqisi2
 1553 02e4 9DF83450 		ldrb	r5, [sp, #52]	@ zero_extendqisi2
 1554 02e8 0295     		str	r5, [sp, #8]
 1555 02ea 0190     		str	r0, [sp, #4]
 1556 02ec 0091     		str	r1, [sp]
 1557 02ee 1649     		ldr	r1, .L89+60
 1558 02f0 04A8     		add	r0, sp, #16
 1559 02f2 FFF7FEFF 		bl	sprintf
 1560              	.LVL196:
 1561              	.LBB155:
 1562              	.LBB156:
 130:libs/nRF24/nRF24.c **** }
 1563              		.loc 1 130 0
 1564 02f6 04A8     		add	r0, sp, #16
 1565              	.LVL197:
 1566 02f8 FFF7FEFF 		bl	strlen
 1567              	.LVL198:
 1568 02fc 6423     		movs	r3, #100
 1569 02fe 82B2     		uxth	r2, r0
 1570 0300 04A9     		add	r1, sp, #16
 1571              	.LVL199:
 1572 0302 2046     		mov	r0, r4
 1573 0304 FFF7FEFF 		bl	HAL_UART_Transmit
 1574              	.LVL200:
 1575              	.LBE156:
 1576              	.LBE155:
 843:libs/nRF24/nRF24.c ****     serial_print(message);
ARM GAS  /tmp/ccvdf1ti.s 			page 44


 844:libs/nRF24/nRF24.c **** 
 845:libs/nRF24/nRF24.c **** }
 1577              		.loc 1 845 0
 1578 0308 0FB0     		add	sp, sp, #60
 1579              	.LCFI25:
 1580              		.cfi_def_cfa_offset 12
 1581              		@ sp needed
 1582 030a 30BD     		pop	{r4, r5, pc}
 1583              	.L90:
 1584              		.align	2
 1585              	.L89:
 1586 030c 00000000 		.word	.LC8
 1587 0310 00000000 		.word	huart2
 1588 0314 14000000 		.word	.LC9
 1589 0318 28000000 		.word	.LC10
 1590 031c 40000000 		.word	.LC11
 1591 0320 54000000 		.word	.LC12
 1592 0324 6C000000 		.word	.LC13
 1593 0328 80000000 		.word	.LC14
 1594 032c 94000000 		.word	.LC15
 1595 0330 A8000000 		.word	.LC16
 1596 0334 D8000000 		.word	.LC17
 1597 0338 08010000 		.word	.LC18
 1598 033c 38010000 		.word	.LC19
 1599 0340 68010000 		.word	.LC20
 1600 0344 98010000 		.word	.LC21
 1601 0348 C8010000 		.word	.LC22
 1602              		.cfi_endproc
 1603              	.LFE154:
 1605              		.section	.text.nRF24_set_CONFIG,"ax",%progbits
 1606              		.align	1
 1607              		.global	nRF24_set_CONFIG
 1608              		.syntax unified
 1609              		.thumb
 1610              		.thumb_func
 1611              		.fpu fpv4-sp-d16
 1613              	nRF24_set_CONFIG:
 1614              	.LFB155:
 846:libs/nRF24/nRF24.c **** 
 847:libs/nRF24/nRF24.c **** 
 848:libs/nRF24/nRF24.c **** /* Following Function Provides High Level Access to nRF24L01+ registers. --------------------------
 849:libs/nRF24/nRF24.c **** 
 850:libs/nRF24/nRF24.c **** /**
 851:libs/nRF24/nRF24.c ****   * @brief  nRF24 set <CONFIG> register
 852:libs/nRF24/nRF24.c ****   * @param  mask_rx_dr Mask interrupt caused by RX_IDR. [ MASK_RX_DR_MASK1 | MASK_RX_DR_MASK0 | MAS
 853:libs/nRF24/nRF24.c ****   * @param  mask_tx_ds Mask interrupt caused by TX_DS.  [ MASK_TX_DS_MASK1 | MASK_TX_DS_MASK0 | MAS
 854:libs/nRF24/nRF24.c ****   * @param  mask_max_rt Mask interrupt cause by MAX_RT. [ MASK_MAX_RT_MASK1 | MASK_MAX_RT_MASK0 | M
 855:libs/nRF24/nRF24.c ****   * @param  en_crc Enable CRC. [ EN_CRC_MASK1 | EN_CRC_MASK0 | EN_CRC_MASKDEFAULT ]
 856:libs/nRF24/nRF24.c ****   * @param  crco CRC encoding scheme. [ CRCO_MASK1 | CRCO_MASK0 | CRCO_MASKDEFAULT ]
 857:libs/nRF24/nRF24.c ****   * @param  pwr_up Power Up / Down. [ PWR_UP_MASK1 | PWR_UP_MASK0 | PWR_UP_MASKDEFAULT ]
 858:libs/nRF24/nRF24.c ****   * @param  prim_rx RX/TX control. [ PRIM_RX_MASK1 | PRIM_RX_MASK0 | PRIM_RX_MASKDEFAULT ]
 859:libs/nRF24/nRF24.c ****   * @retval None.
 860:libs/nRF24/nRF24.c ****   */
 861:libs/nRF24/nRF24.c **** void nRF24_set_CONFIG(uint8_t mask_rx_dr, uint8_t mask_tx_ds, uint8_t mask_max_rt, uint8_t en_crc, 
 862:libs/nRF24/nRF24.c **** {
 1615              		.loc 1 862 0
 1616              		.cfi_startproc
ARM GAS  /tmp/ccvdf1ti.s 			page 45


 1617              		@ args = 12, pretend = 0, frame = 8
 1618              		@ frame_needed = 0, uses_anonymous_args = 0
 1619              	.LVL201:
 1620 0000 00B5     		push	{lr}
 1621              	.LCFI26:
 1622              		.cfi_def_cfa_offset 4
 1623              		.cfi_offset 14, -4
 1624 0002 83B0     		sub	sp, sp, #12
 1625              	.LCFI27:
 1626              		.cfi_def_cfa_offset 16
 863:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
 864:libs/nRF24/nRF24.c ****   writing_byte |= mask_rx_dr | mask_tx_ds | mask_max_rt | en_crc | crco | pwr_up | prim_rx; 
 1627              		.loc 1 864 0
 1628 0004 0143     		orrs	r1, r1, r0
 1629              	.LVL202:
 1630 0006 1143     		orrs	r1, r1, r2
 1631 0008 1943     		orrs	r1, r1, r3
 1632 000a 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 1633              	.LVL203:
 1634 000e 1943     		orrs	r1, r1, r3
 1635 0010 9DF81430 		ldrb	r3, [sp, #20]	@ zero_extendqisi2
 1636 0014 0B43     		orrs	r3, r3, r1
 1637 0016 9DF81810 		ldrb	r1, [sp, #24]	@ zero_extendqisi2
 1638 001a 1943     		orrs	r1, r1, r3
 1639 001c 02AA     		add	r2, sp, #8
 1640              	.LVL204:
 1641 001e 02F8011D 		strb	r1, [r2, #-1]!
 865:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);
 1642              		.loc 1 865 0
 1643 0022 0121     		movs	r1, #1
 1644 0024 2020     		movs	r0, #32
 1645              	.LVL205:
 1646 0026 FFF7FEFF 		bl	nRF24_verified_write_register
 1647              	.LVL206:
 866:libs/nRF24/nRF24.c **** }
 1648              		.loc 1 866 0
 1649 002a 03B0     		add	sp, sp, #12
 1650              	.LCFI28:
 1651              		.cfi_def_cfa_offset 4
 1652              		@ sp needed
 1653 002c 5DF804FB 		ldr	pc, [sp], #4
 1654              		.cfi_endproc
 1655              	.LFE155:
 1657              		.section	.text.nRF24_get_CONFIG,"ax",%progbits
 1658              		.align	1
 1659              		.global	nRF24_get_CONFIG
 1660              		.syntax unified
 1661              		.thumb
 1662              		.thumb_func
 1663              		.fpu fpv4-sp-d16
 1665              	nRF24_get_CONFIG:
 1666              	.LFB156:
 867:libs/nRF24/nRF24.c **** 
 868:libs/nRF24/nRF24.c **** 
 869:libs/nRF24/nRF24.c **** /**
 870:libs/nRF24/nRF24.c ****   * @brief      Read <CONFIG> register from nRF24L01+.
 871:libs/nRF24/nRF24.c ****   * @param      None.
ARM GAS  /tmp/ccvdf1ti.s 			page 46


 872:libs/nRF24/nRF24.c ****   * @retval     <CONFIG> register value.
 873:libs/nRF24/nRF24.c ****   */
 874:libs/nRF24/nRF24.c **** uint8_t nRF24_get_CONFIG() 
 875:libs/nRF24/nRF24.c **** {
 1667              		.loc 1 875 0
 1668              		.cfi_startproc
 1669              		@ args = 0, pretend = 0, frame = 8
 1670              		@ frame_needed = 0, uses_anonymous_args = 0
 1671 0000 00B5     		push	{lr}
 1672              	.LCFI29:
 1673              		.cfi_def_cfa_offset 4
 1674              		.cfi_offset 14, -4
 1675 0002 83B0     		sub	sp, sp, #12
 1676              	.LCFI30:
 1677              		.cfi_def_cfa_offset 16
 876:libs/nRF24/nRF24.c ****   uint8_t config_reg;
 877:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + CONFIG, 1, &config_reg);
 1678              		.loc 1 877 0
 1679 0004 0DF10702 		add	r2, sp, #7
 1680 0008 0121     		movs	r1, #1
 1681 000a 0020     		movs	r0, #0
 1682 000c FFF7FEFF 		bl	spi_read_register
 1683              	.LVL207:
 878:libs/nRF24/nRF24.c ****   return config_reg;
 879:libs/nRF24/nRF24.c **** }
 1684              		.loc 1 879 0
 1685 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1686 0014 03B0     		add	sp, sp, #12
 1687              	.LCFI31:
 1688              		.cfi_def_cfa_offset 4
 1689              		@ sp needed
 1690 0016 5DF804FB 		ldr	pc, [sp], #4
 1691              		.cfi_endproc
 1692              	.LFE156:
 1694              		.section	.text.nRF24_set_EN_AA,"ax",%progbits
 1695              		.align	1
 1696              		.global	nRF24_set_EN_AA
 1697              		.syntax unified
 1698              		.thumb
 1699              		.thumb_func
 1700              		.fpu fpv4-sp-d16
 1702              	nRF24_set_EN_AA:
 1703              	.LFB157:
 880:libs/nRF24/nRF24.c **** 
 881:libs/nRF24/nRF24.c **** 
 882:libs/nRF24/nRF24.c **** /**
 883:libs/nRF24/nRF24.c ****   * @brief  nRF24 set <EN_AA> register
 884:libs/nRF24/nRF24.c ****   * @param  enaa_p5 Enable auto acknowledgement in data pipe 5. [ ENAA_P5_MASK1 | ENAA_P5_MASK0 | E
 885:libs/nRF24/nRF24.c ****   * @param  enaa_p4 Enable auto acknowledgement in data pipe 4. [ ENAA_P4_MASK1 | ENAA_P4_MASK0 | E
 886:libs/nRF24/nRF24.c ****   * @param  enaa_p3 Enable auto acknowledgement in data pipe 3. [ ENAA_P3_MASK1 | ENAA_P3_MASK0 | E
 887:libs/nRF24/nRF24.c ****   * @param  enaa_p2 Enable auto acknowledgement in data pipe 2. [ ENAA_P2_MASK1 | ENAA_P2_MASK0 | E
 888:libs/nRF24/nRF24.c ****   * @param  enaa_p1 Enable auto acknowledgement in data pipe 1. [ ENAA_P1_MASK1 | ENAA_P1_MASK0 | E
 889:libs/nRF24/nRF24.c ****   * @param  enaa_p0 Enable auto acknowledgement in data pipe 0. [ ENAA_P0_MASK1 | ENAA_P0_MASK0 | E
 890:libs/nRF24/nRF24.c ****   * @retval None.
 891:libs/nRF24/nRF24.c ****   */
 892:libs/nRF24/nRF24.c **** void nRF24_set_EN_AA(uint8_t enaa_p5, uint8_t enaa_p4, uint8_t enaa_p3, uint8_t enaa_p2, uint8_t en
 893:libs/nRF24/nRF24.c **** {
ARM GAS  /tmp/ccvdf1ti.s 			page 47


 1704              		.loc 1 893 0
 1705              		.cfi_startproc
 1706              		@ args = 8, pretend = 0, frame = 8
 1707              		@ frame_needed = 0, uses_anonymous_args = 0
 1708              	.LVL208:
 1709 0000 00B5     		push	{lr}
 1710              	.LCFI32:
 1711              		.cfi_def_cfa_offset 4
 1712              		.cfi_offset 14, -4
 1713 0002 83B0     		sub	sp, sp, #12
 1714              	.LCFI33:
 1715              		.cfi_def_cfa_offset 16
 894:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
 895:libs/nRF24/nRF24.c ****   writing_byte |= enaa_p5 | enaa_p4 | enaa_p3 | enaa_p2 | enaa_p1 | enaa_p0;
 1716              		.loc 1 895 0
 1717 0004 0143     		orrs	r1, r1, r0
 1718              	.LVL209:
 1719 0006 1143     		orrs	r1, r1, r2
 1720 0008 1943     		orrs	r1, r1, r3
 1721 000a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 1722              	.LVL210:
 1723 000e 0A43     		orrs	r2, r2, r1
 1724 0010 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 1725 0014 1143     		orrs	r1, r1, r2
 1726 0016 02AA     		add	r2, sp, #8
 1727 0018 02F8011D 		strb	r1, [r2, #-1]!
 896:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);
 1728              		.loc 1 896 0
 1729 001c 0121     		movs	r1, #1
 1730 001e 2120     		movs	r0, #33
 1731              	.LVL211:
 1732 0020 FFF7FEFF 		bl	nRF24_verified_write_register
 1733              	.LVL212:
 897:libs/nRF24/nRF24.c **** }
 1734              		.loc 1 897 0
 1735 0024 03B0     		add	sp, sp, #12
 1736              	.LCFI34:
 1737              		.cfi_def_cfa_offset 4
 1738              		@ sp needed
 1739 0026 5DF804FB 		ldr	pc, [sp], #4
 1740              		.cfi_endproc
 1741              	.LFE157:
 1743              		.section	.text.nRF24_get_EN_AA,"ax",%progbits
 1744              		.align	1
 1745              		.global	nRF24_get_EN_AA
 1746              		.syntax unified
 1747              		.thumb
 1748              		.thumb_func
 1749              		.fpu fpv4-sp-d16
 1751              	nRF24_get_EN_AA:
 1752              	.LFB158:
 898:libs/nRF24/nRF24.c **** 
 899:libs/nRF24/nRF24.c **** /**
 900:libs/nRF24/nRF24.c ****   * @brief      Read <EN_AA> register from nRF24L01+.
 901:libs/nRF24/nRF24.c ****   * @param      None.
 902:libs/nRF24/nRF24.c ****   * @retval     <EN_AA> register value.
 903:libs/nRF24/nRF24.c ****   */
ARM GAS  /tmp/ccvdf1ti.s 			page 48


 904:libs/nRF24/nRF24.c **** uint8_t nRF24_get_EN_AA() 
 905:libs/nRF24/nRF24.c **** {
 1753              		.loc 1 905 0
 1754              		.cfi_startproc
 1755              		@ args = 0, pretend = 0, frame = 8
 1756              		@ frame_needed = 0, uses_anonymous_args = 0
 1757 0000 00B5     		push	{lr}
 1758              	.LCFI35:
 1759              		.cfi_def_cfa_offset 4
 1760              		.cfi_offset 14, -4
 1761 0002 83B0     		sub	sp, sp, #12
 1762              	.LCFI36:
 1763              		.cfi_def_cfa_offset 16
 906:libs/nRF24/nRF24.c ****   uint8_t read_byte;
 907:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + EN_AA, 1, &read_byte);
 1764              		.loc 1 907 0
 1765 0004 0DF10702 		add	r2, sp, #7
 1766 0008 0121     		movs	r1, #1
 1767 000a 0846     		mov	r0, r1
 1768 000c FFF7FEFF 		bl	spi_read_register
 1769              	.LVL213:
 908:libs/nRF24/nRF24.c ****   return read_byte;
 909:libs/nRF24/nRF24.c **** }
 1770              		.loc 1 909 0
 1771 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1772 0014 03B0     		add	sp, sp, #12
 1773              	.LCFI37:
 1774              		.cfi_def_cfa_offset 4
 1775              		@ sp needed
 1776 0016 5DF804FB 		ldr	pc, [sp], #4
 1777              		.cfi_endproc
 1778              	.LFE158:
 1780              		.section	.text.nRF24_set_EN_RXADDR,"ax",%progbits
 1781              		.align	1
 1782              		.global	nRF24_set_EN_RXADDR
 1783              		.syntax unified
 1784              		.thumb
 1785              		.thumb_func
 1786              		.fpu fpv4-sp-d16
 1788              	nRF24_set_EN_RXADDR:
 1789              	.LFB159:
 910:libs/nRF24/nRF24.c **** 
 911:libs/nRF24/nRF24.c **** 
 912:libs/nRF24/nRF24.c **** /**
 913:libs/nRF24/nRF24.c ****   * @brief  nRF24 set <EN_RXADDR> register
 914:libs/nRF24/nRF24.c ****   * @param  erx_p5 enable RX in data pipe 5.   [ ERX_P5_MASK1 | ERX_P5_MASK0 | ERX_P5_MASKDEFAULT ]
 915:libs/nRF24/nRF24.c ****   * @param  erx_p4 enable RX in data pipe 4.   [ ERX_P4_MASK1 | ERX_P4_MASK0 | ERX_P4_MASKDEFAULT ]
 916:libs/nRF24/nRF24.c ****   * @param  erx_p3 enable RX in data pipe 3.   [ ERX_P3_MASK1 | ERX_P3_MASK0 | ERX_P3_MASKDEFAULT ]
 917:libs/nRF24/nRF24.c ****   * @param  erx_p2 enable RX in data pipe 2.   [ ERX_P2_MASK1 | ERX_P2_MASK0 | ERX_P2_MASKDEFAULT ]
 918:libs/nRF24/nRF24.c ****   * @param  erx_p1 enable RX in data pipe 1.   [ ERX_P1_MASK1 | ERX_P1_MASK0 | ERX_P1_MASKDEFAULT ]
 919:libs/nRF24/nRF24.c ****   * @param  erx_p0 enable RX in data pipe 0.   [ ERX_P0_MASK1 | ERX_P0_MASK0 | ERX_P0_MASKDEFAULT ]
 920:libs/nRF24/nRF24.c ****   * @retval None.
 921:libs/nRF24/nRF24.c ****   */
 922:libs/nRF24/nRF24.c **** void nRF24_set_EN_RXADDR(uint8_t erx_p5, uint8_t erx_p4, uint8_t erx_p3, uint8_t erx_p2, uint8_t er
 923:libs/nRF24/nRF24.c **** {
 1790              		.loc 1 923 0
 1791              		.cfi_startproc
ARM GAS  /tmp/ccvdf1ti.s 			page 49


 1792              		@ args = 8, pretend = 0, frame = 8
 1793              		@ frame_needed = 0, uses_anonymous_args = 0
 1794              	.LVL214:
 1795 0000 00B5     		push	{lr}
 1796              	.LCFI38:
 1797              		.cfi_def_cfa_offset 4
 1798              		.cfi_offset 14, -4
 1799 0002 83B0     		sub	sp, sp, #12
 1800              	.LCFI39:
 1801              		.cfi_def_cfa_offset 16
 924:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
 925:libs/nRF24/nRF24.c ****   writing_byte |= erx_p5 | erx_p4 | erx_p3 | erx_p2 | erx_p1 | erx_p0;
 1802              		.loc 1 925 0
 1803 0004 0143     		orrs	r1, r1, r0
 1804              	.LVL215:
 1805 0006 1143     		orrs	r1, r1, r2
 1806 0008 1943     		orrs	r1, r1, r3
 1807 000a 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 1808              	.LVL216:
 1809 000e 0A43     		orrs	r2, r2, r1
 1810 0010 9DF81410 		ldrb	r1, [sp, #20]	@ zero_extendqisi2
 1811 0014 1143     		orrs	r1, r1, r2
 1812 0016 02AA     		add	r2, sp, #8
 1813 0018 02F8011D 		strb	r1, [r2, #-1]!
 926:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);
 1814              		.loc 1 926 0
 1815 001c 0121     		movs	r1, #1
 1816 001e 2220     		movs	r0, #34
 1817              	.LVL217:
 1818 0020 FFF7FEFF 		bl	nRF24_verified_write_register
 1819              	.LVL218:
 927:libs/nRF24/nRF24.c **** }
 1820              		.loc 1 927 0
 1821 0024 03B0     		add	sp, sp, #12
 1822              	.LCFI40:
 1823              		.cfi_def_cfa_offset 4
 1824              		@ sp needed
 1825 0026 5DF804FB 		ldr	pc, [sp], #4
 1826              		.cfi_endproc
 1827              	.LFE159:
 1829              		.section	.text.nRF24_get_EN_RXADDR,"ax",%progbits
 1830              		.align	1
 1831              		.global	nRF24_get_EN_RXADDR
 1832              		.syntax unified
 1833              		.thumb
 1834              		.thumb_func
 1835              		.fpu fpv4-sp-d16
 1837              	nRF24_get_EN_RXADDR:
 1838              	.LFB160:
 928:libs/nRF24/nRF24.c **** 
 929:libs/nRF24/nRF24.c **** 
 930:libs/nRF24/nRF24.c **** /**
 931:libs/nRF24/nRF24.c ****   * @brief      Read <EN_RXADDR> register from nRF24L01+.
 932:libs/nRF24/nRF24.c ****   * @param      None.
 933:libs/nRF24/nRF24.c ****   * @retval     <EN_RXADDR> register value.
 934:libs/nRF24/nRF24.c ****   */
 935:libs/nRF24/nRF24.c **** uint8_t nRF24_get_EN_RXADDR() 
ARM GAS  /tmp/ccvdf1ti.s 			page 50


 936:libs/nRF24/nRF24.c **** {
 1839              		.loc 1 936 0
 1840              		.cfi_startproc
 1841              		@ args = 0, pretend = 0, frame = 8
 1842              		@ frame_needed = 0, uses_anonymous_args = 0
 1843 0000 00B5     		push	{lr}
 1844              	.LCFI41:
 1845              		.cfi_def_cfa_offset 4
 1846              		.cfi_offset 14, -4
 1847 0002 83B0     		sub	sp, sp, #12
 1848              	.LCFI42:
 1849              		.cfi_def_cfa_offset 16
 937:libs/nRF24/nRF24.c ****   uint8_t read_byte;
 938:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + EN_RXADDR, 1, &read_byte);
 1850              		.loc 1 938 0
 1851 0004 0DF10702 		add	r2, sp, #7
 1852 0008 0121     		movs	r1, #1
 1853 000a 0220     		movs	r0, #2
 1854 000c FFF7FEFF 		bl	spi_read_register
 1855              	.LVL219:
 939:libs/nRF24/nRF24.c ****   return read_byte;
 940:libs/nRF24/nRF24.c **** }
 1856              		.loc 1 940 0
 1857 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1858 0014 03B0     		add	sp, sp, #12
 1859              	.LCFI43:
 1860              		.cfi_def_cfa_offset 4
 1861              		@ sp needed
 1862 0016 5DF804FB 		ldr	pc, [sp], #4
 1863              		.cfi_endproc
 1864              	.LFE160:
 1866              		.section	.text.nRF24_set_SETUP_AW,"ax",%progbits
 1867              		.align	1
 1868              		.global	nRF24_set_SETUP_AW
 1869              		.syntax unified
 1870              		.thumb
 1871              		.thumb_func
 1872              		.fpu fpv4-sp-d16
 1874              	nRF24_set_SETUP_AW:
 1875              	.LFB161:
 941:libs/nRF24/nRF24.c **** 
 942:libs/nRF24/nRF24.c **** /**
 943:libs/nRF24/nRF24.c ****   * @brief  nRF24 set <AW> register
 944:libs/nRF24/nRF24.c ****   * @param  aw Setup of Address Widths. [ AW_MASK3bytes | AW_MASK4bytes | AW_MASK5bytes | AW_MASKDE
 945:libs/nRF24/nRF24.c ****   * @retval None.
 946:libs/nRF24/nRF24.c ****   */
 947:libs/nRF24/nRF24.c **** void nRF24_set_SETUP_AW(uint8_t aw) 
 948:libs/nRF24/nRF24.c **** {
 1876              		.loc 1 948 0
 1877              		.cfi_startproc
 1878              		@ args = 0, pretend = 0, frame = 8
 1879              		@ frame_needed = 0, uses_anonymous_args = 0
 1880              	.LVL220:
 1881 0000 00B5     		push	{lr}
 1882              	.LCFI44:
 1883              		.cfi_def_cfa_offset 4
 1884              		.cfi_offset 14, -4
ARM GAS  /tmp/ccvdf1ti.s 			page 51


 1885 0002 83B0     		sub	sp, sp, #12
 1886              	.LCFI45:
 1887              		.cfi_def_cfa_offset 16
 949:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
 950:libs/nRF24/nRF24.c ****   writing_byte |= aw;
 1888              		.loc 1 950 0
 1889 0004 02AA     		add	r2, sp, #8
 1890 0006 02F8010D 		strb	r0, [r2, #-1]!
 951:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_AW, 1, &writing_byte);
 1891              		.loc 1 951 0
 1892 000a 0121     		movs	r1, #1
 1893 000c 2320     		movs	r0, #35
 1894              	.LVL221:
 1895 000e FFF7FEFF 		bl	nRF24_verified_write_register
 1896              	.LVL222:
 952:libs/nRF24/nRF24.c **** }
 1897              		.loc 1 952 0
 1898 0012 03B0     		add	sp, sp, #12
 1899              	.LCFI46:
 1900              		.cfi_def_cfa_offset 4
 1901              		@ sp needed
 1902 0014 5DF804FB 		ldr	pc, [sp], #4
 1903              		.cfi_endproc
 1904              	.LFE161:
 1906              		.section	.text.nRF24_get_SETUP_AW,"ax",%progbits
 1907              		.align	1
 1908              		.global	nRF24_get_SETUP_AW
 1909              		.syntax unified
 1910              		.thumb
 1911              		.thumb_func
 1912              		.fpu fpv4-sp-d16
 1914              	nRF24_get_SETUP_AW:
 1915              	.LFB162:
 953:libs/nRF24/nRF24.c **** 
 954:libs/nRF24/nRF24.c **** /**
 955:libs/nRF24/nRF24.c ****   * @brief      Read <SETUP_AW> register from nRF24L01+.
 956:libs/nRF24/nRF24.c ****   * @param      None.
 957:libs/nRF24/nRF24.c ****   * @retval     <SETUP_AW> register value.
 958:libs/nRF24/nRF24.c ****   */
 959:libs/nRF24/nRF24.c **** uint8_t nRF24_get_SETUP_AW() 
 960:libs/nRF24/nRF24.c **** {
 1916              		.loc 1 960 0
 1917              		.cfi_startproc
 1918              		@ args = 0, pretend = 0, frame = 8
 1919              		@ frame_needed = 0, uses_anonymous_args = 0
 1920 0000 00B5     		push	{lr}
 1921              	.LCFI47:
 1922              		.cfi_def_cfa_offset 4
 1923              		.cfi_offset 14, -4
 1924 0002 83B0     		sub	sp, sp, #12
 1925              	.LCFI48:
 1926              		.cfi_def_cfa_offset 16
 961:libs/nRF24/nRF24.c ****   uint8_t read_byte;
 962:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + SETUP_AW, 1, &read_byte);
 1927              		.loc 1 962 0
 1928 0004 0DF10702 		add	r2, sp, #7
 1929 0008 0121     		movs	r1, #1
ARM GAS  /tmp/ccvdf1ti.s 			page 52


 1930 000a 0320     		movs	r0, #3
 1931 000c FFF7FEFF 		bl	spi_read_register
 1932              	.LVL223:
 963:libs/nRF24/nRF24.c ****   return read_byte;
 964:libs/nRF24/nRF24.c **** }
 1933              		.loc 1 964 0
 1934 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 1935 0014 03B0     		add	sp, sp, #12
 1936              	.LCFI49:
 1937              		.cfi_def_cfa_offset 4
 1938              		@ sp needed
 1939 0016 5DF804FB 		ldr	pc, [sp], #4
 1940              		.cfi_endproc
 1941              	.LFE162:
 1943              		.section	.text.nRF24_set_SETUP_RETR,"ax",%progbits
 1944              		.align	1
 1945              		.global	nRF24_set_SETUP_RETR
 1946              		.syntax unified
 1947              		.thumb
 1948              		.thumb_func
 1949              		.fpu fpv4-sp-d16
 1951              	nRF24_set_SETUP_RETR:
 1952              	.LFB163:
 965:libs/nRF24/nRF24.c **** 
 966:libs/nRF24/nRF24.c **** /**
 967:libs/nRF24/nRF24.c ****   * @brief  nRF24 configure auto-retransmit delay and auto retransmit count.
 968:libs/nRF24/nRF24.c ****   * @param  ard Auto-Retransmit Delay
 969:libs/nRF24/nRF24.c ****   *   [ ARD_MASK250us  | ARD_MASK500us  | ARD_MASK750us  | ARD_MASK1000us | ARD_MASK1250us        
 970:libs/nRF24/nRF24.c ****   *   | ARD_MASK1500us | ARD_MASK1750us | ARD_MASK2000us | ARD_MASK2250us | ARD_MASK2500us        
 971:libs/nRF24/nRF24.c ****   *   | ARD_MASK2750us | ARD_MASK3000us | ARD_MASK3250us | ARD_MASK3500us | ARD_MASK3750us        
 972:libs/nRF24/nRF24.c ****   *   | ARD_MASK4000us | ARD_MASKDEFAULT ]
 973:libs/nRF24/nRF24.c ****   * @param  arc Auto-Retransmit Count
 974:libs/nRF24/nRF24.c ****   *    [  ARC_MASK0 | ARC_MASK1 | ARC_MASK2  | ARC_MASK3  | ARC_MASK4  | ARC_MASK5   | ARC_MASK6  |
 975:libs/nRF24/nRF24.c ****   *   | ARC_MASK8 | ARC_MASK9 | ARC_MASK10 | ARC_MASK11 | ARC_MASK12 |  ARC_MASK13 | ARC_MASK14 | A
 976:libs/nRF24/nRF24.c ****   *   | ARC_MASKDEFAULT ]
 977:libs/nRF24/nRF24.c ****   * @retval None.
 978:libs/nRF24/nRF24.c ****   */
 979:libs/nRF24/nRF24.c **** void nRF24_set_SETUP_RETR(uint8_t ard, uint8_t arc)
 980:libs/nRF24/nRF24.c **** {
 1953              		.loc 1 980 0
 1954              		.cfi_startproc
 1955              		@ args = 0, pretend = 0, frame = 8
 1956              		@ frame_needed = 0, uses_anonymous_args = 0
 1957              	.LVL224:
 1958 0000 00B5     		push	{lr}
 1959              	.LCFI50:
 1960              		.cfi_def_cfa_offset 4
 1961              		.cfi_offset 14, -4
 1962 0002 83B0     		sub	sp, sp, #12
 1963              	.LCFI51:
 1964              		.cfi_def_cfa_offset 16
 981:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
 982:libs/nRF24/nRF24.c ****   writing_byte |= ard | arc;
 1965              		.loc 1 982 0
 1966 0004 0143     		orrs	r1, r1, r0
 1967              	.LVL225:
 1968 0006 02AA     		add	r2, sp, #8
ARM GAS  /tmp/ccvdf1ti.s 			page 53


 1969 0008 02F8011D 		strb	r1, [r2, #-1]!
 983:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);
 1970              		.loc 1 983 0
 1971 000c 0121     		movs	r1, #1
 1972 000e 2420     		movs	r0, #36
 1973              	.LVL226:
 1974 0010 FFF7FEFF 		bl	nRF24_verified_write_register
 1975              	.LVL227:
 984:libs/nRF24/nRF24.c **** }
 1976              		.loc 1 984 0
 1977 0014 03B0     		add	sp, sp, #12
 1978              	.LCFI52:
 1979              		.cfi_def_cfa_offset 4
 1980              		@ sp needed
 1981 0016 5DF804FB 		ldr	pc, [sp], #4
 1982              		.cfi_endproc
 1983              	.LFE163:
 1985              		.section	.text.nRF24_get_SETUP_RETR,"ax",%progbits
 1986              		.align	1
 1987              		.global	nRF24_get_SETUP_RETR
 1988              		.syntax unified
 1989              		.thumb
 1990              		.thumb_func
 1991              		.fpu fpv4-sp-d16
 1993              	nRF24_get_SETUP_RETR:
 1994              	.LFB164:
 985:libs/nRF24/nRF24.c **** 
 986:libs/nRF24/nRF24.c **** /**
 987:libs/nRF24/nRF24.c ****   * @brief      Read <SETUP_RETR> register from nRF24L01+.
 988:libs/nRF24/nRF24.c ****   * @param      None.
 989:libs/nRF24/nRF24.c ****   * @retval     <SETUP_RETR> register value.
 990:libs/nRF24/nRF24.c ****   */
 991:libs/nRF24/nRF24.c **** uint8_t nRF24_get_SETUP_RETR(uint8_t ARD, uint8_t ARC)
 992:libs/nRF24/nRF24.c **** {
 1995              		.loc 1 992 0
 1996              		.cfi_startproc
 1997              		@ args = 0, pretend = 0, frame = 8
 1998              		@ frame_needed = 0, uses_anonymous_args = 0
 1999              	.LVL228:
 2000 0000 00B5     		push	{lr}
 2001              	.LCFI53:
 2002              		.cfi_def_cfa_offset 4
 2003              		.cfi_offset 14, -4
 2004 0002 83B0     		sub	sp, sp, #12
 2005              	.LCFI54:
 2006              		.cfi_def_cfa_offset 16
 993:libs/nRF24/nRF24.c ****   uint8_t read_byte;
 994:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + SETUP_RETR, 1, &read_byte);
 2007              		.loc 1 994 0
 2008 0004 0DF10702 		add	r2, sp, #7
 2009 0008 0121     		movs	r1, #1
 2010              	.LVL229:
 2011 000a 0420     		movs	r0, #4
 2012              	.LVL230:
 2013 000c FFF7FEFF 		bl	spi_read_register
 2014              	.LVL231:
 995:libs/nRF24/nRF24.c ****   return read_byte;
ARM GAS  /tmp/ccvdf1ti.s 			page 54


 996:libs/nRF24/nRF24.c **** }
 2015              		.loc 1 996 0
 2016 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2017 0014 03B0     		add	sp, sp, #12
 2018              	.LCFI55:
 2019              		.cfi_def_cfa_offset 4
 2020              		@ sp needed
 2021 0016 5DF804FB 		ldr	pc, [sp], #4
 2022              		.cfi_endproc
 2023              	.LFE164:
 2025              		.section	.text.nRF24_set_RF_CH,"ax",%progbits
 2026              		.align	1
 2027              		.global	nRF24_set_RF_CH
 2028              		.syntax unified
 2029              		.thumb
 2030              		.thumb_func
 2031              		.fpu fpv4-sp-d16
 2033              	nRF24_set_RF_CH:
 2034              	.LFB165:
 997:libs/nRF24/nRF24.c **** 
 998:libs/nRF24/nRF24.c **** 
 999:libs/nRF24/nRF24.c **** 
1000:libs/nRF24/nRF24.c **** /**
1001:libs/nRF24/nRF24.c ****   * @brief  nRF24 sets the frequency channel of nRF24L01+ operates on.
1002:libs/nRF24/nRF24.c ****   * @param  ch Channel. It is basically frequency in MHz. [ RF_CH_MASKDEFAULT ]
1003:libs/nRF24/nRF24.c ****   * @retval None.
1004:libs/nRF24/nRF24.c ****   * @note   frequency = (2400 + ch) MHz
1005:libs/nRF24/nRF24.c ****   */
1006:libs/nRF24/nRF24.c **** void nRF24_set_RF_CH(uint8_t ch)
1007:libs/nRF24/nRF24.c **** {
 2035              		.loc 1 1007 0
 2036              		.cfi_startproc
 2037              		@ args = 0, pretend = 0, frame = 8
 2038              		@ frame_needed = 0, uses_anonymous_args = 0
 2039              	.LVL232:
 2040 0000 00B5     		push	{lr}
 2041              	.LCFI56:
 2042              		.cfi_def_cfa_offset 4
 2043              		.cfi_offset 14, -4
 2044 0002 83B0     		sub	sp, sp, #12
 2045              	.LCFI57:
 2046              		.cfi_def_cfa_offset 16
1008:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1009:libs/nRF24/nRF24.c ****   writing_byte |= ch;
 2047              		.loc 1 1009 0
 2048 0004 02AA     		add	r2, sp, #8
 2049 0006 02F8010D 		strb	r0, [r2, #-1]!
1010:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RF_CH, 1, &writing_byte);
 2050              		.loc 1 1010 0
 2051 000a 0121     		movs	r1, #1
 2052 000c 2520     		movs	r0, #37
 2053              	.LVL233:
 2054 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2055              	.LVL234:
1011:libs/nRF24/nRF24.c **** }
 2056              		.loc 1 1011 0
 2057 0012 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccvdf1ti.s 			page 55


 2058              	.LCFI58:
 2059              		.cfi_def_cfa_offset 4
 2060              		@ sp needed
 2061 0014 5DF804FB 		ldr	pc, [sp], #4
 2062              		.cfi_endproc
 2063              	.LFE165:
 2065              		.section	.text.nRF24_get_RF_CH,"ax",%progbits
 2066              		.align	1
 2067              		.global	nRF24_get_RF_CH
 2068              		.syntax unified
 2069              		.thumb
 2070              		.thumb_func
 2071              		.fpu fpv4-sp-d16
 2073              	nRF24_get_RF_CH:
 2074              	.LFB166:
1012:libs/nRF24/nRF24.c **** 
1013:libs/nRF24/nRF24.c **** 
1014:libs/nRF24/nRF24.c **** 
1015:libs/nRF24/nRF24.c **** /**
1016:libs/nRF24/nRF24.c ****   * @brief   Read <RF_CH> register from nRF24L01+.
1017:libs/nRF24/nRF24.c ****   * @param   None.
1018:libs/nRF24/nRF24.c ****   * @retval  <RF_CH> register value.
1019:libs/nRF24/nRF24.c ****   */
1020:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RF_CH()
1021:libs/nRF24/nRF24.c **** {
 2075              		.loc 1 1021 0
 2076              		.cfi_startproc
 2077              		@ args = 0, pretend = 0, frame = 8
 2078              		@ frame_needed = 0, uses_anonymous_args = 0
 2079 0000 00B5     		push	{lr}
 2080              	.LCFI59:
 2081              		.cfi_def_cfa_offset 4
 2082              		.cfi_offset 14, -4
 2083 0002 83B0     		sub	sp, sp, #12
 2084              	.LCFI60:
 2085              		.cfi_def_cfa_offset 16
1022:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1023:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RF_CH, 1, &read_byte);
 2086              		.loc 1 1023 0
 2087 0004 0DF10702 		add	r2, sp, #7
 2088 0008 0121     		movs	r1, #1
 2089 000a 0520     		movs	r0, #5
 2090 000c FFF7FEFF 		bl	spi_read_register
 2091              	.LVL235:
1024:libs/nRF24/nRF24.c ****   return read_byte;
1025:libs/nRF24/nRF24.c **** }
 2092              		.loc 1 1025 0
 2093 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2094 0014 03B0     		add	sp, sp, #12
 2095              	.LCFI61:
 2096              		.cfi_def_cfa_offset 4
 2097              		@ sp needed
 2098 0016 5DF804FB 		ldr	pc, [sp], #4
 2099              		.cfi_endproc
 2100              	.LFE166:
 2102              		.section	.text.nRF24_set_RF_SETUP,"ax",%progbits
 2103              		.align	1
ARM GAS  /tmp/ccvdf1ti.s 			page 56


 2104              		.global	nRF24_set_RF_SETUP
 2105              		.syntax unified
 2106              		.thumb
 2107              		.thumb_func
 2108              		.fpu fpv4-sp-d16
 2110              	nRF24_set_RF_SETUP:
 2111              	.LFB167:
1026:libs/nRF24/nRF24.c **** 
1027:libs/nRF24/nRF24.c **** /**
1028:libs/nRF24/nRF24.c ****   * @brief nRF24 RF SETUP register configuration. 
1029:libs/nRF24/nRF24.c ****   * @param cont_wave Enables continuous carrier transmit when high. [ CONT_WAVE_MASK1 | CONT_WAVE_M
1030:libs/nRF24/nRF24.c ****   * @param rf_dr_low Sets RF data rate to 250 kbps. [ RF_DR_LOW_MASK1 | RF_DR_LOW_MASK0 | RF_DR_LOW
1031:libs/nRF24/nRF24.c ****   * @param pll_lock (!) TEST-ONLY SIGNAL for Nordic's internal testing purpose. Forces PLL lock sig
1032:libs/nRF24/nRF24.c ****   * @param rf_dr_high Select between high speed data rates. This bit is don't care if RF_DR_LOW bit
1033:libs/nRF24/nRF24.c ****   *  
1034:libs/nRF24/nRF24.c ****   *    [ RF_DR_HIGH_MASK1 | RF_DR_HIGH_MASK0 | RF_DR_HIGH_MASKDEFAULT ]
1035:libs/nRF24/nRF24.c ****   *
1036:libs/nRF24/nRF24.c ****   * @note Use RF_DR_HIGH_MASKx and RF_DR_LOW_MASKx or you can use the following masks that combines
1037:libs/nRF24/nRF24.c ****   *
1038:libs/nRF24/nRF24.c ****   *     Encoding for RF data rate: 
1039:libs/nRF24/nRF24.c ****   *     {RF_DR_LOW, RF_DR_HIGH}   Data-Rate
1040:libs/nRF24/nRF24.c ****   *          0    ,     0            1   Mbps
1041:libs/nRF24/nRF24.c ****   *          0    ,     1            2   Mbps
1042:libs/nRF24/nRF24.c ****   *          1    ,     0            250 kbps
1043:libs/nRF24/nRF24.c ****   *          1    ,     1            Reserved
1044:libs/nRF24/nRF24.c ****   *  
1045:libs/nRF24/nRF24.c ****   *    [ RF_DR_MASK1Mbps | RF_DR_MASK2Mbps | RF_DR_MASK250kbps ]
1046:libs/nRF24/nRF24.c ****   *
1047:libs/nRF24/nRF24.c ****   * @param rf_pwr RF Output power in TX mode. [ RF_PWR_MASKNEG18dBm | RF_PWR_MASKNEG12dBm | RF_PWR_
1048:libs/nRF24/nRF24.c ****   *                Power
1049:libs/nRF24/nRF24.c ****   *         11   -18 dBm
1050:libs/nRF24/nRF24.c ****   *         01   -12 dBm
1051:libs/nRF24/nRF24.c ****   *         10    -6 dBm
1052:libs/nRF24/nRF24.c ****   *         11     0 dBm
1053:libs/nRF24/nRF24.c ****   * @retval None.
1054:libs/nRF24/nRF24.c ****   */
1055:libs/nRF24/nRF24.c **** void nRF24_set_RF_SETUP(uint8_t cont_wave, uint8_t rf_dr_low, uint8_t pll_lock, uint8_t rf_dr_high,
1056:libs/nRF24/nRF24.c **** {
 2112              		.loc 1 1056 0
 2113              		.cfi_startproc
 2114              		@ args = 4, pretend = 0, frame = 8
 2115              		@ frame_needed = 0, uses_anonymous_args = 0
 2116              	.LVL236:
 2117 0000 00B5     		push	{lr}
 2118              	.LCFI62:
 2119              		.cfi_def_cfa_offset 4
 2120              		.cfi_offset 14, -4
 2121 0002 83B0     		sub	sp, sp, #12
 2122              	.LCFI63:
 2123              		.cfi_def_cfa_offset 16
1057:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1058:libs/nRF24/nRF24.c ****   writing_byte |= cont_wave | rf_dr_low | pll_lock | rf_dr_high | rf_pwr;
 2124              		.loc 1 1058 0
 2125 0004 0143     		orrs	r1, r1, r0
 2126              	.LVL237:
 2127 0006 1143     		orrs	r1, r1, r2
 2128 0008 1943     		orrs	r1, r1, r3
ARM GAS  /tmp/ccvdf1ti.s 			page 57


 2129 000a 9DF81030 		ldrb	r3, [sp, #16]	@ zero_extendqisi2
 2130              	.LVL238:
 2131 000e 1943     		orrs	r1, r1, r3
 2132 0010 02AA     		add	r2, sp, #8
 2133              	.LVL239:
 2134 0012 02F8011D 		strb	r1, [r2, #-1]!
1059:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 2135              		.loc 1 1059 0
 2136 0016 0121     		movs	r1, #1
 2137 0018 2620     		movs	r0, #38
 2138              	.LVL240:
 2139 001a FFF7FEFF 		bl	nRF24_verified_write_register
 2140              	.LVL241:
1060:libs/nRF24/nRF24.c **** }
 2141              		.loc 1 1060 0
 2142 001e 03B0     		add	sp, sp, #12
 2143              	.LCFI64:
 2144              		.cfi_def_cfa_offset 4
 2145              		@ sp needed
 2146 0020 5DF804FB 		ldr	pc, [sp], #4
 2147              		.cfi_endproc
 2148              	.LFE167:
 2150              		.section	.text.nRF24_get_RF_SETUP,"ax",%progbits
 2151              		.align	1
 2152              		.global	nRF24_get_RF_SETUP
 2153              		.syntax unified
 2154              		.thumb
 2155              		.thumb_func
 2156              		.fpu fpv4-sp-d16
 2158              	nRF24_get_RF_SETUP:
 2159              	.LFB168:
1061:libs/nRF24/nRF24.c **** 
1062:libs/nRF24/nRF24.c **** /**
1063:libs/nRF24/nRF24.c ****   * @brief   Read <RF_SETUP> register from nRF24L01+.
1064:libs/nRF24/nRF24.c ****   * @param   None.
1065:libs/nRF24/nRF24.c ****   * @retval  <RF_SETUP> register value.
1066:libs/nRF24/nRF24.c ****   */
1067:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RF_SETUP()
1068:libs/nRF24/nRF24.c **** {
 2160              		.loc 1 1068 0
 2161              		.cfi_startproc
 2162              		@ args = 0, pretend = 0, frame = 8
 2163              		@ frame_needed = 0, uses_anonymous_args = 0
 2164 0000 00B5     		push	{lr}
 2165              	.LCFI65:
 2166              		.cfi_def_cfa_offset 4
 2167              		.cfi_offset 14, -4
 2168 0002 83B0     		sub	sp, sp, #12
 2169              	.LCFI66:
 2170              		.cfi_def_cfa_offset 16
1069:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1070:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RF_SETUP, 1, &read_byte);
 2171              		.loc 1 1070 0
 2172 0004 0DF10702 		add	r2, sp, #7
 2173 0008 0121     		movs	r1, #1
 2174 000a 0620     		movs	r0, #6
 2175 000c FFF7FEFF 		bl	spi_read_register
ARM GAS  /tmp/ccvdf1ti.s 			page 58


 2176              	.LVL242:
1071:libs/nRF24/nRF24.c ****   return read_byte;
1072:libs/nRF24/nRF24.c **** }
 2177              		.loc 1 1072 0
 2178 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2179 0014 03B0     		add	sp, sp, #12
 2180              	.LCFI67:
 2181              		.cfi_def_cfa_offset 4
 2182              		@ sp needed
 2183 0016 5DF804FB 		ldr	pc, [sp], #4
 2184              		.cfi_endproc
 2185              	.LFE168:
 2187              		.section	.text.nRF24_clear_STATUS,"ax",%progbits
 2188              		.align	1
 2189              		.global	nRF24_clear_STATUS
 2190              		.syntax unified
 2191              		.thumb
 2192              		.thumb_func
 2193              		.fpu fpv4-sp-d16
 2195              	nRF24_clear_STATUS:
 2196              	.LFB169:
1073:libs/nRF24/nRF24.c **** 
1074:libs/nRF24/nRF24.c **** /**
1075:libs/nRF24/nRF24.c ****   * @brief      Clear flag bits in 'STATUS' register.
1076:libs/nRF24/nRF24.c ****   * @param      rx_dr Data Ready RX FIFO interrupt. Asserted when new data arrives RX FIFO.
1077:libs/nRF24/nRF24.c ****   *               Write 1 to clear bit [ RX_DR_MASK1 ]
1078:libs/nRF24/nRF24.c ****   * @param      tx_ds Data Sent TX FIFO interrupt. Asserted when packet transmitted on TX. 
1079:libs/nRF24/nRF24.c ****   *               If AUTO_ACK is activated, this bit is set high only when ACK is received. Write 1
1080:libs/nRF24/nRF24.c ****   * @param      max_rt Maximum number of TX retransmits interrupt. Write 1 to clear bit. 
1081:libs/nRF24/nRF24.c ****   *               If MAX_RT is asserted it must be cleared to enable further communication. [ MAX_R
1082:libs/nRF24/nRF24.c ****   * @retval     None.
1083:libs/nRF24/nRF24.c ****   */
1084:libs/nRF24/nRF24.c **** void nRF24_clear_STATUS(uint8_t rx_dr, uint8_t tx_ds, uint8_t max_rt) 
1085:libs/nRF24/nRF24.c **** {
 2197              		.loc 1 1085 0
 2198              		.cfi_startproc
 2199              		@ args = 0, pretend = 0, frame = 8
 2200              		@ frame_needed = 0, uses_anonymous_args = 0
 2201              	.LVL243:
 2202 0000 00B5     		push	{lr}
 2203              	.LCFI68:
 2204              		.cfi_def_cfa_offset 4
 2205              		.cfi_offset 14, -4
 2206 0002 83B0     		sub	sp, sp, #12
 2207              	.LCFI69:
 2208              		.cfi_def_cfa_offset 16
1086:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1087:libs/nRF24/nRF24.c ****   writing_byte |= rx_dr | tx_ds | max_rt;
 2209              		.loc 1 1087 0
 2210 0004 0143     		orrs	r1, r1, r0
 2211              	.LVL244:
 2212 0006 1143     		orrs	r1, r1, r2
 2213 0008 02AA     		add	r2, sp, #8
 2214              	.LVL245:
 2215 000a 02F8011D 		strb	r1, [r2, #-1]!
1088:libs/nRF24/nRF24.c **** 
1089:libs/nRF24/nRF24.c ****   /* Do not use nRF24_verified_write_register() to write to <STATUS> register. Not all bits are wri
ARM GAS  /tmp/ccvdf1ti.s 			page 59


1090:libs/nRF24/nRF24.c ****   spi_write_register(W_REGISTER_MASK + STATUS, 1, &writing_byte);
 2216              		.loc 1 1090 0
 2217 000e 0121     		movs	r1, #1
 2218 0010 2720     		movs	r0, #39
 2219              	.LVL246:
 2220 0012 FFF7FEFF 		bl	spi_write_register
 2221              	.LVL247:
1091:libs/nRF24/nRF24.c **** }
 2222              		.loc 1 1091 0
 2223 0016 03B0     		add	sp, sp, #12
 2224              	.LCFI70:
 2225              		.cfi_def_cfa_offset 4
 2226              		@ sp needed
 2227 0018 5DF804FB 		ldr	pc, [sp], #4
 2228              		.cfi_endproc
 2229              	.LFE169:
 2231              		.section	.text.nRF24_tx_self_test,"ax",%progbits
 2232              		.align	1
 2233              		.global	nRF24_tx_self_test
 2234              		.syntax unified
 2235              		.thumb
 2236              		.thumb_func
 2237              		.fpu fpv4-sp-d16
 2239              	nRF24_tx_self_test:
 2240              	.LFB147:
 426:libs/nRF24/nRF24.c ****   char message[256];
 2241              		.loc 1 426 0
 2242              		.cfi_startproc
 2243              		@ Volatile: function does not return.
 2244              		@ args = 0, pretend = 0, frame = 272
 2245              		@ frame_needed = 0, uses_anonymous_args = 0
 2246 0000 00B5     		push	{lr}
 2247              	.LCFI71:
 2248              		.cfi_def_cfa_offset 4
 2249              		.cfi_offset 14, -4
 2250 0002 C5B0     		sub	sp, sp, #276
 2251              	.LCFI72:
 2252              		.cfi_def_cfa_offset 280
 431:libs/nRF24/nRF24.c ****   serial_print(message);
 2253              		.loc 1 431 0
 2254 0004 04AC     		add	r4, sp, #16
 2255 0006 5A4D     		ldr	r5, .L129
 2256 0008 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2257 000a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2258 000c 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2259 0010 07C4     		stmia	r4!, {r0, r1, r2}
 2260 0012 24F8023B 		strh	r3, [r4], #2	@ movhi
 2261 0016 1B0C     		lsrs	r3, r3, #16
 2262 0018 2370     		strb	r3, [r4]
 432:libs/nRF24/nRF24.c **** 
 2263              		.loc 1 432 0
 2264 001a 04A8     		add	r0, sp, #16
 2265 001c FFF7FEFF 		bl	serial_print
 2266              	.LVL248:
 434:libs/nRF24/nRF24.c ****   serial_print(message);
 2267              		.loc 1 434 0
 2268 0020 5322     		movs	r2, #83
ARM GAS  /tmp/ccvdf1ti.s 			page 60


 2269 0022 5449     		ldr	r1, .L129+4
 2270 0024 04A8     		add	r0, sp, #16
 2271 0026 FFF7FEFF 		bl	memcpy
 2272              	.LVL249:
 435:libs/nRF24/nRF24.c ****   #endif
 2273              		.loc 1 435 0
 2274 002a 04A8     		add	r0, sp, #16
 2275 002c FFF7FEFF 		bl	serial_print
 2276              	.LVL250:
 438:libs/nRF24/nRF24.c **** 
 2277              		.loc 1 438 0
 2278 0030 0024     		movs	r4, #0
 2279 0032 8DF80E40 		strb	r4, [sp, #14]
 442:libs/nRF24/nRF24.c **** 
 2280              		.loc 1 442 0
 2281 0036 FFF7FEFF 		bl	nRF24_CE_0
 2282              	.LVL251:
 445:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_AA, 1, &writing_byte);        // disable auto 
 2283              		.loc 1 445 0
 2284 003a 8DF80F40 		strb	r4, [sp, #15]
 446:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + EN_RXADDR, 1, &writing_byte);    // disable RX da
 2285              		.loc 1 446 0
 2286 003e 0DF10F02 		add	r2, sp, #15
 2287 0042 0121     		movs	r1, #1
 2288 0044 2120     		movs	r0, #33
 2289 0046 FFF7FEFF 		bl	nRF24_verified_write_register
 2290              	.LVL252:
 447:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + SETUP_RETR, 1, &writing_byte);   // disable autom
 2291              		.loc 1 447 0
 2292 004a 0DF10F02 		add	r2, sp, #15
 2293 004e 0121     		movs	r1, #1
 2294 0050 2220     		movs	r0, #34
 2295 0052 FFF7FEFF 		bl	nRF24_verified_write_register
 2296              	.LVL253:
 448:libs/nRF24/nRF24.c **** 
 2297              		.loc 1 448 0
 2298 0056 0DF10F02 		add	r2, sp, #15
 2299 005a 0121     		movs	r1, #1
 2300 005c 2420     		movs	r0, #36
 2301 005e FFF7FEFF 		bl	nRF24_verified_write_register
 2302              	.LVL254:
 450:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + CONFIG, 1, &writing_byte);       // PWR_UP = 1 PR
 2303              		.loc 1 450 0
 2304 0062 0E23     		movs	r3, #14
 2305 0064 8DF80F30 		strb	r3, [sp, #15]
 451:libs/nRF24/nRF24.c **** 
 2306              		.loc 1 451 0
 2307 0068 0DF10F02 		add	r2, sp, #15
 2308 006c 0121     		movs	r1, #1
 2309 006e 2020     		movs	r0, #32
 2310 0070 FFF7FEFF 		bl	nRF24_verified_write_register
 2311              	.LVL255:
 454:libs/nRF24/nRF24.c ****   spi_write_register(W_TX_PAYLOAD, 4, test_payload);
 2312              		.loc 1 454 0
 2313 0074 404B     		ldr	r3, .L129+8
 2314 0076 1B68     		ldr	r3, [r3]
 2315 0078 0293     		str	r3, [sp, #8]
ARM GAS  /tmp/ccvdf1ti.s 			page 61


 455:libs/nRF24/nRF24.c ****   nRF24_CE_1(); // Chip Enable. Fire the packet out on the antenna!
 2316              		.loc 1 455 0
 2317 007a 02AA     		add	r2, sp, #8
 2318 007c 0421     		movs	r1, #4
 2319 007e A020     		movs	r0, #160
 2320 0080 FFF7FEFF 		bl	spi_write_register
 2321              	.LVL256:
 456:libs/nRF24/nRF24.c ****   
 2322              		.loc 1 456 0
 2323 0084 FFF7FEFF 		bl	nRF24_CE_1
 2324              	.LVL257:
 460:libs/nRF24/nRF24.c **** 
 2325              		.loc 1 460 0
 2326 0088 0DF10E02 		add	r2, sp, #14
 2327 008c 0121     		movs	r1, #1
 2328 008e 0720     		movs	r0, #7
 2329 0090 FFF7FEFF 		bl	spi_read_register
 2330              	.LVL258:
 462:libs/nRF24/nRF24.c **** 
 2331              		.loc 1 462 0
 2332 0094 0120     		movs	r0, #1
 2333 0096 FFF7FEFF 		bl	SPI_DELAY
 2334              	.LVL259:
 465:libs/nRF24/nRF24.c **** 
 2335              		.loc 1 465 0
 2336 009a FFF7FEFF 		bl	nRF24_CE_0
 2337              	.LVL260:
 468:libs/nRF24/nRF24.c ****   {
 2338              		.loc 1 468 0
 2339 009e 9DF80E20 		ldrb	r2, [sp, #14]	@ zero_extendqisi2
 2340 00a2 12F02E0F 		tst	r2, #46
 2341 00a6 08D0     		beq	.L122
 471:libs/nRF24/nRF24.c ****                        <STATUS> has value of 0x2E. \
 2342              		.loc 1 471 0
 2343 00a8 DD22     		movs	r2, #221
 2344 00aa 3449     		ldr	r1, .L129+12
 2345 00ac 04A8     		add	r0, sp, #16
 2346 00ae FFF7FEFF 		bl	memcpy
 2347              	.LVL261:
 475:libs/nRF24/nRF24.c ****     #endif
 2348              		.loc 1 475 0
 2349 00b2 04A8     		add	r0, sp, #16
 2350 00b4 FFF7FEFF 		bl	serial_print
 2351              	.LVL262:
 2352 00b8 22E0     		b	.L126
 2353              	.L122:
 481:libs/nRF24/nRF24.c ****     serial_print(message);
 2354              		.loc 1 481 0
 2355 00ba 3149     		ldr	r1, .L129+16
 2356 00bc 04A8     		add	r0, sp, #16
 2357 00be FFF7FEFF 		bl	sprintf
 2358              	.LVL263:
 482:libs/nRF24/nRF24.c ****     #endif
 2359              		.loc 1 482 0
 2360 00c2 04A8     		add	r0, sp, #16
 2361 00c4 FFF7FEFF 		bl	serial_print
 2362              	.LVL264:
ARM GAS  /tmp/ccvdf1ti.s 			page 62


 2363 00c8 1AE0     		b	.L126
 2364              	.L128:
 2365              	.LBB164:
 511:libs/nRF24/nRF24.c ****       serial_print(message);
 2366              		.loc 1 511 0
 2367 00ca 04AC     		add	r4, sp, #16
 2368 00cc 2D4D     		ldr	r5, .L129+20
 2369 00ce 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2370 00d0 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2371 00d2 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2372 00d6 07C4     		stmia	r4!, {r0, r1, r2}
 2373 00d8 24F8023B 		strh	r3, [r4], #2	@ movhi
 2374 00dc 1B0C     		lsrs	r3, r3, #16
 2375 00de 2370     		strb	r3, [r4]
 2376              	.LVL265:
 2377              	.LBB165:
 2378              	.LBB166:
 130:libs/nRF24/nRF24.c **** }
 2379              		.loc 1 130 0
 2380 00e0 04A8     		add	r0, sp, #16
 2381              	.LVL266:
 2382 00e2 FFF7FEFF 		bl	strlen
 2383              	.LVL267:
 2384 00e6 6423     		movs	r3, #100
 2385 00e8 82B2     		uxth	r2, r0
 2386 00ea 04A9     		add	r1, sp, #16
 2387              	.LVL268:
 2388 00ec 2648     		ldr	r0, .L129+24
 2389 00ee FFF7FEFF 		bl	HAL_UART_Transmit
 2390              	.LVL269:
 2391              	.L125:
 2392              	.LBE166:
 2393              	.LBE165:
 524:libs/nRF24/nRF24.c **** 
 2394              		.loc 1 524 0
 2395 00f2 1022     		movs	r2, #16
 2396 00f4 2021     		movs	r1, #32
 2397 00f6 4020     		movs	r0, #64
 2398 00f8 FFF7FEFF 		bl	nRF24_clear_STATUS
 2399              	.LVL270:
 526:libs/nRF24/nRF24.c ****   }
 2400              		.loc 1 526 0
 2401 00fc FFF7FEFF 		bl	nRF24_CE_0
 2402              	.LVL271:
 2403              	.L126:
 492:libs/nRF24/nRF24.c **** 
 2404              		.loc 1 492 0
 2405 0100 1D4B     		ldr	r3, .L129+8
 2406 0102 1B68     		ldr	r3, [r3]
 2407 0104 0193     		str	r3, [sp, #4]
 494:libs/nRF24/nRF24.c **** 
 2408              		.loc 1 494 0
 2409 0106 01AA     		add	r2, sp, #4
 2410 0108 0421     		movs	r1, #4
 2411 010a A020     		movs	r0, #160
 2412 010c FFF7FEFF 		bl	spi_write_register
 2413              	.LVL272:
ARM GAS  /tmp/ccvdf1ti.s 			page 63


 497:libs/nRF24/nRF24.c **** 
 2414              		.loc 1 497 0
 2415 0110 FFF7FEFF 		bl	nRF24_CE_1
 2416              	.LVL273:
 501:libs/nRF24/nRF24.c **** 
 2417              		.loc 1 501 0
 2418 0114 0DF10302 		add	r2, sp, #3
 2419 0118 0121     		movs	r1, #1
 2420 011a 0720     		movs	r0, #7
 2421 011c FFF7FEFF 		bl	spi_read_register
 2422              	.LVL274:
 504:libs/nRF24/nRF24.c ****     serial_print(message);
 2423              		.loc 1 504 0
 2424 0120 9DF80320 		ldrb	r2, [sp, #3]	@ zero_extendqisi2
 2425 0124 1949     		ldr	r1, .L129+28
 2426 0126 04A8     		add	r0, sp, #16
 2427 0128 FFF7FEFF 		bl	sprintf
 2428              	.LVL275:
 2429              	.LBB167:
 2430              	.LBB168:
 130:libs/nRF24/nRF24.c **** }
 2431              		.loc 1 130 0
 2432 012c 04A8     		add	r0, sp, #16
 2433              	.LVL276:
 2434 012e FFF7FEFF 		bl	strlen
 2435              	.LVL277:
 2436 0132 6423     		movs	r3, #100
 2437 0134 82B2     		uxth	r2, r0
 2438 0136 04A9     		add	r1, sp, #16
 2439              	.LVL278:
 2440 0138 1348     		ldr	r0, .L129+24
 2441 013a FFF7FEFF 		bl	HAL_UART_Transmit
 2442              	.LVL279:
 2443              	.LBE168:
 2444              	.LBE167:
 508:libs/nRF24/nRF24.c ****     {
 2445              		.loc 1 508 0
 2446 013e 9DF80330 		ldrb	r3, [sp, #3]	@ zero_extendqisi2
 2447 0142 2E2B     		cmp	r3, #46
 2448 0144 C1D0     		beq	.L128
 518:libs/nRF24/nRF24.c ****       serial_print(message);
 2449              		.loc 1 518 0
 2450 0146 04AC     		add	r4, sp, #16
 2451 0148 114D     		ldr	r5, .L129+32
 2452 014a 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2453 014c 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2454 014e 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 2455 0152 07C4     		stmia	r4!, {r0, r1, r2}
 2456 0154 24F8023B 		strh	r3, [r4], #2	@ movhi
 2457 0158 1B0C     		lsrs	r3, r3, #16
 2458 015a 2370     		strb	r3, [r4]
 2459              	.LVL280:
 2460              	.LBB169:
 2461              	.LBB170:
 130:libs/nRF24/nRF24.c **** }
 2462              		.loc 1 130 0
 2463 015c 04A8     		add	r0, sp, #16
ARM GAS  /tmp/ccvdf1ti.s 			page 64


 2464              	.LVL281:
 2465 015e FFF7FEFF 		bl	strlen
 2466              	.LVL282:
 2467 0162 6423     		movs	r3, #100
 2468 0164 82B2     		uxth	r2, r0
 2469 0166 04A9     		add	r1, sp, #16
 2470              	.LVL283:
 2471 0168 0748     		ldr	r0, .L129+24
 2472 016a FFF7FEFF 		bl	HAL_UART_Transmit
 2473              	.LVL284:
 2474 016e C0E7     		b	.L125
 2475              	.L130:
 2476              		.align	2
 2477              	.L129:
 2478 0170 00000000 		.word	.LC23
 2479 0174 20000000 		.word	.LC24
 2480 0178 00000000 		.word	.LANCHOR0
 2481 017c 74000000 		.word	.LC25
 2482 0180 54010000 		.word	.LC26
 2483 0184 D0010000 		.word	.LC28
 2484 0188 00000000 		.word	huart2
 2485 018c B4010000 		.word	.LC27
 2486 0190 F0010000 		.word	.LC29
 2487              	.LBE170:
 2488              	.LBE169:
 2489              	.LBE164:
 2490              		.cfi_endproc
 2491              	.LFE147:
 2493              		.section	.text.nRF24_get_STATUS,"ax",%progbits
 2494              		.align	1
 2495              		.global	nRF24_get_STATUS
 2496              		.syntax unified
 2497              		.thumb
 2498              		.thumb_func
 2499              		.fpu fpv4-sp-d16
 2501              	nRF24_get_STATUS:
 2502              	.LFB170:
1092:libs/nRF24/nRF24.c **** 
1093:libs/nRF24/nRF24.c **** /**
1094:libs/nRF24/nRF24.c ****   * @brief      Read <STATUS> register from nRF24.
1095:libs/nRF24/nRF24.c ****   * @param      None.
1096:libs/nRF24/nRF24.c ****   * @retval     <STATUS> register value.
1097:libs/nRF24/nRF24.c ****   * @note    Following masks can be used:
1098:libs/nRF24/nRF24.c ****   *   RX_DR_READMASK   
1099:libs/nRF24/nRF24.c ****   *   TX_DS_READMASK   
1100:libs/nRF24/nRF24.c ****   *   MAX_RT_READMASK  
1101:libs/nRF24/nRF24.c ****   *   RX_P_NO_READMASK    
1102:libs/nRF24/nRF24.c ****   *   TX_FULL_READMASK    
1103:libs/nRF24/nRF24.c ****   */
1104:libs/nRF24/nRF24.c **** uint8_t nRF24_get_STATUS(void) 
1105:libs/nRF24/nRF24.c **** {
 2503              		.loc 1 1105 0
 2504              		.cfi_startproc
 2505              		@ args = 0, pretend = 0, frame = 8
 2506              		@ frame_needed = 0, uses_anonymous_args = 0
 2507 0000 00B5     		push	{lr}
 2508              	.LCFI73:
ARM GAS  /tmp/ccvdf1ti.s 			page 65


 2509              		.cfi_def_cfa_offset 4
 2510              		.cfi_offset 14, -4
 2511 0002 83B0     		sub	sp, sp, #12
 2512              	.LCFI74:
 2513              		.cfi_def_cfa_offset 16
1106:libs/nRF24/nRF24.c ****   uint8_t status;
1107:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + STATUS, 1, &status);
 2514              		.loc 1 1107 0
 2515 0004 0DF10702 		add	r2, sp, #7
 2516 0008 0121     		movs	r1, #1
 2517 000a 0720     		movs	r0, #7
 2518 000c FFF7FEFF 		bl	spi_read_register
 2519              	.LVL285:
1108:libs/nRF24/nRF24.c ****   return status;
1109:libs/nRF24/nRF24.c **** }
 2520              		.loc 1 1109 0
 2521 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2522 0014 03B0     		add	sp, sp, #12
 2523              	.LCFI75:
 2524              		.cfi_def_cfa_offset 4
 2525              		@ sp needed
 2526 0016 5DF804FB 		ldr	pc, [sp], #4
 2527              		.cfi_endproc
 2528              	.LFE170:
 2530              		.section	.text.nRF24_receive_packet,"ax",%progbits
 2531              		.align	1
 2532              		.global	nRF24_receive_packet
 2533              		.syntax unified
 2534              		.thumb
 2535              		.thumb_func
 2536              		.fpu fpv4-sp-d16
 2538              	nRF24_receive_packet:
 2539              	.LFB153:
 741:libs/nRF24/nRF24.c **** 	uint8_t RX_WIDTH = 32;
 2540              		.loc 1 741 0
 2541              		.cfi_startproc
 2542              		@ args = 0, pretend = 0, frame = 96
 2543              		@ frame_needed = 0, uses_anonymous_args = 0
 2544 0000 30B5     		push	{r4, r5, lr}
 2545              	.LCFI76:
 2546              		.cfi_def_cfa_offset 12
 2547              		.cfi_offset 4, -12
 2548              		.cfi_offset 5, -8
 2549              		.cfi_offset 14, -4
 2550 0002 99B0     		sub	sp, sp, #100
 2551              	.LCFI77:
 2552              		.cfi_def_cfa_offset 112
 2553              	.LVL286:
 746:libs/nRF24/nRF24.c **** 
 2554              		.loc 1 746 0
 2555 0004 FFF7FEFF 		bl	nRF24_get_STATUS
 2556              	.LVL287:
 749:libs/nRF24/nRF24.c **** 		/* Transition from [RX Mode] to [Standby-I] */
 2557              		.loc 1 749 0
 2558 0008 10F0400F 		tst	r0, #64
 2559 000c 12D1     		bne	.L137
 767:libs/nRF24/nRF24.c **** 		serial_print(message);
ARM GAS  /tmp/ccvdf1ti.s 			page 66


 2560              		.loc 1 767 0
 2561 000e 08AC     		add	r4, sp, #32
 2562 0010 194D     		ldr	r5, .L138
 2563 0012 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2564              	.LVL288:
 2565 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 2566 0016 95E80700 		ldm	r5, {r0, r1, r2}
 2567 001a 84E80700 		stm	r4, {r0, r1, r2}
 2568              	.LVL289:
 2569              	.LBB175:
 2570              	.LBB176:
 130:libs/nRF24/nRF24.c **** }
 2571              		.loc 1 130 0
 2572 001e 08A8     		add	r0, sp, #32
 2573              	.LVL290:
 2574 0020 FFF7FEFF 		bl	strlen
 2575              	.LVL291:
 2576 0024 6423     		movs	r3, #100
 2577 0026 82B2     		uxth	r2, r0
 2578 0028 08A9     		add	r1, sp, #32
 2579              	.LVL292:
 2580 002a 1448     		ldr	r0, .L138+4
 2581 002c FFF7FEFF 		bl	HAL_UART_Transmit
 2582              	.LVL293:
 2583              	.L133:
 2584              	.LBE176:
 2585              	.LBE175:
 771:libs/nRF24/nRF24.c **** 
 2586              		.loc 1 771 0
 2587 0030 19B0     		add	sp, sp, #100
 2588              	.LCFI78:
 2589              		.cfi_remember_state
 2590              		.cfi_def_cfa_offset 12
 2591              	.LVL294:
 2592              		@ sp needed
 2593 0032 30BD     		pop	{r4, r5, pc}
 2594              	.LVL295:
 2595              	.L137:
 2596              	.LCFI79:
 2597              		.cfi_restore_state
 751:libs/nRF24/nRF24.c **** 
 2598              		.loc 1 751 0
 2599 0034 FFF7FEFF 		bl	nRF24_CE_0
 2600              	.LVL296:
 754:libs/nRF24/nRF24.c **** 
 2601              		.loc 1 754 0
 2602 0038 6A46     		mov	r2, sp
 2603 003a 2021     		movs	r1, #32
 2604 003c 6120     		movs	r0, #97
 2605 003e FFF7FEFF 		bl	spi_read_register
 2606              	.LVL297:
 757:libs/nRF24/nRF24.c **** 		serial_print(message);
 2607              		.loc 1 757 0
 2608 0042 08AC     		add	r4, sp, #32
 2609 0044 0E4D     		ldr	r5, .L138+8
 2610 0046 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 2611 0048 0FC4     		stmia	r4!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccvdf1ti.s 			page 67


 2612 004a 2B68     		ldr	r3, [r5]
 2613 004c 2380     		strh	r3, [r4]	@ movhi
 2614              	.LVL298:
 2615              	.LBB177:
 2616              	.LBB178:
 130:libs/nRF24/nRF24.c **** }
 2617              		.loc 1 130 0
 2618 004e 08A8     		add	r0, sp, #32
 2619              	.LVL299:
 2620 0050 FFF7FEFF 		bl	strlen
 2621              	.LVL300:
 2622 0054 6423     		movs	r3, #100
 2623 0056 82B2     		uxth	r2, r0
 2624 0058 08A9     		add	r1, sp, #32
 2625              	.LVL301:
 2626 005a 0848     		ldr	r0, .L138+4
 2627 005c FFF7FEFF 		bl	HAL_UART_Transmit
 2628              	.LVL302:
 2629              	.LBE178:
 2630              	.LBE177:
 759:libs/nRF24/nRF24.c **** 		#endif
 2631              		.loc 1 759 0
 2632 0060 6946     		mov	r1, sp
 2633 0062 2020     		movs	r0, #32
 2634 0064 FFF7FEFF 		bl	print_bytearray
 2635              	.LVL303:
 763:libs/nRF24/nRF24.c ****     nRF24_CE_1();
 2636              		.loc 1 763 0
 2637 0068 1022     		movs	r2, #16
 2638 006a 2021     		movs	r1, #32
 2639 006c 4020     		movs	r0, #64
 2640 006e FFF7FEFF 		bl	nRF24_clear_STATUS
 2641              	.LVL304:
 764:libs/nRF24/nRF24.c ****   }else {
 2642              		.loc 1 764 0
 2643 0072 FFF7FEFF 		bl	nRF24_CE_1
 2644              	.LVL305:
 2645 0076 DBE7     		b	.L133
 2646              	.L139:
 2647              		.align	2
 2648              	.L138:
 2649 0078 14000000 		.word	.LC31
 2650 007c 00000000 		.word	huart2
 2651 0080 00000000 		.word	.LC30
 2652              		.cfi_endproc
 2653              	.LFE153:
 2655              		.section	.text.nRF24_get_OBSERVE_TX,"ax",%progbits
 2656              		.align	1
 2657              		.global	nRF24_get_OBSERVE_TX
 2658              		.syntax unified
 2659              		.thumb
 2660              		.thumb_func
 2661              		.fpu fpv4-sp-d16
 2663              	nRF24_get_OBSERVE_TX:
 2664              	.LFB171:
1110:libs/nRF24/nRF24.c **** 
1111:libs/nRF24/nRF24.c **** /**
ARM GAS  /tmp/ccvdf1ti.s 			page 68


1112:libs/nRF24/nRF24.c ****   * @brief      Read <OBSERVE_TX> register from nRF24.
1113:libs/nRF24/nRF24.c ****   * @param      None.
1114:libs/nRF24/nRF24.c ****   * @retval     <OBSERVE_TX> register value.
1115:libs/nRF24/nRF24.c ****   */
1116:libs/nRF24/nRF24.c **** uint8_t nRF24_get_OBSERVE_TX()
1117:libs/nRF24/nRF24.c **** {
 2665              		.loc 1 1117 0
 2666              		.cfi_startproc
 2667              		@ args = 0, pretend = 0, frame = 8
 2668              		@ frame_needed = 0, uses_anonymous_args = 0
 2669 0000 00B5     		push	{lr}
 2670              	.LCFI80:
 2671              		.cfi_def_cfa_offset 4
 2672              		.cfi_offset 14, -4
 2673 0002 83B0     		sub	sp, sp, #12
 2674              	.LCFI81:
 2675              		.cfi_def_cfa_offset 16
1118:libs/nRF24/nRF24.c ****   #define PLOS_CNT_READMASK  0b1111 << 4
1119:libs/nRF24/nRF24.c ****   #define ARC_CNT_READMASK   0b1111 << 0
1120:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1121:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + OBSERVE_TX, 1, &read_byte);
 2676              		.loc 1 1121 0
 2677 0004 0DF10702 		add	r2, sp, #7
 2678 0008 0121     		movs	r1, #1
 2679 000a 0820     		movs	r0, #8
 2680 000c FFF7FEFF 		bl	spi_read_register
 2681              	.LVL306:
1122:libs/nRF24/nRF24.c ****   return read_byte;
1123:libs/nRF24/nRF24.c **** }
 2682              		.loc 1 1123 0
 2683 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2684 0014 03B0     		add	sp, sp, #12
 2685              	.LCFI82:
 2686              		.cfi_def_cfa_offset 4
 2687              		@ sp needed
 2688 0016 5DF804FB 		ldr	pc, [sp], #4
 2689              		.cfi_endproc
 2690              	.LFE171:
 2692              		.section	.text.nRF24_get_RPD,"ax",%progbits
 2693              		.align	1
 2694              		.global	nRF24_get_RPD
 2695              		.syntax unified
 2696              		.thumb
 2697              		.thumb_func
 2698              		.fpu fpv4-sp-d16
 2700              	nRF24_get_RPD:
 2701              	.LFB172:
1124:libs/nRF24/nRF24.c **** 
1125:libs/nRF24/nRF24.c **** /**
1126:libs/nRF24/nRF24.c ****   * @brief      Read <RPD> register from nRF24.
1127:libs/nRF24/nRF24.c ****   * @param      None.
1128:libs/nRF24/nRF24.c ****   * @retval     <RPD> register value.
1129:libs/nRF24/nRF24.c ****   */
1130:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RPD() 
1131:libs/nRF24/nRF24.c **** {
 2702              		.loc 1 1131 0
 2703              		.cfi_startproc
ARM GAS  /tmp/ccvdf1ti.s 			page 69


 2704              		@ args = 0, pretend = 0, frame = 8
 2705              		@ frame_needed = 0, uses_anonymous_args = 0
 2706 0000 00B5     		push	{lr}
 2707              	.LCFI83:
 2708              		.cfi_def_cfa_offset 4
 2709              		.cfi_offset 14, -4
 2710 0002 83B0     		sub	sp, sp, #12
 2711              	.LCFI84:
 2712              		.cfi_def_cfa_offset 16
1132:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1133:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RPD, 1, &read_byte);
 2713              		.loc 1 1133 0
 2714 0004 0DF10702 		add	r2, sp, #7
 2715 0008 0121     		movs	r1, #1
 2716 000a 0920     		movs	r0, #9
 2717 000c FFF7FEFF 		bl	spi_read_register
 2718              	.LVL307:
1134:libs/nRF24/nRF24.c ****   return read_byte;
1135:libs/nRF24/nRF24.c **** }
 2719              		.loc 1 1135 0
 2720 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2721 0014 03B0     		add	sp, sp, #12
 2722              	.LCFI85:
 2723              		.cfi_def_cfa_offset 4
 2724              		@ sp needed
 2725 0016 5DF804FB 		ldr	pc, [sp], #4
 2726              		.cfi_endproc
 2727              	.LFE172:
 2729              		.section	.text.nRF24_set_RX_ADDR_P0,"ax",%progbits
 2730              		.align	1
 2731              		.global	nRF24_set_RX_ADDR_P0
 2732              		.syntax unified
 2733              		.thumb
 2734              		.thumb_func
 2735              		.fpu fpv4-sp-d16
 2737              	nRF24_set_RX_ADDR_P0:
 2738              	.LFB173:
1136:libs/nRF24/nRF24.c **** 
1137:libs/nRF24/nRF24.c **** 
1138:libs/nRF24/nRF24.c **** /**
1139:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 0. Least Significant Byte written first.
1140:libs/nRF24/nRF24.c ****   * @param  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1141:libs/nRF24/nRF24.c ****   * @param  p_rx_addr_p0 Pointer to an array storing receive address for data pipe 0. 
1142:libs/nRF24/nRF24.c ****   *           The array pointed should have a length of either 3, 4, or 5 bytes. 
1143:libs/nRF24/nRF24.c ****   *           The SET_AW register determines the length of the address array. Default length is 5.
1144:libs/nRF24/nRF24.c ****   * @retval None.
1145:libs/nRF24/nRF24.c ****   */
1146:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P0(uint8_t rx_addr_width, uint8_t* p_rx_addr_p0) 
1147:libs/nRF24/nRF24.c **** {
 2739              		.loc 1 1147 0
 2740              		.cfi_startproc
 2741              		@ args = 0, pretend = 0, frame = 0
 2742              		@ frame_needed = 0, uses_anonymous_args = 0
 2743              	.LVL308:
 2744 0000 08B5     		push	{r3, lr}
 2745              	.LCFI86:
 2746              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccvdf1ti.s 			page 70


 2747              		.cfi_offset 3, -8
 2748              		.cfi_offset 14, -4
1148:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P0, rx_addr_width, p_rx_addr_p0);
 2749              		.loc 1 1148 0
 2750 0002 0A46     		mov	r2, r1
 2751 0004 0146     		mov	r1, r0
 2752              	.LVL309:
 2753 0006 2A20     		movs	r0, #42
 2754              	.LVL310:
 2755 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 2756              	.LVL311:
 2757 000c 08BD     		pop	{r3, pc}
 2758              		.cfi_endproc
 2759              	.LFE173:
 2761              		.section	.text.nRF24_get_RX_ADDR_P0,"ax",%progbits
 2762              		.align	1
 2763              		.global	nRF24_get_RX_ADDR_P0
 2764              		.syntax unified
 2765              		.thumb
 2766              		.thumb_func
 2767              		.fpu fpv4-sp-d16
 2769              	nRF24_get_RX_ADDR_P0:
 2770              	.LFB174:
1149:libs/nRF24/nRF24.c **** }
1150:libs/nRF24/nRF24.c **** 
1151:libs/nRF24/nRF24.c **** /**
1152:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P0> register from nRF24.
1153:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1154:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1155:libs/nRF24/nRF24.c ****   * @retval     None.
1156:libs/nRF24/nRF24.c ****   */
1157:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P0(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1158:libs/nRF24/nRF24.c **** {
 2771              		.loc 1 1158 0
 2772              		.cfi_startproc
 2773              		@ args = 0, pretend = 0, frame = 0
 2774              		@ frame_needed = 0, uses_anonymous_args = 0
 2775              	.LVL312:
 2776 0000 08B5     		push	{r3, lr}
 2777              	.LCFI87:
 2778              		.cfi_def_cfa_offset 8
 2779              		.cfi_offset 3, -8
 2780              		.cfi_offset 14, -4
1159:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P0, rx_addr_width, p_read_buffer);
 2781              		.loc 1 1159 0
 2782 0002 0A46     		mov	r2, r1
 2783 0004 0146     		mov	r1, r0
 2784              	.LVL313:
 2785 0006 0A20     		movs	r0, #10
 2786              	.LVL314:
 2787 0008 FFF7FEFF 		bl	spi_read_register
 2788              	.LVL315:
 2789 000c 08BD     		pop	{r3, pc}
 2790              		.cfi_endproc
 2791              	.LFE174:
 2793              		.section	.text.nRF24_set_RX_ADDR_P1,"ax",%progbits
 2794              		.align	1
ARM GAS  /tmp/ccvdf1ti.s 			page 71


 2795              		.global	nRF24_set_RX_ADDR_P1
 2796              		.syntax unified
 2797              		.thumb
 2798              		.thumb_func
 2799              		.fpu fpv4-sp-d16
 2801              	nRF24_set_RX_ADDR_P1:
 2802              	.LFB175:
1160:libs/nRF24/nRF24.c **** }
1161:libs/nRF24/nRF24.c **** 
1162:libs/nRF24/nRF24.c **** /**
1163:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 1. Least Significant Byte written first.
1164:libs/nRF24/nRF24.c ****   * @param  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1165:libs/nRF24/nRF24.c ****   * @param  p_rx_addr_p1 Pointer to an array storing receive address for data pipe 1. 
1166:libs/nRF24/nRF24.c ****   *           The array pointed should have a length of either 3, 4, or 5 bytes. 
1167:libs/nRF24/nRF24.c ****   *           The SET_AW register determines the length of the address array. Default length is 5.
1168:libs/nRF24/nRF24.c ****   * @note   The RX data pipe 0 and pipe 1 and have totally different addresses. 
1169:libs/nRF24/nRF24.c ****   *           However, for RX pipe 2,3,4,5 the [39:8] addresses byte need to be same as RX pipe 1.
1170:libs/nRF24/nRF24.c ****   *           Given an example,
1171:libs/nRF24/nRF24.c ****   *           RX_ADDR_P0 = 0xE7E7E7E7E7
1172:libs/nRF24/nRF24.c ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1173:libs/nRF24/nRF24.c ****   *           RX_ADDR_P2 = 0x--------C3 = 0xC2C2C2C2C3
1174:libs/nRF24/nRF24.c ****   *           RX_ADDR_P3 = 0x--------C4 = 0xC2C2C2C2C4
1175:libs/nRF24/nRF24.c ****   *           RX_ADDR_P4 = 0x--------C5 = 0xC2C2C2C2C5
1176:libs/nRF24/nRF24.c ****   *           RX_ADDR_P5 = 0x--------C6 = 0xC2C2C2C2C6
1177:libs/nRF24/nRF24.c ****   * @retval None.
1178:libs/nRF24/nRF24.c ****   */
1179:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P1(uint8_t rx_addr_width, uint8_t* p_rx_addr_p1) 
1180:libs/nRF24/nRF24.c **** {
 2803              		.loc 1 1180 0
 2804              		.cfi_startproc
 2805              		@ args = 0, pretend = 0, frame = 0
 2806              		@ frame_needed = 0, uses_anonymous_args = 0
 2807              	.LVL316:
 2808 0000 08B5     		push	{r3, lr}
 2809              	.LCFI88:
 2810              		.cfi_def_cfa_offset 8
 2811              		.cfi_offset 3, -8
 2812              		.cfi_offset 14, -4
1181:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P1, rx_addr_width, p_rx_addr_p1);
 2813              		.loc 1 1181 0
 2814 0002 0A46     		mov	r2, r1
 2815 0004 0146     		mov	r1, r0
 2816              	.LVL317:
 2817 0006 2B20     		movs	r0, #43
 2818              	.LVL318:
 2819 0008 FFF7FEFF 		bl	nRF24_verified_write_register
 2820              	.LVL319:
 2821 000c 08BD     		pop	{r3, pc}
 2822              		.cfi_endproc
 2823              	.LFE175:
 2825              		.section	.text.nRF24_get_RX_ADDR_P1,"ax",%progbits
 2826              		.align	1
 2827              		.global	nRF24_get_RX_ADDR_P1
 2828              		.syntax unified
 2829              		.thumb
 2830              		.thumb_func
 2831              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccvdf1ti.s 			page 72


 2833              	nRF24_get_RX_ADDR_P1:
 2834              	.LFB176:
1182:libs/nRF24/nRF24.c **** }
1183:libs/nRF24/nRF24.c **** 
1184:libs/nRF24/nRF24.c **** 
1185:libs/nRF24/nRF24.c **** /**
1186:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P1> register from nRF24.
1187:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1188:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1189:libs/nRF24/nRF24.c ****   * @retval     None.
1190:libs/nRF24/nRF24.c ****   */
1191:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P1(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1192:libs/nRF24/nRF24.c **** {
 2835              		.loc 1 1192 0
 2836              		.cfi_startproc
 2837              		@ args = 0, pretend = 0, frame = 0
 2838              		@ frame_needed = 0, uses_anonymous_args = 0
 2839              	.LVL320:
 2840 0000 08B5     		push	{r3, lr}
 2841              	.LCFI89:
 2842              		.cfi_def_cfa_offset 8
 2843              		.cfi_offset 3, -8
 2844              		.cfi_offset 14, -4
1193:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P1, rx_addr_width, p_read_buffer);
 2845              		.loc 1 1193 0
 2846 0002 0A46     		mov	r2, r1
 2847 0004 0146     		mov	r1, r0
 2848              	.LVL321:
 2849 0006 0B20     		movs	r0, #11
 2850              	.LVL322:
 2851 0008 FFF7FEFF 		bl	spi_read_register
 2852              	.LVL323:
 2853 000c 08BD     		pop	{r3, pc}
 2854              		.cfi_endproc
 2855              	.LFE176:
 2857              		.section	.text.nRF24_set_RX_ADDR_P2,"ax",%progbits
 2858              		.align	1
 2859              		.global	nRF24_set_RX_ADDR_P2
 2860              		.syntax unified
 2861              		.thumb
 2862              		.thumb_func
 2863              		.fpu fpv4-sp-d16
 2865              	nRF24_set_RX_ADDR_P2:
 2866              	.LFB177:
1194:libs/nRF24/nRF24.c **** }
1195:libs/nRF24/nRF24.c **** 
1196:libs/nRF24/nRF24.c **** /**
1197:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 2. 
1198:libs/nRF24/nRF24.c ****   * @param  rx_addr_p2 Byte storing receive address for data pipe 2. 
1199:libs/nRF24/nRF24.c ****   *           rx_addr_p2 overwrite the Least Significant Byte on RX_ADDR_P1
1200:libs/nRF24/nRF24.c ****   *           Given an example,
1201:libs/nRF24/nRF24.c ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1202:libs/nRF24/nRF24.c ****   *           RX_ADDR_P2 = 0x--------C3 = 0xC2C2C2C2C3
1203:libs/nRF24/nRF24.c ****   * @retval None.
1204:libs/nRF24/nRF24.c ****   */
1205:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P2(uint8_t rx_addr_p2) 
1206:libs/nRF24/nRF24.c **** {
ARM GAS  /tmp/ccvdf1ti.s 			page 73


 2867              		.loc 1 1206 0
 2868              		.cfi_startproc
 2869              		@ args = 0, pretend = 0, frame = 8
 2870              		@ frame_needed = 0, uses_anonymous_args = 0
 2871              	.LVL324:
 2872 0000 00B5     		push	{lr}
 2873              	.LCFI90:
 2874              		.cfi_def_cfa_offset 4
 2875              		.cfi_offset 14, -4
 2876 0002 83B0     		sub	sp, sp, #12
 2877              	.LCFI91:
 2878              		.cfi_def_cfa_offset 16
1207:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1208:libs/nRF24/nRF24.c ****   writing_byte |= rx_addr_p2;
 2879              		.loc 1 1208 0
 2880 0004 02AA     		add	r2, sp, #8
 2881 0006 02F8010D 		strb	r0, [r2, #-1]!
1209:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P2, 1, &writing_byte);
 2882              		.loc 1 1209 0
 2883 000a 0121     		movs	r1, #1
 2884 000c 2C20     		movs	r0, #44
 2885              	.LVL325:
 2886 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2887              	.LVL326:
1210:libs/nRF24/nRF24.c **** }
 2888              		.loc 1 1210 0
 2889 0012 03B0     		add	sp, sp, #12
 2890              	.LCFI92:
 2891              		.cfi_def_cfa_offset 4
 2892              		@ sp needed
 2893 0014 5DF804FB 		ldr	pc, [sp], #4
 2894              		.cfi_endproc
 2895              	.LFE177:
 2897              		.section	.text.nRF24_get_RX_ADDR_P2,"ax",%progbits
 2898              		.align	1
 2899              		.global	nRF24_get_RX_ADDR_P2
 2900              		.syntax unified
 2901              		.thumb
 2902              		.thumb_func
 2903              		.fpu fpv4-sp-d16
 2905              	nRF24_get_RX_ADDR_P2:
 2906              	.LFB178:
1211:libs/nRF24/nRF24.c **** 
1212:libs/nRF24/nRF24.c **** 
1213:libs/nRF24/nRF24.c **** 
1214:libs/nRF24/nRF24.c **** /**
1215:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P2> register from nRF24.
1216:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1217:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1218:libs/nRF24/nRF24.c ****   * @retval     None.
1219:libs/nRF24/nRF24.c ****   */
1220:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P2(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1221:libs/nRF24/nRF24.c **** {
 2907              		.loc 1 1221 0
 2908              		.cfi_startproc
 2909              		@ args = 0, pretend = 0, frame = 0
 2910              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccvdf1ti.s 			page 74


 2911              	.LVL327:
 2912 0000 08B5     		push	{r3, lr}
 2913              	.LCFI93:
 2914              		.cfi_def_cfa_offset 8
 2915              		.cfi_offset 3, -8
 2916              		.cfi_offset 14, -4
1222:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P2, rx_addr_width, p_read_buffer);
 2917              		.loc 1 1222 0
 2918 0002 0A46     		mov	r2, r1
 2919 0004 0146     		mov	r1, r0
 2920              	.LVL328:
 2921 0006 0C20     		movs	r0, #12
 2922              	.LVL329:
 2923 0008 FFF7FEFF 		bl	spi_read_register
 2924              	.LVL330:
 2925 000c 08BD     		pop	{r3, pc}
 2926              		.cfi_endproc
 2927              	.LFE178:
 2929              		.section	.text.nRF24_set_RX_ADDR_P3,"ax",%progbits
 2930              		.align	1
 2931              		.global	nRF24_set_RX_ADDR_P3
 2932              		.syntax unified
 2933              		.thumb
 2934              		.thumb_func
 2935              		.fpu fpv4-sp-d16
 2937              	nRF24_set_RX_ADDR_P3:
 2938              	.LFB179:
1223:libs/nRF24/nRF24.c **** }
1224:libs/nRF24/nRF24.c **** 
1225:libs/nRF24/nRF24.c **** 
1226:libs/nRF24/nRF24.c **** /**
1227:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 3. 
1228:libs/nRF24/nRF24.c ****   * @param  rx_addr_p3 Byte storing receive address for data pipe 3. 
1229:libs/nRF24/nRF24.c ****   *           rx_addr_p3 overwrite the Least Significant Byte on RX_ADDR_P1
1230:libs/nRF24/nRF24.c ****   *           Given an example,
1231:libs/nRF24/nRF24.c ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1232:libs/nRF24/nRF24.c ****   *           RX_ADDR_P3 = 0x--------C4 = 0xC2C2C2C2C4
1233:libs/nRF24/nRF24.c ****   * @retval None.
1234:libs/nRF24/nRF24.c ****   */
1235:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P3(uint8_t rx_addr_p3) 
1236:libs/nRF24/nRF24.c **** {
 2939              		.loc 1 1236 0
 2940              		.cfi_startproc
 2941              		@ args = 0, pretend = 0, frame = 8
 2942              		@ frame_needed = 0, uses_anonymous_args = 0
 2943              	.LVL331:
 2944 0000 00B5     		push	{lr}
 2945              	.LCFI94:
 2946              		.cfi_def_cfa_offset 4
 2947              		.cfi_offset 14, -4
 2948 0002 83B0     		sub	sp, sp, #12
 2949              	.LCFI95:
 2950              		.cfi_def_cfa_offset 16
1237:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1238:libs/nRF24/nRF24.c ****   writing_byte |= rx_addr_p3;
 2951              		.loc 1 1238 0
 2952 0004 02AA     		add	r2, sp, #8
ARM GAS  /tmp/ccvdf1ti.s 			page 75


 2953 0006 02F8010D 		strb	r0, [r2, #-1]!
1239:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P3, 1, &writing_byte);
 2954              		.loc 1 1239 0
 2955 000a 0121     		movs	r1, #1
 2956 000c 2D20     		movs	r0, #45
 2957              	.LVL332:
 2958 000e FFF7FEFF 		bl	nRF24_verified_write_register
 2959              	.LVL333:
1240:libs/nRF24/nRF24.c **** }
 2960              		.loc 1 1240 0
 2961 0012 03B0     		add	sp, sp, #12
 2962              	.LCFI96:
 2963              		.cfi_def_cfa_offset 4
 2964              		@ sp needed
 2965 0014 5DF804FB 		ldr	pc, [sp], #4
 2966              		.cfi_endproc
 2967              	.LFE179:
 2969              		.section	.text.nRF24_get_RX_ADDR_P3,"ax",%progbits
 2970              		.align	1
 2971              		.global	nRF24_get_RX_ADDR_P3
 2972              		.syntax unified
 2973              		.thumb
 2974              		.thumb_func
 2975              		.fpu fpv4-sp-d16
 2977              	nRF24_get_RX_ADDR_P3:
 2978              	.LFB180:
1241:libs/nRF24/nRF24.c **** 
1242:libs/nRF24/nRF24.c **** /**
1243:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P3> register from nRF24.
1244:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1245:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1246:libs/nRF24/nRF24.c ****   * @retval     None.
1247:libs/nRF24/nRF24.c ****   */
1248:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P3(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1249:libs/nRF24/nRF24.c **** {
 2979              		.loc 1 1249 0
 2980              		.cfi_startproc
 2981              		@ args = 0, pretend = 0, frame = 0
 2982              		@ frame_needed = 0, uses_anonymous_args = 0
 2983              	.LVL334:
 2984 0000 08B5     		push	{r3, lr}
 2985              	.LCFI97:
 2986              		.cfi_def_cfa_offset 8
 2987              		.cfi_offset 3, -8
 2988              		.cfi_offset 14, -4
1250:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P3, rx_addr_width, p_read_buffer);
 2989              		.loc 1 1250 0
 2990 0002 0A46     		mov	r2, r1
 2991 0004 0146     		mov	r1, r0
 2992              	.LVL335:
 2993 0006 0D20     		movs	r0, #13
 2994              	.LVL336:
 2995 0008 FFF7FEFF 		bl	spi_read_register
 2996              	.LVL337:
 2997 000c 08BD     		pop	{r3, pc}
 2998              		.cfi_endproc
 2999              	.LFE180:
ARM GAS  /tmp/ccvdf1ti.s 			page 76


 3001              		.section	.text.nRF24_set_RX_ADDR_P4,"ax",%progbits
 3002              		.align	1
 3003              		.global	nRF24_set_RX_ADDR_P4
 3004              		.syntax unified
 3005              		.thumb
 3006              		.thumb_func
 3007              		.fpu fpv4-sp-d16
 3009              	nRF24_set_RX_ADDR_P4:
 3010              	.LFB181:
1251:libs/nRF24/nRF24.c **** }
1252:libs/nRF24/nRF24.c **** 
1253:libs/nRF24/nRF24.c **** /**
1254:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 4.
1255:libs/nRF24/nRF24.c ****   * @param  rx_addr_p4 Byte storing receive address for data pipe 4. 
1256:libs/nRF24/nRF24.c ****   *           rx_addr_p4 overwrite the Least Significant Byte on RX_ADDR_P1
1257:libs/nRF24/nRF24.c ****   *           Given an example,
1258:libs/nRF24/nRF24.c ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1259:libs/nRF24/nRF24.c ****   *           RX_ADDR_P4 = 0x--------C5 = 0xC2C2C2C2C5
1260:libs/nRF24/nRF24.c ****   * @retval None.
1261:libs/nRF24/nRF24.c ****   */
1262:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P4(uint8_t rx_addr_p4) 
1263:libs/nRF24/nRF24.c **** {
 3011              		.loc 1 1263 0
 3012              		.cfi_startproc
 3013              		@ args = 0, pretend = 0, frame = 8
 3014              		@ frame_needed = 0, uses_anonymous_args = 0
 3015              	.LVL338:
 3016 0000 00B5     		push	{lr}
 3017              	.LCFI98:
 3018              		.cfi_def_cfa_offset 4
 3019              		.cfi_offset 14, -4
 3020 0002 83B0     		sub	sp, sp, #12
 3021              	.LCFI99:
 3022              		.cfi_def_cfa_offset 16
1264:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1265:libs/nRF24/nRF24.c ****   writing_byte |= rx_addr_p4;
 3023              		.loc 1 1265 0
 3024 0004 02AA     		add	r2, sp, #8
 3025 0006 02F8010D 		strb	r0, [r2, #-1]!
1266:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P4, 1, &writing_byte);
 3026              		.loc 1 1266 0
 3027 000a 0121     		movs	r1, #1
 3028 000c 2E20     		movs	r0, #46
 3029              	.LVL339:
 3030 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3031              	.LVL340:
1267:libs/nRF24/nRF24.c **** }
 3032              		.loc 1 1267 0
 3033 0012 03B0     		add	sp, sp, #12
 3034              	.LCFI100:
 3035              		.cfi_def_cfa_offset 4
 3036              		@ sp needed
 3037 0014 5DF804FB 		ldr	pc, [sp], #4
 3038              		.cfi_endproc
 3039              	.LFE181:
 3041              		.section	.text.nRF24_get_RX_ADDR_P4,"ax",%progbits
 3042              		.align	1
ARM GAS  /tmp/ccvdf1ti.s 			page 77


 3043              		.global	nRF24_get_RX_ADDR_P4
 3044              		.syntax unified
 3045              		.thumb
 3046              		.thumb_func
 3047              		.fpu fpv4-sp-d16
 3049              	nRF24_get_RX_ADDR_P4:
 3050              	.LFB182:
1268:libs/nRF24/nRF24.c **** 
1269:libs/nRF24/nRF24.c **** /**
1270:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P4> register from nRF24.
1271:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1272:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1273:libs/nRF24/nRF24.c ****   * @retval     None.
1274:libs/nRF24/nRF24.c ****   */
1275:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P4(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1276:libs/nRF24/nRF24.c **** {
 3051              		.loc 1 1276 0
 3052              		.cfi_startproc
 3053              		@ args = 0, pretend = 0, frame = 0
 3054              		@ frame_needed = 0, uses_anonymous_args = 0
 3055              	.LVL341:
 3056 0000 08B5     		push	{r3, lr}
 3057              	.LCFI101:
 3058              		.cfi_def_cfa_offset 8
 3059              		.cfi_offset 3, -8
 3060              		.cfi_offset 14, -4
1277:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P4, rx_addr_width, p_read_buffer);
 3061              		.loc 1 1277 0
 3062 0002 0A46     		mov	r2, r1
 3063 0004 0146     		mov	r1, r0
 3064              	.LVL342:
 3065 0006 0E20     		movs	r0, #14
 3066              	.LVL343:
 3067 0008 FFF7FEFF 		bl	spi_read_register
 3068              	.LVL344:
 3069 000c 08BD     		pop	{r3, pc}
 3070              		.cfi_endproc
 3071              	.LFE182:
 3073              		.section	.text.nRF24_set_RX_ADDR_P5,"ax",%progbits
 3074              		.align	1
 3075              		.global	nRF24_set_RX_ADDR_P5
 3076              		.syntax unified
 3077              		.thumb
 3078              		.thumb_func
 3079              		.fpu fpv4-sp-d16
 3081              	nRF24_set_RX_ADDR_P5:
 3082              	.LFB183:
1278:libs/nRF24/nRF24.c **** }
1279:libs/nRF24/nRF24.c **** 
1280:libs/nRF24/nRF24.c **** /**
1281:libs/nRF24/nRF24.c ****   * @brief  Set RX (receive) address for data pipe 5.
1282:libs/nRF24/nRF24.c ****   * @param  rx_addr_p5 Byte storing receive address for data pipe 5. 
1283:libs/nRF24/nRF24.c ****   *           rx_addr_p5 overwrite the Least Significant Byte on RX_ADDR_P1
1284:libs/nRF24/nRF24.c ****   *           Given an example,
1285:libs/nRF24/nRF24.c ****   *           RX_ADDR_P1 = 0xC2C2C2C2C2
1286:libs/nRF24/nRF24.c ****   *           RX_ADDR_P5 = 0x--------C6 = 0xC2C2C2C2C6
1287:libs/nRF24/nRF24.c ****   * @retval None.
ARM GAS  /tmp/ccvdf1ti.s 			page 78


1288:libs/nRF24/nRF24.c ****   */
1289:libs/nRF24/nRF24.c **** void nRF24_set_RX_ADDR_P5(uint8_t rx_addr_p5) 
1290:libs/nRF24/nRF24.c **** {
 3083              		.loc 1 1290 0
 3084              		.cfi_startproc
 3085              		@ args = 0, pretend = 0, frame = 8
 3086              		@ frame_needed = 0, uses_anonymous_args = 0
 3087              	.LVL345:
 3088 0000 00B5     		push	{lr}
 3089              	.LCFI102:
 3090              		.cfi_def_cfa_offset 4
 3091              		.cfi_offset 14, -4
 3092 0002 83B0     		sub	sp, sp, #12
 3093              	.LCFI103:
 3094              		.cfi_def_cfa_offset 16
1291:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1292:libs/nRF24/nRF24.c ****   writing_byte |= rx_addr_p5;
 3095              		.loc 1 1292 0
 3096 0004 02AA     		add	r2, sp, #8
 3097 0006 02F8010D 		strb	r0, [r2, #-1]!
1293:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_ADDR_P5, 1, &writing_byte);
 3098              		.loc 1 1293 0
 3099 000a 0121     		movs	r1, #1
 3100 000c 2F20     		movs	r0, #47
 3101              	.LVL346:
 3102 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3103              	.LVL347:
1294:libs/nRF24/nRF24.c **** }
 3104              		.loc 1 1294 0
 3105 0012 03B0     		add	sp, sp, #12
 3106              	.LCFI104:
 3107              		.cfi_def_cfa_offset 4
 3108              		@ sp needed
 3109 0014 5DF804FB 		ldr	pc, [sp], #4
 3110              		.cfi_endproc
 3111              	.LFE183:
 3113              		.section	.text.nRF24_get_RX_ADDR_P5,"ax",%progbits
 3114              		.align	1
 3115              		.global	nRF24_get_RX_ADDR_P5
 3116              		.syntax unified
 3117              		.thumb
 3118              		.thumb_func
 3119              		.fpu fpv4-sp-d16
 3121              	nRF24_get_RX_ADDR_P5:
 3122              	.LFB184:
1295:libs/nRF24/nRF24.c **** 
1296:libs/nRF24/nRF24.c **** 
1297:libs/nRF24/nRF24.c **** /**
1298:libs/nRF24/nRF24.c ****   * @brief      Read <RX_ADDR_P5> register from nRF24.
1299:libs/nRF24/nRF24.c ****   * @param[in]  rx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1300:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read RX address on Pipe 
1301:libs/nRF24/nRF24.c ****   * @retval     None.
1302:libs/nRF24/nRF24.c ****   */
1303:libs/nRF24/nRF24.c **** void nRF24_get_RX_ADDR_P5(uint8_t rx_addr_width, uint8_t* p_read_buffer) 
1304:libs/nRF24/nRF24.c **** {
 3123              		.loc 1 1304 0
 3124              		.cfi_startproc
ARM GAS  /tmp/ccvdf1ti.s 			page 79


 3125              		@ args = 0, pretend = 0, frame = 0
 3126              		@ frame_needed = 0, uses_anonymous_args = 0
 3127              	.LVL348:
 3128 0000 08B5     		push	{r3, lr}
 3129              	.LCFI105:
 3130              		.cfi_def_cfa_offset 8
 3131              		.cfi_offset 3, -8
 3132              		.cfi_offset 14, -4
1305:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_ADDR_P5, rx_addr_width, p_read_buffer);
 3133              		.loc 1 1305 0
 3134 0002 0A46     		mov	r2, r1
 3135 0004 0146     		mov	r1, r0
 3136              	.LVL349:
 3137 0006 0F20     		movs	r0, #15
 3138              	.LVL350:
 3139 0008 FFF7FEFF 		bl	spi_read_register
 3140              	.LVL351:
 3141 000c 08BD     		pop	{r3, pc}
 3142              		.cfi_endproc
 3143              	.LFE184:
 3145              		.section	.text.nRF24_set_TX_ADDR,"ax",%progbits
 3146              		.align	1
 3147              		.global	nRF24_set_TX_ADDR
 3148              		.syntax unified
 3149              		.thumb
 3150              		.thumb_func
 3151              		.fpu fpv4-sp-d16
 3153              	nRF24_set_TX_ADDR:
 3154              	.LFB185:
1306:libs/nRF24/nRF24.c **** }
1307:libs/nRF24/nRF24.c **** 
1308:libs/nRF24/nRF24.c **** /**
1309:libs/nRF24/nRF24.c ****   * @brief  Set TX (transmit) address. Least Significant Byte written first.
1310:libs/nRF24/nRF24.c ****   * @param  tx_addr_width The width of TX address. Needs to be consistent with SET_AW.
1311:libs/nRF24/nRF24.c ****   * @param  p_tx_addr Pointer to an array storing the transmit address.
1312:libs/nRF24/nRF24.c ****   * @retval None.
1313:libs/nRF24/nRF24.c ****   */
1314:libs/nRF24/nRF24.c **** void nRF24_set_TX_ADDR(uint8_t tx_addr_width, uint8_t* p_tx_addr) 
1315:libs/nRF24/nRF24.c **** {
 3155              		.loc 1 1315 0
 3156              		.cfi_startproc
 3157              		@ args = 0, pretend = 0, frame = 0
 3158              		@ frame_needed = 0, uses_anonymous_args = 0
 3159              	.LVL352:
 3160 0000 08B5     		push	{r3, lr}
 3161              	.LCFI106:
 3162              		.cfi_def_cfa_offset 8
 3163              		.cfi_offset 3, -8
 3164              		.cfi_offset 14, -4
1316:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + TX_ADDR, tx_addr_width, p_tx_addr);
 3165              		.loc 1 1316 0
 3166 0002 0A46     		mov	r2, r1
 3167 0004 0146     		mov	r1, r0
 3168              	.LVL353:
 3169 0006 3020     		movs	r0, #48
 3170              	.LVL354:
 3171 0008 FFF7FEFF 		bl	nRF24_verified_write_register
ARM GAS  /tmp/ccvdf1ti.s 			page 80


 3172              	.LVL355:
 3173 000c 08BD     		pop	{r3, pc}
 3174              		.cfi_endproc
 3175              	.LFE185:
 3177              		.section	.text.nRF24_config_normal_tx_mode,"ax",%progbits
 3178              		.align	1
 3179              		.global	nRF24_config_normal_tx_mode
 3180              		.syntax unified
 3181              		.thumb
 3182              		.thumb_func
 3183              		.fpu fpv4-sp-d16
 3185              	nRF24_config_normal_tx_mode:
 3186              	.LFB149:
 597:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 3187              		.loc 1 597 0
 3188              		.cfi_startproc
 3189              		@ args = 0, pretend = 0, frame = 8
 3190              		@ frame_needed = 0, uses_anonymous_args = 0
 3191 0000 10B5     		push	{r4, lr}
 3192              	.LCFI107:
 3193              		.cfi_def_cfa_offset 8
 3194              		.cfi_offset 4, -8
 3195              		.cfi_offset 14, -4
 3196 0002 86B0     		sub	sp, sp, #24
 3197              	.LCFI108:
 3198              		.cfi_def_cfa_offset 32
 598:libs/nRF24/nRF24.c **** 
 3199              		.loc 1 598 0
 3200 0004 FFF7FEFF 		bl	nRF24_CE_0
 3201              	.LVL356:
 601:libs/nRF24/nRF24.c ****  
 3202              		.loc 1 601 0
 3203 0008 0320     		movs	r0, #3
 3204 000a FFF7FEFF 		bl	nRF24_set_SETUP_AW
 3205              	.LVL357:
 604:libs/nRF24/nRF24.c ****     nRF24_set_TX_ADDR(5, TX_ADDRESS); 
 3206              		.loc 1 604 0
 3207 000e 1B4B     		ldr	r3, .L172
 3208 0010 93E80300 		ldm	r3, {r0, r1}
 3209 0014 0490     		str	r0, [sp, #16]
 3210 0016 8DF81410 		strb	r1, [sp, #20]
 605:libs/nRF24/nRF24.c **** 
 3211              		.loc 1 605 0
 3212 001a 04A9     		add	r1, sp, #16
 3213 001c 0520     		movs	r0, #5
 3214 001e FFF7FEFF 		bl	nRF24_set_TX_ADDR
 3215              	.LVL358:
 608:libs/nRF24/nRF24.c **** 
 3216              		.loc 1 608 0
 3217 0022 0024     		movs	r4, #0
 3218 0024 0194     		str	r4, [sp, #4]
 3219 0026 0094     		str	r4, [sp]
 3220 0028 2346     		mov	r3, r4
 3221 002a 2246     		mov	r2, r4
 3222 002c 2146     		mov	r1, r4
 3223 002e 2046     		mov	r0, r4
 3224 0030 FFF7FEFF 		bl	nRF24_set_EN_AA
ARM GAS  /tmp/ccvdf1ti.s 			page 81


 3225              	.LVL359:
 611:libs/nRF24/nRF24.c **** 
 3226              		.loc 1 611 0
 3227 0034 0194     		str	r4, [sp, #4]
 3228 0036 0094     		str	r4, [sp]
 3229 0038 2346     		mov	r3, r4
 3230 003a 2246     		mov	r2, r4
 3231 003c 2146     		mov	r1, r4
 3232 003e 2046     		mov	r0, r4
 3233 0040 FFF7FEFF 		bl	nRF24_set_EN_RXADDR
 3234              	.LVL360:
 614:libs/nRF24/nRF24.c **** 
 3235              		.loc 1 614 0
 3236 0044 2146     		mov	r1, r4
 3237 0046 2046     		mov	r0, r4
 3238 0048 FFF7FEFF 		bl	nRF24_set_SETUP_RETR
 3239              	.LVL361:
 617:libs/nRF24/nRF24.c **** 
 3240              		.loc 1 617 0
 3241 004c 2820     		movs	r0, #40
 3242 004e FFF7FEFF 		bl	nRF24_set_RF_CH
 3243              	.LVL362:
 620:libs/nRF24/nRF24.c ****   
 3244              		.loc 1 620 0
 3245 0052 0623     		movs	r3, #6
 3246 0054 0093     		str	r3, [sp]
 3247 0056 0123     		movs	r3, #1
 3248 0058 2246     		mov	r2, r4
 3249 005a 2146     		mov	r1, r4
 3250 005c 2046     		mov	r0, r4
 3251 005e FFF7FEFF 		bl	nRF24_set_RF_SETUP
 3252              	.LVL363:
 623:libs/nRF24/nRF24.c **** 
 3253              		.loc 1 623 0
 3254 0062 0294     		str	r4, [sp, #8]
 3255 0064 0223     		movs	r3, #2
 3256 0066 0193     		str	r3, [sp, #4]
 3257 0068 0423     		movs	r3, #4
 3258 006a 0093     		str	r3, [sp]
 3259 006c 0823     		movs	r3, #8
 3260 006e 2246     		mov	r2, r4
 3261 0070 2146     		mov	r1, r4
 3262 0072 2046     		mov	r0, r4
 3263 0074 FFF7FEFF 		bl	nRF24_set_CONFIG
 3264              	.LVL364:
 627:libs/nRF24/nRF24.c **** 
 3265              		.loc 1 627 0
 3266 0078 06B0     		add	sp, sp, #24
 3267              	.LCFI109:
 3268              		.cfi_def_cfa_offset 8
 3269              		@ sp needed
 3270 007a 10BD     		pop	{r4, pc}
 3271              	.L173:
 3272              		.align	2
 3273              	.L172:
 3274 007c 04000000 		.word	.LANCHOR0+4
 3275              		.cfi_endproc
ARM GAS  /tmp/ccvdf1ti.s 			page 82


 3276              	.LFE149:
 3278              		.section	.text.nRF24_config_enhanced_shockburst_tx_mode,"ax",%progbits
 3279              		.align	1
 3280              		.global	nRF24_config_enhanced_shockburst_tx_mode
 3281              		.syntax unified
 3282              		.thumb
 3283              		.thumb_func
 3284              		.fpu fpv4-sp-d16
 3286              	nRF24_config_enhanced_shockburst_tx_mode:
 3287              	.LFB150:
 642:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 3288              		.loc 1 642 0
 3289              		.cfi_startproc
 3290              		@ args = 0, pretend = 0, frame = 16
 3291              		@ frame_needed = 0, uses_anonymous_args = 0
 3292 0000 30B5     		push	{r4, r5, lr}
 3293              	.LCFI110:
 3294              		.cfi_def_cfa_offset 12
 3295              		.cfi_offset 4, -12
 3296              		.cfi_offset 5, -8
 3297              		.cfi_offset 14, -4
 3298 0002 89B0     		sub	sp, sp, #36
 3299              	.LCFI111:
 3300              		.cfi_def_cfa_offset 48
 643:libs/nRF24/nRF24.c ****     // nRF24_clear_STATUS(RX_DR_MASK1, TX_DS_MASK1, MAX_RT_MASK1);
 3301              		.loc 1 643 0
 3302 0004 FFF7FEFF 		bl	nRF24_CE_0
 3303              	.LVL365:
 647:libs/nRF24/nRF24.c **** 
 3304              		.loc 1 647 0
 3305 0008 0320     		movs	r0, #3
 3306 000a FFF7FEFF 		bl	nRF24_set_SETUP_AW
 3307              	.LVL366:
 649:libs/nRF24/nRF24.c ****     nRF24_set_TX_ADDR(5, TX_ADDRESS);
 3308              		.loc 1 649 0
 3309 000e 1F4B     		ldr	r3, .L176
 3310 0010 93E80300 		ldm	r3, {r0, r1}
 3311 0014 0690     		str	r0, [sp, #24]
 3312 0016 8DF81C10 		strb	r1, [sp, #28]
 650:libs/nRF24/nRF24.c **** 
 3313              		.loc 1 650 0
 3314 001a 06A9     		add	r1, sp, #24
 3315 001c 0520     		movs	r0, #5
 3316 001e FFF7FEFF 		bl	nRF24_set_TX_ADDR
 3317              	.LVL367:
 653:libs/nRF24/nRF24.c **** 
 3318              		.loc 1 653 0
 3319 0022 06A9     		add	r1, sp, #24
 3320 0024 0520     		movs	r0, #5
 3321 0026 FFF7FEFF 		bl	nRF24_set_RX_ADDR_P0
 3322              	.LVL368:
 655:libs/nRF24/nRF24.c ****     nRF24_set_EN_RXADDR(ERX_P5_MASK0, ERX_P4_MASK0, ERX_P3_MASK0, ERX_P2_MASK0, ERX_P1_MASK0, ERX_P
 3323              		.loc 1 655 0
 3324 002a 0125     		movs	r5, #1
 3325 002c 0195     		str	r5, [sp, #4]
 3326 002e 0024     		movs	r4, #0
 3327 0030 0094     		str	r4, [sp]
ARM GAS  /tmp/ccvdf1ti.s 			page 83


 3328 0032 2346     		mov	r3, r4
 3329 0034 2246     		mov	r2, r4
 3330 0036 2146     		mov	r1, r4
 3331 0038 2046     		mov	r0, r4
 3332 003a FFF7FEFF 		bl	nRF24_set_EN_AA
 3333              	.LVL369:
 656:libs/nRF24/nRF24.c ****     nRF24_set_SETUP_RETR(ARD_MASKDEFAULT, ARC_MASK10);
 3334              		.loc 1 656 0
 3335 003e 0195     		str	r5, [sp, #4]
 3336 0040 0094     		str	r4, [sp]
 3337 0042 2346     		mov	r3, r4
 3338 0044 2246     		mov	r2, r4
 3339 0046 2146     		mov	r1, r4
 3340 0048 2046     		mov	r0, r4
 3341 004a FFF7FEFF 		bl	nRF24_set_EN_RXADDR
 3342              	.LVL370:
 657:libs/nRF24/nRF24.c ****     nRF24_set_RF_CH(40);
 3343              		.loc 1 657 0
 3344 004e 0A21     		movs	r1, #10
 3345 0050 2046     		mov	r0, r4
 3346 0052 FFF7FEFF 		bl	nRF24_set_SETUP_RETR
 3347              	.LVL371:
 658:libs/nRF24/nRF24.c ****     uint8_t writing_byte = 0x07;
 3348              		.loc 1 658 0
 3349 0056 2820     		movs	r0, #40
 3350 0058 FFF7FEFF 		bl	nRF24_set_RF_CH
 3351              	.LVL372:
 659:libs/nRF24/nRF24.c ****     nRF24_verified_write_register(W_REGISTER_MASK + RF_SETUP, 1, &writing_byte);
 3352              		.loc 1 659 0
 3353 005c 08AA     		add	r2, sp, #32
 3354 005e 0723     		movs	r3, #7
 3355 0060 02F8093D 		strb	r3, [r2, #-9]!
 660:libs/nRF24/nRF24.c ****     // nRF24_set_RF_SETUP(CONT_WAVE_MASKDEFAULT, RF_DR_LOW_MASKDEFAULT, PLL_LOCK_MASKDEFAULT, RF_DR
 3356              		.loc 1 660 0
 3357 0064 2946     		mov	r1, r5
 3358 0066 2620     		movs	r0, #38
 3359 0068 FFF7FEFF 		bl	nRF24_verified_write_register
 3360              	.LVL373:
 662:libs/nRF24/nRF24.c ****     SPI_DELAY(10);
 3361              		.loc 1 662 0
 3362 006c 0294     		str	r4, [sp, #8]
 3363 006e 0223     		movs	r3, #2
 3364 0070 0193     		str	r3, [sp, #4]
 3365 0072 0423     		movs	r3, #4
 3366 0074 0093     		str	r3, [sp]
 3367 0076 0823     		movs	r3, #8
 3368 0078 2246     		mov	r2, r4
 3369 007a 2146     		mov	r1, r4
 3370 007c 2046     		mov	r0, r4
 3371 007e FFF7FEFF 		bl	nRF24_set_CONFIG
 3372              	.LVL374:
 663:libs/nRF24/nRF24.c **** 
 3373              		.loc 1 663 0
 3374 0082 0A20     		movs	r0, #10
 3375 0084 FFF7FEFF 		bl	SPI_DELAY
 3376              	.LVL375:
 665:libs/nRF24/nRF24.c **** 
ARM GAS  /tmp/ccvdf1ti.s 			page 84


 3377              		.loc 1 665 0
 3378 0088 09B0     		add	sp, sp, #36
 3379              	.LCFI112:
 3380              		.cfi_def_cfa_offset 12
 3381              		@ sp needed
 3382 008a 30BD     		pop	{r4, r5, pc}
 3383              	.L177:
 3384              		.align	2
 3385              	.L176:
 3386 008c 04000000 		.word	.LANCHOR0+4
 3387              		.cfi_endproc
 3388              	.LFE150:
 3390              		.section	.text.nRF24_get_TX_ADDR,"ax",%progbits
 3391              		.align	1
 3392              		.global	nRF24_get_TX_ADDR
 3393              		.syntax unified
 3394              		.thumb
 3395              		.thumb_func
 3396              		.fpu fpv4-sp-d16
 3398              	nRF24_get_TX_ADDR:
 3399              	.LFB186:
1317:libs/nRF24/nRF24.c **** }
1318:libs/nRF24/nRF24.c **** 
1319:libs/nRF24/nRF24.c **** 
1320:libs/nRF24/nRF24.c **** /**
1321:libs/nRF24/nRF24.c ****   * @brief      Read <TX_ADDR> register from nRF24.
1322:libs/nRF24/nRF24.c ****   * @param[in]  tx_addr_width The width of RX address. Needs to be consistent with SET_AW.
1323:libs/nRF24/nRF24.c ****   * @param[out] p_read_buffer Pointer to an array that's used to store the read TX address.
1324:libs/nRF24/nRF24.c ****   * @retval     None.
1325:libs/nRF24/nRF24.c ****   */
1326:libs/nRF24/nRF24.c **** void nRF24_get_TX_ADDR(uint8_t tx_addr_width, uint8_t* p_read_buffer) 
1327:libs/nRF24/nRF24.c **** {
 3400              		.loc 1 1327 0
 3401              		.cfi_startproc
 3402              		@ args = 0, pretend = 0, frame = 0
 3403              		@ frame_needed = 0, uses_anonymous_args = 0
 3404              	.LVL376:
 3405 0000 08B5     		push	{r3, lr}
 3406              	.LCFI113:
 3407              		.cfi_def_cfa_offset 8
 3408              		.cfi_offset 3, -8
 3409              		.cfi_offset 14, -4
1328:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + TX_ADDR, tx_addr_width, p_read_buffer);
 3410              		.loc 1 1328 0
 3411 0002 0A46     		mov	r2, r1
 3412 0004 0146     		mov	r1, r0
 3413              	.LVL377:
 3414 0006 1020     		movs	r0, #16
 3415              	.LVL378:
 3416 0008 FFF7FEFF 		bl	spi_read_register
 3417              	.LVL379:
 3418 000c 08BD     		pop	{r3, pc}
 3419              		.cfi_endproc
 3420              	.LFE186:
 3422              		.section	.text.nRF24_set_RX_PW_P0,"ax",%progbits
 3423              		.align	1
 3424              		.global	nRF24_set_RX_PW_P0
ARM GAS  /tmp/ccvdf1ti.s 			page 85


 3425              		.syntax unified
 3426              		.thumb
 3427              		.thumb_func
 3428              		.fpu fpv4-sp-d16
 3430              	nRF24_set_RX_PW_P0:
 3431              	.LFB187:
1329:libs/nRF24/nRF24.c **** }
1330:libs/nRF24/nRF24.c **** 
1331:libs/nRF24/nRF24.c **** /**
1332:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 0.
1333:libs/nRF24/nRF24.c ****   * @param rx_pw_p0 Number of bytes. 
1334:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1335:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1336:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1337:libs/nRF24/nRF24.c ****   *          ...
1338:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1339:libs/nRF24/nRF24.c ****   */
1340:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P0(uint8_t rx_pw_p0) 
1341:libs/nRF24/nRF24.c **** {
 3432              		.loc 1 1341 0
 3433              		.cfi_startproc
 3434              		@ args = 0, pretend = 0, frame = 8
 3435              		@ frame_needed = 0, uses_anonymous_args = 0
 3436              	.LVL380:
 3437 0000 00B5     		push	{lr}
 3438              	.LCFI114:
 3439              		.cfi_def_cfa_offset 4
 3440              		.cfi_offset 14, -4
 3441 0002 83B0     		sub	sp, sp, #12
 3442              	.LCFI115:
 3443              		.cfi_def_cfa_offset 16
1342:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1343:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p0;
 3444              		.loc 1 1343 0
 3445 0004 02AA     		add	r2, sp, #8
 3446 0006 02F8010D 		strb	r0, [r2, #-1]!
1344:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P0, 1, &writing_byte);
 3447              		.loc 1 1344 0
 3448 000a 0121     		movs	r1, #1
 3449 000c 3120     		movs	r0, #49
 3450              	.LVL381:
 3451 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3452              	.LVL382:
1345:libs/nRF24/nRF24.c **** }
 3453              		.loc 1 1345 0
 3454 0012 03B0     		add	sp, sp, #12
 3455              	.LCFI116:
 3456              		.cfi_def_cfa_offset 4
 3457              		@ sp needed
 3458 0014 5DF804FB 		ldr	pc, [sp], #4
 3459              		.cfi_endproc
 3460              	.LFE187:
 3462              		.section	.text.nRF24_config_normal_rx_mode,"ax",%progbits
 3463              		.align	1
 3464              		.global	nRF24_config_normal_rx_mode
 3465              		.syntax unified
 3466              		.thumb
ARM GAS  /tmp/ccvdf1ti.s 			page 86


 3467              		.thumb_func
 3468              		.fpu fpv4-sp-d16
 3470              	nRF24_config_normal_rx_mode:
 3471              	.LFB151:
 680:libs/nRF24/nRF24.c ****     nRF24_CE_0();
 3472              		.loc 1 680 0
 3473              		.cfi_startproc
 3474              		@ args = 0, pretend = 0, frame = 8
 3475              		@ frame_needed = 0, uses_anonymous_args = 0
 3476 0000 30B5     		push	{r4, r5, lr}
 3477              	.LCFI117:
 3478              		.cfi_def_cfa_offset 12
 3479              		.cfi_offset 4, -12
 3480              		.cfi_offset 5, -8
 3481              		.cfi_offset 14, -4
 3482 0002 87B0     		sub	sp, sp, #28
 3483              	.LCFI118:
 3484              		.cfi_def_cfa_offset 40
 681:libs/nRF24/nRF24.c **** 
 3485              		.loc 1 681 0
 3486 0004 FFF7FEFF 		bl	nRF24_CE_0
 3487              	.LVL383:
 684:libs/nRF24/nRF24.c ****  
 3488              		.loc 1 684 0
 3489 0008 0320     		movs	r0, #3
 3490 000a FFF7FEFF 		bl	nRF24_set_SETUP_AW
 3491              	.LVL384:
 687:libs/nRF24/nRF24.c ****     nRF24_set_RX_ADDR_P0(5, RX_ADDRESS); 
 3492              		.loc 1 687 0
 3493 000e 1E4B     		ldr	r3, .L184
 3494 0010 93E80300 		ldm	r3, {r0, r1}
 3495 0014 0490     		str	r0, [sp, #16]
 3496 0016 8DF81410 		strb	r1, [sp, #20]
 688:libs/nRF24/nRF24.c **** 
 3497              		.loc 1 688 0
 3498 001a 04A9     		add	r1, sp, #16
 3499 001c 0520     		movs	r0, #5
 3500 001e FFF7FEFF 		bl	nRF24_set_RX_ADDR_P0
 3501              	.LVL385:
 691:libs/nRF24/nRF24.c **** 
 3502              		.loc 1 691 0
 3503 0022 0024     		movs	r4, #0
 3504 0024 0194     		str	r4, [sp, #4]
 3505 0026 0094     		str	r4, [sp]
 3506 0028 2346     		mov	r3, r4
 3507 002a 2246     		mov	r2, r4
 3508 002c 2146     		mov	r1, r4
 3509 002e 2046     		mov	r0, r4
 3510 0030 FFF7FEFF 		bl	nRF24_set_EN_AA
 3511              	.LVL386:
 694:libs/nRF24/nRF24.c **** 
 3512              		.loc 1 694 0
 3513 0034 0125     		movs	r5, #1
 3514 0036 0195     		str	r5, [sp, #4]
 3515 0038 0094     		str	r4, [sp]
 3516 003a 2346     		mov	r3, r4
 3517 003c 2246     		mov	r2, r4
ARM GAS  /tmp/ccvdf1ti.s 			page 87


 3518 003e 2146     		mov	r1, r4
 3519 0040 2046     		mov	r0, r4
 3520 0042 FFF7FEFF 		bl	nRF24_set_EN_RXADDR
 3521              	.LVL387:
 697:libs/nRF24/nRF24.c **** 
 3522              		.loc 1 697 0
 3523 0046 2146     		mov	r1, r4
 3524 0048 2046     		mov	r0, r4
 3525 004a FFF7FEFF 		bl	nRF24_set_SETUP_RETR
 3526              	.LVL388:
 700:libs/nRF24/nRF24.c **** 
 3527              		.loc 1 700 0
 3528 004e 2820     		movs	r0, #40
 3529 0050 FFF7FEFF 		bl	nRF24_set_RF_CH
 3530              	.LVL389:
 703:libs/nRF24/nRF24.c **** 
 3531              		.loc 1 703 0
 3532 0054 0623     		movs	r3, #6
 3533 0056 0093     		str	r3, [sp]
 3534 0058 2B46     		mov	r3, r5
 3535 005a 2246     		mov	r2, r4
 3536 005c 2146     		mov	r1, r4
 3537 005e 2046     		mov	r0, r4
 3538 0060 FFF7FEFF 		bl	nRF24_set_RF_SETUP
 3539              	.LVL390:
 706:libs/nRF24/nRF24.c ****   
 3540              		.loc 1 706 0
 3541 0064 2020     		movs	r0, #32
 3542 0066 FFF7FEFF 		bl	nRF24_set_RX_PW_P0
 3543              	.LVL391:
 709:libs/nRF24/nRF24.c **** 
 3544              		.loc 1 709 0
 3545 006a 0295     		str	r5, [sp, #8]
 3546 006c 0223     		movs	r3, #2
 3547 006e 0193     		str	r3, [sp, #4]
 3548 0070 0423     		movs	r3, #4
 3549 0072 0093     		str	r3, [sp]
 3550 0074 0823     		movs	r3, #8
 3551 0076 2246     		mov	r2, r4
 3552 0078 2146     		mov	r1, r4
 3553 007a 2046     		mov	r0, r4
 3554 007c FFF7FEFF 		bl	nRF24_set_CONFIG
 3555              	.LVL392:
 712:libs/nRF24/nRF24.c **** 		/* nRF24 starts hearing as RX. */
 3556              		.loc 1 712 0
 3557 0080 FFF7FEFF 		bl	nRF24_CE_1
 3558              	.LVL393:
 714:libs/nRF24/nRF24.c **** 
 3559              		.loc 1 714 0
 3560 0084 07B0     		add	sp, sp, #28
 3561              	.LCFI119:
 3562              		.cfi_def_cfa_offset 12
 3563              		@ sp needed
 3564 0086 30BD     		pop	{r4, r5, pc}
 3565              	.L185:
 3566              		.align	2
 3567              	.L184:
ARM GAS  /tmp/ccvdf1ti.s 			page 88


 3568 0088 04000000 		.word	.LANCHOR0+4
 3569              		.cfi_endproc
 3570              	.LFE151:
 3572              		.section	.text.nRF24_get_RX_PW_P0,"ax",%progbits
 3573              		.align	1
 3574              		.global	nRF24_get_RX_PW_P0
 3575              		.syntax unified
 3576              		.thumb
 3577              		.thumb_func
 3578              		.fpu fpv4-sp-d16
 3580              	nRF24_get_RX_PW_P0:
 3581              	.LFB188:
1346:libs/nRF24/nRF24.c **** 
1347:libs/nRF24/nRF24.c **** 
1348:libs/nRF24/nRF24.c **** /**
1349:libs/nRF24/nRF24.c ****   * @brief      Read <RX_PW_P0> register from nRF24.
1350:libs/nRF24/nRF24.c ****   * @param      None.
1351:libs/nRF24/nRF24.c ****   * @retval     <RX_PW_P0> register value.
1352:libs/nRF24/nRF24.c ****   */
1353:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P0() 
1354:libs/nRF24/nRF24.c **** {
 3582              		.loc 1 1354 0
 3583              		.cfi_startproc
 3584              		@ args = 0, pretend = 0, frame = 8
 3585              		@ frame_needed = 0, uses_anonymous_args = 0
 3586 0000 00B5     		push	{lr}
 3587              	.LCFI120:
 3588              		.cfi_def_cfa_offset 4
 3589              		.cfi_offset 14, -4
 3590 0002 83B0     		sub	sp, sp, #12
 3591              	.LCFI121:
 3592              		.cfi_def_cfa_offset 16
1355:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1356:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P0, 1, &read_byte);
 3593              		.loc 1 1356 0
 3594 0004 0DF10702 		add	r2, sp, #7
 3595 0008 0121     		movs	r1, #1
 3596 000a 1120     		movs	r0, #17
 3597 000c FFF7FEFF 		bl	spi_read_register
 3598              	.LVL394:
1357:libs/nRF24/nRF24.c ****   return read_byte;
1358:libs/nRF24/nRF24.c **** }
 3599              		.loc 1 1358 0
 3600 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3601 0014 03B0     		add	sp, sp, #12
 3602              	.LCFI122:
 3603              		.cfi_def_cfa_offset 4
 3604              		@ sp needed
 3605 0016 5DF804FB 		ldr	pc, [sp], #4
 3606              		.cfi_endproc
 3607              	.LFE188:
 3609              		.section	.text.nRF24_set_RX_PW_P1,"ax",%progbits
 3610              		.align	1
 3611              		.global	nRF24_set_RX_PW_P1
 3612              		.syntax unified
 3613              		.thumb
 3614              		.thumb_func
ARM GAS  /tmp/ccvdf1ti.s 			page 89


 3615              		.fpu fpv4-sp-d16
 3617              	nRF24_set_RX_PW_P1:
 3618              	.LFB189:
1359:libs/nRF24/nRF24.c **** 
1360:libs/nRF24/nRF24.c **** 
1361:libs/nRF24/nRF24.c **** /**
1362:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 1.
1363:libs/nRF24/nRF24.c ****   * @param rx_pw_p1 Number of bytes. 
1364:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1365:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1366:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1367:libs/nRF24/nRF24.c ****   *          ...
1368:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1369:libs/nRF24/nRF24.c ****   * @retval None.
1370:libs/nRF24/nRF24.c ****   */
1371:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P1(uint8_t rx_pw_p1) 
1372:libs/nRF24/nRF24.c **** {
 3619              		.loc 1 1372 0
 3620              		.cfi_startproc
 3621              		@ args = 0, pretend = 0, frame = 8
 3622              		@ frame_needed = 0, uses_anonymous_args = 0
 3623              	.LVL395:
 3624 0000 00B5     		push	{lr}
 3625              	.LCFI123:
 3626              		.cfi_def_cfa_offset 4
 3627              		.cfi_offset 14, -4
 3628 0002 83B0     		sub	sp, sp, #12
 3629              	.LCFI124:
 3630              		.cfi_def_cfa_offset 16
1373:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1374:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p1;
 3631              		.loc 1 1374 0
 3632 0004 02AA     		add	r2, sp, #8
 3633 0006 02F8010D 		strb	r0, [r2, #-1]!
1375:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P1, 1, &writing_byte);
 3634              		.loc 1 1375 0
 3635 000a 0121     		movs	r1, #1
 3636 000c 3220     		movs	r0, #50
 3637              	.LVL396:
 3638 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3639              	.LVL397:
1376:libs/nRF24/nRF24.c **** }
 3640              		.loc 1 1376 0
 3641 0012 03B0     		add	sp, sp, #12
 3642              	.LCFI125:
 3643              		.cfi_def_cfa_offset 4
 3644              		@ sp needed
 3645 0014 5DF804FB 		ldr	pc, [sp], #4
 3646              		.cfi_endproc
 3647              	.LFE189:
 3649              		.section	.text.nRF24_get_RX_PW_P1,"ax",%progbits
 3650              		.align	1
 3651              		.global	nRF24_get_RX_PW_P1
 3652              		.syntax unified
 3653              		.thumb
 3654              		.thumb_func
 3655              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccvdf1ti.s 			page 90


 3657              	nRF24_get_RX_PW_P1:
 3658              	.LFB190:
1377:libs/nRF24/nRF24.c **** 
1378:libs/nRF24/nRF24.c **** 
1379:libs/nRF24/nRF24.c **** /**
1380:libs/nRF24/nRF24.c ****   * @brief      Read <RX_PW_P1> register from nRF24.
1381:libs/nRF24/nRF24.c ****   * @param      None.
1382:libs/nRF24/nRF24.c ****   * @retval     <RX_PW_P1> register value.
1383:libs/nRF24/nRF24.c ****   */
1384:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P1() 
1385:libs/nRF24/nRF24.c **** {
 3659              		.loc 1 1385 0
 3660              		.cfi_startproc
 3661              		@ args = 0, pretend = 0, frame = 8
 3662              		@ frame_needed = 0, uses_anonymous_args = 0
 3663 0000 00B5     		push	{lr}
 3664              	.LCFI126:
 3665              		.cfi_def_cfa_offset 4
 3666              		.cfi_offset 14, -4
 3667 0002 83B0     		sub	sp, sp, #12
 3668              	.LCFI127:
 3669              		.cfi_def_cfa_offset 16
1386:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1387:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P1, 1, &read_byte);
 3670              		.loc 1 1387 0
 3671 0004 0DF10702 		add	r2, sp, #7
 3672 0008 0121     		movs	r1, #1
 3673 000a 1220     		movs	r0, #18
 3674 000c FFF7FEFF 		bl	spi_read_register
 3675              	.LVL398:
1388:libs/nRF24/nRF24.c ****   return read_byte;
1389:libs/nRF24/nRF24.c **** }
 3676              		.loc 1 1389 0
 3677 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3678 0014 03B0     		add	sp, sp, #12
 3679              	.LCFI128:
 3680              		.cfi_def_cfa_offset 4
 3681              		@ sp needed
 3682 0016 5DF804FB 		ldr	pc, [sp], #4
 3683              		.cfi_endproc
 3684              	.LFE190:
 3686              		.section	.text.nRF24_set_RX_PW_P2,"ax",%progbits
 3687              		.align	1
 3688              		.global	nRF24_set_RX_PW_P2
 3689              		.syntax unified
 3690              		.thumb
 3691              		.thumb_func
 3692              		.fpu fpv4-sp-d16
 3694              	nRF24_set_RX_PW_P2:
 3695              	.LFB191:
1390:libs/nRF24/nRF24.c **** 
1391:libs/nRF24/nRF24.c **** 
1392:libs/nRF24/nRF24.c **** /**
1393:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 2.
1394:libs/nRF24/nRF24.c ****   * @param rx_pw_p2 Number of bytes. 
1395:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1396:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
ARM GAS  /tmp/ccvdf1ti.s 			page 91


1397:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1398:libs/nRF24/nRF24.c ****   *          ...
1399:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1400:libs/nRF24/nRF24.c ****   * @retval None.
1401:libs/nRF24/nRF24.c ****   */
1402:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P2(uint8_t rx_pw_p2) 
1403:libs/nRF24/nRF24.c **** {
 3696              		.loc 1 1403 0
 3697              		.cfi_startproc
 3698              		@ args = 0, pretend = 0, frame = 8
 3699              		@ frame_needed = 0, uses_anonymous_args = 0
 3700              	.LVL399:
 3701 0000 00B5     		push	{lr}
 3702              	.LCFI129:
 3703              		.cfi_def_cfa_offset 4
 3704              		.cfi_offset 14, -4
 3705 0002 83B0     		sub	sp, sp, #12
 3706              	.LCFI130:
 3707              		.cfi_def_cfa_offset 16
1404:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1405:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p2;
 3708              		.loc 1 1405 0
 3709 0004 02AA     		add	r2, sp, #8
 3710 0006 02F8010D 		strb	r0, [r2, #-1]!
1406:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P2, 1, &writing_byte);
 3711              		.loc 1 1406 0
 3712 000a 0121     		movs	r1, #1
 3713 000c 3320     		movs	r0, #51
 3714              	.LVL400:
 3715 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3716              	.LVL401:
1407:libs/nRF24/nRF24.c **** }
 3717              		.loc 1 1407 0
 3718 0012 03B0     		add	sp, sp, #12
 3719              	.LCFI131:
 3720              		.cfi_def_cfa_offset 4
 3721              		@ sp needed
 3722 0014 5DF804FB 		ldr	pc, [sp], #4
 3723              		.cfi_endproc
 3724              	.LFE191:
 3726              		.section	.text.nRF24_get_RX_PW_P2,"ax",%progbits
 3727              		.align	1
 3728              		.global	nRF24_get_RX_PW_P2
 3729              		.syntax unified
 3730              		.thumb
 3731              		.thumb_func
 3732              		.fpu fpv4-sp-d16
 3734              	nRF24_get_RX_PW_P2:
 3735              	.LFB192:
1408:libs/nRF24/nRF24.c **** 
1409:libs/nRF24/nRF24.c **** 
1410:libs/nRF24/nRF24.c **** /**
1411:libs/nRF24/nRF24.c ****   * @brief      Read <RX_PW_P2> register from nRF24.
1412:libs/nRF24/nRF24.c ****   * @param      None.
1413:libs/nRF24/nRF24.c ****   * @retval     <RX_PW_P2> register value.
1414:libs/nRF24/nRF24.c ****   */
1415:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P2() 
ARM GAS  /tmp/ccvdf1ti.s 			page 92


1416:libs/nRF24/nRF24.c **** {
 3736              		.loc 1 1416 0
 3737              		.cfi_startproc
 3738              		@ args = 0, pretend = 0, frame = 8
 3739              		@ frame_needed = 0, uses_anonymous_args = 0
 3740 0000 00B5     		push	{lr}
 3741              	.LCFI132:
 3742              		.cfi_def_cfa_offset 4
 3743              		.cfi_offset 14, -4
 3744 0002 83B0     		sub	sp, sp, #12
 3745              	.LCFI133:
 3746              		.cfi_def_cfa_offset 16
1417:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1418:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P2, 1, &read_byte);
 3747              		.loc 1 1418 0
 3748 0004 0DF10702 		add	r2, sp, #7
 3749 0008 0121     		movs	r1, #1
 3750 000a 1320     		movs	r0, #19
 3751 000c FFF7FEFF 		bl	spi_read_register
 3752              	.LVL402:
1419:libs/nRF24/nRF24.c ****   return read_byte;
1420:libs/nRF24/nRF24.c **** }
 3753              		.loc 1 1420 0
 3754 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3755 0014 03B0     		add	sp, sp, #12
 3756              	.LCFI134:
 3757              		.cfi_def_cfa_offset 4
 3758              		@ sp needed
 3759 0016 5DF804FB 		ldr	pc, [sp], #4
 3760              		.cfi_endproc
 3761              	.LFE192:
 3763              		.section	.text.nRF24_set_RX_PW_P3,"ax",%progbits
 3764              		.align	1
 3765              		.global	nRF24_set_RX_PW_P3
 3766              		.syntax unified
 3767              		.thumb
 3768              		.thumb_func
 3769              		.fpu fpv4-sp-d16
 3771              	nRF24_set_RX_PW_P3:
 3772              	.LFB193:
1421:libs/nRF24/nRF24.c **** 
1422:libs/nRF24/nRF24.c **** 
1423:libs/nRF24/nRF24.c **** /**
1424:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 3.
1425:libs/nRF24/nRF24.c ****   * @param rx_pw_p3 Number of bytes. 
1426:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1427:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1428:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1429:libs/nRF24/nRF24.c ****   *          ...
1430:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1431:libs/nRF24/nRF24.c ****   * @retval None.
1432:libs/nRF24/nRF24.c ****   */
1433:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P3(uint8_t rx_pw_p3) 
1434:libs/nRF24/nRF24.c **** {
 3773              		.loc 1 1434 0
 3774              		.cfi_startproc
 3775              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccvdf1ti.s 			page 93


 3776              		@ frame_needed = 0, uses_anonymous_args = 0
 3777              	.LVL403:
 3778 0000 00B5     		push	{lr}
 3779              	.LCFI135:
 3780              		.cfi_def_cfa_offset 4
 3781              		.cfi_offset 14, -4
 3782 0002 83B0     		sub	sp, sp, #12
 3783              	.LCFI136:
 3784              		.cfi_def_cfa_offset 16
1435:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1436:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p3;
 3785              		.loc 1 1436 0
 3786 0004 02AA     		add	r2, sp, #8
 3787 0006 02F8010D 		strb	r0, [r2, #-1]!
1437:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P3, 1, &writing_byte);
 3788              		.loc 1 1437 0
 3789 000a 0121     		movs	r1, #1
 3790 000c 3420     		movs	r0, #52
 3791              	.LVL404:
 3792 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3793              	.LVL405:
1438:libs/nRF24/nRF24.c **** }
 3794              		.loc 1 1438 0
 3795 0012 03B0     		add	sp, sp, #12
 3796              	.LCFI137:
 3797              		.cfi_def_cfa_offset 4
 3798              		@ sp needed
 3799 0014 5DF804FB 		ldr	pc, [sp], #4
 3800              		.cfi_endproc
 3801              	.LFE193:
 3803              		.section	.text.nRF24_get_RX_PW_P3,"ax",%progbits
 3804              		.align	1
 3805              		.global	nRF24_get_RX_PW_P3
 3806              		.syntax unified
 3807              		.thumb
 3808              		.thumb_func
 3809              		.fpu fpv4-sp-d16
 3811              	nRF24_get_RX_PW_P3:
 3812              	.LFB194:
1439:libs/nRF24/nRF24.c **** 
1440:libs/nRF24/nRF24.c **** /**
1441:libs/nRF24/nRF24.c ****   * @brief      Read <RX_PW_P3> register from nRF24.
1442:libs/nRF24/nRF24.c ****   * @param      None.
1443:libs/nRF24/nRF24.c ****   * @retval     <RX_PW_P3> register value.
1444:libs/nRF24/nRF24.c ****   */
1445:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P3() 
1446:libs/nRF24/nRF24.c **** {
 3813              		.loc 1 1446 0
 3814              		.cfi_startproc
 3815              		@ args = 0, pretend = 0, frame = 8
 3816              		@ frame_needed = 0, uses_anonymous_args = 0
 3817 0000 00B5     		push	{lr}
 3818              	.LCFI138:
 3819              		.cfi_def_cfa_offset 4
 3820              		.cfi_offset 14, -4
 3821 0002 83B0     		sub	sp, sp, #12
 3822              	.LCFI139:
ARM GAS  /tmp/ccvdf1ti.s 			page 94


 3823              		.cfi_def_cfa_offset 16
1447:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1448:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P3, 1, &read_byte);
 3824              		.loc 1 1448 0
 3825 0004 0DF10702 		add	r2, sp, #7
 3826 0008 0121     		movs	r1, #1
 3827 000a 1420     		movs	r0, #20
 3828 000c FFF7FEFF 		bl	spi_read_register
 3829              	.LVL406:
1449:libs/nRF24/nRF24.c ****   return read_byte;
1450:libs/nRF24/nRF24.c **** }
 3830              		.loc 1 1450 0
 3831 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3832 0014 03B0     		add	sp, sp, #12
 3833              	.LCFI140:
 3834              		.cfi_def_cfa_offset 4
 3835              		@ sp needed
 3836 0016 5DF804FB 		ldr	pc, [sp], #4
 3837              		.cfi_endproc
 3838              	.LFE194:
 3840              		.section	.text.nRF24_set_RX_PW_P4,"ax",%progbits
 3841              		.align	1
 3842              		.global	nRF24_set_RX_PW_P4
 3843              		.syntax unified
 3844              		.thumb
 3845              		.thumb_func
 3846              		.fpu fpv4-sp-d16
 3848              	nRF24_set_RX_PW_P4:
 3849              	.LFB195:
1451:libs/nRF24/nRF24.c **** 
1452:libs/nRF24/nRF24.c **** 
1453:libs/nRF24/nRF24.c **** /**
1454:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 4.
1455:libs/nRF24/nRF24.c ****   * @param rx_pw_p4 Number of bytes. 
1456:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1457:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1458:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1459:libs/nRF24/nRF24.c ****   *          ...
1460:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1461:libs/nRF24/nRF24.c ****   * @retval None.
1462:libs/nRF24/nRF24.c ****   */
1463:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P4(uint8_t rx_pw_p4) 
1464:libs/nRF24/nRF24.c **** {
 3850              		.loc 1 1464 0
 3851              		.cfi_startproc
 3852              		@ args = 0, pretend = 0, frame = 8
 3853              		@ frame_needed = 0, uses_anonymous_args = 0
 3854              	.LVL407:
 3855 0000 00B5     		push	{lr}
 3856              	.LCFI141:
 3857              		.cfi_def_cfa_offset 4
 3858              		.cfi_offset 14, -4
 3859 0002 83B0     		sub	sp, sp, #12
 3860              	.LCFI142:
 3861              		.cfi_def_cfa_offset 16
1465:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1466:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p4;
ARM GAS  /tmp/ccvdf1ti.s 			page 95


 3862              		.loc 1 1466 0
 3863 0004 02AA     		add	r2, sp, #8
 3864 0006 02F8010D 		strb	r0, [r2, #-1]!
1467:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P4, 1, &writing_byte);
 3865              		.loc 1 1467 0
 3866 000a 0121     		movs	r1, #1
 3867 000c 3520     		movs	r0, #53
 3868              	.LVL408:
 3869 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3870              	.LVL409:
1468:libs/nRF24/nRF24.c **** }
 3871              		.loc 1 1468 0
 3872 0012 03B0     		add	sp, sp, #12
 3873              	.LCFI143:
 3874              		.cfi_def_cfa_offset 4
 3875              		@ sp needed
 3876 0014 5DF804FB 		ldr	pc, [sp], #4
 3877              		.cfi_endproc
 3878              	.LFE195:
 3880              		.section	.text.nRF24_get_RX_PW_P4,"ax",%progbits
 3881              		.align	1
 3882              		.global	nRF24_get_RX_PW_P4
 3883              		.syntax unified
 3884              		.thumb
 3885              		.thumb_func
 3886              		.fpu fpv4-sp-d16
 3888              	nRF24_get_RX_PW_P4:
 3889              	.LFB196:
1469:libs/nRF24/nRF24.c **** 
1470:libs/nRF24/nRF24.c **** /**
1471:libs/nRF24/nRF24.c ****   * @brief      Read <RX_PW_P4> register from nRF24.
1472:libs/nRF24/nRF24.c ****   * @param      None.
1473:libs/nRF24/nRF24.c ****   * @retval     <RX_PW_P4> register value.
1474:libs/nRF24/nRF24.c ****   */
1475:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P4() 
1476:libs/nRF24/nRF24.c **** {
 3890              		.loc 1 1476 0
 3891              		.cfi_startproc
 3892              		@ args = 0, pretend = 0, frame = 8
 3893              		@ frame_needed = 0, uses_anonymous_args = 0
 3894 0000 00B5     		push	{lr}
 3895              	.LCFI144:
 3896              		.cfi_def_cfa_offset 4
 3897              		.cfi_offset 14, -4
 3898 0002 83B0     		sub	sp, sp, #12
 3899              	.LCFI145:
 3900              		.cfi_def_cfa_offset 16
1477:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1478:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P4, 1, &read_byte);
 3901              		.loc 1 1478 0
 3902 0004 0DF10702 		add	r2, sp, #7
 3903 0008 0121     		movs	r1, #1
 3904 000a 1520     		movs	r0, #21
 3905 000c FFF7FEFF 		bl	spi_read_register
 3906              	.LVL410:
1479:libs/nRF24/nRF24.c ****   return read_byte;
1480:libs/nRF24/nRF24.c **** }
ARM GAS  /tmp/ccvdf1ti.s 			page 96


 3907              		.loc 1 1480 0
 3908 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3909 0014 03B0     		add	sp, sp, #12
 3910              	.LCFI146:
 3911              		.cfi_def_cfa_offset 4
 3912              		@ sp needed
 3913 0016 5DF804FB 		ldr	pc, [sp], #4
 3914              		.cfi_endproc
 3915              	.LFE196:
 3917              		.section	.text.nRF24_set_RX_PW_P5,"ax",%progbits
 3918              		.align	1
 3919              		.global	nRF24_set_RX_PW_P5
 3920              		.syntax unified
 3921              		.thumb
 3922              		.thumb_func
 3923              		.fpu fpv4-sp-d16
 3925              	nRF24_set_RX_PW_P5:
 3926              	.LFB197:
1481:libs/nRF24/nRF24.c **** 
1482:libs/nRF24/nRF24.c **** /**
1483:libs/nRF24/nRF24.c ****   * @brief Set number of bytes in RX payload in data pipe 5.
1484:libs/nRF24/nRF24.c ****   * @param rx_pw_p5 Number of bytes. 
1485:libs/nRF24/nRF24.c ****   *          0 = pipe not used.
1486:libs/nRF24/nRF24.c ****   *          1 = 1 byte.
1487:libs/nRF24/nRF24.c ****   *          2 = 2 bytes.
1488:libs/nRF24/nRF24.c ****   *          ...
1489:libs/nRF24/nRF24.c ****   *          32 = 32 bytes.
1490:libs/nRF24/nRF24.c ****   * @retval None.
1491:libs/nRF24/nRF24.c ****   */
1492:libs/nRF24/nRF24.c **** void nRF24_set_RX_PW_P5(uint8_t rx_pw_p5) 
1493:libs/nRF24/nRF24.c **** {
 3927              		.loc 1 1493 0
 3928              		.cfi_startproc
 3929              		@ args = 0, pretend = 0, frame = 8
 3930              		@ frame_needed = 0, uses_anonymous_args = 0
 3931              	.LVL411:
 3932 0000 00B5     		push	{lr}
 3933              	.LCFI147:
 3934              		.cfi_def_cfa_offset 4
 3935              		.cfi_offset 14, -4
 3936 0002 83B0     		sub	sp, sp, #12
 3937              	.LCFI148:
 3938              		.cfi_def_cfa_offset 16
1494:libs/nRF24/nRF24.c ****   uint8_t writing_byte = 0x00;
1495:libs/nRF24/nRF24.c ****   writing_byte |= rx_pw_p5;
 3939              		.loc 1 1495 0
 3940 0004 02AA     		add	r2, sp, #8
 3941 0006 02F8010D 		strb	r0, [r2, #-1]!
1496:libs/nRF24/nRF24.c ****   nRF24_verified_write_register(W_REGISTER_MASK + RX_PW_P5, 1, &writing_byte);
 3942              		.loc 1 1496 0
 3943 000a 0121     		movs	r1, #1
 3944 000c 3620     		movs	r0, #54
 3945              	.LVL412:
 3946 000e FFF7FEFF 		bl	nRF24_verified_write_register
 3947              	.LVL413:
1497:libs/nRF24/nRF24.c **** }
 3948              		.loc 1 1497 0
ARM GAS  /tmp/ccvdf1ti.s 			page 97


 3949 0012 03B0     		add	sp, sp, #12
 3950              	.LCFI149:
 3951              		.cfi_def_cfa_offset 4
 3952              		@ sp needed
 3953 0014 5DF804FB 		ldr	pc, [sp], #4
 3954              		.cfi_endproc
 3955              	.LFE197:
 3957              		.section	.text.nRF24_get_RX_PW_P5,"ax",%progbits
 3958              		.align	1
 3959              		.global	nRF24_get_RX_PW_P5
 3960              		.syntax unified
 3961              		.thumb
 3962              		.thumb_func
 3963              		.fpu fpv4-sp-d16
 3965              	nRF24_get_RX_PW_P5:
 3966              	.LFB198:
1498:libs/nRF24/nRF24.c **** 
1499:libs/nRF24/nRF24.c **** /**
1500:libs/nRF24/nRF24.c ****   * @brief  Read <RX_PW_P5> register from nRF24.
1501:libs/nRF24/nRF24.c ****   * @param  None.
1502:libs/nRF24/nRF24.c ****   * @retval <RX_PW_P5> register value.
1503:libs/nRF24/nRF24.c ****   */
1504:libs/nRF24/nRF24.c **** uint8_t nRF24_get_RX_PW_P5() 
1505:libs/nRF24/nRF24.c **** {
 3967              		.loc 1 1505 0
 3968              		.cfi_startproc
 3969              		@ args = 0, pretend = 0, frame = 8
 3970              		@ frame_needed = 0, uses_anonymous_args = 0
 3971 0000 00B5     		push	{lr}
 3972              	.LCFI150:
 3973              		.cfi_def_cfa_offset 4
 3974              		.cfi_offset 14, -4
 3975 0002 83B0     		sub	sp, sp, #12
 3976              	.LCFI151:
 3977              		.cfi_def_cfa_offset 16
1506:libs/nRF24/nRF24.c ****   uint8_t read_byte;
1507:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + RX_PW_P5, 1, &read_byte);
 3978              		.loc 1 1507 0
 3979 0004 0DF10702 		add	r2, sp, #7
 3980 0008 0121     		movs	r1, #1
 3981 000a 1620     		movs	r0, #22
 3982 000c FFF7FEFF 		bl	spi_read_register
 3983              	.LVL414:
1508:libs/nRF24/nRF24.c ****   return read_byte;
1509:libs/nRF24/nRF24.c **** }
 3984              		.loc 1 1509 0
 3985 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 3986 0014 03B0     		add	sp, sp, #12
 3987              	.LCFI152:
 3988              		.cfi_def_cfa_offset 4
 3989              		@ sp needed
 3990 0016 5DF804FB 		ldr	pc, [sp], #4
 3991              		.cfi_endproc
 3992              	.LFE198:
 3994              		.section	.text.nRF24_get_FIFO_STATUS,"ax",%progbits
 3995              		.align	1
 3996              		.global	nRF24_get_FIFO_STATUS
ARM GAS  /tmp/ccvdf1ti.s 			page 98


 3997              		.syntax unified
 3998              		.thumb
 3999              		.thumb_func
 4000              		.fpu fpv4-sp-d16
 4002              	nRF24_get_FIFO_STATUS:
 4003              	.LFB199:
1510:libs/nRF24/nRF24.c **** 
1511:libs/nRF24/nRF24.c **** 
1512:libs/nRF24/nRF24.c **** /**
1513:libs/nRF24/nRF24.c ****   * @brief  Read 'FIFO_STATUS' register from nRF24.
1514:libs/nRF24/nRF24.c ****   * @param  None.
1515:libs/nRF24/nRF24.c ****   * @retval FIFO_STATUS register value.
1516:libs/nRF24/nRF24.c ****   * @note   Following masks can be used:
1517:libs/nRF24/nRF24.c ****   *  TX_REUSE_READMASK  
1518:libs/nRF24/nRF24.c ****   *  TX_EMPTY_READMASK  
1519:libs/nRF24/nRF24.c ****   *  RX_FULL_READMASK 
1520:libs/nRF24/nRF24.c ****   *  RX_EMPTY_READMASK 
1521:libs/nRF24/nRF24.c ****   */
1522:libs/nRF24/nRF24.c **** uint8_t nRF24_get_FIFO_STATUS() 
1523:libs/nRF24/nRF24.c **** {
 4004              		.loc 1 1523 0
 4005              		.cfi_startproc
 4006              		@ args = 0, pretend = 0, frame = 8
 4007              		@ frame_needed = 0, uses_anonymous_args = 0
 4008 0000 00B5     		push	{lr}
 4009              	.LCFI153:
 4010              		.cfi_def_cfa_offset 4
 4011              		.cfi_offset 14, -4
 4012 0002 83B0     		sub	sp, sp, #12
 4013              	.LCFI154:
 4014              		.cfi_def_cfa_offset 16
1524:libs/nRF24/nRF24.c ****   uint8_t fifo_status;
1525:libs/nRF24/nRF24.c ****   spi_read_register(R_REGISTER_MASK + FIFO_STATUS, 1, &fifo_status);
 4015              		.loc 1 1525 0
 4016 0004 0DF10702 		add	r2, sp, #7
 4017 0008 0121     		movs	r1, #1
 4018 000a 1720     		movs	r0, #23
 4019 000c FFF7FEFF 		bl	spi_read_register
 4020              	.LVL415:
1526:libs/nRF24/nRF24.c ****   return fifo_status;
1527:libs/nRF24/nRF24.c **** }
 4021              		.loc 1 1527 0
 4022 0010 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 4023 0014 03B0     		add	sp, sp, #12
 4024              	.LCFI155:
 4025              		.cfi_def_cfa_offset 4
 4026              		@ sp needed
 4027 0016 5DF804FB 		ldr	pc, [sp], #4
 4028              		.cfi_endproc
 4029              	.LFE199:
 4031              		.section	.text.nRF24_release_payload,"ax",%progbits
 4032              		.align	1
 4033              		.global	nRF24_release_payload
 4034              		.syntax unified
 4035              		.thumb
 4036              		.thumb_func
 4037              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccvdf1ti.s 			page 99


 4039              	nRF24_release_payload:
 4040              	.LFB200:
1528:libs/nRF24/nRF24.c **** 
1529:libs/nRF24/nRF24.c **** /**
1530:libs/nRF24/nRF24.c ****   * @brief Write the payload (data to transfer) to the TX FIFO.
1531:libs/nRF24/nRF24.c ****   * @param tx_payload_width Length of the payload in number of bytes.
1532:libs/nRF24/nRF24.c ****               (!) tx_payload_width MUST be the same value as the receiver's <RX_PW_Px>, x being the
1533:libs/nRF24/nRF24.c ****   * @param payload  Actual data to transfer.
1534:libs/nRF24/nRF24.c ****   * @retval None.
1535:libs/nRF24/nRF24.c ****   */
1536:libs/nRF24/nRF24.c **** void nRF24_release_payload(uint8_t tx_payload_width, uint8_t* payload)
1537:libs/nRF24/nRF24.c **** {
 4041              		.loc 1 1537 0
 4042              		.cfi_startproc
 4043              		@ args = 0, pretend = 0, frame = 0
 4044              		@ frame_needed = 0, uses_anonymous_args = 0
 4045              	.LVL416:
 4046 0000 08B5     		push	{r3, lr}
 4047              	.LCFI156:
 4048              		.cfi_def_cfa_offset 8
 4049              		.cfi_offset 3, -8
 4050              		.cfi_offset 14, -4
1538:libs/nRF24/nRF24.c ****   spi_write_register(W_TX_PAYLOAD, tx_payload_width, payload);
 4051              		.loc 1 1538 0
 4052 0002 0A46     		mov	r2, r1
 4053 0004 0146     		mov	r1, r0
 4054              	.LVL417:
 4055 0006 A020     		movs	r0, #160
 4056              	.LVL418:
 4057 0008 FFF7FEFF 		bl	spi_write_register
 4058              	.LVL419:
 4059 000c 08BD     		pop	{r3, pc}
 4060              		.cfi_endproc
 4061              	.LFE200:
 4063              		.section	.text.nRF24_send_packet,"ax",%progbits
 4064              		.align	1
 4065              		.global	nRF24_send_packet
 4066              		.syntax unified
 4067              		.thumb
 4068              		.thumb_func
 4069              		.fpu fpv4-sp-d16
 4071              	nRF24_send_packet:
 4072              	.LFB148:
 541:libs/nRF24/nRF24.c **** 
 4073              		.loc 1 541 0
 4074              		.cfi_startproc
 4075              		@ args = 0, pretend = 0, frame = 72
 4076              		@ frame_needed = 0, uses_anonymous_args = 0
 4077              	.LVL420:
 4078 0000 30B5     		push	{r4, r5, lr}
 4079              	.LCFI157:
 4080              		.cfi_def_cfa_offset 12
 4081              		.cfi_offset 4, -12
 4082              		.cfi_offset 5, -8
 4083              		.cfi_offset 14, -4
 4084 0002 93B0     		sub	sp, sp, #76
 4085              	.LCFI158:
ARM GAS  /tmp/ccvdf1ti.s 			page 100


 4086              		.cfi_def_cfa_offset 88
 546:libs/nRF24/nRF24.c **** 
 4087              		.loc 1 546 0
 4088 0004 FFF7FEFF 		bl	nRF24_release_payload
 4089              	.LVL421:
 549:libs/nRF24/nRF24.c **** 
 4090              		.loc 1 549 0
 4091 0008 FFF7FEFF 		bl	nRF24_CE_1
 4092              	.LVL422:
 553:libs/nRF24/nRF24.c **** 
 4093              		.loc 1 553 0
 4094 000c 0DF10702 		add	r2, sp, #7
 4095 0010 0121     		movs	r1, #1
 4096 0012 0720     		movs	r0, #7
 4097 0014 FFF7FEFF 		bl	spi_read_register
 4098              	.LVL423:
 557:libs/nRF24/nRF24.c ****   serial_print(message);
 4099              		.loc 1 557 0
 4100 0018 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 4101 001c 2149     		ldr	r1, .L217
 4102 001e 02A8     		add	r0, sp, #8
 4103 0020 FFF7FEFF 		bl	sprintf
 4104              	.LVL424:
 4105              	.LBB185:
 4106              	.LBB186:
 130:libs/nRF24/nRF24.c **** }
 4107              		.loc 1 130 0
 4108 0024 02A8     		add	r0, sp, #8
 4109              	.LVL425:
 4110 0026 FFF7FEFF 		bl	strlen
 4111              	.LVL426:
 4112 002a 6423     		movs	r3, #100
 4113 002c 82B2     		uxth	r2, r0
 4114 002e 02A9     		add	r1, sp, #8
 4115              	.LVL427:
 4116 0030 1D48     		ldr	r0, .L217+4
 4117 0032 FFF7FEFF 		bl	HAL_UART_Transmit
 4118              	.LVL428:
 4119              	.LBE186:
 4120              	.LBE185:
 562:libs/nRF24/nRF24.c ****   {
 4121              		.loc 1 562 0
 4122 0036 9DF80730 		ldrb	r3, [sp, #7]	@ zero_extendqisi2
 4123 003a 2E2B     		cmp	r3, #46
 4124 003c 1CD0     		beq	.L216
 572:libs/nRF24/nRF24.c ****     serial_print(message);
 4125              		.loc 1 572 0
 4126 003e 02AC     		add	r4, sp, #8
 4127 0040 1A4D     		ldr	r5, .L217+8
 4128 0042 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 4129 0044 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 4130 0046 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 4131 004a 07C4     		stmia	r4!, {r0, r1, r2}
 4132 004c 24F8023B 		strh	r3, [r4], #2	@ movhi
 4133 0050 1B0C     		lsrs	r3, r3, #16
 4134 0052 2370     		strb	r3, [r4]
 4135              	.LVL429:
ARM GAS  /tmp/ccvdf1ti.s 			page 101


 4136              	.LBB187:
 4137              	.LBB188:
 130:libs/nRF24/nRF24.c **** }
 4138              		.loc 1 130 0
 4139 0054 02A8     		add	r0, sp, #8
 4140              	.LVL430:
 4141 0056 FFF7FEFF 		bl	strlen
 4142              	.LVL431:
 4143 005a 6423     		movs	r3, #100
 4144 005c 82B2     		uxth	r2, r0
 4145 005e 02A9     		add	r1, sp, #8
 4146              	.LVL432:
 4147 0060 1148     		ldr	r0, .L217+4
 4148 0062 FFF7FEFF 		bl	HAL_UART_Transmit
 4149              	.LVL433:
 4150              	.L214:
 4151              	.LBE188:
 4152              	.LBE187:
 578:libs/nRF24/nRF24.c **** 
 4153              		.loc 1 578 0
 4154 0066 1022     		movs	r2, #16
 4155 0068 2021     		movs	r1, #32
 4156 006a 4020     		movs	r0, #64
 4157 006c FFF7FEFF 		bl	nRF24_clear_STATUS
 4158              	.LVL434:
 581:libs/nRF24/nRF24.c **** }
 4159              		.loc 1 581 0
 4160 0070 FFF7FEFF 		bl	nRF24_CE_0
 4161              	.LVL435:
 582:libs/nRF24/nRF24.c **** 
 4162              		.loc 1 582 0
 4163 0074 13B0     		add	sp, sp, #76
 4164              	.LCFI159:
 4165              		.cfi_remember_state
 4166              		.cfi_def_cfa_offset 12
 4167              		@ sp needed
 4168 0076 30BD     		pop	{r4, r5, pc}
 4169              	.L216:
 4170              	.LCFI160:
 4171              		.cfi_restore_state
 565:libs/nRF24/nRF24.c ****     serial_print(message);
 4172              		.loc 1 565 0
 4173 0078 02AC     		add	r4, sp, #8
 4174 007a 0D4D     		ldr	r5, .L217+12
 4175 007c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 4176 007e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 4177 0080 95E80F00 		ldm	r5, {r0, r1, r2, r3}
 4178 0084 07C4     		stmia	r4!, {r0, r1, r2}
 4179 0086 24F8023B 		strh	r3, [r4], #2	@ movhi
 4180 008a 1B0C     		lsrs	r3, r3, #16
 4181 008c 2370     		strb	r3, [r4]
 4182              	.LVL436:
 4183              	.LBB189:
 4184              	.LBB190:
 130:libs/nRF24/nRF24.c **** }
 4185              		.loc 1 130 0
 4186 008e 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccvdf1ti.s 			page 102


 4187              	.LVL437:
 4188 0090 FFF7FEFF 		bl	strlen
 4189              	.LVL438:
 4190 0094 6423     		movs	r3, #100
 4191 0096 82B2     		uxth	r2, r0
 4192 0098 02A9     		add	r1, sp, #8
 4193              	.LVL439:
 4194 009a 0348     		ldr	r0, .L217+4
 4195 009c FFF7FEFF 		bl	HAL_UART_Transmit
 4196              	.LVL440:
 4197 00a0 E1E7     		b	.L214
 4198              	.L218:
 4199 00a2 00BF     		.align	2
 4200              	.L217:
 4201 00a4 B4010000 		.word	.LC27
 4202 00a8 00000000 		.word	huart2
 4203 00ac F0010000 		.word	.LC29
 4204 00b0 D0010000 		.word	.LC28
 4205              	.LBE190:
 4206              	.LBE189:
 4207              		.cfi_endproc
 4208              	.LFE148:
 4210              		.section	.rodata
 4211              		.align	2
 4212              		.set	.LANCHOR0,. + 0
 4213              	.LC0:
 4214 0000 C0       		.byte	-64
 4215 0001 C0       		.byte	-64
 4216 0002 CA       		.byte	-54
 4217 0003 FE       		.byte	-2
 4218              	.LC1:
 4219 0004 99       		.byte	-103
 4220 0005 AA       		.byte	-86
 4221 0006 BB       		.byte	-69
 4222 0007 CC       		.byte	-52
 4223 0008 DD       		.byte	-35
 4224              		.section	.rodata.nRF24_print_all_registers.str1.4,"aMS",%progbits,1
 4225              		.align	2
 4226              	.LC8:
 4227 0000 434F4E46 		.ascii	"CONFIG: <0x%02x>\012\000"
 4227      49473A20 
 4227      3C307825 
 4227      3032783E 
 4227      0A00
 4228 0012 0000     		.space	2
 4229              	.LC9:
 4230 0014 454E5F41 		.ascii	"EN_AA: <0x%02x>\012\000"
 4230      413A203C 
 4230      30782530 
 4230      32783E0A 
 4230      00
 4231 0025 000000   		.space	3
 4232              	.LC10:
 4233 0028 454E5F52 		.ascii	"EN_RXADDR: <0x%02x>\012\000"
 4233      58414444 
 4233      523A203C 
 4233      30782530 
ARM GAS  /tmp/ccvdf1ti.s 			page 103


 4233      32783E0A 
 4234 003d 000000   		.space	3
 4235              	.LC11:
 4236 0040 53455455 		.ascii	"SETUP_AW: <0x%02x>\012\000"
 4236      505F4157 
 4236      3A203C30 
 4236      78253032 
 4236      783E0A00 
 4237              	.LC12:
 4238 0054 53455455 		.ascii	"SETUP_RETR: <0x%02x>\012\000"
 4238      505F5245 
 4238      54523A20 
 4238      3C307825 
 4238      3032783E 
 4239 006a 0000     		.space	2
 4240              	.LC13:
 4241 006c 52465F43 		.ascii	"RF_CH: <0x%02x>\012\000"
 4241      483A203C 
 4241      30782530 
 4241      32783E0A 
 4241      00
 4242 007d 000000   		.space	3
 4243              	.LC14:
 4244 0080 52465F53 		.ascii	"RF_SETUP: <0x%02x>\012\000"
 4244      45545550 
 4244      3A203C30 
 4244      78253032 
 4244      783E0A00 
 4245              	.LC15:
 4246 0094 53544154 		.ascii	"STATUS: <0x%02x>\012\000"
 4246      55533A20 
 4246      3C307825 
 4246      3032783E 
 4246      0A00
 4247 00a6 0000     		.space	2
 4248              	.LC16:
 4249 00a8 52585F41 		.ascii	"RX_ADDR_P0: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4249      4444525F 
 4249      50303A20 
 4249      3C252330 
 4249      32782025 
 4250 00d5 000000   		.space	3
 4251              	.LC17:
 4252 00d8 52585F41 		.ascii	"RX_ADDR_P1: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4252      4444525F 
 4252      50313A20 
 4252      3C252330 
 4252      32782025 
 4253 0105 000000   		.space	3
 4254              	.LC18:
 4255 0108 52585F41 		.ascii	"RX_ADDR_P2: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4255      4444525F 
 4255      50323A20 
 4255      3C252330 
 4255      32782025 
 4256 0135 000000   		.space	3
 4257              	.LC19:
ARM GAS  /tmp/ccvdf1ti.s 			page 104


 4258 0138 52585F41 		.ascii	"RX_ADDR_P3: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4258      4444525F 
 4258      50333A20 
 4258      3C252330 
 4258      32782025 
 4259 0165 000000   		.space	3
 4260              	.LC20:
 4261 0168 52585F41 		.ascii	"RX_ADDR_P4: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4261      4444525F 
 4261      50343A20 
 4261      3C252330 
 4261      32782025 
 4262 0195 000000   		.space	3
 4263              	.LC21:
 4264 0198 52585F41 		.ascii	"RX_ADDR_P5: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4264      4444525F 
 4264      50353A20 
 4264      3C252330 
 4264      32782025 
 4265 01c5 000000   		.space	3
 4266              	.LC22:
 4267 01c8 54585F41 		.ascii	"TX_ADDR: <%#02x %#02x %#02x %#02x %#02x>\012\000"
 4267      4444523A 
 4267      203C2523 
 4267      30327820 
 4267      25233032 
 4268              		.section	.rodata.nRF24_receive_packet.str1.4,"aMS",%progbits,1
 4269              		.align	2
 4270              	.LC30:
 4271 0000 3E204461 		.ascii	"> Data received: \000"
 4271      74612072 
 4271      65636569 
 4271      7665643A 
 4271      2000
 4272 0012 0000     		.space	2
 4273              	.LC31:
 4274 0014 4E6F2064 		.ascii	"No data has been received.\012\000"
 4274      61746120 
 4274      68617320 
 4274      6265656E 
 4274      20726563 
 4275              		.section	.rodata.nRF24_tx_self_test.str1.4,"aMS",%progbits,1
 4276              		.align	2
 4277              	.LC23:
 4278 0000 2D2D2D2D 		.ascii	"---- nrf24 tx self test. ----\012\000"
 4278      206E7266 
 4278      32342074 
 4278      78207365 
 4278      6C662074 
 4279 001f 00       		.space	1
 4280              	.LC24:
 4281 0020 2D2D2D2D 		.ascii	"---- This test to verifies function of a tranmitter"
 4281      20546869 
 4281      73207465 
 4281      73742074 
 4281      6F207665 
 4282 0053 2073656E 		.ascii	" send without a receiver. ----\012\000"
ARM GAS  /tmp/ccvdf1ti.s 			page 105


 4282      64207769 
 4282      74686F75 
 4282      74206120 
 4282      72656365 
 4283 0073 00       		.space	1
 4284              	.LC25:
 4285 0074 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has passed.    "
 4285      6E524632 
 4285      34207472 
 4285      616E736D 
 4285      69737369 
 4286 00a4 20202020 		.ascii	"                    <STATUS> has value of 0x2E.    "
 4286      20202020 
 4286      20202020 
 4286      20202020 
 4286      20202020 
 4287 00d7 20202020 		.ascii	"                    TX_DS (transfer data sent) was "
 4287      20202020 
 4287      20202020 
 4287      20202020 
 4287      20202020 
 4288 010a 7365742E 		.ascii	"set.                        RX_P_NO = 111, this mea"
 4288      20202020 
 4288      20202020 
 4288      20202020 
 4288      20202020 
 4289 013d 6E732052 		.ascii	"ns RX FIFO Empty. \012\000"
 4289      58204649 
 4289      464F2045 
 4289      6D707479 
 4289      2E200A00 
 4290 0151 000000   		.space	3
 4291              	.LC26:
 4292 0154 0A203E20 		.ascii	"\012 > nRF24 transmission self-test has failed. <ST"
 4292      6E524632 
 4292      34207472 
 4292      616E736D 
 4292      69737369 
 4293 0184 41545553 		.ascii	"ATUS> is expected 0x2E. Current value: %#02x\012\000"
 4293      3E206973 
 4293      20657870 
 4293      65637465 
 4293      64203078 
 4294 01b2 0000     		.space	2
 4295              	.LC27:
 4296 01b4 3C535441 		.ascii	"<STATUS> REGISTER : %#02x\012\000"
 4296      5455533E 
 4296      20524547 
 4296      49535445 
 4296      52203A20 
 4297 01cf 00       		.space	1
 4298              	.LC28:
 4299 01d0 6E524632 		.ascii	"nRF24 send status - success -\012\000"
 4299      34207365 
 4299      6E642073 
 4299      74617475 
 4299      73202D20 
ARM GAS  /tmp/ccvdf1ti.s 			page 106


 4300 01ef 00       		.space	1
 4301              	.LC29:
 4302 01f0 6E524632 		.ascii	"nRF24 send status - failure -\012\000"
 4302      34207365 
 4302      6E642073 
 4302      74617475 
 4302      73202D20 
 4303              		.section	.rodata.nRF24_verified_write_register.str1.4,"aMS",%progbits,1
 4304              		.align	2
 4305              	.LC2:
 4306 0000 50726F62 		.ascii	"Problem writing to nRF24 register -- \000"
 4306      6C656D20 
 4306      77726974 
 4306      696E6720 
 4306      746F206E 
 4307 0026 0000     		.space	2
 4308              	.LC3:
 4309 0028 77726974 		.ascii	"writing data: <%#02x> read_data: <%#02x>\012\000"
 4309      696E6720 
 4309      64617461 
 4309      3A203C25 
 4309      23303278 
 4310 0052 0000     		.space	2
 4311              	.LC4:
 4312 0054 53756363 		.ascii	"Success writing to nRF24 register -- \000"
 4312      65737320 
 4312      77726974 
 4312      696E6720 
 4312      746F206E 
 4313              		.section	.rodata.print_bytearray.str1.4,"aMS",%progbits,1
 4314              		.align	2
 4315              	.LC5:
 4316 0000 25233032 		.ascii	"%#02x\000"
 4316      7800
 4317 0006 0000     		.space	2
 4318              	.LC6:
 4319 0008 2D00     		.ascii	"-\000"
 4320 000a 0000     		.space	2
 4321              	.LC7:
 4322 000c 0A00     		.ascii	"\012\000"
 4323              		.text
 4324              	.Letext0:
 4325              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 4326              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 4327              		.file 4 "Drivers/CMSIS/Include/core_cm4.h"
 4328              		.file 5 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/system_stm32f4xx.h"
 4329              		.file 6 "Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xe.h"
 4330              		.file 7 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_def.h"
 4331              		.file 8 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_gpio.h"
 4332              		.file 9 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_dma.h"
 4333              		.file 10 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_uart.h"
 4334              		.file 11 "Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal.h"
 4335              		.file 12 "/usr/include/newlib/sys/lock.h"
 4336              		.file 13 "/usr/include/newlib/sys/_types.h"
 4337              		.file 14 "/usr/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 4338              		.file 15 "/usr/include/newlib/sys/reent.h"
 4339              		.file 16 "libs/nRF24/nRF24.h"
ARM GAS  /tmp/ccvdf1ti.s 			page 107


 4340              		.file 17 "/usr/include/newlib/string.h"
 4341              		.file 18 "/usr/include/newlib/stdio.h"
ARM GAS  /tmp/ccvdf1ti.s 			page 108


DEFINED SYMBOLS
                            *ABS*:0000000000000000 nRF24.c
     /tmp/ccvdf1ti.s:18     .text.SPI_SCK_1:0000000000000000 $t
     /tmp/ccvdf1ti.s:25     .text.SPI_SCK_1:0000000000000000 SPI_SCK_1
     /tmp/ccvdf1ti.s:47     .text.SPI_SCK_1:0000000000000010 $d
     /tmp/ccvdf1ti.s:52     .text.SPI_SCK_0:0000000000000000 $t
     /tmp/ccvdf1ti.s:59     .text.SPI_SCK_0:0000000000000000 SPI_SCK_0
     /tmp/ccvdf1ti.s:80     .text.SPI_SCK_0:0000000000000010 $d
     /tmp/ccvdf1ti.s:85     .text.SPI_MOSI_1:0000000000000000 $t
     /tmp/ccvdf1ti.s:92     .text.SPI_MOSI_1:0000000000000000 SPI_MOSI_1
     /tmp/ccvdf1ti.s:113    .text.SPI_MOSI_1:0000000000000010 $d
     /tmp/ccvdf1ti.s:118    .text.SPI_MOSI_0:0000000000000000 $t
     /tmp/ccvdf1ti.s:125    .text.SPI_MOSI_0:0000000000000000 SPI_MOSI_0
     /tmp/ccvdf1ti.s:146    .text.SPI_MOSI_0:0000000000000010 $d
     /tmp/ccvdf1ti.s:151    .text.SPI_CS_1:0000000000000000 $t
     /tmp/ccvdf1ti.s:158    .text.SPI_CS_1:0000000000000000 SPI_CS_1
     /tmp/ccvdf1ti.s:179    .text.SPI_CS_1:0000000000000010 $d
     /tmp/ccvdf1ti.s:184    .text.SPI_CS_0:0000000000000000 $t
     /tmp/ccvdf1ti.s:191    .text.SPI_CS_0:0000000000000000 SPI_CS_0
     /tmp/ccvdf1ti.s:212    .text.SPI_CS_0:0000000000000010 $d
     /tmp/ccvdf1ti.s:217    .text.SPI_READ_MISO:0000000000000000 $t
     /tmp/ccvdf1ti.s:224    .text.SPI_READ_MISO:0000000000000000 SPI_READ_MISO
     /tmp/ccvdf1ti.s:245    .text.SPI_READ_MISO:0000000000000010 $d
     /tmp/ccvdf1ti.s:250    .text.serial_print:0000000000000000 $t
     /tmp/ccvdf1ti.s:257    .text.serial_print:0000000000000000 serial_print
     /tmp/ccvdf1ti.s:284    .text.serial_print:0000000000000018 $d
     /tmp/ccvdf1ti.s:289    .text.SPI_DELAY:0000000000000000 $t
     /tmp/ccvdf1ti.s:296    .text.SPI_DELAY:0000000000000000 SPI_DELAY
     /tmp/ccvdf1ti.s:316    .text.gpio_clockout_8_bits:0000000000000000 $t
     /tmp/ccvdf1ti.s:323    .text.gpio_clockout_8_bits:0000000000000000 gpio_clockout_8_bits
     /tmp/ccvdf1ti.s:428    .text.gpio_clockout_8_bits:0000000000000068 $d
     /tmp/ccvdf1ti.s:436    .text.gpio_clockin_8_bits:0000000000000000 $t
     /tmp/ccvdf1ti.s:443    .text.gpio_clockin_8_bits:0000000000000000 gpio_clockin_8_bits
     /tmp/ccvdf1ti.s:545    .text.gpio_clockin_8_bits:000000000000005c $d
     /tmp/ccvdf1ti.s:550    .text.spi_read_register:0000000000000000 $t
     /tmp/ccvdf1ti.s:557    .text.spi_read_register:0000000000000000 spi_read_register
     /tmp/ccvdf1ti.s:622    .text.spi_read_register:0000000000000034 $d
     /tmp/ccvdf1ti.s:629    .text.spi_write_register:0000000000000000 $t
     /tmp/ccvdf1ti.s:636    .text.spi_write_register:0000000000000000 spi_write_register
     /tmp/ccvdf1ti.s:703    .text.spi_write_register:0000000000000034 $d
     /tmp/ccvdf1ti.s:710    .text.nRF24_CE_1:0000000000000000 $t
     /tmp/ccvdf1ti.s:717    .text.nRF24_CE_1:0000000000000000 nRF24_CE_1
     /tmp/ccvdf1ti.s:738    .text.nRF24_CE_1:0000000000000010 $d
     /tmp/ccvdf1ti.s:743    .text.nRF24_CE_0:0000000000000000 $t
     /tmp/ccvdf1ti.s:750    .text.nRF24_CE_0:0000000000000000 nRF24_CE_0
     /tmp/ccvdf1ti.s:771    .text.nRF24_CE_0:0000000000000010 $d
     /tmp/ccvdf1ti.s:776    .text.nRF24_verified_write_register:0000000000000000 $t
     /tmp/ccvdf1ti.s:783    .text.nRF24_verified_write_register:0000000000000000 nRF24_verified_write_register
     /tmp/ccvdf1ti.s:972    .text.nRF24_verified_write_register:00000000000000f4 $d
     /tmp/ccvdf1ti.s:980    .text.print_bytearray:0000000000000000 $t
     /tmp/ccvdf1ti.s:987    .text.print_bytearray:0000000000000000 print_bytearray
     /tmp/ccvdf1ti.s:1077   .text.print_bytearray:0000000000000054 $d
     /tmp/ccvdf1ti.s:1085   .text.nRF24_print_all_registers:0000000000000000 $t
     /tmp/ccvdf1ti.s:1092   .text.nRF24_print_all_registers:0000000000000000 nRF24_print_all_registers
     /tmp/ccvdf1ti.s:1586   .text.nRF24_print_all_registers:000000000000030c $d
     /tmp/ccvdf1ti.s:1606   .text.nRF24_set_CONFIG:0000000000000000 $t
     /tmp/ccvdf1ti.s:1613   .text.nRF24_set_CONFIG:0000000000000000 nRF24_set_CONFIG
ARM GAS  /tmp/ccvdf1ti.s 			page 109


     /tmp/ccvdf1ti.s:1658   .text.nRF24_get_CONFIG:0000000000000000 $t
     /tmp/ccvdf1ti.s:1665   .text.nRF24_get_CONFIG:0000000000000000 nRF24_get_CONFIG
     /tmp/ccvdf1ti.s:1695   .text.nRF24_set_EN_AA:0000000000000000 $t
     /tmp/ccvdf1ti.s:1702   .text.nRF24_set_EN_AA:0000000000000000 nRF24_set_EN_AA
     /tmp/ccvdf1ti.s:1744   .text.nRF24_get_EN_AA:0000000000000000 $t
     /tmp/ccvdf1ti.s:1751   .text.nRF24_get_EN_AA:0000000000000000 nRF24_get_EN_AA
     /tmp/ccvdf1ti.s:1781   .text.nRF24_set_EN_RXADDR:0000000000000000 $t
     /tmp/ccvdf1ti.s:1788   .text.nRF24_set_EN_RXADDR:0000000000000000 nRF24_set_EN_RXADDR
     /tmp/ccvdf1ti.s:1830   .text.nRF24_get_EN_RXADDR:0000000000000000 $t
     /tmp/ccvdf1ti.s:1837   .text.nRF24_get_EN_RXADDR:0000000000000000 nRF24_get_EN_RXADDR
     /tmp/ccvdf1ti.s:1867   .text.nRF24_set_SETUP_AW:0000000000000000 $t
     /tmp/ccvdf1ti.s:1874   .text.nRF24_set_SETUP_AW:0000000000000000 nRF24_set_SETUP_AW
     /tmp/ccvdf1ti.s:1907   .text.nRF24_get_SETUP_AW:0000000000000000 $t
     /tmp/ccvdf1ti.s:1914   .text.nRF24_get_SETUP_AW:0000000000000000 nRF24_get_SETUP_AW
     /tmp/ccvdf1ti.s:1944   .text.nRF24_set_SETUP_RETR:0000000000000000 $t
     /tmp/ccvdf1ti.s:1951   .text.nRF24_set_SETUP_RETR:0000000000000000 nRF24_set_SETUP_RETR
     /tmp/ccvdf1ti.s:1986   .text.nRF24_get_SETUP_RETR:0000000000000000 $t
     /tmp/ccvdf1ti.s:1993   .text.nRF24_get_SETUP_RETR:0000000000000000 nRF24_get_SETUP_RETR
     /tmp/ccvdf1ti.s:2026   .text.nRF24_set_RF_CH:0000000000000000 $t
     /tmp/ccvdf1ti.s:2033   .text.nRF24_set_RF_CH:0000000000000000 nRF24_set_RF_CH
     /tmp/ccvdf1ti.s:2066   .text.nRF24_get_RF_CH:0000000000000000 $t
     /tmp/ccvdf1ti.s:2073   .text.nRF24_get_RF_CH:0000000000000000 nRF24_get_RF_CH
     /tmp/ccvdf1ti.s:2103   .text.nRF24_set_RF_SETUP:0000000000000000 $t
     /tmp/ccvdf1ti.s:2110   .text.nRF24_set_RF_SETUP:0000000000000000 nRF24_set_RF_SETUP
     /tmp/ccvdf1ti.s:2151   .text.nRF24_get_RF_SETUP:0000000000000000 $t
     /tmp/ccvdf1ti.s:2158   .text.nRF24_get_RF_SETUP:0000000000000000 nRF24_get_RF_SETUP
     /tmp/ccvdf1ti.s:2188   .text.nRF24_clear_STATUS:0000000000000000 $t
     /tmp/ccvdf1ti.s:2195   .text.nRF24_clear_STATUS:0000000000000000 nRF24_clear_STATUS
     /tmp/ccvdf1ti.s:2232   .text.nRF24_tx_self_test:0000000000000000 $t
     /tmp/ccvdf1ti.s:2239   .text.nRF24_tx_self_test:0000000000000000 nRF24_tx_self_test
     /tmp/ccvdf1ti.s:2478   .text.nRF24_tx_self_test:0000000000000170 $d
     /tmp/ccvdf1ti.s:2494   .text.nRF24_get_STATUS:0000000000000000 $t
     /tmp/ccvdf1ti.s:2501   .text.nRF24_get_STATUS:0000000000000000 nRF24_get_STATUS
     /tmp/ccvdf1ti.s:2531   .text.nRF24_receive_packet:0000000000000000 $t
     /tmp/ccvdf1ti.s:2538   .text.nRF24_receive_packet:0000000000000000 nRF24_receive_packet
     /tmp/ccvdf1ti.s:2649   .text.nRF24_receive_packet:0000000000000078 $d
     /tmp/ccvdf1ti.s:2656   .text.nRF24_get_OBSERVE_TX:0000000000000000 $t
     /tmp/ccvdf1ti.s:2663   .text.nRF24_get_OBSERVE_TX:0000000000000000 nRF24_get_OBSERVE_TX
     /tmp/ccvdf1ti.s:2693   .text.nRF24_get_RPD:0000000000000000 $t
     /tmp/ccvdf1ti.s:2700   .text.nRF24_get_RPD:0000000000000000 nRF24_get_RPD
     /tmp/ccvdf1ti.s:2730   .text.nRF24_set_RX_ADDR_P0:0000000000000000 $t
     /tmp/ccvdf1ti.s:2737   .text.nRF24_set_RX_ADDR_P0:0000000000000000 nRF24_set_RX_ADDR_P0
     /tmp/ccvdf1ti.s:2762   .text.nRF24_get_RX_ADDR_P0:0000000000000000 $t
     /tmp/ccvdf1ti.s:2769   .text.nRF24_get_RX_ADDR_P0:0000000000000000 nRF24_get_RX_ADDR_P0
     /tmp/ccvdf1ti.s:2794   .text.nRF24_set_RX_ADDR_P1:0000000000000000 $t
     /tmp/ccvdf1ti.s:2801   .text.nRF24_set_RX_ADDR_P1:0000000000000000 nRF24_set_RX_ADDR_P1
     /tmp/ccvdf1ti.s:2826   .text.nRF24_get_RX_ADDR_P1:0000000000000000 $t
     /tmp/ccvdf1ti.s:2833   .text.nRF24_get_RX_ADDR_P1:0000000000000000 nRF24_get_RX_ADDR_P1
     /tmp/ccvdf1ti.s:2858   .text.nRF24_set_RX_ADDR_P2:0000000000000000 $t
     /tmp/ccvdf1ti.s:2865   .text.nRF24_set_RX_ADDR_P2:0000000000000000 nRF24_set_RX_ADDR_P2
     /tmp/ccvdf1ti.s:2898   .text.nRF24_get_RX_ADDR_P2:0000000000000000 $t
     /tmp/ccvdf1ti.s:2905   .text.nRF24_get_RX_ADDR_P2:0000000000000000 nRF24_get_RX_ADDR_P2
     /tmp/ccvdf1ti.s:2930   .text.nRF24_set_RX_ADDR_P3:0000000000000000 $t
     /tmp/ccvdf1ti.s:2937   .text.nRF24_set_RX_ADDR_P3:0000000000000000 nRF24_set_RX_ADDR_P3
     /tmp/ccvdf1ti.s:2970   .text.nRF24_get_RX_ADDR_P3:0000000000000000 $t
     /tmp/ccvdf1ti.s:2977   .text.nRF24_get_RX_ADDR_P3:0000000000000000 nRF24_get_RX_ADDR_P3
     /tmp/ccvdf1ti.s:3002   .text.nRF24_set_RX_ADDR_P4:0000000000000000 $t
ARM GAS  /tmp/ccvdf1ti.s 			page 110


     /tmp/ccvdf1ti.s:3009   .text.nRF24_set_RX_ADDR_P4:0000000000000000 nRF24_set_RX_ADDR_P4
     /tmp/ccvdf1ti.s:3042   .text.nRF24_get_RX_ADDR_P4:0000000000000000 $t
     /tmp/ccvdf1ti.s:3049   .text.nRF24_get_RX_ADDR_P4:0000000000000000 nRF24_get_RX_ADDR_P4
     /tmp/ccvdf1ti.s:3074   .text.nRF24_set_RX_ADDR_P5:0000000000000000 $t
     /tmp/ccvdf1ti.s:3081   .text.nRF24_set_RX_ADDR_P5:0000000000000000 nRF24_set_RX_ADDR_P5
     /tmp/ccvdf1ti.s:3114   .text.nRF24_get_RX_ADDR_P5:0000000000000000 $t
     /tmp/ccvdf1ti.s:3121   .text.nRF24_get_RX_ADDR_P5:0000000000000000 nRF24_get_RX_ADDR_P5
     /tmp/ccvdf1ti.s:3146   .text.nRF24_set_TX_ADDR:0000000000000000 $t
     /tmp/ccvdf1ti.s:3153   .text.nRF24_set_TX_ADDR:0000000000000000 nRF24_set_TX_ADDR
     /tmp/ccvdf1ti.s:3178   .text.nRF24_config_normal_tx_mode:0000000000000000 $t
     /tmp/ccvdf1ti.s:3185   .text.nRF24_config_normal_tx_mode:0000000000000000 nRF24_config_normal_tx_mode
     /tmp/ccvdf1ti.s:3274   .text.nRF24_config_normal_tx_mode:000000000000007c $d
     /tmp/ccvdf1ti.s:3279   .text.nRF24_config_enhanced_shockburst_tx_mode:0000000000000000 $t
     /tmp/ccvdf1ti.s:3286   .text.nRF24_config_enhanced_shockburst_tx_mode:0000000000000000 nRF24_config_enhanced_shockburst_tx_mode
     /tmp/ccvdf1ti.s:3386   .text.nRF24_config_enhanced_shockburst_tx_mode:000000000000008c $d
     /tmp/ccvdf1ti.s:3391   .text.nRF24_get_TX_ADDR:0000000000000000 $t
     /tmp/ccvdf1ti.s:3398   .text.nRF24_get_TX_ADDR:0000000000000000 nRF24_get_TX_ADDR
     /tmp/ccvdf1ti.s:3423   .text.nRF24_set_RX_PW_P0:0000000000000000 $t
     /tmp/ccvdf1ti.s:3430   .text.nRF24_set_RX_PW_P0:0000000000000000 nRF24_set_RX_PW_P0
     /tmp/ccvdf1ti.s:3463   .text.nRF24_config_normal_rx_mode:0000000000000000 $t
     /tmp/ccvdf1ti.s:3470   .text.nRF24_config_normal_rx_mode:0000000000000000 nRF24_config_normal_rx_mode
     /tmp/ccvdf1ti.s:3568   .text.nRF24_config_normal_rx_mode:0000000000000088 $d
     /tmp/ccvdf1ti.s:3573   .text.nRF24_get_RX_PW_P0:0000000000000000 $t
     /tmp/ccvdf1ti.s:3580   .text.nRF24_get_RX_PW_P0:0000000000000000 nRF24_get_RX_PW_P0
     /tmp/ccvdf1ti.s:3610   .text.nRF24_set_RX_PW_P1:0000000000000000 $t
     /tmp/ccvdf1ti.s:3617   .text.nRF24_set_RX_PW_P1:0000000000000000 nRF24_set_RX_PW_P1
     /tmp/ccvdf1ti.s:3650   .text.nRF24_get_RX_PW_P1:0000000000000000 $t
     /tmp/ccvdf1ti.s:3657   .text.nRF24_get_RX_PW_P1:0000000000000000 nRF24_get_RX_PW_P1
     /tmp/ccvdf1ti.s:3687   .text.nRF24_set_RX_PW_P2:0000000000000000 $t
     /tmp/ccvdf1ti.s:3694   .text.nRF24_set_RX_PW_P2:0000000000000000 nRF24_set_RX_PW_P2
     /tmp/ccvdf1ti.s:3727   .text.nRF24_get_RX_PW_P2:0000000000000000 $t
     /tmp/ccvdf1ti.s:3734   .text.nRF24_get_RX_PW_P2:0000000000000000 nRF24_get_RX_PW_P2
     /tmp/ccvdf1ti.s:3764   .text.nRF24_set_RX_PW_P3:0000000000000000 $t
     /tmp/ccvdf1ti.s:3771   .text.nRF24_set_RX_PW_P3:0000000000000000 nRF24_set_RX_PW_P3
     /tmp/ccvdf1ti.s:3804   .text.nRF24_get_RX_PW_P3:0000000000000000 $t
     /tmp/ccvdf1ti.s:3811   .text.nRF24_get_RX_PW_P3:0000000000000000 nRF24_get_RX_PW_P3
     /tmp/ccvdf1ti.s:3841   .text.nRF24_set_RX_PW_P4:0000000000000000 $t
     /tmp/ccvdf1ti.s:3848   .text.nRF24_set_RX_PW_P4:0000000000000000 nRF24_set_RX_PW_P4
     /tmp/ccvdf1ti.s:3881   .text.nRF24_get_RX_PW_P4:0000000000000000 $t
     /tmp/ccvdf1ti.s:3888   .text.nRF24_get_RX_PW_P4:0000000000000000 nRF24_get_RX_PW_P4
     /tmp/ccvdf1ti.s:3918   .text.nRF24_set_RX_PW_P5:0000000000000000 $t
     /tmp/ccvdf1ti.s:3925   .text.nRF24_set_RX_PW_P5:0000000000000000 nRF24_set_RX_PW_P5
     /tmp/ccvdf1ti.s:3958   .text.nRF24_get_RX_PW_P5:0000000000000000 $t
     /tmp/ccvdf1ti.s:3965   .text.nRF24_get_RX_PW_P5:0000000000000000 nRF24_get_RX_PW_P5
     /tmp/ccvdf1ti.s:3995   .text.nRF24_get_FIFO_STATUS:0000000000000000 $t
     /tmp/ccvdf1ti.s:4002   .text.nRF24_get_FIFO_STATUS:0000000000000000 nRF24_get_FIFO_STATUS
     /tmp/ccvdf1ti.s:4032   .text.nRF24_release_payload:0000000000000000 $t
     /tmp/ccvdf1ti.s:4039   .text.nRF24_release_payload:0000000000000000 nRF24_release_payload
     /tmp/ccvdf1ti.s:4064   .text.nRF24_send_packet:0000000000000000 $t
     /tmp/ccvdf1ti.s:4071   .text.nRF24_send_packet:0000000000000000 nRF24_send_packet
     /tmp/ccvdf1ti.s:4201   .text.nRF24_send_packet:00000000000000a4 $d
     /tmp/ccvdf1ti.s:4211   .rodata:0000000000000000 $d
     /tmp/ccvdf1ti.s:4225   .rodata.nRF24_print_all_registers.str1.4:0000000000000000 $d
     /tmp/ccvdf1ti.s:4269   .rodata.nRF24_receive_packet.str1.4:0000000000000000 $d
     /tmp/ccvdf1ti.s:4276   .rodata.nRF24_tx_self_test.str1.4:0000000000000000 $d
     /tmp/ccvdf1ti.s:4304   .rodata.nRF24_verified_write_register.str1.4:0000000000000000 $d
     /tmp/ccvdf1ti.s:4314   .rodata.print_bytearray.str1.4:0000000000000000 $d
ARM GAS  /tmp/ccvdf1ti.s 			page 111


                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
HAL_GPIO_WritePin
HAL_GPIO_ReadPin
strlen
HAL_UART_Transmit
huart2
HAL_Delay
sprintf
memcpy
